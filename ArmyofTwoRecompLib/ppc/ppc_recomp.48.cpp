#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_8246E850"))) PPC_WEAK_FUNC(sub_8246E850);
PPC_FUNC_IMPL(__imp__sub_8246E850) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246E858;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82b076f0
	ctx.lr = 0x8246E864;
	sub_82B076F0(ctx, base);
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplw cr6,r3,r11
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246e8d0
	if (!ctx.cr6.eq) goto loc_8246E8D0;
	// addi r11,r31,32
	ctx.r11.s64 = ctx.r31.s64 + 32;
	// addi r28,r11,4
	ctx.r28.s64 = ctx.r11.s64 + 4;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x83157d14
	ctx.lr = 0x8246E880;
	__imp__RtlEnterCriticalSection(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246e680
	ctx.lr = 0x8246E888;
	sub_8246E680(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// li r30,0
	ctx.r30.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8246e8c8
	if (!ctx.cr6.gt) goto loc_8246E8C8;
	// li r29,0
	ctx.r29.s64 = 0;
loc_8246E89C:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// lwzx r3,r11,r29
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r29.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246E8B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8246e89c
	if (ctx.cr6.lt) goto loc_8246E89C;
loc_8246E8C8:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x83157d24
	ctx.lr = 0x8246E8D0;
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_8246E8D0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246E8D8"))) PPC_WEAK_FUNC(sub_8246E8D8);
PPC_FUNC_IMPL(__imp__sub_8246E8D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x8246E8E0;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r31,32
	ctx.r11.s64 = ctx.r31.s64 + 32;
	// addi r27,r11,4
	ctx.r27.s64 = ctx.r11.s64 + 4;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x83157d14
	ctx.lr = 0x8246E8F8;
	__imp__RtlEnterCriticalSection(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246e680
	ctx.lr = 0x8246E900;
	sub_8246E680(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// li r28,0
	ctx.r28.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r30,r28
	ctx.r30.u64 = ctx.r28.u64;
	// ble cr6,0x8246e944
	if (!ctx.cr6.gt) goto loc_8246E944;
	// mr r29,r28
	ctx.r29.u64 = ctx.r28.u64;
loc_8246E918:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// lwzx r3,r11,r29
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r29.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246E930;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8246e918
	if (ctx.cr6.lt) goto loc_8246E918;
loc_8246E944:
	// addi r31,r31,16
	ctx.r31.s64 = ctx.r31.s64 + 16;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// stw r28,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r28.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246e9a4
	if (ctx.cr6.eq) goto loc_8246E9A4;
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// stw r28,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r28.u32);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8246e9a4
	if (ctx.cr6.eq) goto loc_8246E9A4;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8246e980
	if (!ctx.cr6.eq) goto loc_8246E980;
	// bl 0x82545cc0
	ctx.lr = 0x8246E97C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_8246E980:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246E9A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
loc_8246E9A4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x83157d24
	ctx.lr = 0x8246E9AC;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246E9B8"))) PPC_WEAK_FUNC(sub_8246E9B8);
PPC_FUNC_IMPL(__imp__sub_8246E9B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x8246E9C0;
	__savegprlr_22(ctx, base);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r12,1
	ctx.r12.s64 = 1;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// ld r10,8(r28)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r28.u32 + 8);
	// and r11,r10,r12
	ctx.r11.u64 = ctx.r10.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8246ed88
	if (ctx.cr6.eq) goto loc_8246ED88;
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
loc_8246E9E8:
	// ld r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r9,r9,0,22,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// bne cr6,0x8246ea44
	if (!ctx.cr6.eq) goto loc_8246EA44;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246e9e8
	if (!ctx.cr6.eq) goto loc_8246E9E8;
	// lwz r3,40(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 40);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246ea7c
	if (ctx.cr6.eq) goto loc_8246EA7C;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// and r9,r11,r12
	ctx.r9.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// beq cr6,0x8246ea7c
	if (ctx.cr6.eq) goto loc_8246EA7C;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,56,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 56) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8246ea5c
	if (ctx.cr6.eq) goto loc_8246EA5C;
	// bl 0x82470da0
	ctx.lr = 0x8246EA40;
	sub_82470DA0(ctx, base);
	// b 0x8246ea64
	goto loc_8246EA64;
loc_8246EA44:
	// li r12,-2
	ctx.r12.s64 = -2;
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r10,r12
	ctx.r11.u64 = ctx.r10.u64 & ctx.r12.u64;
	// std r11,8(r28)
	PPC_STORE_U64(ctx.r28.u32 + 8, ctx.r11.u64);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
loc_8246EA5C:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8246e9b8
	ctx.lr = 0x8246EA64;
	sub_8246E9B8(ctx, base);
loc_8246EA64:
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r10,8(r28)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r28.u32 + 8);
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r10,r12
	ctx.r11.u64 = ctx.r10.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8246ed88
	if (ctx.cr6.eq) goto loc_8246ED88;
loc_8246EA7C:
	// li r12,-2
	ctx.r12.s64 = -2;
	// li r5,0
	ctx.r5.s64 = 0;
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// and r11,r10,r12
	ctx.r11.u64 = ctx.r10.u64 & ctx.r12.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// std r11,8(r28)
	PPC_STORE_U64(ctx.r28.u32 + 8, ctx.r11.u64);
	// bl 0x8243aca0
	ctx.lr = 0x8246EA9C;
	sub_8243ACA0(ctx, base);
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r24,r31
	ctx.r24.u64 = ctx.r31.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r11,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r11.u32);
	// bne cr6,0x8246eab4
	if (!ctx.cr6.eq) goto loc_8246EAB4;
	// addi r24,r1,112
	ctx.r24.s64 = ctx.r1.s64 + 112;
loc_8246EAB4:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8245ecc0
	ctx.lr = 0x8246EAC0;
	sub_8245ECC0(ctx, base);
	// lwz r11,52(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// li r23,0
	ctx.r23.s64 = 0;
	// lis r22,-31973
	ctx.r22.s64 = -2095382528;
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,8,8
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x800000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8246ecb4
	if (ctx.cr6.eq) goto loc_8246ECB4;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r23.u32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// bl 0x82464910
	ctx.lr = 0x8246EAF8;
	sub_82464910(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82464238
	ctx.lr = 0x8246EB00;
	sub_82464238(ctx, base);
	// cmpwi cr6,r3,309
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 309, ctx.xer);
	// bge cr6,0x8246ebbc
	if (!ctx.cr6.lt) goto loc_8246EBBC;
	// lwz r10,28(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 28);
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
	// lwz r11,32(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 32);
	// mulli r11,r11,108
	ctx.r11.s64 = ctx.r11.s64 * 108;
	// lwz r10,196(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 196);
	// add r30,r11,r10
	ctx.r30.u64 = ctx.r11.u64 + ctx.r10.u64;
loc_8246EB20:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x8246ebbc
	if (ctx.cr6.lt) goto loc_8246EBBC;
	// lwz r11,60(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 60);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8246ebbc
	if (!ctx.cr6.lt) goto loc_8246EBBC;
	// lwz r10,56(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// rlwinm r11,r31,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 4) & 0xFFFFFFF0;
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 28);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r4,12(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// bl 0x8244c570
	ctx.lr = 0x8246EB4C;
	sub_8244C570(ctx, base);
	// bl 0x823faba8
	ctx.lr = 0x8246EB50;
	sub_823FABA8(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246ebb4
	if (ctx.cr6.eq) goto loc_8246EBB4;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r28)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r28.u32 + 8);
	// rldicr r12,r12,34,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8246eba8
	if (!ctx.cr6.eq) goto loc_8246EBA8;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// rldicr r12,r12,34,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8246eba8
	if (ctx.cr6.eq) goto loc_8246EBA8;
	// li r12,-2
	ctx.r12.s64 = -2;
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// li r4,1
	ctx.r4.s64 = 1;
	// rldicr r12,r12,34,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// std r11,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, ctx.r11.u64);
	// bl 0x824624a8
	ctx.lr = 0x8246EBA8;
	sub_824624A8(ctx, base);
loc_8246EBA8:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x829e0ba0
	ctx.lr = 0x8246EBB4;
	sub_829E0BA0(ctx, base);
loc_8246EBB4:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// b 0x8246eb20
	goto loc_8246EB20;
loc_8246EBBC:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r27,r23
	ctx.r27.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8246ec48
	if (!ctx.cr6.gt) goto loc_8246EC48;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
	// addi r25,r11,-28548
	ctx.r25.s64 = ctx.r11.s64 + -28548;
	// lis r26,-31971
	ctx.r26.s64 = -2095251456;
loc_8246EBDC:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwzx r29,r30,r11
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r11.u32);
	// lwz r31,56(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 56);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8246ec24
	if (ctx.cr6.eq) goto loc_8246EC24;
	// lwz r4,1300(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 1300);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x8246ec10
	if (!ctx.cr6.eq) goto loc_8246EC10;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824375d8
	ctx.lr = 0x8246EC04;
	sub_824375D8(ctx, base);
	// stw r3,1300(r26)
	PPC_STORE_U32(ctx.r26.u32 + 1300, ctx.r3.u32);
	// bl 0x82447280
	ctx.lr = 0x8246EC0C;
	sub_82447280(ctx, base);
	// lwz r4,1300(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 1300);
loc_8246EC10:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x8246EC18;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bne cr6,0x8246ec28
	if (!ctx.cr6.eq) goto loc_8246EC28;
loc_8246EC24:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_8246EC28:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82437468
	ctx.lr = 0x8246EC34;
	sub_82437468(ctx, base);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8246ebdc
	if (ctx.cr6.lt) goto loc_8246EBDC;
loc_8246EC48:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8245ed60
	ctx.lr = 0x8246EC54;
	sub_8245ED60(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// lwz r5,92(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82416660
	ctx.lr = 0x8246EC70;
	sub_82416660(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8246eca8
	if (ctx.cr6.eq) goto loc_8246ECA8;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8246ec94
	if (!ctx.cr6.eq) goto loc_8246EC94;
	// bl 0x82545cc0
	ctx.lr = 0x8246EC90;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_8246EC94:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246ECA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246ECA8:
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r23.u32);
loc_8246ECB4:
	// lwz r3,176(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// bl 0x82545fb0
	ctx.lr = 0x8246ECBC;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,168(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r23,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r23.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r23,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r23.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,164
	ctx.r3.s64 = ctx.r1.s64 + 164;
	// bl 0x82416660
	ctx.lr = 0x8246ECE0;
	sub_82416660(ctx, base);
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8246ed18
	if (ctx.cr6.eq) goto loc_8246ED18;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8246ed04
	if (!ctx.cr6.eq) goto loc_8246ED04;
	// bl 0x82545cc0
	ctx.lr = 0x8246ED00;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_8246ED04:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246ED18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246ED18:
	// lwz r3,156(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// stw r23,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r23.u32);
	// stw r23,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r23.u32);
	// stw r23,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r23.u32);
	// bl 0x82545fb0
	ctx.lr = 0x8246ED2C;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,148(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r23,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r23.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r23,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r23.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82416660
	ctx.lr = 0x8246ED50;
	sub_82416660(ctx, base);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8246ed88
	if (ctx.cr6.eq) goto loc_8246ED88;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8246ed74
	if (!ctx.cr6.eq) goto loc_8246ED74;
	// bl 0x82545cc0
	ctx.lr = 0x8246ED70;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_8246ED74:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246ED88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246ED88:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246ED90"))) PPC_WEAK_FUNC(sub_8246ED90);
PPC_FUNC_IMPL(__imp__sub_8246ED90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246EDAC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246ee34
	if (ctx.cr6.eq) goto loc_8246EE34;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,4704
	ctx.r7.s64 = ctx.r10.s64 + 4704;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7616
	ctx.r9.s64 = ctx.r9.s64 + -7616;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14652
	ctx.r11.s64 = ctx.r11.s64 + -14652;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246EE20;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246EE34:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246EE50"))) PPC_WEAK_FUNC(sub_8246EE50);
PPC_FUNC_IMPL(__imp__sub_8246EE50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246EE58;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246ee88
	if (!ctx.cr6.eq) goto loc_8246EE88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246EE7C;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246EE84;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246EE88:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19856(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246eebc
	if (ctx.cr6.eq) goto loc_8246EEBC;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246eec0
	if (!ctx.cr6.eq) goto loc_8246EEC0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246EEA8;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246EEB0;
	sub_8245F698(ctx, base);
	// lwz r10,19856(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246eec0
	goto loc_8246EEC0;
loc_8246EEBC:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246EEC0:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246eee8
	if (!ctx.cr6.eq) goto loc_8246EEE8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246EEDC;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246EEE4;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246EEE8:
	// lwz r10,19856(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246ef14
	if (!ctx.cr6.eq) goto loc_8246EF14;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246EF08;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246EF10;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246EF14:
	// lwz r10,19856(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246ef70
	if (ctx.cr6.eq) goto loc_8246EF70;
	// lwz r3,19856(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246ef58
	if (!ctx.cr6.eq) goto loc_8246EF58;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246EF48;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246EF50;
	sub_824455B8(ctx, base);
	// lwz r3,19856(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19856);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246EF58:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246ef70
	if (!ctx.cr6.eq) goto loc_8246EF70;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246EF70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246EF70:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246EF78"))) PPC_WEAK_FUNC(sub_8246EF78);
PPC_FUNC_IMPL(__imp__sub_8246EF78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246efbc
	if (!ctx.cr6.eq) goto loc_8246EFBC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246EFB0;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246EFB8;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246EFBC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246EFE8"))) PPC_WEAK_FUNC(sub_8246EFE8);
PPC_FUNC_IMPL(__imp__sub_8246EFE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246F004;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246f08c
	if (ctx.cr6.eq) goto loc_8246F08C;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,4792
	ctx.r7.s64 = ctx.r10.s64 + 4792;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-8080
	ctx.r9.s64 = ctx.r9.s64 + -8080;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14636
	ctx.r11.s64 = ctx.r11.s64 + -14636;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,128
	ctx.r5.s64 = 128;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246F078;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246F08C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F0A8"))) PPC_WEAK_FUNC(sub_8246F0A8);
PPC_FUNC_IMPL(__imp__sub_8246F0A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246F0B0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f0e0
	if (!ctx.cr6.eq) goto loc_8246F0E0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F0D4;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F0DC;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F0E0:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19860(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246f114
	if (ctx.cr6.eq) goto loc_8246F114;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f118
	if (!ctx.cr6.eq) goto loc_8246F118;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F100;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F108;
	sub_8245F698(ctx, base);
	// lwz r10,19860(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246f118
	goto loc_8246F118;
loc_8246F114:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246F118:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f140
	if (!ctx.cr6.eq) goto loc_8246F140;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246F134;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246F13C;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246F140:
	// lwz r10,19860(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f16c
	if (!ctx.cr6.eq) goto loc_8246F16C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F160;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F168;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F16C:
	// lwz r10,19860(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246f1c8
	if (ctx.cr6.eq) goto loc_8246F1C8;
	// lwz r3,19860(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246f1b0
	if (!ctx.cr6.eq) goto loc_8246F1B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F1A0;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F1A8;
	sub_824455B8(ctx, base);
	// lwz r3,19860(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19860);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F1B0:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246f1c8
	if (!ctx.cr6.eq) goto loc_8246F1C8;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246F1C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246F1C8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246F1D0"))) PPC_WEAK_FUNC(sub_8246F1D0);
PPC_FUNC_IMPL(__imp__sub_8246F1D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f214
	if (!ctx.cr6.eq) goto loc_8246F214;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246F208;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F210;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F214:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F240"))) PPC_WEAK_FUNC(sub_8246F240);
PPC_FUNC_IMPL(__imp__sub_8246F240) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246F25C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246f2e4
	if (ctx.cr6.eq) goto loc_8246F2E4;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5848
	ctx.r7.s64 = ctx.r10.s64 + 5848;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7552
	ctx.r9.s64 = ctx.r9.s64 + -7552;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14620
	ctx.r11.s64 = ctx.r11.s64 + -14620;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,136
	ctx.r5.s64 = 136;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246F2D0;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246F2E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F300"))) PPC_WEAK_FUNC(sub_8246F300);
PPC_FUNC_IMPL(__imp__sub_8246F300) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246F308;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f338
	if (!ctx.cr6.eq) goto loc_8246F338;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F32C;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F334;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F338:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19864(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246f36c
	if (ctx.cr6.eq) goto loc_8246F36C;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f370
	if (!ctx.cr6.eq) goto loc_8246F370;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F358;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F360;
	sub_8245F698(ctx, base);
	// lwz r10,19864(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246f370
	goto loc_8246F370;
loc_8246F36C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246F370:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f398
	if (!ctx.cr6.eq) goto loc_8246F398;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246F38C;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246F394;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246F398:
	// lwz r10,19864(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f3c4
	if (!ctx.cr6.eq) goto loc_8246F3C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F3B8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F3C0;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F3C4:
	// lwz r10,19864(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246f420
	if (ctx.cr6.eq) goto loc_8246F420;
	// lwz r3,19864(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246f408
	if (!ctx.cr6.eq) goto loc_8246F408;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F3F8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F400;
	sub_824455B8(ctx, base);
	// lwz r3,19864(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19864);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F408:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246f420
	if (!ctx.cr6.eq) goto loc_8246F420;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246F420;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246F420:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246F428"))) PPC_WEAK_FUNC(sub_8246F428);
PPC_FUNC_IMPL(__imp__sub_8246F428) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f46c
	if (!ctx.cr6.eq) goto loc_8246F46C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246F460;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F468;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F46C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F498"))) PPC_WEAK_FUNC(sub_8246F498);
PPC_FUNC_IMPL(__imp__sub_8246F498) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246F4B4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246f53c
	if (ctx.cr6.eq) goto loc_8246F53C;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,4880
	ctx.r7.s64 = ctx.r10.s64 + 4880;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-8080
	ctx.r9.s64 = ctx.r9.s64 + -8080;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14600
	ctx.r11.s64 = ctx.r11.s64 + -14600;
	// lis r6,4098
	ctx.r6.s64 = 268566528;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246F528;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246F53C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F558"))) PPC_WEAK_FUNC(sub_8246F558);
PPC_FUNC_IMPL(__imp__sub_8246F558) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246F560;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f590
	if (!ctx.cr6.eq) goto loc_8246F590;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F584;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F58C;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F590:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19868(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246f5c4
	if (ctx.cr6.eq) goto loc_8246F5C4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f5c8
	if (!ctx.cr6.eq) goto loc_8246F5C8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F5B0;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F5B8;
	sub_8245F698(ctx, base);
	// lwz r10,19868(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246f5c8
	goto loc_8246F5C8;
loc_8246F5C4:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246F5C8:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f5f0
	if (!ctx.cr6.eq) goto loc_8246F5F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246F5E4;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246F5EC;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246F5F0:
	// lwz r10,19868(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f61c
	if (!ctx.cr6.eq) goto loc_8246F61C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F610;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F618;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F61C:
	// lwz r10,19868(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246f678
	if (ctx.cr6.eq) goto loc_8246F678;
	// lwz r3,19868(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246f660
	if (!ctx.cr6.eq) goto loc_8246F660;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F650;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F658;
	sub_824455B8(ctx, base);
	// lwz r3,19868(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19868);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F660:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246f678
	if (!ctx.cr6.eq) goto loc_8246F678;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246F678;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246F678:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246F680"))) PPC_WEAK_FUNC(sub_8246F680);
PPC_FUNC_IMPL(__imp__sub_8246F680) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f6c4
	if (!ctx.cr6.eq) goto loc_8246F6C4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246F6B8;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F6C0;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F6C4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F6F0"))) PPC_WEAK_FUNC(sub_8246F6F0);
PPC_FUNC_IMPL(__imp__sub_8246F6F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246F70C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246f794
	if (ctx.cr6.eq) goto loc_8246F794;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,4968
	ctx.r7.s64 = ctx.r10.s64 + 4968;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-8080
	ctx.r9.s64 = ctx.r9.s64 + -8080;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14584
	ctx.r11.s64 = ctx.r11.s64 + -14584;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,128
	ctx.r5.s64 = 128;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246F780;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246F794:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F7B0"))) PPC_WEAK_FUNC(sub_8246F7B0);
PPC_FUNC_IMPL(__imp__sub_8246F7B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246F7B8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f7e8
	if (!ctx.cr6.eq) goto loc_8246F7E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F7DC;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F7E4;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F7E8:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19872(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246f81c
	if (ctx.cr6.eq) goto loc_8246F81C;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f820
	if (!ctx.cr6.eq) goto loc_8246F820;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246F808;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F810;
	sub_8245F698(ctx, base);
	// lwz r10,19872(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246f820
	goto loc_8246F820;
loc_8246F81C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246F820:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f848
	if (!ctx.cr6.eq) goto loc_8246F848;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246F83C;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246F844;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246F848:
	// lwz r10,19872(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f874
	if (!ctx.cr6.eq) goto loc_8246F874;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F868;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F870;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F874:
	// lwz r10,19872(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246f8d0
	if (ctx.cr6.eq) goto loc_8246F8D0;
	// lwz r3,19872(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246f8b8
	if (!ctx.cr6.eq) goto loc_8246F8B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246F8A8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246F8B0;
	sub_824455B8(ctx, base);
	// lwz r3,19872(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19872);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246F8B8:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246f8d0
	if (!ctx.cr6.eq) goto loc_8246F8D0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246F8D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246F8D0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246F8D8"))) PPC_WEAK_FUNC(sub_8246F8D8);
PPC_FUNC_IMPL(__imp__sub_8246F8D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246f91c
	if (!ctx.cr6.eq) goto loc_8246F91C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246F910;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246F918;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246F91C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246F948"))) PPC_WEAK_FUNC(sub_8246F948);
PPC_FUNC_IMPL(__imp__sub_8246F948) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246F964;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246f9ec
	if (ctx.cr6.eq) goto loc_8246F9EC;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5056
	ctx.r7.s64 = ctx.r10.s64 + 5056;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7440
	ctx.r9.s64 = ctx.r9.s64 + -7440;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14568
	ctx.r11.s64 = ctx.r11.s64 + -14568;
	// lis r6,4097
	ctx.r6.s64 = 268500992;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246F9D8;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246F9EC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FA08"))) PPC_WEAK_FUNC(sub_8246FA08);
PPC_FUNC_IMPL(__imp__sub_8246FA08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246FA10;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fa40
	if (!ctx.cr6.eq) goto loc_8246FA40;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246FA34;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FA3C;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246FA40:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19876(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246fa74
	if (ctx.cr6.eq) goto loc_8246FA74;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fa78
	if (!ctx.cr6.eq) goto loc_8246FA78;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246FA60;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FA68;
	sub_8245F698(ctx, base);
	// lwz r10,19876(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246fa78
	goto loc_8246FA78;
loc_8246FA74:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246FA78:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246faa0
	if (!ctx.cr6.eq) goto loc_8246FAA0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246FA94;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246FA9C;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246FAA0:
	// lwz r10,19876(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246facc
	if (!ctx.cr6.eq) goto loc_8246FACC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246FAC0;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246FAC8;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246FACC:
	// lwz r10,19876(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246fb28
	if (ctx.cr6.eq) goto loc_8246FB28;
	// lwz r3,19876(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246fb10
	if (!ctx.cr6.eq) goto loc_8246FB10;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246FB00;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246FB08;
	sub_824455B8(ctx, base);
	// lwz r3,19876(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19876);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246FB10:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246fb28
	if (!ctx.cr6.eq) goto loc_8246FB28;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246FB28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246FB28:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246FB30"))) PPC_WEAK_FUNC(sub_8246FB30);
PPC_FUNC_IMPL(__imp__sub_8246FB30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fb74
	if (!ctx.cr6.eq) goto loc_8246FB74;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246FB68;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FB70;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246FB74:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FBA0"))) PPC_WEAK_FUNC(sub_8246FBA0);
PPC_FUNC_IMPL(__imp__sub_8246FBA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246FBBC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246fc40
	if (ctx.cr6.eq) goto loc_8246FC40;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5232
	ctx.r7.s64 = ctx.r10.s64 + 5232;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7376
	ctx.r9.s64 = ctx.r9.s64 + -7376;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r11,r11,-14552
	ctx.r11.s64 = ctx.r11.s64 + -14552;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// li r5,136
	ctx.r5.s64 = 136;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246FC2C;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246FC40:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FC58"))) PPC_WEAK_FUNC(sub_8246FC58);
PPC_FUNC_IMPL(__imp__sub_8246FC58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246FC74;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246fcf8
	if (ctx.cr6.eq) goto loc_8246FCF8;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5144
	ctx.r7.s64 = ctx.r10.s64 + 5144;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7440
	ctx.r9.s64 = ctx.r9.s64 + -7440;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r11,r11,-14536
	ctx.r11.s64 = ctx.r11.s64 + -14536;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246FCE4;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246FCF8:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FD10"))) PPC_WEAK_FUNC(sub_8246FD10);
PPC_FUNC_IMPL(__imp__sub_8246FD10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246FD2C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8246fdb0
	if (ctx.cr6.eq) goto loc_8246FDB0;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5320
	ctx.r7.s64 = ctx.r10.s64 + 5320;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7312
	ctx.r9.s64 = ctx.r9.s64 + -7312;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r11,r11,-14516
	ctx.r11.s64 = ctx.r11.s64 + -14516;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246FD9C;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8246FDB0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FDC8"))) PPC_WEAK_FUNC(sub_8246FDC8);
PPC_FUNC_IMPL(__imp__sub_8246FDC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8246FDD0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fe00
	if (!ctx.cr6.eq) goto loc_8246FE00;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246FDF4;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FDFC;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246FE00:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19888(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8246fe34
	if (ctx.cr6.eq) goto loc_8246FE34;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fe38
	if (!ctx.cr6.eq) goto loc_8246FE38;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8246FE20;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FE28;
	sub_8245F698(ctx, base);
	// lwz r10,19888(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x8246fe38
	goto loc_8246FE38;
loc_8246FE34:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8246FE38:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fe60
	if (!ctx.cr6.eq) goto loc_8246FE60;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8246FE54;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8246FE5C;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_8246FE60:
	// lwz r10,19888(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246fe8c
	if (!ctx.cr6.eq) goto loc_8246FE8C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246FE80;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246FE88;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246FE8C:
	// lwz r10,19888(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8246fee8
	if (ctx.cr6.eq) goto loc_8246FEE8;
	// lwz r3,19888(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x8246fed0
	if (!ctx.cr6.eq) goto loc_8246FED0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8246FEC0;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8246FEC8;
	sub_824455B8(ctx, base);
	// lwz r3,19888(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19888);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8246FED0:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8246fee8
	if (!ctx.cr6.eq) goto loc_8246FEE8;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8246FEE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8246FEE8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8246FEF0"))) PPC_WEAK_FUNC(sub_8246FEF0);
PPC_FUNC_IMPL(__imp__sub_8246FEF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8246ff34
	if (!ctx.cr6.eq) goto loc_8246FF34;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x8246FF28;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8246FF30;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8246FF34:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8246FF60"))) PPC_WEAK_FUNC(sub_8246FF60);
PPC_FUNC_IMPL(__imp__sub_8246FF60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8246FF7C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82470004
	if (ctx.cr6.eq) goto loc_82470004;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5408
	ctx.r7.s64 = ctx.r10.s64 + 5408;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-8080
	ctx.r9.s64 = ctx.r9.s64 + -8080;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14496
	ctx.r11.s64 = ctx.r11.s64 + -14496;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,128
	ctx.r5.s64 = 128;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x8246FFF0;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82470004:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470020"))) PPC_WEAK_FUNC(sub_82470020);
PPC_FUNC_IMPL(__imp__sub_82470020) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82470028;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470058
	if (!ctx.cr6.eq) goto loc_82470058;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x8247004C;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470054;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_82470058:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19892(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247008c
	if (ctx.cr6.eq) goto loc_8247008C;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470090
	if (!ctx.cr6.eq) goto loc_82470090;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x82470078;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470080;
	sub_8245F698(ctx, base);
	// lwz r10,19892(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x82470090
	goto loc_82470090;
loc_8247008C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82470090:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824700b8
	if (!ctx.cr6.eq) goto loc_824700B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x824700AC;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x824700B4;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_824700B8:
	// lwz r10,19892(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824700e4
	if (!ctx.cr6.eq) goto loc_824700E4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x824700D8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x824700E0;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_824700E4:
	// lwz r10,19892(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470140
	if (ctx.cr6.eq) goto loc_82470140;
	// lwz r3,19892(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x82470128
	if (!ctx.cr6.eq) goto loc_82470128;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470118;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470120;
	sub_824455B8(ctx, base);
	// lwz r3,19892(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19892);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470128:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82470140
	if (!ctx.cr6.eq) goto loc_82470140;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470140;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470140:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82470148"))) PPC_WEAK_FUNC(sub_82470148);
PPC_FUNC_IMPL(__imp__sub_82470148) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247018c
	if (!ctx.cr6.eq) goto loc_8247018C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x82470180;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470188;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8247018C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824701B8"))) PPC_WEAK_FUNC(sub_824701B8);
PPC_FUNC_IMPL(__imp__sub_824701B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x824701D4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247025c
	if (ctx.cr6.eq) goto loc_8247025C;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5496
	ctx.r7.s64 = ctx.r10.s64 + 5496;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-8080
	ctx.r9.s64 = ctx.r9.s64 + -8080;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14480
	ctx.r11.s64 = ctx.r11.s64 + -14480;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,128
	ctx.r5.s64 = 128;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x82470248;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8247025C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470278"))) PPC_WEAK_FUNC(sub_82470278);
PPC_FUNC_IMPL(__imp__sub_82470278) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82470280;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824702b0
	if (!ctx.cr6.eq) goto loc_824702B0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x824702A4;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x824702AC;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_824702B0:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19896(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x824702e4
	if (ctx.cr6.eq) goto loc_824702E4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824702e8
	if (!ctx.cr6.eq) goto loc_824702E8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x824702D0;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x824702D8;
	sub_8245F698(ctx, base);
	// lwz r10,19896(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x824702e8
	goto loc_824702E8;
loc_824702E4:
	// li r11,0
	ctx.r11.s64 = 0;
loc_824702E8:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470310
	if (!ctx.cr6.eq) goto loc_82470310;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x82470304;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x8247030C;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82470310:
	// lwz r10,19896(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247033c
	if (!ctx.cr6.eq) goto loc_8247033C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470330;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470338;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8247033C:
	// lwz r10,19896(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470398
	if (ctx.cr6.eq) goto loc_82470398;
	// lwz r3,19896(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x82470380
	if (!ctx.cr6.eq) goto loc_82470380;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470370;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470378;
	sub_824455B8(ctx, base);
	// lwz r3,19896(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19896);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470380:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82470398
	if (!ctx.cr6.eq) goto loc_82470398;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470398;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470398:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824703A0"))) PPC_WEAK_FUNC(sub_824703A0);
PPC_FUNC_IMPL(__imp__sub_824703A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824703e4
	if (!ctx.cr6.eq) goto loc_824703E4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x824703D8;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x824703E0;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_824703E4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470410"))) PPC_WEAK_FUNC(sub_82470410);
PPC_FUNC_IMPL(__imp__sub_82470410) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x8247042C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824704b4
	if (ctx.cr6.eq) goto loc_824704B4;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5584
	ctx.r7.s64 = ctx.r10.s64 + 5584;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7248
	ctx.r9.s64 = ctx.r9.s64 + -7248;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14464
	ctx.r11.s64 = ctx.r11.s64 + -14464;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x824704A0;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_824704B4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824704D0"))) PPC_WEAK_FUNC(sub_824704D0);
PPC_FUNC_IMPL(__imp__sub_824704D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x824704D8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470508
	if (!ctx.cr6.eq) goto loc_82470508;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x824704FC;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470504;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_82470508:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19900(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247053c
	if (ctx.cr6.eq) goto loc_8247053C;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470540
	if (!ctx.cr6.eq) goto loc_82470540;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x82470528;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470530;
	sub_8245F698(ctx, base);
	// lwz r10,19900(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x82470540
	goto loc_82470540;
loc_8247053C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82470540:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470568
	if (!ctx.cr6.eq) goto loc_82470568;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8247055C;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x82470564;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82470568:
	// lwz r10,19900(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470594
	if (!ctx.cr6.eq) goto loc_82470594;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470588;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470590;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470594:
	// lwz r10,19900(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824705f0
	if (ctx.cr6.eq) goto loc_824705F0;
	// lwz r3,19900(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x824705d8
	if (!ctx.cr6.eq) goto loc_824705D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x824705C8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x824705D0;
	sub_824455B8(ctx, base);
	// lwz r3,19900(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_824705D8:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x824705f0
	if (!ctx.cr6.eq) goto loc_824705F0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824705F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824705F0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824705F8"))) PPC_WEAK_FUNC(sub_824705F8);
PPC_FUNC_IMPL(__imp__sub_824705F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247063c
	if (!ctx.cr6.eq) goto loc_8247063C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x82470630;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470638;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_8247063C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470668"))) PPC_WEAK_FUNC(sub_82470668);
PPC_FUNC_IMPL(__imp__sub_82470668) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x82470684;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247070c
	if (ctx.cr6.eq) goto loc_8247070C;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5672
	ctx.r7.s64 = ctx.r10.s64 + 5672;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7184
	ctx.r9.s64 = ctx.r9.s64 + -7184;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14448
	ctx.r11.s64 = ctx.r11.s64 + -14448;
	// lis r6,4096
	ctx.r6.s64 = 268435456;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,136
	ctx.r5.s64 = 136;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x824706F8;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8247070C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470728"))) PPC_WEAK_FUNC(sub_82470728);
PPC_FUNC_IMPL(__imp__sub_82470728) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82470730;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470760
	if (!ctx.cr6.eq) goto loc_82470760;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x82470754;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x8247075C;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_82470760:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19904(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x82470794
	if (ctx.cr6.eq) goto loc_82470794;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470798
	if (!ctx.cr6.eq) goto loc_82470798;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x82470780;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470788;
	sub_8245F698(ctx, base);
	// lwz r10,19904(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x82470798
	goto loc_82470798;
loc_82470794:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82470798:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824707c0
	if (!ctx.cr6.eq) goto loc_824707C0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x824707B4;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x824707BC;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_824707C0:
	// lwz r10,19904(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824707ec
	if (!ctx.cr6.eq) goto loc_824707EC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x824707E0;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x824707E8;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_824707EC:
	// lwz r10,19904(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470848
	if (ctx.cr6.eq) goto loc_82470848;
	// lwz r3,19904(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x82470830
	if (!ctx.cr6.eq) goto loc_82470830;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470820;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470828;
	sub_824455B8(ctx, base);
	// lwz r3,19904(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19904);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470830:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82470848
	if (!ctx.cr6.eq) goto loc_82470848;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470848;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470848:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82470850"))) PPC_WEAK_FUNC(sub_82470850);
PPC_FUNC_IMPL(__imp__sub_82470850) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470894
	if (!ctx.cr6.eq) goto loc_82470894;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x82470888;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470890;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_82470894:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824708C0"))) PPC_WEAK_FUNC(sub_824708C0);
PPC_FUNC_IMPL(__imp__sub_824708C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x824708DC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82470964
	if (ctx.cr6.eq) goto loc_82470964;
	// lis r10,-32173
	ctx.r10.s64 = -2108489728;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,5760
	ctx.r7.s64 = ctx.r10.s64 + 5760;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32185
	ctx.r9.s64 = -2109276160;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-7072
	ctx.r9.s64 = ctx.r9.s64 + -7072;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// addi r11,r11,-14432
	ctx.r11.s64 = ctx.r11.s64 + -14432;
	// lis r6,4112
	ctx.r6.s64 = 269484032;
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// ori r6,r6,32768
	ctx.r6.u64 = ctx.r6.u64 | 32768;
	// li r5,132
	ctx.r5.s64 = 132;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x82470950;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82470964:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470980"))) PPC_WEAK_FUNC(sub_82470980);
PPC_FUNC_IMPL(__imp__sub_82470980) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82470988;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824709b8
	if (!ctx.cr6.eq) goto loc_824709B8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x824709AC;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x824709B4;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_824709B8:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19908(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x824709ec
	if (ctx.cr6.eq) goto loc_824709EC;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824709f0
	if (!ctx.cr6.eq) goto loc_824709F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246e180
	ctx.lr = 0x824709D8;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x824709E0;
	sub_8245F698(ctx, base);
	// lwz r10,19908(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// b 0x824709f0
	goto loc_824709F0;
loc_824709EC:
	// li r11,0
	ctx.r11.s64 = 0;
loc_824709F0:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470a18
	if (!ctx.cr6.eq) goto loc_82470A18;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x82470A0C;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x82470A14;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82470A18:
	// lwz r10,19908(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470a44
	if (!ctx.cr6.eq) goto loc_82470A44;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470A38;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470A40;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470A44:
	// lwz r10,19908(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470aa0
	if (ctx.cr6.eq) goto loc_82470AA0;
	// lwz r3,19908(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x82470a88
	if (!ctx.cr6.eq) goto loc_82470A88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82470A78;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82470A80;
	sub_824455B8(ctx, base);
	// lwz r3,19908(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82470A88:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82470aa0
	if (!ctx.cr6.eq) goto loc_82470AA0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470AA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470AA0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82470AA8"))) PPC_WEAK_FUNC(sub_82470AA8);
PPC_FUNC_IMPL(__imp__sub_82470AA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82470aec
	if (!ctx.cr6.eq) goto loc_82470AEC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246e180
	ctx.lr = 0x82470AE0;
	sub_8246E180(ctx, base);
	// stw r3,19852(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19852, ctx.r3.u32);
	// bl 0x8245f698
	ctx.lr = 0x82470AE8;
	sub_8245F698(ctx, base);
	// lwz r11,19852(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19852);
loc_82470AEC:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470B18"))) PPC_WEAK_FUNC(sub_82470B18);
PPC_FUNC_IMPL(__imp__sub_82470B18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82470B20;
	__savegprlr_24(ctx, base);
	// stfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, ctx.f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r24,r4
	ctx.r24.u64 = ctx.r4.u64;
	// addi r31,r11,19688
	ctx.r31.s64 = ctx.r11.s64 + 19688;
	// li r30,10
	ctx.r30.s64 = 10;
loc_82470B3C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82470b50
	if (ctx.cr6.eq) goto loc_82470B50;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470B50;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470B50:
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82470b3c
	if (!ctx.cr6.eq) goto loc_82470B3C;
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r26,-31973
	ctx.r26.s64 = -2095382528;
	// lis r25,-31970
	ctx.r25.s64 = -2095185920;
	// stw r11,24820(r26)
	PPC_STORE_U32(ctx.r26.u32 + 24820, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r11,12296(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12296);
	// lwz r10,92(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// stw r10,104(r11)
	PPC_STORE_U32(ctx.r11.u32 + 104, ctx.r10.u32);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f0,-13884(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13884);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// stfs f0,-17472(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + -17472, temp.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19792(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19792);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lfs f31,-19764(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -19764);
	ctx.f31.f64 = double(temp.f32);
	// bne cr6,0x82470bb4
	if (!ctx.cr6.eq) goto loc_82470BB4;
	// lwz r11,19800(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 19800);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470bc0
	if (ctx.cr6.eq) goto loc_82470BC0;
loc_82470BB4:
	// li r3,0
	ctx.r3.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x82463748
	ctx.lr = 0x82470BC0;
	sub_82463748(ctx, base);
loc_82470BC0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82470BC8;
	sub_82B061D8(ctx, base);
	// li r27,0
	ctx.r27.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r27.u32);
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r27.u32);
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r27.u32);
	// bl 0x82531730
	ctx.lr = 0x82470BE8;
	sub_82531730(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x82470C04;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82470c40
	if (ctx.cr6.eq) goto loc_82470C40;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82470c2c
	if (!ctx.cr6.eq) goto loc_82470C2C;
	// bl 0x82545cc0
	ctx.lr = 0x82470C28;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82470C2C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470C40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470C40:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r27.u32);
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r27.u32);
	// bl 0x82b061d8
	ctx.lr = 0x82470C54;
	sub_82B061D8(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r31,19808(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19808);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r29,r11,20028
	ctx.r29.s64 = ctx.r11.s64 + 20028;
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82470d0c
	if (!ctx.cr6.lt) goto loc_82470D0C;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// rlwinm r30,r31,2,0,29
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r28,r31,10
	ctx.r28.s64 = ctx.r31.s64 + 10;
loc_82470C7C:
	// cmpw cr6,r28,r10
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82470c90
	if (!ctx.cr6.lt) goto loc_82470C90;
	// add r11,r30,r9
	ctx.r11.u64 = ctx.r30.u64 + ctx.r9.u64;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// dcbt r0,r11
loc_82470C90:
	// lwzx r3,r30,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r9.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82470cf8
	if (ctx.cr6.eq) goto loc_82470CF8;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// rldicr r12,r12,33,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 33) & 0xFFFFFFFFFFFFFFFF;
	// and r8,r11,r12
	ctx.r8.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r8,0
	ctx.cr6.compare<uint64_t>(ctx.r8.u64, 0, ctx.xer);
	// beq cr6,0x82470cf8
	if (ctx.cr6.eq) goto loc_82470CF8;
	// lwz r8,4(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r8,-1
	ctx.cr6.compare<int32_t>(ctx.r8.s32, -1, ctx.xer);
	// beq cr6,0x82470cf8
	if (ctx.cr6.eq) goto loc_82470CF8;
	// rlwinm r8,r11,0,16,16
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x8000;
	// cmpldi cr6,r8,0
	ctx.cr6.compare<uint64_t>(ctx.r8.u64, 0, ctx.xer);
	// bne cr6,0x82470cf8
	if (!ctx.cr6.eq) goto loc_82470CF8;
	// lis r12,-3
	ctx.r12.s64 = -196608;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// ori r12,r12,65535
	ctx.r12.u64 = ctx.r12.u64 | 65535;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// lwz r10,32(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// ori r11,r11,32768
	ctx.r11.u64 = ctx.r11.u64 | 32768;
	// std r11,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, ctx.r11.u64);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82470CF0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
loc_82470CF8:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x82470c7c
	if (ctx.cr6.lt) goto loc_82470C7C;
loc_82470D0C:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r3,24852(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24852);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82470d2c
	if (ctx.cr6.eq) goto loc_82470D2C;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470D2C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470D2C:
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// cmpwi cr6,r24,0
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 0, ctx.xer);
	// stw r11,19800(r25)
	PPC_STORE_U32(ctx.r25.u32 + 19800, ctx.r11.u32);
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// stw r11,19920(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19920, ctx.r11.u32);
	// beq cr6,0x82470d58
	if (ctx.cr6.eq) goto loc_82470D58;
	// li r3,0
	ctx.r3.s64 = 0;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x82463748
	ctx.lr = 0x82470D54;
	sub_82463748(ctx, base);
	// bl 0x82600450
	ctx.lr = 0x82470D58;
	sub_82600450(ctx, base);
loc_82470D58:
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// li r30,10
	ctx.r30.s64 = 10;
	// addi r31,r11,19648
	ctx.r31.s64 = ctx.r11.s64 + 19648;
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// stw r11,24820(r26)
	PPC_STORE_U32(ctx.r26.u32 + 24820, ctx.r11.u32);
loc_82470D6C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82470d80
	if (ctx.cr6.eq) goto loc_82470D80;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470D80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470D80:
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82470d6c
	if (!ctx.cr6.eq) goto loc_82470D6C;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82470DA0"))) PPC_WEAK_FUNC(sub_82470DA0);
PPC_FUNC_IMPL(__imp__sub_82470DA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,56,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 56) & 0xFFFFFFFFFFFFFFFF;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// and r10,r11,r12
	ctx.r10.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x82470e48
	if (ctx.cr6.eq) goto loc_82470E48;
	// li r12,-2050
	ctx.r12.s64 = -2050;
	// lwz r3,56(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// rldicr r12,r12,56,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 56) & 0xFFFFFFFFFFFFFFFF;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// beq cr6,0x82470dec
	if (ctx.cr6.eq) goto loc_82470DEC;
	// bl 0x82470da0
	ctx.lr = 0x82470DEC;
	sub_82470DA0(ctx, base);
loc_82470DEC:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30016(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470e28
	if (ctx.cr6.eq) goto loc_82470E28;
	// li r12,-2
	ctx.r12.s64 = -2;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// ori r11,r11,8
	ctx.r11.u64 = ctx.r11.u64 | 8;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82470E28:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246e9b8
	ctx.lr = 0x82470E34;
	sub_8246E9B8(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470E48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82470E48:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82470E60"))) PPC_WEAK_FUNC(sub_82470E60);
PPC_FUNC_IMPL(__imp__sub_82470E60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82470E68;
	__savegprlr_23(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r25,-31970
	ctx.r25.s64 = -2095185920;
	// lwz r11,19736(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 19736);
	// addi r10,r11,-1
	ctx.r10.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r10,19736(r25)
	PPC_STORE_U32(ctx.r25.u32 + 19736, ctx.r10.u32);
	// bne cr6,0x824711a8
	if (!ctx.cr6.eq) goto loc_824711A8;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lis r28,-31973
	ctx.r28.s64 = -2095382528;
	// lis r26,-31973
	ctx.r26.s64 = -2095382528;
	// lis r23,-31970
	ctx.r23.s64 = -2095185920;
	// lis r24,-31970
	ctx.r24.s64 = -2095185920;
	// addi r29,r11,20016
	ctx.r29.s64 = ctx.r11.s64 + 20016;
	// li r27,0
	ctx.r27.s64 = 0;
loc_82470EA0:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82470ec4
	if (!ctx.cr6.eq) goto loc_82470EC4;
	// lwz r9,19744(r24)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r24.u32 + 19744);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x82470ec4
	if (!ctx.cr6.eq) goto loc_82470EC4;
	// lwz r9,19748(r23)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r23.u32 + 19748);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x824711a8
	if (ctx.cr6.eq) goto loc_824711A8;
loc_82470EC4:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r10,19736(r25)
	PPC_STORE_U32(ctx.r25.u32 + 19736, ctx.r10.u32);
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// beq cr6,0x82471130
	if (ctx.cr6.eq) goto loc_82471130;
	// b 0x82470ef4
	goto loc_82470EF4;
loc_82470EF0:
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_82470EF4:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
loc_82470EF8:
	// ble cr6,0x82470f8c
	if (!ctx.cr6.gt) goto loc_82470F8C;
	// add r9,r11,r4
	ctx.r9.u64 = ctx.r11.u64 + ctx.r4.u64;
	// cmpw cr6,r9,r10
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, ctx.xer);
	// ble cr6,0x82470f64
	if (!ctx.cr6.gt) goto loc_82470F64;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82470f1c
	if (!ctx.cr6.eq) goto loc_82470F1C;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x82470f64
	if (ctx.cr6.eq) goto loc_82470F64;
loc_82470F1C:
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// rlwinm r31,r9,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82470f38
	if (!ctx.cr6.eq) goto loc_82470F38;
	// bl 0x82545cc0
	ctx.lr = 0x82470F34;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82470F38:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470F58;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82470F64:
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// rlwinm r5,r11,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r10,r3
	ctx.r3.u64 = ctx.r10.u64 + ctx.r3.u64;
	// bl 0x82b06418
	ctx.lr = 0x82470F78;
	sub_82B06418(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r4,r11,r10
	ctx.r4.u64 = ctx.r11.u64 + ctx.r10.u64;
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
loc_82470F8C:
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// lwz r11,8(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82470ff4
	if (ctx.cr6.eq) goto loc_82470FF4;
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// stw r11,8(r29)
	PPC_STORE_U32(ctx.r29.u32 + 8, ctx.r11.u32);
	// lwz r31,0(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82470ff4
	if (ctx.cr6.eq) goto loc_82470FF4;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82470fc8
	if (!ctx.cr6.eq) goto loc_82470FC8;
	// bl 0x82545cc0
	ctx.lr = 0x82470FC4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82470FC8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82470FE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r3.u32);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82470FF4:
	// bl 0x82480de8
	ctx.lr = 0x82470FF8;
	sub_82480DE8(ctx, base);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// ble cr6,0x82471060
	if (!ctx.cr6.gt) goto loc_82471060;
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
loc_82471010:
	// lwzx r11,r31,r3
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r3.u32);
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,41,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 41) & 0xFFFFFFFFFFFFFFFF;
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// and r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 & ctx.r12.u64;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x82471050
	if (ctx.cr6.eq) goto loc_82471050;
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// addi r3,r10,240
	ctx.r3.s64 = ctx.r10.s64 + 240;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471048;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82471050:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmpw cr6,r30,r4
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r4.s32, ctx.xer);
	// blt cr6,0x82471010
	if (ctx.cr6.lt) goto loc_82471010;
loc_82471060:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82470ef0
	if (!ctx.cr6.eq) goto loc_82470EF0;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// stw r10,30080(r26)
	PPC_STORE_U32(ctx.r26.u32 + 30080, ctx.r10.u32);
	// ble cr6,0x824710a8
	if (!ctx.cr6.gt) goto loc_824710A8;
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
loc_82471084:
	// lwzx r3,r30,r3
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r3.u32);
	// bl 0x82470da0
	ctx.lr = 0x8247108C;
	sub_82470DA0(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82471084
	if (ctx.cr6.lt) goto loc_82471084;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
loc_824710A8:
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// stw r10,30080(r26)
	PPC_STORE_U32(ctx.r26.u32 + 30080, ctx.r10.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// beq cr6,0x82471128
	if (ctx.cr6.eq) goto loc_82471128;
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// bne cr6,0x824710dc
	if (!ctx.cr6.eq) goto loc_824710DC;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82471128
	if (ctx.cr6.eq) goto loc_82471128;
loc_824710DC:
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// rlwinm r31,r10,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824710f8
	if (!ctx.cr6.eq) goto loc_824710F8;
	// bl 0x82545cc0
	ctx.lr = 0x824710F4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_824710F8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471118;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82471128:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82470ef8
	if (!ctx.cr6.eq) goto loc_82470EF8;
loc_82471130:
	// bl 0x824658c0
	ctx.lr = 0x82471134;
	sub_824658C0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x82471150;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82471188
	if (ctx.cr6.eq) goto loc_82471188;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82471174
	if (!ctx.cr6.eq) goto loc_82471174;
	// bl 0x82545cc0
	ctx.lr = 0x82471170;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82471174:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471188;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82471188:
	// lwz r11,19736(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 19736);
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// addi r10,r11,-1
	ctx.r10.s64 = ctx.r11.s64 + -1;
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r27.u32);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r10,19736(r25)
	PPC_STORE_U32(ctx.r25.u32 + 19736, ctx.r10.u32);
	// beq cr6,0x82470ea0
	if (ctx.cr6.eq) goto loc_82470EA0;
loc_824711A8:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824711B0"))) PPC_WEAK_FUNC(sub_824711B0);
PPC_FUNC_IMPL(__imp__sub_824711B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x824711B8;
	__savegprlr_25(ctx, base);
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	ctx.r31.s64 = 0;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// li r5,79
	ctx.r5.s64 = 79;
	// li r4,0
	ctx.r4.s64 = 0;
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// addi r3,r1,305
	ctx.r3.s64 = ctx.r1.s64 + 305;
	// mr r29,r6
	ctx.r29.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// bl 0x82e29500
	ctx.lr = 0x824711E8;
	sub_82E29500(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// lwz r11,288(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 288);
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r31.u32);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471220;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x8247122C;
	sub_82302D08(ctx, base);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x82309a60
	ctx.lr = 0x82471234;
	sub_82309A60(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// addi r26,r11,-29761
	ctx.r26.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x8247128c
	if (ctx.cr6.eq) goto loc_8247128C;
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247128c
	if (ctx.cr6.eq) goto loc_8247128C;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471268
	if (!ctx.cr6.eq) goto loc_82471268;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82471268:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// addi r4,r11,-14280
	ctx.r4.s64 = ctx.r11.s64 + -14280;
	// bl 0x8242a860
	ctx.lr = 0x82471278;
	sub_8242A860(ctx, base);
	// addi r4,r1,272
	ctx.r4.s64 = ctx.r1.s64 + 272;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x82471284;
	sub_82302D08(ctx, base);
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x82309a60
	ctx.lr = 0x8247128C;
	sub_82309A60(ctx, base);
loc_8247128C:
	// lwz r5,68(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpwi cr6,r5,1
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 1, ctx.xer);
	// beq cr6,0x824712a8
	if (ctx.cr6.eq) goto loc_824712A8;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14288
	ctx.r4.s64 = ctx.r11.s64 + -14288;
	// bl 0x824066d0
	ctx.lr = 0x824712A8;
	sub_824066D0(ctx, base);
loc_824712A8:
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r4,19868(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19868);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x824712d0
	if (!ctx.cr6.eq) goto loc_824712D0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246f498
	ctx.lr = 0x824712C4;
	sub_8246F498(ctx, base);
	// stw r3,19868(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19868, ctx.r3.u32);
	// bl 0x8246f558
	ctx.lr = 0x824712CC;
	sub_8246F558(ctx, base);
	// lwz r4,19868(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19868);
loc_824712D0:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x824712D8;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471478
	if (ctx.cr6.eq) goto loc_82471478;
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x82471360
	if (!ctx.cr6.eq) goto loc_82471360;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x82471360
	if (ctx.cr6.eq) goto loc_82471360;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471314
	if (!ctx.cr6.eq) goto loc_82471314;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471310;
	sub_823099B0(ctx, base);
	// b 0x8247131c
	goto loc_8247131C;
loc_82471314:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247131C;
	sub_8242BA60(ctx, base);
loc_8247131C:
	// lwz r11,244(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	// lwz r6,240(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471330
	if (!ctx.cr6.eq) goto loc_82471330;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471330:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471344
	if (!ctx.cr6.eq) goto loc_82471344;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82471344:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r7,r1,304
	ctx.r7.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14308
	ctx.r4.s64 = ctx.r11.s64 + -14308;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x82471358;
	sub_824211F0(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// b 0x824718b0
	goto loc_824718B0;
loc_82471360:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x824713f8
	if (ctx.cr6.eq) goto loc_824713F8;
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,23,23
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x824713f8
	if (ctx.cr6.eq) goto loc_824713F8;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471398
	if (!ctx.cr6.eq) goto loc_82471398;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471394;
	sub_823099B0(ctx, base);
	// b 0x824713a0
	goto loc_824713A0;
loc_82471398:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824713A0;
	sub_8242BA60(ctx, base);
loc_824713A0:
	// lwz r11,228(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// lwz r7,224(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 224);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824713b4
	if (!ctx.cr6.eq) goto loc_824713B4;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_824713B4:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824713c8
	if (!ctx.cr6.eq) goto loc_824713C8;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_824713C8:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824713dc
	if (!ctx.cr6.eq) goto loc_824713DC;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_824713DC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14320
	ctx.r4.s64 = ctx.r11.s64 + -14320;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x824713F0;
	sub_824211F0(ctx, base);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// b 0x824718b0
	goto loc_824718B0;
loc_824713F8:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471418
	if (!ctx.cr6.eq) goto loc_82471418;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471414;
	sub_823099B0(ctx, base);
	// b 0x82471420
	goto loc_82471420;
loc_82471418:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82471420;
	sub_8242BA60(ctx, base);
loc_82471420:
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r7,160(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471434
	if (!ctx.cr6.eq) goto loc_82471434;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_82471434:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471448
	if (!ctx.cr6.eq) goto loc_82471448;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471448:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247145c
	if (!ctx.cr6.eq) goto loc_8247145C;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_8247145C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14332
	ctx.r4.s64 = ctx.r11.s64 + -14332;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x82471470;
	sub_824211F0(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// b 0x824718b0
	goto loc_824718B0;
loc_82471478:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,356(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 356);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247148C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824716f8
	if (ctx.cr6.eq) goto loc_824716F8;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x824715e0
	if (ctx.cr6.eq) goto loc_824715E0;
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,23,23
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100;
	// ble cr6,0x82471548
	if (!ctx.cr6.gt) goto loc_82471548;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x824714c4
	if (ctx.cr6.eq) goto loc_824714C4;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r31,r11,-14336
	ctx.r31.s64 = ctx.r11.s64 + -14336;
	// b 0x824714c8
	goto loc_824714C8;
loc_824714C4:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
loc_824714C8:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824714e8
	if (!ctx.cr6.eq) goto loc_824714E8;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x824714E4;
	sub_823099B0(ctx, base);
	// b 0x824714f0
	goto loc_824714F0;
loc_824714E8:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824714F0;
	sub_8242BA60(ctx, base);
loc_824714F0:
	// lwz r11,260(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// lwz r8,256(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471504
	if (!ctx.cr6.eq) goto loc_82471504;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
loc_82471504:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471518
	if (!ctx.cr6.eq) goto loc_82471518;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471518:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247152c
	if (!ctx.cr6.eq) goto loc_8247152C;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_8247152C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-14348
	ctx.r4.s64 = ctx.r11.s64 + -14348;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x82471540;
	sub_824211F0(ctx, base);
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// b 0x824718b0
	goto loc_824718B0;
loc_82471548:
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247155c
	if (!ctx.cr6.eq) goto loc_8247155C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r31,r11,-14356
	ctx.r31.s64 = ctx.r11.s64 + -14356;
	// b 0x82471560
	goto loc_82471560;
loc_8247155C:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
loc_82471560:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471580
	if (!ctx.cr6.eq) goto loc_82471580;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x8247157C;
	sub_823099B0(ctx, base);
	// b 0x82471588
	goto loc_82471588;
loc_82471580:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82471588;
	sub_8242BA60(ctx, base);
loc_82471588:
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r8,192(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247159c
	if (!ctx.cr6.eq) goto loc_8247159C;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
loc_8247159C:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r7,96(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824715b0
	if (!ctx.cr6.eq) goto loc_824715B0;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_824715B0:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824715c4
	if (!ctx.cr6.eq) goto loc_824715C4;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_824715C4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-14368
	ctx.r4.s64 = ctx.r11.s64 + -14368;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x824715D8;
	sub_824211F0(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// b 0x824718b0
	goto loc_824718B0;
loc_824715E0:
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// beq cr6,0x82471678
	if (ctx.cr6.eq) goto loc_82471678;
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82471678
	if (!ctx.cr6.eq) goto loc_82471678;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471618
	if (!ctx.cr6.eq) goto loc_82471618;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471614;
	sub_823099B0(ctx, base);
	// b 0x82471620
	goto loc_82471620;
loc_82471618:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82471620;
	sub_8242BA60(ctx, base);
loc_82471620:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471634
	if (!ctx.cr6.eq) goto loc_82471634;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_82471634:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471648
	if (!ctx.cr6.eq) goto loc_82471648;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471648:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247165c
	if (!ctx.cr6.eq) goto loc_8247165C;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_8247165C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14384
	ctx.r4.s64 = ctx.r11.s64 + -14384;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x82471670;
	sub_824211F0(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// b 0x824718b0
	goto loc_824718B0;
loc_82471678:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471698
	if (!ctx.cr6.eq) goto loc_82471698;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471694;
	sub_823099B0(ctx, base);
	// b 0x824716a0
	goto loc_824716A0;
loc_82471698:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824716A0;
	sub_8242BA60(ctx, base);
loc_824716A0:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r7,128(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824716b4
	if (!ctx.cr6.eq) goto loc_824716B4;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_824716B4:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824716c8
	if (!ctx.cr6.eq) goto loc_824716C8;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_824716C8:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824716dc
	if (!ctx.cr6.eq) goto loc_824716DC;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_824716DC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14332
	ctx.r4.s64 = ctx.r11.s64 + -14332;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x824716F0;
	sub_824211F0(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// b 0x824718b0
	goto loc_824718B0;
loc_824716F8:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x82471834
	if (ctx.cr6.eq) goto loc_82471834;
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,23,23
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100;
	// ble cr6,0x824717ac
	if (!ctx.cr6.gt) goto loc_824717AC;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82471728
	if (ctx.cr6.eq) goto loc_82471728;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r31,r11,-14336
	ctx.r31.s64 = ctx.r11.s64 + -14336;
	// b 0x8247172c
	goto loc_8247172C;
loc_82471728:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
loc_8247172C:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247174c
	if (!ctx.cr6.eq) goto loc_8247174C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471748;
	sub_823099B0(ctx, base);
	// b 0x82471754
	goto loc_82471754;
loc_8247174C:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82471754;
	sub_8242BA60(ctx, base);
loc_82471754:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r8,144(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471768
	if (!ctx.cr6.eq) goto loc_82471768;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
loc_82471768:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247177c
	if (!ctx.cr6.eq) goto loc_8247177C;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_8247177C:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471790
	if (!ctx.cr6.eq) goto loc_82471790;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82471790:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-14348
	ctx.r4.s64 = ctx.r11.s64 + -14348;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x824717A4;
	sub_824211F0(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// b 0x824718b0
	goto loc_824718B0;
loc_824717AC:
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82471834
	if (ctx.cr6.eq) goto loc_82471834;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824717d4
	if (!ctx.cr6.eq) goto loc_824717D4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x824717D0;
	sub_823099B0(ctx, base);
	// b 0x824717dc
	goto loc_824717DC;
loc_824717D4:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824717DC;
	sub_8242BA60(ctx, base);
loc_824717DC:
	// lwz r11,180(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r7,176(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824717f0
	if (!ctx.cr6.eq) goto loc_824717F0;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_824717F0:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471804
	if (!ctx.cr6.eq) goto loc_82471804;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471804:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471818
	if (!ctx.cr6.eq) goto loc_82471818;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82471818:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14320
	ctx.r4.s64 = ctx.r11.s64 + -14320;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247182C;
	sub_824211F0(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// b 0x824718b0
	goto loc_824718B0;
loc_82471834:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82471854
	if (!ctx.cr6.eq) goto loc_82471854;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82471850;
	sub_823099B0(ctx, base);
	// b 0x8247185c
	goto loc_8247185C;
loc_82471854:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247185C;
	sub_8242BA60(ctx, base);
loc_8247185C:
	// lwz r11,212(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lwz r7,208(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471870
	if (!ctx.cr6.eq) goto loc_82471870;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
loc_82471870:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471884
	if (!ctx.cr6.eq) goto loc_82471884;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82471884:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471898
	if (!ctx.cr6.eq) goto loc_82471898;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82471898:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r8,r1,304
	ctx.r8.s64 = ctx.r1.s64 + 304;
	// addi r4,r11,-14332
	ctx.r4.s64 = ctx.r11.s64 + -14332;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824211f0
	ctx.lr = 0x824718AC;
	sub_824211F0(ctx, base);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
loc_824718B0:
	// bl 0x82309a60
	ctx.lr = 0x824718B4;
	sub_82309A60(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x824718BC;
	sub_82309A60(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x824718C4;
	sub_82309A60(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824718D0"))) PPC_WEAK_FUNC(sub_824718D0);
PPC_FUNC_IMPL(__imp__sub_824718D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x824718D8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471908
	if (!ctx.cr6.eq) goto loc_82471908;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246f948
	ctx.lr = 0x824718FC;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471904;
	sub_8246FA08(ctx, base);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
loc_82471908:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19880(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247193c
	if (ctx.cr6.eq) goto loc_8247193C;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471940
	if (!ctx.cr6.eq) goto loc_82471940;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246f948
	ctx.lr = 0x82471928;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471930;
	sub_8246FA08(ctx, base);
	// lwz r10,19880(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// b 0x82471940
	goto loc_82471940;
loc_8247193C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82471940:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471968
	if (!ctx.cr6.eq) goto loc_82471968;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x8247195C;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x82471964;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82471968:
	// lwz r10,19880(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471994
	if (!ctx.cr6.eq) goto loc_82471994;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82471988;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82471990;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82471994:
	// lwz r10,19880(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824719f0
	if (ctx.cr6.eq) goto loc_824719F0;
	// lwz r3,19880(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x824719d8
	if (!ctx.cr6.eq) goto loc_824719D8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x824719C8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x824719D0;
	sub_824455B8(ctx, base);
	// lwz r3,19880(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19880);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_824719D8:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x824719f0
	if (!ctx.cr6.eq) goto loc_824719F0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824719F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824719F0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824719F8"))) PPC_WEAK_FUNC(sub_824719F8);
PPC_FUNC_IMPL(__imp__sub_824719F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471a3c
	if (!ctx.cr6.eq) goto loc_82471A3C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246f948
	ctx.lr = 0x82471A30;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471A38;
	sub_8246FA08(ctx, base);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
loc_82471A3C:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82471A68"))) PPC_WEAK_FUNC(sub_82471A68);
PPC_FUNC_IMPL(__imp__sub_82471A68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82471A70;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471aa0
	if (!ctx.cr6.eq) goto loc_82471AA0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246f948
	ctx.lr = 0x82471A94;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471A9C;
	sub_8246FA08(ctx, base);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
loc_82471AA0:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r10,19884(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x82471ad4
	if (ctx.cr6.eq) goto loc_82471AD4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471ad8
	if (!ctx.cr6.eq) goto loc_82471AD8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8246f948
	ctx.lr = 0x82471AC0;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471AC8;
	sub_8246FA08(ctx, base);
	// lwz r10,19884(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// b 0x82471ad8
	goto loc_82471AD8;
loc_82471AD4:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82471AD8:
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,60(r10)
	PPC_STORE_U32(ctx.r10.u32 + 60, ctx.r11.u32);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471b00
	if (!ctx.cr6.eq) goto loc_82471B00;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x82471AF4;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x82471AFC;
	sub_82407960(ctx, base);
	// lwz r11,1244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82471B00:
	// lwz r10,19884(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r11,216(r10)
	PPC_STORE_U32(ctx.r10.u32 + 216, ctx.r11.u32);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471b2c
	if (!ctx.cr6.eq) goto loc_82471B2C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82471B20;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82471B28;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82471B2C:
	// lwz r10,19884(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// stw r11,52(r10)
	PPC_STORE_U32(ctx.r10.u32 + 52, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82471b88
	if (ctx.cr6.eq) goto loc_82471B88;
	// lwz r3,19884(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bne cr6,0x82471b70
	if (!ctx.cr6.eq) goto loc_82471B70;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82471B60;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82471B68;
	sub_824455B8(ctx, base);
	// lwz r3,19884(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19884);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82471B70:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82471b88
	if (!ctx.cr6.eq) goto loc_82471B88;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471B88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82471B88:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82471B90"))) PPC_WEAK_FUNC(sub_82471B90);
PPC_FUNC_IMPL(__imp__sub_82471B90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
	// lwz r30,60(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82471bd4
	if (!ctx.cr6.eq) goto loc_82471BD4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8246f948
	ctx.lr = 0x82471BC8;
	sub_8246F948(ctx, base);
	// stw r3,19876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82471BD0;
	sub_8246FA08(ctx, base);
	// lwz r11,19876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19876);
loc_82471BD4:
	// subf r11,r30,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r30.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r3,r11,1
	ctx.r3.u64 = ctx.r11.u64 ^ 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82471C00"))) PPC_WEAK_FUNC(sub_82471C00);
PPC_FUNC_IMPL(__imp__sub_82471C00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82471C08;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,368(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 368);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471C2C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471e88
	if (ctx.cr6.eq) goto loc_82471E88;
	// lis r28,-31970
	ctx.r28.s64 = -2095185920;
	// lwz r4,19908(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 19908);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82471c5c
	if (!ctx.cr6.eq) goto loc_82471C5C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x824708c0
	ctx.lr = 0x82471C50;
	sub_824708C0(ctx, base);
	// stw r3,19908(r28)
	PPC_STORE_U32(ctx.r28.u32 + 19908, ctx.r3.u32);
	// bl 0x82470980
	ctx.lr = 0x82471C58;
	sub_82470980(ctx, base);
	// lwz r4,19908(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 19908);
loc_82471C5C:
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// bl 0x822e1bd0
	ctx.lr = 0x82471C64;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471ce4
	if (ctx.cr6.eq) goto loc_82471CE4;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// clrlwi r11,r11,16
	ctx.r11.u64 = ctx.r11.u32 & 0xFFFF;
	// oris r29,r11,4
	ctx.r29.u64 = ctx.r11.u64 | 262144;
	// bl 0x82741028
	ctx.lr = 0x82471C88;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471c94
	if (ctx.cr6.eq) goto loc_82471C94;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r29.u32);
loc_82471C94:
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// lwz r29,72(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// bl 0x82741028
	ctx.lr = 0x82471CA8;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471cb4
	if (ctx.cr6.eq) goto loc_82471CB4;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r29.u32);
loc_82471CB4:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246b240
	ctx.lr = 0x82471CBC;
	sub_8246B240(ctx, base);
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,380(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 380);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82471CE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82471e3c
	goto loc_82471E3C;
loc_82471CE4:
	// bl 0x822e1b30
	ctx.lr = 0x82471CE8;
	sub_822E1B30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// bl 0x822e1bd0
	ctx.lr = 0x82471CF4;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471d2c
	if (ctx.cr6.eq) goto loc_82471D2C;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// clrlwi r11,r11,16
	ctx.r11.u64 = ctx.r11.u32 & 0xFFFF;
	// oris r31,r11,3
	ctx.r31.u64 = ctx.r11.u64 | 196608;
	// bl 0x82741028
	ctx.lr = 0x82471D18;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471e88
	if (ctx.cr6.eq) goto loc_82471E88;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82471D2C:
	// bl 0x823fa688
	ctx.lr = 0x82471D30;
	sub_823FA688(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// bl 0x822e1bd0
	ctx.lr = 0x82471D3C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471db4
	if (ctx.cr6.eq) goto loc_82471DB4;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// clrlwi r11,r11,16
	ctx.r11.u64 = ctx.r11.u32 & 0xFFFF;
	// oris r29,r11,4
	ctx.r29.u64 = ctx.r11.u64 | 262144;
	// bl 0x82741028
	ctx.lr = 0x82471D60;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471d6c
	if (ctx.cr6.eq) goto loc_82471D6C;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r29.u32);
loc_82471D6C:
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// lwz r30,72(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// bl 0x82741028
	ctx.lr = 0x82471D80;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471d8c
	if (ctx.cr6.eq) goto loc_82471D8C;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r30.u32);
loc_82471D8C:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246b240
	ctx.lr = 0x82471D94;
	sub_8246B240(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471DA4;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471e3c
	if (ctx.cr6.eq) goto loc_82471E3C;
	// lis r11,1
	ctx.r11.s64 = 65536;
	// b 0x82471e38
	goto loc_82471E38;
loc_82471DB4:
	// bl 0x823fa898
	ctx.lr = 0x82471DB8;
	sub_823FA898(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// bl 0x822e1bd0
	ctx.lr = 0x82471DC4;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82471e88
	if (ctx.cr6.eq) goto loc_82471E88;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// clrlwi r11,r11,16
	ctx.r11.u64 = ctx.r11.u32 & 0xFFFF;
	// oris r29,r11,4
	ctx.r29.u64 = ctx.r11.u64 | 262144;
	// bl 0x82741028
	ctx.lr = 0x82471DE8;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471df4
	if (ctx.cr6.eq) goto loc_82471DF4;
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r29.u32);
loc_82471DF4:
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// lwz r30,72(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// bl 0x82741028
	ctx.lr = 0x82471E08;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471e14
	if (ctx.cr6.eq) goto loc_82471E14;
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r30.u32);
loc_82471E14:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8246b240
	ctx.lr = 0x82471E1C;
	sub_8246B240(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471E2C;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471e3c
	if (ctx.cr6.eq) goto loc_82471E3C;
	// lis r11,7
	ctx.r11.s64 = 458752;
loc_82471E38:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_82471E3C:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// rlwinm r8,r30,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + -4);
	// rlwinm r9,r10,0,0,7
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFF000000;
	// addis r9,r9,256
	ctx.r9.s64 = ctx.r9.s64 + 16777216;
	// rlwimi r9,r10,0,8,31
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r10.u32, 0) & 0xFFFFFF) | (ctx.r9.u64 & 0xFFFFFFFFFF000000);
	// stw r9,-4(r11)
	PPC_STORE_U32(ctx.r11.u32 + -4, ctx.r9.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r7,r30,r11
	ctx.r7.s64 = ctx.r11.s64 - ctx.r30.s64;
	// add r11,r9,r10
	ctx.r11.u64 = ctx.r9.u64 + ctx.r10.u64;
	// lbz r11,-4(r11)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r11.u32 + -4);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rlwimi r7,r11,24,0,7
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r11.u32, 24) & 0xFF000000) | (ctx.r7.u64 & 0xFFFFFFFF00FFFFFF);
	// stwx r7,r8,r10
	PPC_STORE_U32(ctx.r8.u32 + ctx.r10.u32, ctx.r7.u32);
loc_82471E88:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82471E90"))) PPC_WEAK_FUNC(sub_82471E90);
PPC_FUNC_IMPL(__imp__sub_82471E90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,20140(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20140);
	// clrlwi r9,r11,31
	ctx.r9.u64 = ctx.r11.u32 & 0x1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82471efc
	if (!ctx.cr6.eq) goto loc_82471EFC;
	// ori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 | 1;
	// lis r9,-32249
	ctx.r9.s64 = -2113470464;
	// addi r31,r9,-13600
	ctx.r31.s64 = ctx.r9.s64 + -13600;
	// stw r11,20140(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20140, ctx.r11.u32);
	// bl 0x824198c0
	ctx.lr = 0x82471ED0;
	sub_824198C0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418bb8
	ctx.lr = 0x82471ED8;
	sub_82418BB8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// bne cr6,0x82471ef0
	if (!ctx.cr6.eq) goto loc_82471EF0;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,20136(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20136, ctx.r11.u32);
	// b 0x82471f0c
	goto loc_82471F0C;
loc_82471EF0:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,20136(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20136, ctx.r11.u32);
	// b 0x82471fec
	goto loc_82471FEC;
loc_82471EFC:
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,20136(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82471fec
	if (!ctx.cr6.eq) goto loc_82471FEC;
loc_82471F0C:
	// li r3,92
	ctx.r3.s64 = 92;
	// bl 0x82545e80
	ctx.lr = 0x82471F14;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471f28
	if (ctx.cr6.eq) goto loc_82471F28;
	// bl 0x82532810
	ctx.lr = 0x82471F20;
	sub_82532810(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82471f2c
	goto loc_82471F2C;
loc_82471F28:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82471F2C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471F38;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471f44
	if (ctx.cr6.eq) goto loc_82471F44;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_82471F44:
	// li r3,92
	ctx.r3.s64 = 92;
	// bl 0x82545e80
	ctx.lr = 0x82471F4C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471f60
	if (ctx.cr6.eq) goto loc_82471F60;
	// bl 0x825326b8
	ctx.lr = 0x82471F58;
	sub_825326B8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82471f64
	goto loc_82471F64;
loc_82471F60:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82471F64:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471F70;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471f7c
	if (ctx.cr6.eq) goto loc_82471F7C;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_82471F7C:
	// li r3,92
	ctx.r3.s64 = 92;
	// bl 0x82545e80
	ctx.lr = 0x82471F84;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471f98
	if (ctx.cr6.eq) goto loc_82471F98;
	// bl 0x825330a0
	ctx.lr = 0x82471F90;
	sub_825330A0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82471f9c
	goto loc_82471F9C;
loc_82471F98:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82471F9C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471FA8;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471fb4
	if (ctx.cr6.eq) goto loc_82471FB4;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_82471FB4:
	// li r3,92
	ctx.r3.s64 = 92;
	// bl 0x82545e80
	ctx.lr = 0x82471FBC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471fd0
	if (ctx.cr6.eq) goto loc_82471FD0;
	// bl 0x82535388
	ctx.lr = 0x82471FC8;
	sub_82535388(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82471fd4
	goto loc_82471FD4;
loc_82471FD0:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82471FD4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82471FE0;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82471fec
	if (ctx.cr6.eq) goto loc_82471FEC;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_82471FEC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82472008"))) PPC_WEAK_FUNC(sub_82472008);
PPC_FUNC_IMPL(__imp__sub_82472008) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// bl 0x82471e90
	ctx.lr = 0x82472030;
	sub_82471E90(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82472048"))) PPC_WEAK_FUNC(sub_82472048);
PPC_FUNC_IMPL(__imp__sub_82472048) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82472050;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// addi r30,r11,-1
	ctx.r30.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// blt cr6,0x824720a8
	if (ctx.cr6.lt) goto loc_824720A8;
	// rlwinm r31,r30,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 2) & 0xFFFFFFFC;
loc_82472070:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r28,r31,r11
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82472090
	if (ctx.cr6.eq) goto loc_82472090;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82532008
	ctx.lr = 0x82472088;
	sub_82532008(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82545ee8
	ctx.lr = 0x82472090;
	sub_82545EE8(ctx, base);
loc_82472090:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// stwx r27,r31,r11
	PPC_STORE_U32(ctx.r31.u32 + ctx.r11.u32, ctx.r27.u32);
	// addi r31,r31,-4
	ctx.r31.s64 = ctx.r31.s64 + -4;
	// bge cr6,0x82472070
	if (!ctx.cr6.lt) goto loc_82472070;
loc_824720A8:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,4(r29)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82416660
	ctx.lr = 0x824720C4;
	sub_82416660(ctx, base);
	// lwz r30,0(r29)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x824720fc
	if (ctx.cr6.eq) goto loc_824720FC;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824720e8
	if (!ctx.cr6.eq) goto loc_824720E8;
	// bl 0x82545cc0
	ctx.lr = 0x824720E4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_824720E8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824720FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824720FC:
	// stw r27,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r27.u32);
	// stw r27,8(r29)
	PPC_STORE_U32(ctx.r29.u32 + 8, ctx.r27.u32);
	// stw r27,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r27.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82472110"))) PPC_WEAK_FUNC(sub_82472110);
PPC_FUNC_IMPL(__imp__sub_82472110) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82472118;
	__savegprlr_14(ctx, base);
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r6
	ctx.r25.u64 = ctx.r6.u64;
	// stw r8,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, ctx.r8.u32);
	// mr r22,r10
	ctx.r22.u64 = ctx.r10.u64;
	// stw r9,436(r1)
	PPC_STORE_U32(ctx.r1.u32 + 436, ctx.r9.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// mr r21,r4
	ctx.r21.u64 = ctx.r4.u64;
	// addi r4,r11,-13564
	ctx.r4.s64 = ctx.r11.s64 + -13564;
	// stw r25,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, ctx.r25.u32);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// stw r22,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, ctx.r22.u32);
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r20,r7
	ctx.r20.u64 = ctx.r7.u64;
	// bl 0x823099b0
	ctx.lr = 0x82472154;
	sub_823099B0(ctx, base);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lwz r30,52(r22)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r22.u32 + 52);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r3,r10,-28548
	ctx.r3.s64 = ctx.r10.s64 + -28548;
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r3,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r3.u32);
	// bne cr6,0x82472184
	if (!ctx.cr6.eq) goto loc_82472184;
	// bl 0x8243aa40
	ctx.lr = 0x82472178;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82472180;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82472184:
	// cmplw cr6,r30,r11
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x824721a0
	if (!ctx.cr6.eq) goto loc_824721A0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82424430
	ctx.lr = 0x82472198;
	sub_82424430(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// stw r22,444(r1)
	PPC_STORE_U32(ctx.r1.u32 + 444, ctx.r22.u32);
loc_824721A0:
	// lwz r19,112(r29)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r29.u32 + 112);
	// li r24,0
	ctx.r24.s64 = 0;
	// lis r18,-31973
	ctx.r18.s64 = -2095382528;
	// cmplwi cr6,r19,0
	ctx.cr6.compare<uint32_t>(ctx.r19.u32, 0, ctx.xer);
	// beq cr6,0x824727b4
	if (ctx.cr6.eq) goto loc_824727B4;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lwz r16,452(r1)
	ctx.r16.u64 = PPC_LOAD_U32(ctx.r1.u32 + 452);
	// lis r26,-31970
	ctx.r26.s64 = -2095185920;
	// addi r23,r11,-29761
	ctx.r23.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r11,r11,-28532
	ctx.r11.s64 = ctx.r11.s64 + -28532;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r11,r11,-13576
	ctx.r11.s64 = ctx.r11.s64 + -13576;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r11,r11,-13592
	ctx.r11.s64 = ctx.r11.s64 + -13592;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r15,r11,-4760
	ctx.r15.s64 = ctx.r11.s64 + -4760;
	// li r11,1
	ctx.r11.s64 = 1;
	// rldicr r17,r11,35,63
	ctx.r17.u64 = __builtin_rotateleft64(ctx.r11.u64, 35) & 0xFFFFFFFFFFFFFFFF;
loc_82472200:
	// lwz r11,0(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 0);
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
	// lwz r11,344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 344);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472218;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824727a8
	if (ctx.cr6.eq) goto loc_824727A8;
	// lwz r11,4(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 4);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247223c
	if (!ctx.cr6.eq) goto loc_8247223C;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823099b0
	ctx.lr = 0x82472238;
	sub_823099B0(ctx, base);
	// b 0x82472244
	goto loc_82472244;
loc_8247223C:
	// addi r4,r19,44
	ctx.r4.s64 = ctx.r19.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82472244;
	sub_8242BA60(ctx, base);
loc_82472244:
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82302d08
	ctx.lr = 0x82472250;
	sub_82302D08(ctx, base);
	// lwz r11,160(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// stw r24,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824722ac
	if (ctx.cr6.eq) goto loc_824722AC;
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r24,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r24.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824722ac
	if (ctx.cr6.eq) goto loc_824722AC;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472288
	if (!ctx.cr6.eq) goto loc_82472288;
	// bl 0x82545cc0
	ctx.lr = 0x82472284;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472288:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824722A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r3.u32);
loc_824722AC:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,156(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82416660
	ctx.lr = 0x824722C8;
	sub_82416660(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472300
	if (ctx.cr6.eq) goto loc_82472300;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824722ec
	if (!ctx.cr6.eq) goto loc_824722EC;
	// bl 0x82545cc0
	ctx.lr = 0x824722E8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_824722EC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472300;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472300:
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// stw r24,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r24.u32);
	// stw r24,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r24.u32);
	// stw r24,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r24.u32);
	// lwz r4,19900(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19900);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82472330
	if (!ctx.cr6.eq) goto loc_82472330;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x82470410
	ctx.lr = 0x82472324;
	sub_82470410(ctx, base);
	// stw r3,19900(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19900, ctx.r3.u32);
	// bl 0x824704d0
	ctx.lr = 0x8247232C;
	sub_824704D0(ctx, base);
	// lwz r4,19900(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19900);
loc_82472330:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82472338;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// bne cr6,0x82472348
	if (!ctx.cr6.eq) goto loc_82472348;
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_82472348:
	// ld r10,76(r19)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r19.u32 + 76);
	// rlwinm r10,r10,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x82472370
	if (ctx.cr6.eq) goto loc_82472370;
	// lwz r9,52(r19)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r19.u32 + 52);
	// li r28,1
	ctx.r28.s64 = 1;
	// lwz r9,204(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 204);
	// rlwinm r9,r9,0,15,15
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x10000;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82472374
	if (!ctx.cr6.eq) goto loc_82472374;
loc_82472370:
	// mr r28,r24
	ctx.r28.u64 = ctx.r24.u64;
loc_82472374:
	// ori r27,r16,2
	ctx.r27.u64 = ctx.r16.u64 | 2;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247286c
	if (ctx.cr6.eq) goto loc_8247286C;
	// lwz r28,128(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x824723ac
	if (ctx.cr6.eq) goto loc_824723AC;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x824723ac
	if (ctx.cr6.eq) goto loc_824723AC;
	// lwz r11,52(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// li r22,1
	ctx.r22.s64 = 1;
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,15,15
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x10000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824723b0
	if (!ctx.cr6.eq) goto loc_824723B0;
loc_824723AC:
	// mr r22,r24
	ctx.r22.u64 = ctx.r24.u64;
loc_824723B0:
	// lwz r11,68(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 68);
	// mr r23,r24
	ctx.r23.u64 = ctx.r24.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824727a0
	if (!ctx.cr6.gt) goto loc_824727A0;
loc_824723C0:
	// lwz r11,72(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 72);
	// mr r27,r24
	ctx.r27.u64 = ctx.r24.u64;
	// lwz r9,412(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 412);
	// mullw r11,r23,r11
	ctx.r11.s64 = int64_t(ctx.r23.s32) * int64_t(ctx.r11.s32);
	// lwz r10,100(r19)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r19.u32 + 100);
	// lwz r3,428(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 428);
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// add r26,r11,r10
	ctx.r26.u64 = ctx.r11.u64 + ctx.r10.u64;
	// beq cr6,0x82472418
	if (ctx.cr6.eq) goto loc_82472418;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// rotlwi r31,r10,0
	ctx.r31.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824723FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpw cr6,r31,r3
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r3.s32, ctx.xer);
	// bge cr6,0x82472418
	if (!ctx.cr6.lt) goto loc_82472418;
	// lwz r11,72(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 72);
	// lwz r10,436(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 436);
	// mullw r11,r23,r11
	ctx.r11.s64 = int64_t(ctx.r23.s32) * int64_t(ctx.r11.s32);
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// add r27,r11,r10
	ctx.r27.u64 = ctx.r11.u64 + ctx.r10.u64;
loc_82472418:
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// mr r29,r24
	ctx.r29.u64 = ctx.r24.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82472788
	if (!ctx.cr6.gt) goto loc_82472788;
	// mr r25,r24
	ctx.r25.u64 = ctx.r24.u64;
loc_8247242C:
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r24.u32);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// stw r24,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r24.u32);
	// stw r24,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r24.u32);
	// lwz r11,72(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 72);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mullw r11,r11,r29
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r29.s32);
	// add r30,r11,r10
	ctx.r30.u64 = ctx.r11.u64 + ctx.r10.u64;
	// beq cr6,0x82472554
	if (ctx.cr6.eq) goto loc_82472554;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpw cr6,r29,r10
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82472554
	if (!ctx.cr6.lt) goto loc_82472554;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// add r31,r11,r10
	ctx.r31.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247249c
	if (ctx.cr6.eq) goto loc_8247249C;
	// cmplw cr6,r31,r30
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x824726bc
	if (ctx.cr6.eq) goto loc_824726BC;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// ori r6,r16,2
	ctx.r6.u64 = ctx.r16.u64 | 2;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,296(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 296);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472494;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x824726bc
	if (!ctx.cr6.eq) goto loc_824726BC;
loc_8247249C:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// ori r8,r16,2
	ctx.r8.u64 = ctx.r16.u64 | 2;
	// lwz r7,444(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 444);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,308(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 308);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824724C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// beq cr6,0x8247258c
	if (ctx.cr6.eq) goto loc_8247258C;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// lwzx r31,r11,r25
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r25.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247258c
	if (ctx.cr6.eq) goto loc_8247258C;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rldicr r12,r12,35,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 35) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247258c
	if (!ctx.cr6.eq) goto loc_8247258C;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r30,52(r28)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// lwz r11,19884(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82472524
	if (!ctx.cr6.eq) goto loc_82472524;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x8246fc58
	ctx.lr = 0x82472510;
	sub_8246FC58(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r3,19884(r11)
	PPC_STORE_U32(ctx.r11.u32 + 19884, ctx.r3.u32);
	// bl 0x82471a68
	ctx.lr = 0x8247251C;
	sub_82471A68(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r11,19884(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19884);
loc_82472524:
	// cmplw cr6,r30,r11
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8247255c
	if (!ctx.cr6.eq) goto loc_8247255C;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// lwz r10,444(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 444);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// beq cr6,0x82472560
	if (ctx.cr6.eq) goto loc_82472560;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,36,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 36) & 0xFFFFFFFFFFFFFFFF;
	// or r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 | ctx.r12.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// b 0x8247258c
	goto loc_8247258C;
loc_82472554:
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
	// b 0x8247249c
	goto loc_8247249C;
loc_8247255C:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
loc_82472560:
	// or r11,r11,r17
	ctx.r11.u64 = ctx.r11.u64 | ctx.r17.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r9,r16
	ctx.r9.u64 = ctx.r16.u64;
	// mr r8,r20
	ctx.r8.u64 = ctx.r20.u64;
	// mr r7,r15
	ctx.r7.u64 = ctx.r15.u64;
	// mr r6,r21
	ctx.r6.u64 = ctx.r21.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x823f2460
	ctx.lr = 0x8247258C;
	sub_823F2460(ctx, base);
loc_8247258C:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r30,120(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824725a0
	if (!ctx.cr6.eq) goto loc_824725A0;
	// lwz r30,88(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_824725A0:
	// lwz r11,4(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 4);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824725bc
	if (!ctx.cr6.eq) goto loc_824725BC;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823099b0
	ctx.lr = 0x824725B8;
	sub_823099B0(ctx, base);
	// b 0x824725c4
	goto loc_824725C4;
loc_824725BC:
	// addi r4,r19,44
	ctx.r4.s64 = ctx.r19.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824725C4;
	sub_8242BA60(ctx, base);
loc_824725C4:
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r31,136(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824725d8
	if (!ctx.cr6.eq) goto loc_824725D8;
	// lwz r31,88(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_824725D8:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x82416b98
	ctx.lr = 0x824725E4;
	sub_82416B98(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x824211f0
	ctx.lr = 0x82472600;
	sub_824211F0(ctx, base);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r24,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247265c
	if (ctx.cr6.eq) goto loc_8247265C;
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r24,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r24.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247265c
	if (ctx.cr6.eq) goto loc_8247265C;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472638
	if (!ctx.cr6.eq) goto loc_82472638;
	// bl 0x82545cc0
	ctx.lr = 0x82472634;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472638:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472658;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
loc_8247265C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82416660
	ctx.lr = 0x82472678;
	sub_82416660(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824726b0
	if (ctx.cr6.eq) goto loc_824726B0;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247269c
	if (!ctx.cr6.eq) goto loc_8247269C;
	// bl 0x82545cc0
	ctx.lr = 0x82472698;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_8247269C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824726B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824726B0:
	// stw r24,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r24.u32);
	// stw r24,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r24.u32);
	// stw r24,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r24.u32);
loc_824726BC:
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r24,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472714
	if (ctx.cr6.eq) goto loc_82472714;
	// lwz r31,120(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r24,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r24.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82472714
	if (ctx.cr6.eq) goto loc_82472714;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824726f0
	if (!ctx.cr6.eq) goto loc_824726F0;
	// bl 0x82545cc0
	ctx.lr = 0x824726EC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_824726F0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472710;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r3.u32);
loc_82472714:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,124(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82416660
	ctx.lr = 0x82472730;
	sub_82416660(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472768
	if (ctx.cr6.eq) goto loc_82472768;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472754
	if (!ctx.cr6.eq) goto loc_82472754;
	// bl 0x82545cc0
	ctx.lr = 0x82472750;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472754:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472768;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472768:
	// stw r24,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r24.u32);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// stw r24,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r24.u32);
	// addi r25,r25,4
	ctx.r25.s64 = ctx.r25.s64 + 4;
	// stw r24,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r24.u32);
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247242c
	if (ctx.cr6.lt) goto loc_8247242C;
loc_82472788:
	// lwz r11,68(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 68);
	// addi r23,r23,1
	ctx.r23.s64 = ctx.r23.s64 + 1;
	// cmpw cr6,r23,r11
	ctx.cr6.compare<int32_t>(ctx.r23.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x824723c0
	if (ctx.cr6.lt) goto loc_824723C0;
	// lwz r25,412(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 412);
	// lwz r26,80(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_824727A0:
	// lwz r23,88(r1)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r22,444(r1)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 444);
loc_824727A8:
	// lwz r19,104(r19)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r19.u32 + 104);
	// cmplwi cr6,r19,0
	ctx.cr6.compare<uint32_t>(ctx.r19.u32, 0, ctx.xer);
	// bne cr6,0x82472200
	if (!ctx.cr6.eq) goto loc_82472200;
loc_824727B4:
	// lwz r11,176(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// stw r24,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472810
	if (ctx.cr6.eq) goto loc_82472810;
	// lwz r11,168(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// stw r24,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r24.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472810
	if (ctx.cr6.eq) goto loc_82472810;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824727ec
	if (!ctx.cr6.eq) goto loc_824727EC;
	// bl 0x82545cc0
	ctx.lr = 0x824727E8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_824727EC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247280C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r3.u32);
loc_82472810:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,172(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82416660
	ctx.lr = 0x8247282C;
	sub_82416660(ctx, base);
	// lwz r11,168(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472864
	if (ctx.cr6.eq) goto loc_82472864;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472850
	if (!ctx.cr6.eq) goto loc_82472850;
	// bl 0x82545cc0
	ctx.lr = 0x8247284C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472850:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472864;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472864:
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247286C:
	// lwz r11,68(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 68);
	// mr r29,r24
	ctx.r29.u64 = ctx.r24.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824727a8
	if (!ctx.cr6.gt) goto loc_824727A8;
	// lwz r30,428(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 428);
loc_82472880:
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r24.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// stw r24,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r24.u32);
	// stw r24,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r24.u32);
	// beq cr6,0x824728b8
	if (ctx.cr6.eq) goto loc_824728B8;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824728A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,100(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 100);
	// lwz r7,436(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 436);
	// cmpw cr6,r11,r3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r3.s32, ctx.xer);
	// blt cr6,0x824728bc
	if (ctx.cr6.lt) goto loc_824728BC;
loc_824728B8:
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
loc_824728BC:
	// mr r9,r27
	ctx.r9.u64 = ctx.r27.u64;
	// mr r8,r22
	ctx.r8.u64 = ctx.r22.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
	// bl 0x8245f418
	ctx.lr = 0x824728D8;
	sub_8245F418(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82472a98
	if (ctx.cr6.eq) goto loc_82472A98;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x8247299c
	if (ctx.cr6.eq) goto loc_8247299C;
	// lwz r11,72(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 72);
	// lwz r10,100(r19)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r19.u32 + 100);
	// mullw r11,r11,r29
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r29.s32);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwzx r31,r11,r25
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r25.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247299c
	if (ctx.cr6.eq) goto loc_8247299C;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rldicr r12,r12,35,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 35) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247299c
	if (!ctx.cr6.eq) goto loc_8247299C;
	// lwz r11,19884(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 19884);
	// lwz r30,52(r19)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r19.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82472940
	if (!ctx.cr6.eq) goto loc_82472940;
	// lwz r3,92(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x8246fc58
	ctx.lr = 0x82472934;
	sub_8246FC58(ctx, base);
	// stw r3,19884(r26)
	PPC_STORE_U32(ctx.r26.u32 + 19884, ctx.r3.u32);
	// bl 0x82471a68
	ctx.lr = 0x8247293C;
	sub_82471A68(ctx, base);
	// lwz r11,19884(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 19884);
loc_82472940:
	// cmplw cr6,r30,r11
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8247296c
	if (!ctx.cr6.eq) goto loc_8247296C;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplw cr6,r11,r22
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r22.u32, ctx.xer);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// beq cr6,0x82472970
	if (ctx.cr6.eq) goto loc_82472970;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,36,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 36) & 0xFFFFFFFFFFFFFFFF;
	// or r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 | ctx.r12.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// b 0x8247299c
	goto loc_8247299C;
loc_8247296C:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
loc_82472970:
	// or r11,r11,r17
	ctx.r11.u64 = ctx.r11.u64 | ctx.r17.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r9,r16
	ctx.r9.u64 = ctx.r16.u64;
	// mr r8,r20
	ctx.r8.u64 = ctx.r20.u64;
	// mr r7,r15
	ctx.r7.u64 = ctx.r15.u64;
	// mr r6,r21
	ctx.r6.u64 = ctx.r21.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x823f2460
	ctx.lr = 0x8247299C;
	sub_823F2460(ctx, base);
loc_8247299C:
	// lwz r11,68(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 68);
	// lwz r30,104(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// bne cr6,0x82472a20
	if (!ctx.cr6.eq) goto loc_82472A20;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824729bc
	if (!ctx.cr6.eq) goto loc_824729BC;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
loc_824729BC:
	// lwz r11,4(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 4);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824729d8
	if (!ctx.cr6.eq) goto loc_824729D8;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823099b0
	ctx.lr = 0x824729D4;
	sub_823099B0(ctx, base);
	// b 0x824729e0
	goto loc_824729E0;
loc_824729D8:
	// addi r4,r19,44
	ctx.r4.s64 = ctx.r19.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824729E0;
	sub_8242BA60(ctx, base);
loc_824729E0:
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r31,184(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824729f4
	if (!ctx.cr6.eq) goto loc_824729F4;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
loc_824729F4:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x82416b98
	ctx.lr = 0x82472A00;
	sub_82416B98(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x824211f0
	ctx.lr = 0x82472A18;
	sub_824211F0(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// b 0x82472a90
	goto loc_82472A90;
loc_82472A20:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82472a2c
	if (!ctx.cr6.eq) goto loc_82472A2C;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
loc_82472A2C:
	// lwz r11,4(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 4);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82472a48
	if (!ctx.cr6.eq) goto loc_82472A48;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x823099b0
	ctx.lr = 0x82472A44;
	sub_823099B0(ctx, base);
	// b 0x82472a50
	goto loc_82472A50;
loc_82472A48:
	// addi r4,r19,44
	ctx.r4.s64 = ctx.r19.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82472A50;
	sub_8242BA60(ctx, base);
loc_82472A50:
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r31,200(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82472a64
	if (!ctx.cr6.eq) goto loc_82472A64;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
loc_82472A64:
	// li r4,32
	ctx.r4.s64 = 32;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x82416b98
	ctx.lr = 0x82472A70;
	sub_82416B98(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x824211f0
	ctx.lr = 0x82472A8C;
	sub_824211F0(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
loc_82472A90:
	// bl 0x82309a60
	ctx.lr = 0x82472A94;
	sub_82309A60(ctx, base);
	// lwz r30,428(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 428);
loc_82472A98:
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r24,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r24.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472af4
	if (ctx.cr6.eq) goto loc_82472AF4;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r24,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r24.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472af4
	if (ctx.cr6.eq) goto loc_82472AF4;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472ad0
	if (!ctx.cr6.eq) goto loc_82472AD0;
	// bl 0x82545cc0
	ctx.lr = 0x82472ACC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472AD0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472AF0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
loc_82472AF4:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82416660
	ctx.lr = 0x82472B10;
	sub_82416660(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472b48
	if (ctx.cr6.eq) goto loc_82472B48;
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472b34
	if (!ctx.cr6.eq) goto loc_82472B34;
	// bl 0x82545cc0
	ctx.lr = 0x82472B30;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8344);
loc_82472B34:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472B48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472B48:
	// stw r24,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r24.u32);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// stw r24,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r24.u32);
	// stw r24,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r24.u32);
	// lwz r11,68(r19)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r19.u32 + 68);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82472880
	if (ctx.cr6.lt) goto loc_82472880;
	// b 0x824727a8
	goto loc_824727A8;
}

__attribute__((alias("__imp__sub_82472B68"))) PPC_WEAK_FUNC(sub_82472B68);
PPC_FUNC_IMPL(__imp__sub_82472B68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e48
	ctx.lr = 0x82472B70;
	__savegprlr_20(ctx, base);
	// addi r31,r1,-256
	ctx.r31.s64 = ctx.r1.s64 + -256;
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r21,0
	ctx.r21.s64 = 0;
	// stw r4,284(r31)
	PPC_STORE_U32(ctx.r31.u32 + 284, ctx.r4.u32);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r20,r5
	ctx.r20.u64 = ctx.r5.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r31,104
	ctx.r4.s64 = ctx.r31.s64 + 104;
	// addi r3,r31,284
	ctx.r3.s64 = ctx.r31.s64 + 284;
	// stw r21,104(r31)
	PPC_STORE_U32(ctx.r31.u32 + 104, ctx.r21.u32);
	// mr r24,r6
	ctx.r24.u64 = ctx.r6.u64;
	// stw r21,108(r31)
	PPC_STORE_U32(ctx.r31.u32 + 108, ctx.r21.u32);
	// stw r21,112(r31)
	PPC_STORE_U32(ctx.r31.u32 + 112, ctx.r21.u32);
	// stw r21,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r21.u32);
	// stw r21,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r21.u32);
	// bl 0x8242ae40
	ctx.lr = 0x82472BB0;
	sub_8242AE40(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82473000
	if (ctx.cr6.eq) goto loc_82473000;
	// lwz r11,108(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 108);
	// lwz r4,104(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r22,r11,-29761
	ctx.r22.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82472bd4
	if (!ctx.cr6.eq) goto loc_82472BD4;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
loc_82472BD4:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82472BE4;
	sub_8243B750(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r11,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r11.u32);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r11.u32);
	// bne cr6,0x82472c04
	if (!ctx.cr6.eq) goto loc_82472C04;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473000
	if (ctx.cr6.eq) goto loc_82473000;
loc_82472C04:
	// lwz r11,24(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 24);
	// ld r4,96(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// beq cr6,0x82472c34
	if (ctx.cr6.eq) goto loc_82472C34;
	// lwz r3,32(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82472c34
	if (ctx.cr6.eq) goto loc_82472C34;
	// bl 0x82458fe8
	ctx.lr = 0x82472C28;
	sub_82458FE8(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x82472c4c
	if (!ctx.cr6.eq) goto loc_82472C4C;
loc_82472C34:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,52(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 52);
	// bl 0x82458fe8
	ctx.lr = 0x82472C40;
	sub_82458FE8(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x82473000
	if (ctx.cr6.eq) goto loc_82473000;
loc_82472C4C:
	// lwz r11,140(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 140);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473000
	if (ctx.cr6.eq) goto loc_82473000;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// mr r30,r21
	ctx.r30.u64 = ctx.r21.u64;
	// bl 0x8245c740
	ctx.lr = 0x82472C6C;
	sub_8245C740(ctx, base);
	// lwz r11,84(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472ca8
	if (ctx.cr6.eq) goto loc_82472CA8;
loc_82472C78:
	// ld r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 76);
	// andi. r10,r10,1152
	ctx.r10.u64 = ctx.r10.u64 & 1152;
	ctx.cr0.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// cmpldi cr6,r10,128
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 128, ctx.xer);
	// bne cr6,0x82472ca8
	if (!ctx.cr6.eq) goto loc_82472CA8;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82472C9C;
	sub_8245C128(ctx, base);
	// lwz r11,84(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82472c78
	if (!ctx.cr6.eq) goto loc_82472C78;
loc_82472CA8:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82543298
	ctx.lr = 0x82472CB0;
	sub_82543298(ctx, base);
	// lhz r5,158(r25)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r25.u32 + 158);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// bne cr6,0x82472cc8
	if (!ctx.cr6.eq) goto loc_82472CC8;
	// mr r28,r21
	ctx.r28.u64 = ctx.r21.u64;
	// b 0x82472ce8
	goto loc_82472CE8;
loc_82472CC8:
	// addi r11,r5,7
	ctx.r11.s64 = ctx.r5.s64 + 7;
	// rlwinm r11,r11,0,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFF8;
	// neg r11,r11
	ctx.r11.s64 = -ctx.r11.s64;
	// rlwinm r12,r11,0,0,27
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x82e2a474
	ctx.lr = 0x82472CDC;
	sub_82E2A474(ctx, base);
	// lwz r11,0(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// stwux r11,r1,r12
	ea = ctx.r1.u32 + ctx.r12.u32;
	PPC_STORE_U32(ea, ctx.r11.u32);
	ctx.r1.u32 = ea;
	// addi r28,r1,80
	ctx.r28.s64 = ctx.r1.s64 + 80;
loc_82472CE8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82e29500
	ctx.lr = 0x82472CF4;
	sub_82E29500(ctx, base);
	// lwz r11,76(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 76);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// stw r25,80(r31)
	PPC_STORE_U32(ctx.r31.u32 + 80, ctx.r25.u32);
	// mr r27,r21
	ctx.r27.u64 = ctx.r21.u64;
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82472D0C;
	sub_8245C128(ctx, base);
	// lwz r30,84(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82472de4
	if (ctx.cr6.eq) goto loc_82472DE4;
loc_82472D18:
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// andi. r11,r11,1152
	ctx.r11.u64 = ctx.r11.u64 & 1152;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// cmpldi cr6,r11,128
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 128, ctx.xer);
	// bne cr6,0x82472de4
	if (!ctx.cr6.eq) goto loc_82472DE4;
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// bne cr6,0x82472d6c
	if (!ctx.cr6.eq) goto loc_82472D6C;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x82472d6c
	if (ctx.cr6.eq) goto loc_82472D6C;
	// lwz r11,52(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,15,15
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x10000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472d6c
	if (ctx.cr6.eq) goto loc_82472D6C;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r4,128(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// bl 0x822e1bd0
	ctx.lr = 0x82472D58;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82472d6c
	if (ctx.cr6.eq) goto loc_82472D6C;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// stwx r24,r11,r28
	PPC_STORE_U32(ctx.r11.u32 + ctx.r28.u32, ctx.r24.u32);
	// b 0x82472dc4
	goto loc_82472DC4;
loc_82472D6C:
	// addi r3,r31,284
	ctx.r3.s64 = ctx.r31.s64 + 284;
	// bl 0x82419578
	ctx.lr = 0x82472D74;
	sub_82419578(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// cmplw cr6,r26,r30
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x82472d84
	if (ctx.cr6.eq) goto loc_82472D84;
	// li r6,3
	ctx.r6.s64 = 3;
loc_82472D84:
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r4,284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 284);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// add r5,r11,r28
	ctx.r5.u64 = ctx.r11.u64 + ctx.r28.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lwz r11,312(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 312);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472DB0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82472f30
	if (ctx.cr6.eq) goto loc_82472F30;
	// cmplw cr6,r3,r29
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, ctx.r29.u32, ctx.xer);
	// beq cr6,0x82472f30
	if (ctx.cr6.eq) goto loc_82472F30;
	// stw r3,284(r31)
	PPC_STORE_U32(ctx.r31.u32 + 284, ctx.r3.u32);
loc_82472DC4:
	// lwz r11,64(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 64);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82472DD4;
	sub_8245C128(ctx, base);
	// lwz r30,84(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82472d18
	if (!ctx.cr6.eq) goto loc_82472D18;
loc_82472DE4:
	// lwz r11,0(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// li r7,-7
	ctx.r7.s64 = -7;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// lwz r11,228(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 228);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472E08;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472E08:
	// lwz r11,76(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 76);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// stw r25,80(r31)
	PPC_STORE_U32(ctx.r31.u32 + 80, ctx.r25.u32);
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82472E1C;
	sub_8245C128(ctx, base);
	// lwz r30,84(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82472e70
	if (ctx.cr6.eq) goto loc_82472E70;
loc_82472E28:
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// andi. r11,r11,1152
	ctx.r11.u64 = ctx.r11.u64 & 1152;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// cmpldi cr6,r11,128
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 128, ctx.xer);
	// bne cr6,0x82472e70
	if (!ctx.cr6.eq) goto loc_82472E70;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// add r4,r11,r28
	ctx.r4.u64 = ctx.r11.u64 + ctx.r28.u64;
	// lwz r11,340(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 340);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472E54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,64(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 64);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82472E64;
	sub_8245C128(ctx, base);
	// lwz r30,84(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82472e28
	if (!ctx.cr6.eq) goto loc_82472E28;
loc_82472E70:
	// lwz r11,112(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 112);
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// stw r21,108(r31)
	PPC_STORE_U32(ctx.r31.u32 + 108, ctx.r21.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472ed0
	if (ctx.cr6.eq) goto loc_82472ED0;
	// lwz r11,104(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 104);
	// stw r21,112(r31)
	PPC_STORE_U32(ctx.r31.u32 + 112, ctx.r21.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472ed0
	if (ctx.cr6.eq) goto loc_82472ED0;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472eac
	if (!ctx.cr6.eq) goto loc_82472EAC;
	// bl 0x82545cc0
	ctx.lr = 0x82472EA8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82472EAC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472ECC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,104(r31)
	PPC_STORE_U32(ctx.r31.u32 + 104, ctx.r3.u32);
loc_82472ED0:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,108(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 108);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,104
	ctx.r3.s64 = ctx.r31.s64 + 104;
	// bl 0x82416660
	ctx.lr = 0x82472EEC;
	sub_82416660(ctx, base);
	// lwz r11,104(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82472f24
	if (ctx.cr6.eq) goto loc_82472F24;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82472f10
	if (!ctx.cr6.eq) goto loc_82472F10;
	// bl 0x82545cc0
	ctx.lr = 0x82472F0C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82472F10:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82472F24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82472F24:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r31,256
	ctx.r1.s64 = ctx.r31.s64 + 256;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82472F30:
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// rlwinm r11,r11,0,27,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x10;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82472de4
	if (!ctx.cr6.eq) goto loc_82472DE4;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r31,120
	ctx.r3.s64 = ctx.r31.s64 + 120;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82472f60
	if (!ctx.cr6.eq) goto loc_82472F60;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82472F5C;
	sub_823099B0(ctx, base);
	// b 0x82472f68
	goto loc_82472F68;
loc_82472F60:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82472F68;
	sub_8242BA60(ctx, base);
loc_82472F68:
	// lwz r11,124(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 124);
	// lwz r29,120(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82472f7c
	if (!ctx.cr6.eq) goto loc_82472F7C;
	// mr r29,r22
	ctx.r29.u64 = ctx.r22.u64;
loc_82472F7C:
	// addi r4,r31,96
	ctx.r4.s64 = ctx.r31.s64 + 96;
	// addi r3,r31,136
	ctx.r3.s64 = ctx.r31.s64 + 136;
	// bl 0x8242ba60
	ctx.lr = 0x82472F88;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472f9c
	if (ctx.cr6.eq) goto loc_82472F9C;
	// lwz r30,0(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82472fa0
	goto loc_82472FA0;
loc_82472F9C:
	// mr r30,r22
	ctx.r30.u64 = ctx.r22.u64;
loc_82472FA0:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// addi r4,r11,-13556
	ctx.r4.s64 = ctx.r11.s64 + -13556;
	// bl 0x82431548
	ctx.lr = 0x82472FBC;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82472fd0
	if (ctx.cr6.eq) goto loc_82472FD0;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82472fd4
	goto loc_82472FD4;
loc_82472FD0:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
loc_82472FD4:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x824211f0
	ctx.lr = 0x82472FE4;
	sub_824211F0(ctx, base);
	// addi r3,r31,80
	ctx.r3.s64 = ctx.r31.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82472FEC;
	sub_82309A60(ctx, base);
	// addi r3,r31,136
	ctx.r3.s64 = ctx.r31.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82472FF4;
	sub_82309A60(ctx, base);
	// addi r3,r31,120
	ctx.r3.s64 = ctx.r31.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82472FFC;
	sub_82309A60(ctx, base);
	// b 0x82472e08
	goto loc_82472E08;
loc_82473000:
	// addi r3,r31,104
	ctx.r3.s64 = ctx.r31.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82473008;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r31,256
	ctx.r1.s64 = ctx.r31.s64 + 256;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82473018"))) PPC_WEAK_FUNC(sub_82473018);
PPC_FUNC_IMPL(__imp__sub_82473018) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82473020;
	__savegprlr_14(ctx, base);
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r7
	ctx.r28.u64 = ctx.r7.u64;
	// li r18,0
	ctx.r18.s64 = 0;
	// mr r15,r4
	ctx.r15.u64 = ctx.r4.u64;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r14,r6
	ctx.r14.u64 = ctx.r6.u64;
	// stw r28,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, ctx.r28.u32);
	// stw r18,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r18.u32);
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// bne cr6,0x82473058
	if (!ctx.cr6.eq) goto loc_82473058;
	// lwz r15,52(r22)
	ctx.r15.u64 = PPC_LOAD_U32(ctx.r22.u32 + 52);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// stw r15,20144(r11)
	PPC_STORE_U32(ctx.r11.u32 + 20144, ctx.r15.u32);
loc_82473058:
	// lwz r11,204(r15)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r15.u32 + 204);
	// rlwinm r11,r11,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824739f0
	if (ctx.cr6.eq) goto loc_824739F0;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30016(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824739f0
	if (!ctx.cr6.eq) goto loc_824739F0;
	// lwz r4,60(r15)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r15.u32 + 60);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x824730c0
	if (ctx.cr6.eq) goto loc_824730C0;
	// lwz r11,204(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 204);
	// rlwinm r11,r11,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824731dc
	if (ctx.cr6.eq) goto loc_824731DC;
	// clrlwi r11,r14,31
	ctx.r11.u64 = ctx.r14.u32 & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824730dc
	if (ctx.cr6.eq) goto loc_824730DC;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r14
	ctx.r6.u64 = ctx.r14.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82473018
	ctx.lr = 0x824730B4;
	sub_82473018(ctx, base);
	// rlwinm r11,r14,0,29,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x6;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824739f0
	if (!ctx.cr6.eq) goto loc_824739F0;
loc_824730C0:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x824732d4
	if (ctx.cr6.eq) goto loc_824732D4;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// li r31,1
	ctx.r31.s64 = 1;
	// bl 0x823099b0
	ctx.lr = 0x824730D8;
	sub_823099B0(ctx, base);
	// b 0x824732e4
	goto loc_824732E4;
loc_824730DC:
	// rlwinm r11,r14,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247316c
	if (ctx.cr6.eq) goto loc_8247316C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x823fef48
	ctx.lr = 0x824730F0;
	sub_823FEF48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r30,r11,20028
	ctx.r30.s64 = ctx.r11.s64 + 20028;
loc_824730F8:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824739f0
	if (!ctx.cr6.lt) goto loc_824739F0;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r9,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473160
	if (ctx.cr6.eq) goto loc_82473160;
loc_8247311C:
	// cmplw cr6,r11,r15
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r15.u32, ctx.xer);
	// beq cr6,0x8247313c
	if (ctx.cr6.eq) goto loc_8247313C;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247311c
	if (!ctx.cr6.eq) goto loc_8247311C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825e0a08
	ctx.lr = 0x82473138;
	sub_825E0A08(ctx, base);
	// b 0x824730f8
	goto loc_824730F8;
loc_8247313C:
	// lwzx r31,r9,r10
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424430
	ctx.lr = 0x8247314C;
	sub_82424430(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// rlwinm r6,r14,0,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0xC;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// bl 0x82473018
	ctx.lr = 0x82473160;
	sub_82473018(ctx, base);
loc_82473160:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825e0a08
	ctx.lr = 0x82473168;
	sub_825E0A08(ctx, base);
	// b 0x824730f8
	goto loc_824730F8;
loc_8247316C:
	// rlwinm r11,r14,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824730c0
	if (ctx.cr6.eq) goto loc_824730C0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309e48
	ctx.lr = 0x82473180;
	sub_82309E48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r30,r11,20028
	ctx.r30.s64 = ctx.r11.s64 + 20028;
loc_82473188:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824730c0
	if (!ctx.cr6.lt) goto loc_824730C0;
	// rlwinm r31,r11,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// lwzx r3,r31,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// bl 0x822e1bd0
	ctx.lr = 0x824731AC;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824731d0
	if (ctx.cr6.eq) goto loc_824731D0;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// rlwinm r6,r14,0,28,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x8;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwzx r3,r31,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// lwz r4,52(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x82473018
	ctx.lr = 0x824731D0;
	sub_82473018(ctx, base);
loc_824731D0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82302fa0
	ctx.lr = 0x824731D8;
	sub_82302FA0(ctx, base);
	// b 0x82473188
	goto loc_82473188;
loc_824731DC:
	// rlwinm r11,r14,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247326c
	if (ctx.cr6.eq) goto loc_8247326C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x823fef48
	ctx.lr = 0x824731F0;
	sub_823FEF48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r30,r11,20028
	ctx.r30.s64 = ctx.r11.s64 + 20028;
loc_824731F8:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824739f0
	if (!ctx.cr6.lt) goto loc_824739F0;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r11,r9,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473260
	if (ctx.cr6.eq) goto loc_82473260;
loc_8247321C:
	// cmplw cr6,r11,r15
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r15.u32, ctx.xer);
	// beq cr6,0x8247323c
	if (ctx.cr6.eq) goto loc_8247323C;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247321c
	if (!ctx.cr6.eq) goto loc_8247321C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825e0a08
	ctx.lr = 0x82473238;
	sub_825E0A08(ctx, base);
	// b 0x824731f8
	goto loc_824731F8;
loc_8247323C:
	// lwzx r31,r9,r10
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424430
	ctx.lr = 0x8247324C;
	sub_82424430(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// rlwinm r6,r14,0,28,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0xC;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// bl 0x82473018
	ctx.lr = 0x82473260;
	sub_82473018(ctx, base);
loc_82473260:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825e0a08
	ctx.lr = 0x82473268;
	sub_825E0A08(ctx, base);
	// b 0x824731f8
	goto loc_824731F8;
loc_8247326C:
	// rlwinm r11,r14,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824730c0
	if (ctx.cr6.eq) goto loc_824730C0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309e48
	ctx.lr = 0x82473280;
	sub_82309E48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_82473288:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824730c0
	if (!ctx.cr6.lt) goto loc_824730C0;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// lwz r9,52(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 52);
	// cmplw cr6,r9,r15
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, ctx.r15.u32, ctx.xer);
	// bne cr6,0x824732c8
	if (!ctx.cr6.eq) goto loc_824732C8;
	// lwzx r3,r11,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// rlwinm r6,r14,0,28,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x8;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,52(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x82473018
	ctx.lr = 0x824732C8;
	sub_82473018(ctx, base);
loc_824732C8:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82302fa0
	ctx.lr = 0x824732D0;
	sub_82302FA0(ctx, base);
	// b 0x82473288
	goto loc_82473288;
loc_824732D4:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r31,2
	ctx.r31.s64 = 2;
	// bl 0x82464ca0
	ctx.lr = 0x824732E4;
	sub_82464CA0(ctx, base);
loc_824732E4:
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309dd8
	ctx.lr = 0x824732F0;
	sub_82309DD8(ctx, base);
	// rlwinm r11,r31,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473308
	if (ctx.cr6.eq) goto loc_82473308;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// rlwinm r31,r31,0,31,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x82473308;
	sub_82309A60(ctx, base);
loc_82473308:
	// clrlwi r11,r31,31
	ctx.r11.u64 = ctx.r31.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247331c
	if (ctx.cr6.eq) goto loc_8247331C;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82309a60
	ctx.lr = 0x8247331C;
	sub_82309A60(ctx, base);
loc_8247331C:
	// lwz r10,52(r22)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r22.u32 + 52);
	// lwz r11,204(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 204);
	// rlwinm r11,r11,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473344
	if (ctx.cr6.eq) goto loc_82473344;
	// ld r11,8(r22)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r22.u32 + 8);
	// li r16,1
	ctx.r16.s64 = 1;
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82473348
	if (ctx.cr6.eq) goto loc_82473348;
loc_82473344:
	// mr r16,r18
	ctx.r16.u64 = ctx.r18.u64;
loc_82473348:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// stw r18,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r18.u32);
	// stw r18,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r18.u32);
	// cmpwi cr6,r16,1
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 1, ctx.xer);
	// addi r23,r11,-29761
	ctx.r23.s64 = ctx.r11.s64 + -29761;
	// stw r18,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r18.u32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r17,r11,-28532
	ctx.r17.s64 = ctx.r11.s64 + -28532;
	// bne cr6,0x8247342c
	if (!ctx.cr6.eq) goto loc_8247342C;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bne cr6,0x82473388
	if (!ctx.cr6.eq) goto loc_82473388;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x82473384;
	sub_823099B0(ctx, base);
	// b 0x824733a8
	goto loc_824733A8;
loc_82473388:
	// lwz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824733a0
	if (!ctx.cr6.eq) goto loc_824733A0;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247339C;
	sub_823099B0(ctx, base);
	// b 0x824733a8
	goto loc_824733A8;
loc_824733A0:
	// addi r4,r10,44
	ctx.r4.s64 = ctx.r10.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824733A8;
	sub_8242BA60(ctx, base);
loc_824733A8:
	// lwz r11,180(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r31,176(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824733bc
	if (!ctx.cr6.eq) goto loc_824733BC;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
loc_824733BC:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824733d8
	if (!ctx.cr6.eq) goto loc_824733D8;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x823099b0
	ctx.lr = 0x824733D4;
	sub_823099B0(ctx, base);
	// b 0x824733e0
	goto loc_824733E0;
loc_824733D8:
	// addi r4,r22,44
	ctx.r4.s64 = ctx.r22.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824733E0;
	sub_8242BA60(ctx, base);
loc_824733E0:
	// lwz r11,212(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// lwz r5,208(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824733f4
	if (!ctx.cr6.eq) goto loc_824733F4;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
loc_824733F4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// addi r4,r11,-13536
	ctx.r4.s64 = ctx.r11.s64 + -13536;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x8242a860
	ctx.lr = 0x82473408;
	sub_8242A860(ctx, base);
	// addi r4,r1,256
	ctx.r4.s64 = ctx.r1.s64 + 256;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82302d08
	ctx.lr = 0x82473414;
	sub_82302D08(ctx, base);
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x82309a60
	ctx.lr = 0x8247341C;
	sub_82309A60(ctx, base);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82309a60
	ctx.lr = 0x82473424;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247342C;
	sub_82309A60(ctx, base);
loc_8247342C:
	// lwz r24,116(r15)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r15.u32 + 116);
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x824739bc
	if (ctx.cr6.eq) goto loc_824739BC;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lis r20,-31973
	ctx.r20.s64 = -2095382528;
	// addi r19,r11,-13544
	ctx.r19.s64 = ctx.r11.s64 + -13544;
	// lis r21,-31973
	ctx.r21.s64 = -2095382528;
loc_82473448:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82473458
	if (ctx.cr6.eq) goto loc_82473458;
	// cmplw cr6,r28,r24
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r24.u32, ctx.xer);
	// bne cr6,0x824739b0
	if (!ctx.cr6.eq) goto loc_824739B0;
loc_82473458:
	// ld r11,76(r24)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r24.u32 + 76);
	// li r31,1
	ctx.r31.s64 = 1;
	// rlwinm r11,r11,0,13,13
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x40000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82473470
	if (!ctx.cr6.eq) goto loc_82473470;
	// mr r31,r18
	ctx.r31.u64 = ctx.r18.u64;
loc_82473470:
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r11,276(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 276);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473484;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// bne cr6,0x82473494
	if (!ctx.cr6.eq) goto loc_82473494;
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
loc_82473494:
	// cmpwi cr6,r16,0
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 0, ctx.xer);
	// bne cr6,0x824734bc
	if (!ctx.cr6.eq) goto loc_824734BC;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x824643b8
	ctx.lr = 0x824734A8;
	sub_824643B8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82302d08
	ctx.lr = 0x824734B4;
	sub_82302D08(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82309a60
	ctx.lr = 0x824734BC;
	sub_82309A60(ctx, base);
loc_824734BC:
	// lwz r11,4(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824734d8
	if (!ctx.cr6.eq) goto loc_824734D8;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x823099b0
	ctx.lr = 0x824734D4;
	sub_823099B0(ctx, base);
	// b 0x824734e0
	goto loc_824734E0;
loc_824734D8:
	// addi r4,r24,44
	ctx.r4.s64 = ctx.r24.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824734E0;
	sub_8242BA60(ctx, base);
loc_824734E0:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8245c320
	ctx.lr = 0x824734E8;
	sub_8245C320(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x82473730
	if (ctx.cr6.eq) goto loc_82473730;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473508
	if (!ctx.cr6.eq) goto loc_82473508;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
loc_82473508:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247351c
	if (!ctx.cr6.eq) goto loc_8247351C;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_8247351C:
	// lwz r3,8332(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 8332);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473538;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824738f4
	if (ctx.cr6.eq) goto loc_824738F4;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r18,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r18.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r18,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r18.u32);
	// stw r18,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r18.u32);
	// addi r30,r1,112
	ctx.r30.s64 = ctx.r1.s64 + 112;
	// bl 0x82309dd8
	ctx.lr = 0x82473560;
	sub_82309DD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x823fd478
	ctx.lr = 0x82473570;
	sub_823FD478(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82473578;
	sub_82309A60(ctx, base);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824736d8
	if (ctx.cr6.eq) goto loc_824736D8;
	// lwz r11,100(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 100);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r10,128(r25)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// add r27,r11,r22
	ctx.r27.u64 = ctx.r11.u64 + ctx.r22.u64;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r26,72(r10)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r10.u32 + 72);
	// lwz r11,340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824735AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// lwz r4,116(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82302b88
	ctx.lr = 0x824735C4;
	sub_82302B88(ctx, base);
	// lwz r29,128(r25)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247365c
	if (ctx.cr6.eq) goto loc_8247365C;
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247365c
	if (ctx.cr6.eq) goto loc_8247365C;
	// lwz r11,128(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247365c
	if (ctx.cr6.eq) goto loc_8247365C;
	// lwz r10,160(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 160);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247365c
	if (ctx.cr6.eq) goto loc_8247365C;
	// lwz r4,156(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 156);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,332(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 332);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473618;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247365c
	if (ctx.cr6.eq) goto loc_8247365C;
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r31,r11,-1
	ctx.r31.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x8247365c
	if (ctx.cr6.lt) goto loc_8247365C;
	// mullw r30,r31,r26
	ctx.r30.s64 = int64_t(ctx.r31.s32) * int64_t(ctx.r26.s32);
	// neg r28,r26
	ctx.r28.s64 = -ctx.r26.s64;
loc_82473638:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// add r4,r11,r30
	ctx.r4.u64 = ctx.r11.u64 + ctx.r30.u64;
	// bl 0x824635d0
	ctx.lr = 0x82473648;
	sub_824635D0(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// add r30,r28,r30
	ctx.r30.u64 = ctx.r28.u64 + ctx.r30.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bge cr6,0x82473638
	if (!ctx.cr6.lt) goto loc_82473638;
	// lwz r28,500(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 500);
loc_8247365C:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r31,r11,-1
	ctx.r31.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x824736d8
	if (ctx.cr6.lt) goto loc_824736D8;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r29,r18
	ctx.r29.u64 = ctx.r18.u64;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r30,r11,2,0,29
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
loc_8247367C:
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x8247369c
	if (ctx.cr6.eq) goto loc_8247369C;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x824736a0
	goto loc_824736A0;
loc_8247369C:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_824736A0:
	// lwz r3,128(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r22
	ctx.r7.u64 = ctx.r22.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// add r5,r29,r10
	ctx.r5.u64 = ctx.r29.u64 + ctx.r10.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,312(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 312);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824736C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r30,r30,-12
	ctx.r30.s64 = ctx.r30.s64 + -12;
	// add r29,r29,r26
	ctx.r29.u64 = ctx.r29.u64 + ctx.r26.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bge cr6,0x8247367c
	if (!ctx.cr6.lt) goto loc_8247367C;
loc_824736D8:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8259c3a0
	ctx.lr = 0x824736E8;
	sub_8259C3A0(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473720
	if (ctx.cr6.eq) goto loc_82473720;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247370c
	if (!ctx.cr6.eq) goto loc_8247370C;
	// bl 0x82545cc0
	ctx.lr = 0x82473708;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_8247370C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473720;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82473720:
	// stw r18,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r18.u32);
	// stw r18,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r18.u32);
	// stw r18,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r18.u32);
	// b 0x824738f4
	goto loc_824738F4;
loc_82473730:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82543310
	ctx.lr = 0x82473738;
	sub_82543310(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824737b0
	if (ctx.cr6.eq) goto loc_824737B0;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473754
	if (!ctx.cr6.eq) goto loc_82473754;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
loc_82473754:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473768
	if (!ctx.cr6.eq) goto loc_82473768;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_82473768:
	// lwz r3,8332(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 8332);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473784;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824738f4
	if (ctx.cr6.eq) goto loc_824738F4;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// stw r18,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r18.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r18,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, ctx.r18.u32);
	// stw r18,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r18.u32);
	// bl 0x823fd478
	ctx.lr = 0x824737A4;
	sub_823FD478(ctx, base);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x825a2b78
	ctx.lr = 0x824737AC;
	sub_825A2B78(ctx, base);
	// b 0x824738f4
	goto loc_824738F4;
loc_824737B0:
	// lwz r11,68(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 68);
	// mr r31,r18
	ctx.r31.u64 = ctx.r18.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824738f4
	if (!ctx.cr6.gt) goto loc_824738F4;
loc_824737C0:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// beq cr6,0x8247382c
	if (ctx.cr6.eq) goto loc_8247382C;
	// lwz r11,4(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824737e4
	if (!ctx.cr6.eq) goto loc_824737E4;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x823099b0
	ctx.lr = 0x824737E0;
	sub_823099B0(ctx, base);
	// b 0x824737ec
	goto loc_824737EC;
loc_824737E4:
	// addi r4,r24,44
	ctx.r4.s64 = ctx.r24.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824737EC;
	sub_8242BA60(ctx, base);
loc_824737EC:
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r5,192(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473800
	if (!ctx.cr6.eq) goto loc_82473800;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
loc_82473800:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x8242a860
	ctx.lr = 0x82473810;
	sub_8242A860(ctx, base);
	// addi r4,r1,272
	ctx.r4.s64 = ctx.r1.s64 + 272;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x8247381C;
	sub_82302D08(ctx, base);
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x82309a60
	ctx.lr = 0x82473824;
	sub_82309A60(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247382C;
	sub_82309A60(ctx, base);
loc_8247382C:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r7,144(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r18,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r18,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r18.u32);
	// stw r18,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r18.u32);
	// bne cr6,0x8247384c
	if (!ctx.cr6.eq) goto loc_8247384C;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
loc_8247384C:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473860
	if (!ctx.cr6.eq) goto loc_82473860;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
loc_82473860:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82473874
	if (!ctx.cr6.eq) goto loc_82473874;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_82473874:
	// lwz r3,8332(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 8332);
	// addi r6,r1,160
	ctx.r6.s64 = ctx.r1.s64 + 160;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247388C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824738dc
	if (ctx.cr6.eq) goto loc_824738DC;
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824738a8
	if (!ctx.cr6.eq) goto loc_824738A8;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_824738A8:
	// lwz r11,72(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 72);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r9,0(r24)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// mr r7,r22
	ctx.r7.u64 = ctx.r22.u64;
	// lwz r10,100(r24)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r24.u32 + 100);
	// mullw r11,r11,r31
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r31.s32);
	// lwz r9,312(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 312);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// add r5,r11,r22
	ctx.r5.u64 = ctx.r11.u64 + ctx.r22.u64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x824738DC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824738DC:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82309a60
	ctx.lr = 0x824738E4;
	sub_82309A60(ctx, base);
	// lwz r11,68(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 68);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x824737c0
	if (ctx.cr6.lt) goto loc_824737C0;
loc_824738F4:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r18,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473950
	if (ctx.cr6.eq) goto loc_82473950;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r18,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473950
	if (ctx.cr6.eq) goto loc_82473950;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247392c
	if (!ctx.cr6.eq) goto loc_8247392C;
	// bl 0x82545cc0
	ctx.lr = 0x82473928;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_8247392C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247394C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82473950:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x8247396C;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824739a4
	if (ctx.cr6.eq) goto loc_824739A4;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473990
	if (!ctx.cr6.eq) goto loc_82473990;
	// bl 0x82545cc0
	ctx.lr = 0x8247398C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473990:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824739A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824739A4:
	// stw r18,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r18.u32);
	// stw r18,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r18.u32);
	// stw r18,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r18.u32);
loc_824739B0:
	// lwz r24,108(r24)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r24.u32 + 108);
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// bne cr6,0x82473448
	if (!ctx.cr6.eq) goto loc_82473448;
loc_824739BC:
	// rlwinm r11,r14,0,28,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r14.u32 | (ctx.r14.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824739e0
	if (ctx.cr6.eq) goto loc_824739E0;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r11,164(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 164);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824739E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824739E0:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x824739E8;
	sub_82309A60(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x824739F0;
	sub_82309A60(ctx, base);
loc_824739F0:
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824739F8"))) PPC_WEAK_FUNC(sub_824739F8);
PPC_FUNC_IMPL(__imp__sub_824739F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82473A00;
	__savegprlr_14(ctx, base);
	// stwu r1,-512(r1)
	ea = -512 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r23,-31973
	ctx.r23.s64 = -2095382528;
	// li r18,0
	ctx.r18.s64 = 0;
	// mr r15,r3
	ctx.r15.u64 = ctx.r3.u64;
	// mr r24,r4
	ctx.r24.u64 = ctx.r4.u64;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// lwz r11,8356(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8356);
	// mr r17,r6
	ctx.r17.u64 = ctx.r6.u64;
	// mr r14,r7
	ctx.r14.u64 = ctx.r7.u64;
	// mr r19,r8
	ctx.r19.u64 = ctx.r8.u64;
	// mr r21,r18
	ctx.r21.u64 = ctx.r18.u64;
	// lwz r10,228(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 228);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x82474338
	if (!ctx.cr6.gt) goto loc_82474338;
	// lis r10,-32229
	ctx.r10.s64 = -2112159744;
	// mr r29,r18
	ctx.r29.u64 = ctx.r18.u64;
	// addi r16,r10,-29761
	ctx.r16.s64 = ctx.r10.s64 + -29761;
	// lis r10,-31976
	ctx.r10.s64 = -2095579136;
	// lis r20,-31973
	ctx.r20.s64 = -2095382528;
	// addi r26,r10,-13520
	ctx.r26.s64 = ctx.r10.s64 + -13520;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// lis r28,-31973
	ctx.r28.s64 = -2095382528;
	// addi r25,r10,9820
	ctx.r25.s64 = ctx.r10.s64 + 9820;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r30,r10,9824
	ctx.r30.s64 = ctx.r10.s64 + 9824;
loc_82473A64:
	// lwz r11,224(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 224);
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82473a80
	if (ctx.cr6.eq) goto loc_82473A80;
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x82473a84
	goto loc_82473A84;
loc_82473A80:
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
loc_82473A84:
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8242a860
	ctx.lr = 0x82473A9C;
	sub_8242A860(ctx, base);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r18,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// beq cr6,0x82473b04
	if (ctx.cr6.eq) goto loc_82473B04;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473acc
	if (!ctx.cr6.eq) goto loc_82473ACC;
	// bl 0x82545cc0
	ctx.lr = 0x82473AC8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473ACC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473AEC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// beq cr6,0x82473b04
	if (ctx.cr6.eq) goto loc_82473B04;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// bl 0x82b06418
	ctx.lr = 0x82473B04;
	sub_82B06418(ctx, base);
loc_82473B04:
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r18,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473b60
	if (ctx.cr6.eq) goto loc_82473B60;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r18,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473b60
	if (ctx.cr6.eq) goto loc_82473B60;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473b3c
	if (!ctx.cr6.eq) goto loc_82473B3C;
	// bl 0x82545cc0
	ctx.lr = 0x82473B38;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473B3C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473B5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
loc_82473B60:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x82473B7C;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473bb4
	if (ctx.cr6.eq) goto loc_82473BB4;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473ba0
	if (!ctx.cr6.eq) goto loc_82473BA0;
	// bl 0x82545cc0
	ctx.lr = 0x82473B9C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473BA0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473BB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82473BB4:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r18,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r18,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r18.u32);
	// stw r18,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r18.u32);
	// bne cr6,0x82473bd4
	if (!ctx.cr6.eq) goto loc_82473BD4;
	// mr r7,r16
	ctx.r7.u64 = ctx.r16.u64;
loc_82473BD4:
	// lwz r3,8332(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8332);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473BF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82473dcc
	if (!ctx.cr6.eq) goto loc_82473DCC;
	// lwz r11,8356(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8356);
	// lwz r11,224(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 224);
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82473c20
	if (ctx.cr6.eq) goto loc_82473C20;
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x82473c24
	goto loc_82473C24;
loc_82473C20:
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
loc_82473C24:
	// mr r8,r25
	ctx.r8.u64 = ctx.r25.u64;
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8242a860
	ctx.lr = 0x82473C3C;
	sub_8242A860(ctx, base);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// stw r18,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r11,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r11.u32);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r11.u32);
	// beq cr6,0x82473ca4
	if (ctx.cr6.eq) goto loc_82473CA4;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473c6c
	if (!ctx.cr6.eq) goto loc_82473C6C;
	// bl 0x82545cc0
	ctx.lr = 0x82473C68;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473C6C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473C8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stw r3,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r3.u32);
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// beq cr6,0x82473ca4
	if (ctx.cr6.eq) goto loc_82473CA4;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x82b06418
	ctx.lr = 0x82473CA4;
	sub_82B06418(ctx, base);
loc_82473CA4:
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r18,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473d00
	if (ctx.cr6.eq) goto loc_82473D00;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r18,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473d00
	if (ctx.cr6.eq) goto loc_82473D00;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473cdc
	if (!ctx.cr6.eq) goto loc_82473CDC;
	// bl 0x82545cc0
	ctx.lr = 0x82473CD8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473CDC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473CFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
loc_82473D00:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82416660
	ctx.lr = 0x82473D1C;
	sub_82416660(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473d54
	if (ctx.cr6.eq) goto loc_82473D54;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473d40
	if (!ctx.cr6.eq) goto loc_82473D40;
	// bl 0x82545cc0
	ctx.lr = 0x82473D3C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473D40:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473D54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82473D54:
	// lwz r11,180(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r7,176(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// stw r18,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r18,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r18.u32);
	// stw r18,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r18.u32);
	// bne cr6,0x82473d74
	if (!ctx.cr6.eq) goto loc_82473D74;
	// mr r7,r16
	ctx.r7.u64 = ctx.r16.u64;
loc_82473D74:
	// lwz r3,8332(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8332);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473D94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82473e8c
	if (!ctx.cr6.eq) goto loc_82473E8C;
	// bl 0x82309a60
	ctx.lr = 0x82473DA8;
	sub_82309A60(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82473DB0;
	sub_82309A60(ctx, base);
	// lwz r11,8356(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8356);
	// addi r21,r21,1
	ctx.r21.s64 = ctx.r21.s64 + 1;
	// addi r29,r29,12
	ctx.r29.s64 = ctx.r29.s64 + 12;
	// lwz r10,228(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 228);
	// cmpw cr6,r21,r10
	ctx.cr6.compare<int32_t>(ctx.r21.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x82473a64
	if (ctx.cr6.lt) goto loc_82473A64;
	// b 0x82473e98
	goto loc_82473E98;
loc_82473DCC:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r18,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473e28
	if (ctx.cr6.eq) goto loc_82473E28;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r18,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473e28
	if (ctx.cr6.eq) goto loc_82473E28;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473e04
	if (!ctx.cr6.eq) goto loc_82473E04;
	// bl 0x82545cc0
	ctx.lr = 0x82473E00;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473E04:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473E24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82473E28:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x82473E44;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473e7c
	if (ctx.cr6.eq) goto loc_82473E7C;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473e68
	if (!ctx.cr6.eq) goto loc_82473E68;
	// bl 0x82545cc0
	ctx.lr = 0x82473E64;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473E68:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473E7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82473E7C:
	// stw r18,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r18.u32);
	// stw r18,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r18.u32);
	// stw r18,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r18.u32);
	// b 0x82473e98
	goto loc_82473E98;
loc_82473E8C:
	// bl 0x82309a60
	ctx.lr = 0x82473E90;
	sub_82309A60(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82473E98;
	sub_82309A60(ctx, base);
loc_82473E98:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82474338
	if (ctx.cr6.eq) goto loc_82474338;
	// lwz r11,128(r15)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r15.u32 + 128);
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwz r11,100(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 100);
	// stw r18,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r18.u32);
	// add r23,r11,r19
	ctx.r23.u64 = ctx.r11.u64 + ctx.r19.u64;
	// stw r18,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r18.u32);
	// li r11,8
	ctx.r11.s64 = 8;
	// stw r18,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r18.u32);
	// stw r18,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r18.u32);
	// stw r18,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r18.u32);
	// stw r18,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r18.u32);
	// stw r18,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r18.u32);
	// stw r11,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r11.u32);
	// bl 0x823099b0
	ctx.lr = 0x82473EDC;
	sub_823099B0(ctx, base);
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x823fd478
	ctx.lr = 0x82473EEC;
	sub_823FD478(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r18,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82473f48
	if (ctx.cr6.eq) goto loc_82473F48;
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r18,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473f48
	if (ctx.cr6.eq) goto loc_82473F48;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473f24
	if (!ctx.cr6.eq) goto loc_82473F24;
	// bl 0x82545cc0
	ctx.lr = 0x82473F20;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473F24:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473F44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
loc_82473F48:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,148(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82416660
	ctx.lr = 0x82473F64;
	sub_82416660(ctx, base);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82473f9c
	if (ctx.cr6.eq) goto loc_82473F9C;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82473f88
	if (!ctx.cr6.eq) goto loc_82473F88;
	// bl 0x82545cc0
	ctx.lr = 0x82473F84;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82473F88:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82473F9C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82473F9C:
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// mr r29,r18
	ctx.r29.u64 = ctx.r18.u64;
	// stw r18,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r18.u32);
	// stw r18,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r18,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r18.u32);
	// ble cr6,0x82474014
	if (!ctx.cr6.gt) goto loc_82474014;
	// addi r31,r11,-1
	ctx.r31.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x8247414c
	if (ctx.cr6.lt) goto loc_8247414C;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r30,r11,2,0,29
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
loc_82473FD0:
	// lwz r11,160(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82473fec
	if (ctx.cr6.eq) goto loc_82473FEC;
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x82473ff0
	goto loc_82473FF0;
loc_82473FEC:
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
loc_82473FF0:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82530b00
	ctx.lr = 0x82473FFC;
	sub_82530B00(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r30,r30,-12
	ctx.r30.s64 = ctx.r30.s64 + -12;
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bge cr6,0x82473fd0
	if (!ctx.cr6.lt) goto loc_82473FD0;
	// b 0x8247414c
	goto loc_8247414C;
loc_82474014:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r28,r11,-13544
	ctx.r28.s64 = ctx.r11.s64 + -13544;
loc_8247401C:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r17
	ctx.r5.u64 = ctx.r17.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x824066d0
	ctx.lr = 0x82474030;
	sub_824066D0(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x823099b0
	ctx.lr = 0x8247403C;
	sub_823099B0(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82453d10
	ctx.lr = 0x82474048;
	sub_82453D10(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// stw r18,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r18.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824740a8
	if (ctx.cr6.eq) goto loc_824740A8;
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r18,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r18.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824740a8
	if (ctx.cr6.eq) goto loc_824740A8;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474084
	if (!ctx.cr6.eq) goto loc_82474084;
	// bl 0x82545cc0
	ctx.lr = 0x82474080;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82474084:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824740A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r3.u32);
loc_824740A8:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,132(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82416660
	ctx.lr = 0x824740C4;
	sub_82416660(ctx, base);
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824740fc
	if (ctx.cr6.eq) goto loc_824740FC;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824740e8
	if (!ctx.cr6.eq) goto loc_824740E8;
	// bl 0x82545cc0
	ctx.lr = 0x824740E4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_824740E8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824740FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824740FC:
	// stw r18,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r18.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// stw r18,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r18.u32);
	// stw r18,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r18.u32);
	// beq cr6,0x82474134
	if (ctx.cr6.eq) goto loc_82474134;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474124
	if (ctx.cr6.eq) goto loc_82474124;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82474128
	goto loc_82474128;
loc_82474124:
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
loc_82474128:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82530b00
	ctx.lr = 0x82474134;
	sub_82530B00(ctx, base);
loc_82474134:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247401c
	if (!ctx.cr6.eq) goto loc_8247401C;
	// lwz r11,4(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 4);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247401c
	if (ctx.cr6.lt) goto loc_8247401C;
loc_8247414C:
	// lwz r11,128(r15)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r15.u32 + 128);
	// mr r22,r18
	ctx.r22.u64 = ctx.r18.u64;
	// mr r26,r18
	ctx.r26.u64 = ctx.r18.u64;
	// lwz r25,72(r11)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
loc_8247415C:
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// blt cr6,0x8247428c
	if (ctx.cr6.lt) goto loc_8247428C;
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// cmpw cr6,r26,r11
	ctx.cr6.compare<int32_t>(ctx.r26.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247428c
	if (!ctx.cr6.lt) goto loc_8247428C;
	// rlwinm r11,r26,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,192(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// lwz r31,4(r23)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r23.u32 + 4);
	// add r11,r26,r11
	ctx.r11.u64 = ctx.r26.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r24,r11,r10
	ctx.r24.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r28,4(r24)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// cmpw cr6,r28,r31
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r31.s32, ctx.xer);
	// blt cr6,0x82474230
	if (ctx.cr6.lt) goto loc_82474230;
	// subf r11,r31,r28
	ctx.r11.s64 = ctx.r28.s64 - ctx.r31.s64;
	// lwz r10,8(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8);
	// addi r27,r11,1
	ctx.r27.s64 = ctx.r11.s64 + 1;
	// add r11,r31,r27
	ctx.r11.u64 = ctx.r31.u64 + ctx.r27.u64;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,4(r23)
	PPC_STORE_U32(ctx.r23.u32 + 4, ctx.r11.u32);
	// ble cr6,0x82474218
	if (!ctx.cr6.gt) goto loc_82474218;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x82416640
	ctx.lr = 0x824741BC;
	sub_82416640(ctx, base);
	// lwz r11,4(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 4);
	// lwz r29,0(r23)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// stw r11,8(r23)
	PPC_STORE_U32(ctx.r23.u32 + 8, ctx.r11.u32);
	// bne cr6,0x824741dc
	if (!ctx.cr6.eq) goto loc_824741DC;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474218
	if (ctx.cr6.eq) goto loc_82474218;
loc_824741DC:
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mullw r30,r11,r25
	ctx.r30.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r25.s32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824741f4
	if (!ctx.cr6.eq) goto loc_824741F4;
	// bl 0x82545cc0
	ctx.lr = 0x824741F0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_824741F4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474214;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r23)
	PPC_STORE_U32(ctx.r23.u32 + 0, ctx.r3.u32);
loc_82474218:
	// lwz r10,0(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// mullw r11,r31,r25
	ctx.r11.s64 = int64_t(ctx.r31.s32) * int64_t(ctx.r25.s32);
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mullw r5,r27,r25
	ctx.r5.s64 = int64_t(ctx.r27.s32) * int64_t(ctx.r25.s32);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82e29500
	ctx.lr = 0x82474230;
	sub_82E29500(ctx, base);
loc_82474230:
	// addi r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 1;
	// cmpw cr6,r11,r22
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r22.s32, ctx.xer);
	// ble cr6,0x82474240
	if (!ctx.cr6.gt) goto loc_82474240;
	// mr r22,r11
	ctx.r22.u64 = ctx.r11.u64;
loc_82474240:
	// lwz r11,12(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 12);
	// lwz r10,0(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474258
	if (ctx.cr6.eq) goto loc_82474258;
	// lwz r4,8(r24)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8);
	// b 0x8247425c
	goto loc_8247425C;
loc_82474258:
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
loc_8247425C:
	// lwz r3,128(r15)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r15.u32 + 128);
	// mullw r11,r28,r25
	ctx.r11.s64 = int64_t(ctx.r28.s32) * int64_t(ctx.r25.s32);
	// add r5,r11,r10
	ctx.r5.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r14
	ctx.r7.u64 = ctx.r14.u64;
	// li r6,64
	ctx.r6.s64 = 64;
	// lwz r11,312(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 312);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474284;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r26,r26,1
	ctx.r26.s64 = ctx.r26.s64 + 1;
	// b 0x8247415c
	goto loc_8247415C;
loc_8247428C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,164(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8259c3a0
	ctx.lr = 0x8247429C;
	sub_8259C3A0(ctx, base);
	// lwz r11,160(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824742d4
	if (ctx.cr6.eq) goto loc_824742D4;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824742c0
	if (!ctx.cr6.eq) goto loc_824742C0;
	// bl 0x82545cc0
	ctx.lr = 0x824742BC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_824742C0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824742D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824742D4:
	// lwz r3,204(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// stw r18,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r18.u32);
	// stw r18,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r18.u32);
	// stw r18,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r18.u32);
	// bl 0x82545fb0
	ctx.lr = 0x824742E8;
	sub_82545FB0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,196(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// stw r18,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r18.u32);
	// stw r18,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r18.u32);
	// bl 0x824006d8
	ctx.lr = 0x82474300;
	sub_824006D8(ctx, base);
	// lwz r11,192(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474338
	if (ctx.cr6.eq) goto loc_82474338;
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474324
	if (!ctx.cr6.eq) goto loc_82474324;
	// bl 0x82545cc0
	ctx.lr = 0x82474320;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r20)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8344);
loc_82474324:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474338;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474338:
	// addi r1,r1,512
	ctx.r1.s64 = ctx.r1.s64 + 512;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82474340"))) PPC_WEAK_FUNC(sub_82474340);
PPC_FUNC_IMPL(__imp__sub_82474340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82474348;
	__savegprlr_23(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// mr r25,r6
	ctx.r25.u64 = ctx.r6.u64;
	// mr r24,r7
	ctx.r24.u64 = ctx.r7.u64;
	// mr r23,r8
	ctx.r23.u64 = ctx.r8.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247441c
	if (ctx.cr6.eq) goto loc_8247441C;
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r28,52(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r29,r10,-28548
	ctx.r29.s64 = ctx.r10.s64 + -28548;
	// lwz r11,19908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247439c
	if (!ctx.cr6.eq) goto loc_8247439C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x824708c0
	ctx.lr = 0x82474390;
	sub_824708C0(ctx, base);
	// stw r3,19908(r30)
	PPC_STORE_U32(ctx.r30.u32 + 19908, ctx.r3.u32);
	// bl 0x82470980
	ctx.lr = 0x82474398;
	sub_82470980(ctx, base);
	// lwz r11,19908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
loc_8247439C:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x824743c8
	if (!ctx.cr6.eq) goto loc_824743C8;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x82477930
	ctx.lr = 0x824743C0;
	sub_82477930(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_824743C8:
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r28,52(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,19900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824743f0
	if (!ctx.cr6.eq) goto loc_824743F0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82470410
	ctx.lr = 0x824743E4;
	sub_82470410(ctx, base);
	// stw r3,19900(r30)
	PPC_STORE_U32(ctx.r30.u32 + 19900, ctx.r3.u32);
	// bl 0x824704d0
	ctx.lr = 0x824743EC;
	sub_824704D0(ctx, base);
	// lwz r11,19900(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19900);
loc_824743F0:
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x8247441c
	if (!ctx.cr6.eq) goto loc_8247441C;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824739f8
	ctx.lr = 0x82474414;
	sub_824739F8(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_8247441C:
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82430d98
	ctx.lr = 0x82474438;
	sub_82430D98(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474478
	if (ctx.cr6.eq) goto loc_82474478;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82474478
	if (!ctx.cr6.gt) goto loc_82474478;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// li r6,64
	ctx.r6.s64 = 64;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,312(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 312);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474478;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474478:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82474480;
	sub_82309A60(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82474488"))) PPC_WEAK_FUNC(sub_82474488);
PPC_FUNC_IMPL(__imp__sub_82474488) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82474490;
	__savegprlr_14(ctx, base);
	// stwu r1,-672(r1)
	ea = -672 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// li r23,0
	ctx.r23.s64 = 0;
	// lwz r11,52(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// std r30,696(r1)
	PPC_STORE_U64(ctx.r1.u32 + 696, ctx.r30.u64);
	// stw r23,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r23.u32);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474cf8
	if (ctx.cr6.eq) goto loc_82474CF8;
	// mr r14,r23
	ctx.r14.u64 = ctx.r23.u64;
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// beq cr6,0x824744dc
	if (ctx.cr6.eq) goto loc_824744DC;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// li r31,1
	ctx.r31.s64 = 1;
	// bl 0x823099b0
	ctx.lr = 0x824744D8;
	sub_823099B0(ctx, base);
	// b 0x824744ec
	goto loc_824744EC;
loc_824744DC:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// li r31,2
	ctx.r31.s64 = 2;
	// bl 0x82464ca0
	ctx.lr = 0x824744EC;
	sub_82464CA0(ctx, base);
loc_824744EC:
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309dd8
	ctx.lr = 0x824744F8;
	sub_82309DD8(ctx, base);
	// rlwinm r11,r31,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474510
	if (ctx.cr6.eq) goto loc_82474510;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// rlwinm r31,r31,0,31,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x82474510;
	sub_82309A60(ctx, base);
loc_82474510:
	// clrlwi r11,r31,31
	ctx.r11.u64 = ctx.r31.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474524
	if (ctx.cr6.eq) goto loc_82474524;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82309a60
	ctx.lr = 0x82474524;
	sub_82309A60(ctx, base);
loc_82474524:
	// lwz r10,52(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// lwz r11,204(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 204);
	// rlwinm r11,r11,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247454c
	if (ctx.cr6.eq) goto loc_8247454C;
	// ld r11,8(r21)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r21.u32 + 8);
	// li r15,1
	ctx.r15.s64 = 1;
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82474550
	if (ctx.cr6.eq) goto loc_82474550;
loc_8247454C:
	// mr r15,r23
	ctx.r15.u64 = ctx.r23.u64;
loc_82474550:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r23.u32);
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r23.u32);
	// cmpwi cr6,r15,1
	ctx.cr6.compare<int32_t>(ctx.r15.s32, 1, ctx.xer);
	// addi r20,r11,-29761
	ctx.r20.s64 = ctx.r11.s64 + -29761;
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r16,r11,-28532
	ctx.r16.s64 = ctx.r11.s64 + -28532;
	// bne cr6,0x82474634
	if (!ctx.cr6.eq) goto loc_82474634;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bne cr6,0x82474590
	if (!ctx.cr6.eq) goto loc_82474590;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x8247458C;
	sub_823099B0(ctx, base);
	// b 0x824745b0
	goto loc_824745B0;
loc_82474590:
	// lwz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824745a8
	if (!ctx.cr6.eq) goto loc_824745A8;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// bl 0x823099b0
	ctx.lr = 0x824745A4;
	sub_823099B0(ctx, base);
	// b 0x824745b0
	goto loc_824745B0;
loc_824745A8:
	// addi r4,r10,44
	ctx.r4.s64 = ctx.r10.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824745B0;
	sub_8242BA60(ctx, base);
loc_824745B0:
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r31,160(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824745c4
	if (!ctx.cr6.eq) goto loc_824745C4;
	// mr r31,r20
	ctx.r31.u64 = ctx.r20.u64;
loc_824745C4:
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824745e0
	if (!ctx.cr6.eq) goto loc_824745E0;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// bl 0x823099b0
	ctx.lr = 0x824745DC;
	sub_823099B0(ctx, base);
	// b 0x824745e8
	goto loc_824745E8;
loc_824745E0:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824745E8;
	sub_8242BA60(ctx, base);
loc_824745E8:
	// lwz r11,180(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r5,176(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824745fc
	if (!ctx.cr6.eq) goto loc_824745FC;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_824745FC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// addi r4,r11,-13536
	ctx.r4.s64 = ctx.r11.s64 + -13536;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x8242a860
	ctx.lr = 0x82474610;
	sub_8242A860(ctx, base);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x8247461C;
	sub_82302D08(ctx, base);
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x82309a60
	ctx.lr = 0x82474624;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247462C;
	sub_82309A60(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82309a60
	ctx.lr = 0x82474634;
	sub_82309A60(ctx, base);
loc_82474634:
	// lwz r11,52(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// lis r19,-31973
	ctx.r19.s64 = -2095382528;
	// lis r18,-31973
	ctx.r18.s64 = -2095382528;
	// lwz r22,116(r11)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r11.u32 + 116);
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// beq cr6,0x82474b3c
	if (ctx.cr6.eq) goto loc_82474B3C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r17,r11,-13544
	ctx.r17.s64 = ctx.r11.s64 + -13544;
loc_82474654:
	// ld r11,76(r22)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r22.u32 + 76);
	// and r10,r11,r30
	ctx.r10.u64 = ctx.r11.u64 & ctx.r30.u64;
	// cmpld cr6,r10,r30
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, ctx.r30.u64, ctx.xer);
	// bne cr6,0x82474b30
	if (!ctx.cr6.eq) goto loc_82474B30;
	// rlwinm r11,r11,0,13,13
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x40000;
	// lwz r31,52(r21)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x824746a0
	if (ctx.cr6.eq) goto loc_824746A0;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// ori r14,r14,2
	ctx.r14.u64 = ctx.r14.u64 | 2;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r11,276(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 276);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247468C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,52(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplw cr6,r31,r11
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x824746a0
	if (ctx.cr6.eq) goto loc_824746A0;
	// ori r14,r14,1
	ctx.r14.u64 = ctx.r14.u64 | 1;
loc_824746A0:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824746bc
	if (!ctx.cr6.eq) goto loc_824746BC;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// bl 0x823099b0
	ctx.lr = 0x824746B8;
	sub_823099B0(ctx, base);
	// b 0x824746c4
	goto loc_824746C4;
loc_824746BC:
	// addi r4,r22,44
	ctx.r4.s64 = ctx.r22.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824746C4;
	sub_8242BA60(ctx, base);
loc_824746C4:
	// cmpwi cr6,r15,0
	ctx.cr6.compare<int32_t>(ctx.r15.s32, 0, ctx.xer);
	// bne cr6,0x824746f0
	if (!ctx.cr6.eq) goto loc_824746F0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x824643b8
	ctx.lr = 0x824746DC;
	sub_824643B8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x824746E8;
	sub_82302D08(ctx, base);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x82309a60
	ctx.lr = 0x824746F0;
	sub_82309A60(ctx, base);
loc_824746F0:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8245c320
	ctx.lr = 0x824746F8;
	sub_8245C320(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x824748e8
	if (ctx.cr6.eq) goto loc_824748E8;
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474718
	if (!ctx.cr6.eq) goto loc_82474718;
	// mr r7,r20
	ctx.r7.u64 = ctx.r20.u64;
loc_82474718:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247472c
	if (!ctx.cr6.eq) goto loc_8247472C;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
loc_8247472C:
	// lwz r3,8332(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8332);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474748;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474760
	if (!ctx.cr6.eq) goto loc_82474760;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
loc_82474760:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x824026a0
	ctx.lr = 0x82474768;
	sub_824026A0(ctx, base);
	// lwz r11,100(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 100);
	// lwz r10,128(r25)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// mr r27,r23
	ctx.r27.u64 = ctx.r23.u64;
	// add r29,r11,r21
	ctx.r29.u64 = ctx.r11.u64 + ctx.r21.u64;
	// lwz r24,72(r10)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r10.u32 + 72);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82474a74
	if (!ctx.cr6.gt) goto loc_82474A74;
	// mr r28,r23
	ctx.r28.u64 = ctx.r23.u64;
loc_8247478C:
	// stw r23,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r23.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r23,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r23.u32);
	// mr r7,r21
	ctx.r7.u64 = ctx.r21.u64;
	// stw r23,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r23.u32);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,128(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// add r6,r11,r28
	ctx.r6.u64 = ctx.r11.u64 + ctx.r28.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// lwz r11,308(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 308);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824747C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r30,128(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824747d8
	if (!ctx.cr6.eq) goto loc_824747D8;
	// mr r30,r20
	ctx.r30.u64 = ctx.r20.u64;
loc_824747D8:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r31,96(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824747ec
	if (!ctx.cr6.eq) goto loc_824747EC;
	// mr r31,r20
	ctx.r31.u64 = ctx.r20.u64;
loc_824747EC:
	// lwz r11,12(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82474800
	if (!ctx.cr6.eq) goto loc_82474800;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x823fbf48
	ctx.lr = 0x82474800;
	sub_823FBF48(ctx, base);
loc_82474800:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x823ff0b0
	ctx.lr = 0x82474810;
	sub_823FF0B0(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r23,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247486c
	if (ctx.cr6.eq) goto loc_8247486C;
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r23,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r23.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247486c
	if (ctx.cr6.eq) goto loc_8247486C;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474848
	if (!ctx.cr6.eq) goto loc_82474848;
	// bl 0x82545cc0
	ctx.lr = 0x82474844;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474848:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474868;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r3.u32);
loc_8247486C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,132(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82416660
	ctx.lr = 0x82474888;
	sub_82416660(ctx, base);
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824748c0
	if (ctx.cr6.eq) goto loc_824748C0;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824748ac
	if (!ctx.cr6.eq) goto loc_824748AC;
	// bl 0x82545cc0
	ctx.lr = 0x824748A8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_824748AC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824748C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824748C0:
	// stw r23,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r23.u32);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// stw r23,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r23.u32);
	// add r28,r28,r24
	ctx.r28.u64 = ctx.r28.u64 + ctx.r24.u64;
	// stw r23,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r23.u32);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247478c
	if (ctx.cr6.lt) goto loc_8247478C;
	// ld r30,696(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + 696);
	// b 0x82474a74
	goto loc_82474A74;
loc_824748E8:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82543310
	ctx.lr = 0x824748F0;
	sub_82543310(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82474958
	if (ctx.cr6.eq) goto loc_82474958;
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247490c
	if (!ctx.cr6.eq) goto loc_8247490C;
	// mr r7,r20
	ctx.r7.u64 = ctx.r20.u64;
loc_8247490C:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474920
	if (!ctx.cr6.eq) goto loc_82474920;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
loc_82474920:
	// lwz r3,8332(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8332);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247493C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474950
	if (!ctx.cr6.eq) goto loc_82474950;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
loc_82474950:
	// bl 0x824026a0
	ctx.lr = 0x82474954;
	sub_824026A0(ctx, base);
	// b 0x82474a74
	goto loc_82474A74;
loc_82474958:
	// lwz r11,68(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 68);
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82474a74
	if (!ctx.cr6.gt) goto loc_82474A74;
loc_82474968:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// beq cr6,0x824749cc
	if (ctx.cr6.eq) goto loc_824749CC;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247498c
	if (!ctx.cr6.eq) goto loc_8247498C;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// bl 0x823099b0
	ctx.lr = 0x82474988;
	sub_823099B0(ctx, base);
	// b 0x82474994
	goto loc_82474994;
loc_8247498C:
	// addi r4,r22,44
	ctx.r4.s64 = ctx.r22.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82474994;
	sub_8242BA60(ctx, base);
loc_82474994:
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r5,192(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824749a8
	if (!ctx.cr6.eq) goto loc_824749A8;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_824749A8:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x824066d0
	ctx.lr = 0x824749B8;
	sub_824066D0(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x824749C0;
	sub_82309A60(ctx, base);
	// addi r4,r1,256
	ctx.r4.s64 = ctx.r1.s64 + 256;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x822e0818
	ctx.lr = 0x824749CC;
	sub_822E0818(ctx, base);
loc_824749CC:
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r23,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r23.u32);
	// mr r8,r21
	ctx.r8.u64 = ctx.r21.u64;
	// stw r23,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r23.u32);
	// mr r7,r21
	ctx.r7.u64 = ctx.r21.u64;
	// stw r23,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r23.u32);
	// mr r6,r21
	ctx.r6.u64 = ctx.r21.u64;
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8245f418
	ctx.lr = 0x824749F8;
	sub_8245F418(ctx, base);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474a0c
	if (!ctx.cr6.eq) goto loc_82474A0C;
	// mr r7,r20
	ctx.r7.u64 = ctx.r20.u64;
loc_82474A0C:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r6,144(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474a20
	if (!ctx.cr6.eq) goto loc_82474A20;
	// mr r6,r20
	ctx.r6.u64 = ctx.r20.u64;
loc_82474A20:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474a34
	if (!ctx.cr6.eq) goto loc_82474A34;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_82474A34:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474a48
	if (!ctx.cr6.eq) goto loc_82474A48;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
loc_82474A48:
	// lwz r3,8332(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8332);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474A5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x82474A64;
	sub_82309A60(ctx, base);
	// lwz r11,68(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 68);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82474968
	if (ctx.cr6.lt) goto loc_82474968;
loc_82474A74:
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474ad0
	if (ctx.cr6.eq) goto loc_82474AD0;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r23.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474ad0
	if (ctx.cr6.eq) goto loc_82474AD0;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474aac
	if (!ctx.cr6.eq) goto loc_82474AAC;
	// bl 0x82545cc0
	ctx.lr = 0x82474AA8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474AAC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474ACC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
loc_82474AD0:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x82474AEC;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474b24
	if (ctx.cr6.eq) goto loc_82474B24;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474b10
	if (!ctx.cr6.eq) goto loc_82474B10;
	// bl 0x82545cc0
	ctx.lr = 0x82474B0C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474B10:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474B24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474B24:
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r23.u32);
	// stw r23,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r23.u32);
loc_82474B30:
	// lwz r22,108(r22)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r22.u32 + 108);
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// bne cr6,0x82474654
	if (!ctx.cr6.eq) goto loc_82474654;
loc_82474B3C:
	// lwz r3,8332(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 8332);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474B58;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r31,112(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82474b6c
	if (!ctx.cr6.eq) goto loc_82474B6C;
	// mr r31,r20
	ctx.r31.u64 = ctx.r20.u64;
loc_82474B6C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,52(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 52);
	// bl 0x82424430
	ctx.lr = 0x82474B78;
	sub_82424430(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r6,r14
	ctx.r6.u64 = ctx.r14.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x82473018
	ctx.lr = 0x82474B8C;
	sub_82473018(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82474be8
	if (ctx.cr6.eq) goto loc_82474BE8;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474be8
	if (ctx.cr6.eq) goto loc_82474BE8;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474bc4
	if (!ctx.cr6.eq) goto loc_82474BC4;
	// bl 0x82545cc0
	ctx.lr = 0x82474BC0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474BC4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474BE4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82474BE8:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x82474C04;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474c3c
	if (ctx.cr6.eq) goto loc_82474C3C;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474c28
	if (!ctx.cr6.eq) goto loc_82474C28;
	// bl 0x82545cc0
	ctx.lr = 0x82474C24;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474C28:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474C3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474C3C:
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r23.u32);
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r23.u32);
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r23.u32);
	// beq cr6,0x82474ca4
	if (ctx.cr6.eq) goto loc_82474CA4;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r23,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r23.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474ca4
	if (ctx.cr6.eq) goto loc_82474CA4;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474c80
	if (!ctx.cr6.eq) goto loc_82474C80;
	// bl 0x82545cc0
	ctx.lr = 0x82474C7C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474C80:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474CA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
loc_82474CA4:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82416660
	ctx.lr = 0x82474CC0;
	sub_82416660(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474cf8
	if (ctx.cr6.eq) goto loc_82474CF8;
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82474ce4
	if (!ctx.cr6.eq) goto loc_82474CE4;
	// bl 0x82545cc0
	ctx.lr = 0x82474CE0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r19)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r19.u32 + 8344);
loc_82474CE4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474CF8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474CF8:
	// addi r1,r1,672
	ctx.r1.s64 = ctx.r1.s64 + 672;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82474D00"))) PPC_WEAK_FUNC(sub_82474D00);
PPC_FUNC_IMPL(__imp__sub_82474D00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82474D08;
	__savegprlr_23(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r6
	ctx.r24.u64 = ctx.r6.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// mr r23,r7
	ctx.r23.u64 = ctx.r7.u64;
	// mr r28,r8
	ctx.r28.u64 = ctx.r8.u64;
	// mr r26,r9
	ctx.r26.u64 = ctx.r9.u64;
	// mr r25,r10
	ctx.r25.u64 = ctx.r10.u64;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// bne cr6,0x82474da4
	if (!ctx.cr6.eq) goto loc_82474DA4;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82474dbc
	if (ctx.cr6.eq) goto loc_82474DBC;
	// lwz r11,300(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474dbc
	if (ctx.cr6.eq) goto loc_82474DBC;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474D58;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82474dbc
	if (ctx.cr6.eq) goto loc_82474DBC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82424430
	ctx.lr = 0x82474D6C;
	sub_82424430(ctx, base);
	// lwz r11,300(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 300);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82474d98
	if (ctx.cr6.eq) goto loc_82474D98;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82474D90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// b 0x82474d9c
	goto loc_82474D9C;
loc_82474D98:
	// li r23,0
	ctx.r23.s64 = 0;
loc_82474D9C:
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x82474dbc
	if (ctx.cr6.eq) goto loc_82474DBC;
loc_82474DA4:
	// cmpwi cr6,r23,60
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 60, ctx.xer);
	// ble cr6,0x82474dbc
	if (!ctx.cr6.gt) goto loc_82474DBC;
	// addi r5,r23,-60
	ctx.r5.s64 = ctx.r23.s64 + -60;
	// addi r4,r24,60
	ctx.r4.s64 = ctx.r24.s64 + 60;
	// addi r3,r30,60
	ctx.r3.s64 = ctx.r30.s64 + 60;
	// bl 0x82b06418
	ctx.lr = 0x82474DBC;
	sub_82B06418(ctx, base);
loc_82474DBC:
	// cmpwi cr6,r26,-1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, -1, ctx.xer);
	// bne cr6,0x82474dc8
	if (!ctx.cr6.eq) goto loc_82474DC8;
	// mr r26,r28
	ctx.r26.u64 = ctx.r28.u64;
loc_82474DC8:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82474f68
	if (ctx.cr6.eq) goto loc_82474F68;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82474ed0
	if (ctx.cr6.eq) goto loc_82474ED0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82424430
	ctx.lr = 0x82474DE4;
	sub_82424430(ctx, base);
	// lwz r11,52(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// beq cr6,0x82474e00
	if (ctx.cr6.eq) goto loc_82474E00;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// b 0x82474e04
	goto loc_82474E04;
loc_82474E00:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82474E04:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82474E10;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82474ed0
	if (ctx.cr6.eq) goto loc_82474ED0;
loc_82474E1C:
	// ld r11,76(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 76);
	// rlwinm r10,r11,0,10,18
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x3FE000;
	// rlwinm r10,r10,0,18,10
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFE03FFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82474eb4
	if (ctx.cr6.eq) goto loc_82474EB4;
	// lwz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r10,204(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 204);
	// rlwinm r10,r10,0,14,14
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x20000;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82474e54
	if (ctx.cr6.eq) goto loc_82474E54;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// b 0x82474e94
	goto loc_82474E94;
loc_82474E54:
	// rlwinm r11,r11,0,9,9
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400000;
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 72);
	// lwz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// mullw r5,r10,r9
	ctx.r5.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// add r3,r11,r30
	ctx.r3.u64 = ctx.r11.u64 + ctx.r30.u64;
	// bne cr6,0x82474e80
	if (!ctx.cr6.eq) goto loc_82474E80;
	// add r4,r11,r29
	ctx.r4.u64 = ctx.r11.u64 + ctx.r29.u64;
	// bl 0x82b06418
	ctx.lr = 0x82474E7C;
	sub_82B06418(ctx, base);
	// b 0x82474eb4
	goto loc_82474EB4;
loc_82474E80:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82e29500
	ctx.lr = 0x82474E88;
	sub_82E29500(ctx, base);
	// mr r8,r25
	ctx.r8.u64 = ctx.r25.u64;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82474E94:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// add r4,r11,r30
	ctx.r4.u64 = ctx.r11.u64 + ctx.r30.u64;
	// add r5,r11,r29
	ctx.r5.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r10,328(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82474EB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474EB4:
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82474EC4;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82474e1c
	if (!ctx.cr6.eq) goto loc_82474E1C;
loc_82474ED0:
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x82474f68
	if (ctx.cr6.eq) goto loc_82474F68;
	// lwz r31,120(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 120);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82474f68
	if (ctx.cr6.eq) goto loc_82474F68;
loc_82474EE4:
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// cmpw cr6,r11,r23
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r23.s32, ctx.xer);
	// bge cr6,0x82474f5c
	if (!ctx.cr6.lt) goto loc_82474F5C;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82474f0c
	if (ctx.cr6.eq) goto loc_82474F0C;
	// ld r10,76(r31)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r31.u32 + 76);
	// rlwinm r10,r10,0,10,18
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3FE000;
	// rlwinm r10,r10,0,18,10
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFE03FFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82474f5c
	if (!ctx.cr6.eq) goto loc_82474F5C;
loc_82474F0C:
	// lwz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 72);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// add r3,r11,r30
	ctx.r3.u64 = ctx.r11.u64 + ctx.r30.u64;
	// mullw r5,r10,r9
	ctx.r5.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// bl 0x82e29500
	ctx.lr = 0x82474F24;
	sub_82E29500(ctx, base);
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// bne cr6,0x82474f34
	if (!ctx.cr6.eq) goto loc_82474F34;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
loc_82474F34:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r8,r25
	ctx.r8.u64 = ctx.r25.u64;
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r5,r11,r24
	ctx.r5.u64 = ctx.r11.u64 + ctx.r24.u64;
	// add r4,r11,r30
	ctx.r4.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,328(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82474F5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82474F5C:
	// lwz r31,112(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 112);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82474ee4
	if (!ctx.cr6.eq) goto loc_82474EE4;
loc_82474F68:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82474F70"))) PPC_WEAK_FUNC(sub_82474F70);
PPC_FUNC_IMPL(__imp__sub_82474F70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82474F78;
	__savegprlr_25(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r26,r6
	ctx.r26.u64 = ctx.r6.u64;
	// lwz r11,19848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
	// mr r25,r7
	ctx.r25.u64 = ctx.r7.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82474fb8
	if (!ctx.cr6.eq) goto loc_82474FB8;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82462518
	ctx.lr = 0x82474FAC;
	sub_82462518(ctx, base);
	// stw r3,19848(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x82474FB4;
	sub_8245F220(ctx, base);
	// lwz r11,19848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
loc_82474FB8:
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x82474FCC;
	sub_82302F00(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r29,r11,20028
	ctx.r29.s64 = ctx.r11.s64 + 20028;
loc_82474FD4:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824750b4
	if (!ctx.cr6.lt) goto loc_824750B4;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwzx r31,r10,r11
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82474FFC;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824750a8
	if (ctx.cr6.eq) goto loc_824750A8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475018;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x824750a8
	if (!ctx.cr6.eq) goto loc_824750A8;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82475050
	if (!ctx.cr6.eq) goto loc_82475050;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// beq cr6,0x82475050
	if (ctx.cr6.eq) goto loc_82475050;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475050;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82475050:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// add r5,r31,r26
	ctx.r5.u64 = ctx.r31.u64 + ctx.r26.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r11,312(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 312);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475078;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x824750a8
	if (!ctx.cr6.eq) goto loc_824750A8;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// beq cr6,0x824750a8
	if (ctx.cr6.eq) goto loc_824750A8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824750A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824750A8:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302f00
	ctx.lr = 0x824750B0;
	sub_82302F00(ctx, base);
	// b 0x82474fd4
	goto loc_82474FD4;
loc_824750B4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82424430
	ctx.lr = 0x824750C0;
	sub_82424430(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,16384
	ctx.r4.s64 = 16384;
	// bl 0x82474488
	ctx.lr = 0x824750CC;
	sub_82474488(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824750D8"))) PPC_WEAK_FUNC(sub_824750D8);
PPC_FUNC_IMPL(__imp__sub_824750D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x824750E0;
	__savegprlr_25(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82475100
	if (ctx.cr6.eq) goto loc_82475100;
	// lwz r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// b 0x82475104
	goto loc_82475104;
loc_82475100:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82475104:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82475110;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824751dc
	if (ctx.cr6.eq) goto loc_824751DC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r29,-31970
	ctx.r29.s64 = -2095185920;
	// addi r25,r11,-28548
	ctx.r25.s64 = ctx.r11.s64 + -28548;
loc_82475128:
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// li r28,0
	ctx.r28.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824751c0
	if (!ctx.cr6.gt) goto loc_824751C0;
loc_82475138:
	// lwz r11,72(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 72);
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// mullw r11,r11,r28
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r28.s32);
	// lwz r4,19876(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 19876);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// add r30,r11,r27
	ctx.r30.u64 = ctx.r11.u64 + ctx.r27.u64;
	// bne cr6,0x8247516c
	if (!ctx.cr6.eq) goto loc_8247516C;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x8246f948
	ctx.lr = 0x82475160;
	sub_8246F948(ctx, base);
	// stw r3,19876(r29)
	PPC_STORE_U32(ctx.r29.u32 + 19876, ctx.r3.u32);
	// bl 0x8246fa08
	ctx.lr = 0x82475168;
	sub_8246FA08(ctx, base);
	// lwz r4,19876(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 19876);
loc_8247516C:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82475174;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247518c
	if (ctx.cr6.eq) goto loc_8247518C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x8246ccc8
	ctx.lr = 0x82475188;
	sub_8246CCC8(ctx, base);
	// b 0x824751b0
	goto loc_824751B0;
loc_8247518C:
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824751b0
	if (ctx.cr6.eq) goto loc_824751B0;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// lwz r3,128(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x824750d8
	ctx.lr = 0x824751B0;
	sub_824750D8(ctx, base);
loc_824751B0:
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82475138
	if (ctx.cr6.lt) goto loc_82475138;
loc_824751C0:
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824751D0;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82475128
	if (!ctx.cr6.eq) goto loc_82475128;
loc_824751DC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824751E8"))) PPC_WEAK_FUNC(sub_824751E8);
PPC_FUNC_IMPL(__imp__sub_824751E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x824751F0;
	__savegprlr_22(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r22,r4
	ctx.r22.u64 = ctx.r4.u64;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// beq cr6,0x82475390
	if (ctx.cr6.eq) goto loc_82475390;
	// lwz r11,52(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 52);
	// li r23,0
	ctx.r23.s64 = 0;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// beq cr6,0x82475224
	if (ctx.cr6.eq) goto loc_82475224;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// b 0x82475228
	goto loc_82475228;
loc_82475224:
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r23.u32);
loc_82475228:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8245c128
	ctx.lr = 0x82475230;
	sub_8245C128(ctx, base);
	// lwz r30,84(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82475390
	if (ctx.cr6.eq) goto loc_82475390;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lis r29,-31970
	ctx.r29.s64 = -2095185920;
	// addi r28,r11,-29761
	ctx.r28.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r24,r11,-28532
	ctx.r24.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r27,r11,-28548
	ctx.r27.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r26,r11,-4420
	ctx.r26.s64 = ctx.r11.s64 + -4420;
loc_82475260:
	// lwz r11,19848(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 19848);
	// lwz r31,40(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82475284
	if (!ctx.cr6.eq) goto loc_82475284;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82462518
	ctx.lr = 0x82475278;
	sub_82462518(ctx, base);
	// stw r3,19848(r29)
	PPC_STORE_U32(ctx.r29.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x82475280;
	sub_8245F220(ctx, base);
	// lwz r11,19848(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 19848);
loc_82475284:
	// cmplw cr6,r31,r11
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x82475374
	if (ctx.cr6.eq) goto loc_82475374;
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// stw r23,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r23.u32);
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824752b4
	if (!ctx.cr6.eq) goto loc_824752B4;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x823099b0
	ctx.lr = 0x824752B0;
	sub_823099B0(ctx, base);
	// b 0x824752bc
	goto loc_824752BC;
loc_824752B4:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824752BC;
	sub_8242BA60(ctx, base);
loc_824752BC:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824752d0
	if (!ctx.cr6.eq) goto loc_824752D0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_824752D0:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x823099b0
	ctx.lr = 0x824752D8;
	sub_823099B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// bl 0x82309bc8
	ctx.lr = 0x824752E8;
	sub_82309BC8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824752fc
	if (ctx.cr6.eq) goto loc_824752FC;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82475300
	goto loc_82475300;
loc_824752FC:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_82475300:
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82418c98
	ctx.lr = 0x8247530C;
	sub_82418C98(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82475318;
	sub_82309A60(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82475320;
	sub_82309A60(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82475328;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247536c
	if (ctx.cr6.eq) goto loc_8247536C;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82475344
	if (!ctx.cr6.eq) goto loc_82475344;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_82475344:
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r7,r25
	ctx.r7.u64 = ctx.r25.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// add r5,r11,r25
	ctx.r5.u64 = ctx.r11.u64 + ctx.r25.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,312(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 312);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247536C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247536C:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82309a60
	ctx.lr = 0x82475374;
	sub_82309A60(ctx, base);
loc_82475374:
	// lwz r11,64(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82475384;
	sub_8245C128(ctx, base);
	// lwz r30,84(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82475260
	if (!ctx.cr6.eq) goto loc_82475260;
loc_82475390:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82475398"))) PPC_WEAK_FUNC(sub_82475398);
PPC_FUNC_IMPL(__imp__sub_82475398) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x824753A0;
	__savegprlr_23(ctx, base);
	// stwu r1,-432(r1)
	ea = -432 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r23,r5
	ctx.r23.u64 = ctx.r5.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// mr r29,r7
	ctx.r29.u64 = ctx.r7.u64;
	// bl 0x82468f58
	ctx.lr = 0x824753C0;
	sub_82468F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x824753d0
	if (!ctx.cr6.eq) goto loc_824753D0;
	// addi r1,r1,432
	ctx.r1.s64 = ctx.r1.s64 + 432;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_824753D0:
	// lbz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// li r24,0
	ctx.r24.s64 = 0;
	// extsb r11,r10
	ctx.r11.s64 = ctx.r10.s8;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82475424
	if (ctx.cr6.eq) goto loc_82475424;
	// addi r9,r1,224
	ctx.r9.s64 = ctx.r1.s64 + 224;
loc_824753EC:
	// cmpwi cr6,r11,46
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 46, ctx.xer);
	// beq cr6,0x82475424
	if (ctx.cr6.eq) goto loc_82475424;
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// beq cr6,0x82475424
	if (ctx.cr6.eq) goto loc_82475424;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// beq cr6,0x82475424
	if (ctx.cr6.eq) goto loc_82475424;
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// stb r10,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r10.u8);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lbz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// extsb r11,r10
	ctx.r11.s64 = ctx.r10.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824753ec
	if (!ctx.cr6.eq) goto loc_824753EC;
loc_82475424:
	// addi r11,r1,224
	ctx.r11.s64 = ctx.r1.s64 + 224;
	// lbz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stbx r24,r8,r11
	PPC_STORE_U8(ctx.r8.u32 + ctx.r11.u32, ctx.r24.u8);
	// beq cr6,0x82475490
	if (ctx.cr6.eq) goto loc_82475490;
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// lbz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// extsb r10,r11
	ctx.r10.s64 = ctx.r11.s8;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82475484
	if (ctx.cr6.eq) goto loc_82475484;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
loc_82475454:
	// cmpwi cr6,r10,41
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 41, ctx.xer);
	// beq cr6,0x82475484
	if (ctx.cr6.eq) goto loc_82475484;
	// cmpwi cr6,r10,44
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 44, ctx.xer);
	// beq cr6,0x82475484
	if (ctx.cr6.eq) goto loc_82475484;
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// stb r11,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r11.u8);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// lbz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// extsb r10,r11
	ctx.r10.s64 = ctx.r11.s8;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x82475454
	if (!ctx.cr6.eq) goto loc_82475454;
loc_82475484:
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// stbx r24,r8,r11
	PPC_STORE_U8(ctx.r8.u32 + ctx.r11.u32, ctx.r24.u8);
	// b 0x82475494
	goto loc_82475494;
loc_82475490:
	// stb r24,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r24.u8);
loc_82475494:
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r30,r11,-28548
	ctx.r30.s64 = ctx.r11.s64 + -28548;
	// lwz r3,19848(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824754c0
	if (!ctx.cr6.eq) goto loc_824754C0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82462518
	ctx.lr = 0x824754B4;
	sub_82462518(ctx, base);
	// stw r3,19848(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x824754BC;
	sub_8245F220(ctx, base);
	// lwz r3,19848(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
loc_824754C0:
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r1,224
	ctx.r5.s64 = ctx.r1.s64 + 224;
	// li r4,-1
	ctx.r4.s64 = -1;
	// bl 0x824656c0
	ctx.lr = 0x824754D0;
	sub_824656C0(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r28,r24
	ctx.r28.u64 = ctx.r24.u64;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82475608
	if (ctx.cr6.eq) goto loc_82475608;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lwz r4,1260(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82475504
	if (!ctx.cr6.eq) goto loc_82475504;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8243aa40
	ctx.lr = 0x824754F8;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82475500;
	sub_824455B8(ctx, base);
	// lwz r4,1260(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_82475504:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x8247550C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82475534
	if (ctx.cr6.eq) goto loc_82475534;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// bl 0x82424430
	ctx.lr = 0x82475524;
	sub_82424430(ctx, base);
	// cmplw cr6,r29,r3
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x82475538
	if (!ctx.cr6.eq) goto loc_82475538;
	// mr r26,r24
	ctx.r26.u64 = ctx.r24.u64;
	// b 0x82475538
	goto loc_82475538;
loc_82475534:
	// lwz r31,52(r26)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r26.u32 + 52);
loc_82475538:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8252f658
	ctx.lr = 0x82475544;
	sub_8252F658(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82475608
	if (ctx.cr6.eq) goto loc_82475608;
	// lwz r30,128(r25)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r25.u32 + 128);
	// lbz r11,157(r28)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r28.u32 + 157);
	// lbz r10,157(r30)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r30.u32 + 157);
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// bne cr6,0x82475604
	if (!ctx.cr6.eq) goto loc_82475604;
	// lwz r11,76(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
	// stw r28,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r28.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x8247557C;
	sub_8245C128(ctx, base);
	// lwz r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 76);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r30.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82475590;
	sub_8245C128(ctx, base);
	// lbz r11,157(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 157);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824755fc
	if (ctx.cr6.eq) goto loc_824755FC;
loc_8247559C:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r29,84(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// lwz r9,52(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// cmpw cr6,r10,r9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, ctx.xer);
	// bne cr6,0x82475604
	if (!ctx.cr6.eq) goto loc_82475604;
	// ld r10,76(r29)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r29.u32 + 76);
	// ld r9,76(r11)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r11.u32 + 76);
	// xor r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 ^ ctx.r9.u64;
	// rlwinm r10,r10,0,23,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x100;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x82475604
	if (!ctx.cr6.eq) goto loc_82475604;
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824755DC;
	sub_8245C128(ctx, base);
	// lwz r11,64(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824755EC;
	sub_8245C128(ctx, base);
	// lbz r11,157(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 157);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247559c
	if (ctx.cr6.lt) goto loc_8247559C;
loc_824755FC:
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// b 0x8247560c
	goto loc_8247560C;
loc_82475604:
	// mr r28,r24
	ctx.r28.u64 = ctx.r24.u64;
loc_82475608:
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_8247560C:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// stw r11,0(r23)
	PPC_STORE_U32(ctx.r23.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82475658
	if (ctx.cr6.eq) goto loc_82475658;
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82475634
	if (ctx.cr6.eq) goto loc_82475634;
	// addi r3,r28,44
	ctx.r3.s64 = ctx.r28.s64 + 44;
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// b 0x82475660
	goto loc_82475660;
loc_82475634:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x8247564C;
	sub_8243B750(ctx, base);
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// b 0x82475660
	goto loc_82475660;
loc_82475658:
	// stw r24,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r24.u32);
	// stw r24,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r24.u32);
loc_82475660:
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,4(r23)
	PPC_STORE_U32(ctx.r23.u32 + 4, ctx.r10.u32);
	// stw r11,8(r23)
	PPC_STORE_U32(ctx.r23.u32 + 8, ctx.r11.u32);
	// bne cr6,0x82475684
	if (!ctx.cr6.eq) goto loc_82475684;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_82475684:
	// addi r1,r1,432
	ctx.r1.s64 = ctx.r1.s64 + 432;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82475690"))) PPC_WEAK_FUNC(sub_82475690);
PPC_FUNC_IMPL(__imp__sub_82475690) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82475698;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x823027a8
	ctx.lr = 0x824756AC;
	sub_823027A8(ctx, base);
	// li r10,4
	ctx.r10.s64 = 4;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// stw r10,72(r31)
	PPC_STORE_U32(ctx.r31.u32 + 72, ctx.r10.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,268(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 268);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824756D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247570c
	if (ctx.cr6.eq) goto loc_8247570C;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247570c
	if (ctx.cr6.eq) goto loc_8247570C;
	// lwz r11,128(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 128);
	// rlwinm r11,r11,0,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFFE;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247570c
	if (ctx.cr6.eq) goto loc_8247570C;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// stw r11,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r11.u32);
	// lwz r11,128(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 128);
	// rlwinm r11,r11,31,1,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 31) & 0x7FFFFFFF;
	// stw r11,128(r31)
	PPC_STORE_U32(ctx.r31.u32 + 128, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_8247570C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r30,40(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// lwz r11,364(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 364);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475724;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r30,r11,-1
	ctx.r30.s64 = ctx.r11.s64 + -1;
	// lwz r10,280(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 280);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82475740;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// add r11,r3,r30
	ctx.r11.u64 = ctx.r3.u64 + ctx.r30.u64;
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// andc r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 & ~ctx.r30.u64;
	// stw r10,128(r31)
	PPC_STORE_U32(ctx.r31.u32 + 128, ctx.r10.u32);
	// stw r11,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82475760"))) PPC_WEAK_FUNC(sub_82475760);
PPC_FUNC_IMPL(__imp__sub_82475760) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x82475768;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// rlwinm r11,r25,0,25,25
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0x40;
	// mr r24,r4
	ctx.r24.u64 = ctx.r4.u64;
	// li r23,1
	ctx.r23.s64 = 1;
	// li r22,0
	ctx.r22.s64 = 0;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82475868
	if (ctx.cr6.eq) goto loc_82475868;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// lwz r11,352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 352);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247579C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824758c0
	if (ctx.cr6.eq) goto loc_824758C0;
	// lwz r31,128(r26)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r26.u32 + 128);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82475868
	if (ctx.cr6.eq) goto loc_82475868;
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r29,52(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,19908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824757dc
	if (!ctx.cr6.eq) goto loc_824757DC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x824708c0
	ctx.lr = 0x824757D0;
	sub_824708C0(ctx, base);
	// stw r3,19908(r30)
	PPC_STORE_U32(ctx.r30.u32 + 19908, ctx.r3.u32);
	// bl 0x82470980
	ctx.lr = 0x824757D8;
	sub_82470980(ctx, base);
	// lwz r11,19908(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19908);
loc_824757DC:
	// cmplw cr6,r29,r11
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82475868
	if (!ctx.cr6.eq) goto loc_82475868;
	// lwz r11,4(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// mr r29,r22
	ctx.r29.u64 = ctx.r22.u64;
	// lwz r27,0(r24)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82475868
	if (!ctx.cr6.gt) goto loc_82475868;
	// rlwinm r28,r25,0,26,24
	ctx.r28.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0xFFFFFFFFFFFFFFBF;
loc_824757FC:
	// lwz r11,128(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 128);
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// lwz r10,336(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 336);
	// mullw r11,r11,r29
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r29.s32);
	// add r30,r11,r27
	ctx.r30.u64 = ctx.r11.u64 + ctx.r27.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82475828;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,332(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 332);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475844;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82475850
	if (ctx.cr6.eq) goto loc_82475850;
	// mr r23,r22
	ctx.r23.u64 = ctx.r22.u64;
loc_82475850:
	// lwz r11,4(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 4);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x824757fc
	if (ctx.cr6.lt) goto loc_824757FC;
	// cmpwi cr6,r23,1
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 1, ctx.xer);
	// bne cr6,0x824758c0
	if (!ctx.cr6.eq) goto loc_824758C0;
loc_82475868:
	// lwz r11,128(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 128);
	// ld r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r11.u32 + 76);
	// rlwinm r11,r11,0,9,9
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247589c
	if (ctx.cr6.eq) goto loc_8247589C;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r11,340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475894;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
loc_8247589C:
	// lwz r11,8(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8);
	// lwz r4,72(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 72);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r22,4(r24)
	PPC_STORE_U32(ctx.r24.u32 + 4, ctx.r22.u32);
	// beq cr6,0x824758c0
	if (ctx.cr6.eq) goto loc_824758C0;
	// li r5,16
	ctx.r5.s64 = 16;
	// stw r22,8(r24)
	PPC_STORE_U32(ctx.r24.u32 + 8, ctx.r22.u32);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x822e0788
	ctx.lr = 0x824758C0;
	sub_822E0788(ctx, base);
loc_824758C0:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824758C8"))) PPC_WEAK_FUNC(sub_824758C8);
PPC_FUNC_IMPL(__imp__sub_824758C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x824758D0;
	__savegprlr_25(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824759a0
	if (!ctx.cr6.gt) goto loc_824759A0;
	// rlwinm r11,r27,0,25,25
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0x40;
	// li r3,1
	ctx.r3.s64 = 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824759d8
	if (ctx.cr6.eq) goto loc_824759D8;
	// lwz r30,128(r28)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + 128);
	// li r25,0
	ctx.r25.s64 = 0;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x824759bc
	if (ctx.cr6.eq) goto loc_824759BC;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r29,52(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// lwz r11,19908(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19908);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82475938
	if (!ctx.cr6.eq) goto loc_82475938;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x824708c0
	ctx.lr = 0x8247592C;
	sub_824708C0(ctx, base);
	// stw r3,19908(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19908, ctx.r3.u32);
	// bl 0x82470980
	ctx.lr = 0x82475934;
	sub_82470980(ctx, base);
	// lwz r11,19908(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19908);
loc_82475938:
	// cmplw cr6,r29,r11
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x824759bc
	if (!ctx.cr6.eq) goto loc_824759BC;
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r29,0(r26)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824759d4
	if (!ctx.cr6.gt) goto loc_824759D4;
loc_82475954:
	// lwz r11,128(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 128);
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// lwz r10,332(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 332);
	// mullw r11,r11,r31
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r31.s32);
	// add r4,r11,r29
	ctx.r4.u64 = ctx.r11.u64 + ctx.r29.u64;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x8247597C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x824759ac
	if (!ctx.cr6.eq) goto loc_824759AC;
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82475954
	if (ctx.cr6.lt) goto loc_82475954;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_824759A0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_824759AC:
	// li r25,1
	ctx.r25.s64 = 1;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_824759BC:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 352);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824759D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
loc_824759D4:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_824759D8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824759E0"))) PPC_WEAK_FUNC(sub_824759E0);
PPC_FUNC_IMPL(__imp__sub_824759E0) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,128(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
	// b 0x8245c918
	sub_8245C918(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824759E8"))) PPC_WEAK_FUNC(sub_824759E8);
PPC_FUNC_IMPL(__imp__sub_824759E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x824759F0;
	__savegprlr_25(ctx, base);
	// stfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, ctx.f31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// lwz r11,128(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r30,r10,-28532
	ctx.r30.s64 = ctx.r10.s64 + -28532;
	// beq cr6,0x82475a28
	if (ctx.cr6.eq) goto loc_82475A28;
	// addi r3,r11,44
	ctx.r3.s64 = ctx.r11.s64 + 44;
	// b 0x82475a3c
	goto loc_82475A3C;
loc_82475A28:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8243b750
	ctx.lr = 0x82475A3C;
	sub_8243B750(ctx, base);
loc_82475A3C:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r11.u64);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,87
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 87, ctx.xer);
	// bne cr6,0x82475c90
	if (!ctx.cr6.eq) goto loc_82475C90;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82475c90
	if (!ctx.cr6.eq) goto loc_82475C90;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lfs f31,-28552(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -28552);
	ctx.f31.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// bl 0x82e28000
	ctx.lr = 0x82475A70;
	sub_82E28000(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,144
	ctx.r11.s64 = ctx.r1.s64 + 144;
	// lfs f0,4(r28)
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	ctx.f0.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f13.u32);
	// bl 0x82e28000
	ctx.lr = 0x82475A8C;
	sub_82E28000(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,128
	ctx.r11.s64 = ctx.r1.s64 + 128;
	// lfs f0,8(r28)
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	ctx.f0.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f13.u32);
	// bl 0x82e28000
	ctx.lr = 0x82475AA8;
	sub_82E28000(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,100
	ctx.r11.s64 = ctx.r1.s64 + 100;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f0.u32);
	// lwz r25,100(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// mr r9,r25
	ctx.r9.u64 = ctx.r25.u64;
	// bge cr6,0x82475acc
	if (!ctx.cr6.lt) goto loc_82475ACC;
	// neg r9,r25
	ctx.r9.s64 = -ctx.r25.s64;
loc_82475ACC:
	// lwz r26,128(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// mr r10,r26
	ctx.r10.u64 = ctx.r26.u64;
	// bge cr6,0x82475ae0
	if (!ctx.cr6.lt) goto loc_82475AE0;
	// neg r10,r26
	ctx.r10.s64 = -ctx.r26.s64;
loc_82475AE0:
	// lwz r27,144(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// bge cr6,0x82475af4
	if (!ctx.cr6.lt) goto loc_82475AF4;
	// neg r11,r27
	ctx.r11.s64 = -ctx.r27.s64;
loc_82475AF4:
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82475b00
	if (!ctx.cr6.lt) goto loc_82475B00;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
loc_82475B00:
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82475b0c
	if (!ctx.cr6.lt) goto loc_82475B0C;
	// mr r11,r9
	ctx.r11.u64 = ctx.r9.u64;
loc_82475B0C:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// li r30,1
	ctx.r30.s64 = 1;
	// addi r10,r11,-1
	ctx.r10.s64 = ctx.r11.s64 + -1;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r11,r11,26,0,5
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 26) & 0xFC000000;
	// subfic r10,r10,32
	ctx.xer.ca = ctx.r10.u32 <= 32;
	ctx.r10.s64 = 32 - ctx.r10.s64;
	// srawi r11,r11,31
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 31;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// not r11,r11
	ctx.r11.u64 = ~ctx.r11.u64;
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// and r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 & ctx.r11.u64;
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// bge cr6,0x82475b4c
	if (!ctx.cr6.lt) goto loc_82475B4C;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// b 0x82475b58
	goto loc_82475B58;
loc_82475B4C:
	// cmplwi cr6,r11,20
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 20, ctx.xer);
	// blt cr6,0x82475b58
	if (ctx.cr6.lt) goto loc_82475B58;
	// li r11,20
	ctx.r11.s64 = 20;
loc_82475B58:
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,20
	ctx.r5.s64 = 20;
	// addi r4,r1,100
	ctx.r4.s64 = ctx.r1.s64 + 100;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// lwz r11,12(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475B7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r10,r11,1
	ctx.r10.s64 = ctx.r11.s64 + 1;
	// addi r11,r11,2
	ctx.r11.s64 = ctx.r11.s64 + 2;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r9,12(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 12);
	// slw r31,r30,r10
	ctx.r31.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r30.u32 << (ctx.r10.u8 & 0x3F));
	// slw r30,r30,r11
	ctx.r30.u64 = ctx.r11.u8 & 0x20 ? 0 : (ctx.r30.u32 << (ctx.r11.u8 & 0x3F));
	// add r11,r31,r27
	ctx.r11.u64 = ctx.r31.u64 + ctx.r27.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// add r11,r31,r26
	ctx.r11.u64 = ctx.r31.u64 + ctx.r26.u64;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// add r11,r31,r25
	ctx.r11.u64 = ctx.r31.u64 + ctx.r25.u64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x82475BC4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475BE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475BFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824762dc
	if (ctx.cr6.eq) goto loc_824762DC;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,112(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// subf r11,r31,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r31.s64;
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// subf r10,r31,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r31.s64;
	// extsw r11,r11
	ctx.r11.s64 = ctx.r11.s32;
	// subf r9,r31,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r31.s64;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r11.u64);
	// lfd f0,144(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// lfd f13,128(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// std r9,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r9.u64);
	// lfd f12,120(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// stfs f0,144(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// frsp f0,f13
	ctx.f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,148(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// frsp f0,f12
	ctx.f0.f64 = double(float(ctx.f12.f64));
	// stfs f0,152(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r9,152(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r9,8(r28)
	PPC_STORE_U32(ctx.r28.u32 + 8, ctx.r9.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-72(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82475C90:
	// lwz r11,128(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// beq cr6,0x82475ca8
	if (ctx.cr6.eq) goto loc_82475CA8;
	// addi r3,r11,44
	ctx.r3.s64 = ctx.r11.s64 + 44;
	// b 0x82475cbc
	goto loc_82475CBC;
loc_82475CA8:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8243b750
	ctx.lr = 0x82475CBC;
	sub_8243B750(ctx, base);
loc_82475CBC:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r11.u64);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,88
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 88, ctx.xer);
	// bne cr6,0x82475e68
	if (!ctx.cr6.eq) goto loc_82475E68;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82475e68
	if (!ctx.cr6.eq) goto loc_82475E68;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// srawi r11,r11,8
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0xFF) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 8;
	// lwz r9,8(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	// srawi r10,r10,8
	ctx.xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xFF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 8;
	// lwz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// srawi r9,r9,8
	ctx.xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0xFF) != 0);
	ctx.r9.s64 = ctx.r9.s32 >> 8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r8,8(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// stb r10,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r10.u8);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// stb r9,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r9.u8);
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r11.u8);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x82475D30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82475d5c
	if (ctx.cr6.eq) goto loc_82475D5C;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,83
	ctx.r4.s64 = ctx.r1.s64 + 83;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475D58;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82475d64
	goto loc_82475D64;
loc_82475D5C:
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
loc_82475D64:
	// lbz r11,81(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 81);
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r11.u8);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82475D94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82475dc0
	if (ctx.cr6.eq) goto loc_82475DC0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,81
	ctx.r4.s64 = ctx.r1.s64 + 81;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475DBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82475dc8
	goto loc_82475DC8;
loc_82475DC0:
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r11.u8);
loc_82475DC8:
	// lbz r11,82(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 82);
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// lwz r10,8(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r11.u8);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82475DF8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82475e28
	if (ctx.cr6.eq) goto loc_82475E28;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,82
	ctx.r4.s64 = ctx.r1.s64 + 82;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475E20;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lbz r9,82(r1)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r1.u32 + 82);
	// b 0x82475e2c
	goto loc_82475E2C;
loc_82475E28:
	// li r9,0
	ctx.r9.s64 = 0;
loc_82475E2C:
	// lwz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824762dc
	if (ctx.cr6.eq) goto loc_824762DC;
	// lbz r11,83(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 83);
	// rlwinm r9,r9,8,16,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFF00;
	// lbz r10,81(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 81);
	// li r3,1
	ctx.r3.s64 = 1;
	// rotlwi r11,r11,8
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 8);
	// rotlwi r10,r10,8
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r10.u32, 8);
	// stw r9,8(r28)
	PPC_STORE_U32(ctx.r28.u32 + 8, ctx.r9.u32);
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82475E68:
	// lwz r11,128(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// beq cr6,0x82475e80
	if (ctx.cr6.eq) goto loc_82475E80;
	// addi r3,r11,44
	ctx.r3.s64 = ctx.r11.s64 + 44;
	// b 0x82475e94
	goto loc_82475E94;
loc_82475E80:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8243b750
	ctx.lr = 0x82475E94;
	sub_8243B750(ctx, base);
loc_82475E94:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r11.u64);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,99
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 99, ctx.xer);
	// bne cr6,0x82476034
	if (!ctx.cr6.eq) goto loc_82476034;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476034
	if (!ctx.cr6.eq) goto loc_82476034;
	// lwz r10,20(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 20);
	// addi r11,r1,160
	ctx.r11.s64 = ctx.r1.s64 + 160;
	// lwz r9,4(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r8,8(r28)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	// lwz r7,12(r28)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// stw r8,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r8.u32);
	// stw r7,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r7.u32);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f31,-13892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f31.f64 = double(temp.f32);
	// beq cr6,0x82475f34
	if (ctx.cr6.eq) goto loc_82475F34;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82383c90
	ctx.lr = 0x82475EF4;
	sub_82383C90(ctx, base);
	// lfs f13,172(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f31
	ctx.cr6.compare(ctx.f13.f64, ctx.f31.f64);
	// bge cr6,0x82475f34
	if (!ctx.cr6.lt) goto loc_82475F34;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f12,160(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f12.f64 = double(temp.f32);
	// lfs f0,-13880(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13880);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// stfs f12,160(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// lfs f12,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// stfs f12,164(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f12,f12,f0
	ctx.f12.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// stfs f12,168(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// fmuls f0,f13,f0
	ctx.f0.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// stfs f0,172(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
loc_82475F34:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475F50;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r1,164
	ctx.r4.s64 = ctx.r1.s64 + 164;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475F6C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82475F88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824762dc
	if (ctx.cr6.eq) goto loc_824762DC;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfs f0,160(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,164(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,-13896(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13896);
	ctx.f11.f64 = double(temp.f32);
	// fnmsubs f0,f0,f0,f11
	ctx.f0.f64 = double(float(-(ctx.f0.f64 * ctx.f0.f64 - ctx.f11.f64)));
	// fnmsubs f0,f13,f13,f0
	ctx.f0.f64 = double(float(-(ctx.f13.f64 * ctx.f13.f64 - ctx.f0.f64)));
	// fnmsubs f0,f12,f12,f0
	ctx.f0.f64 = double(float(-(ctx.f12.f64 * ctx.f12.f64 - ctx.f0.f64)));
	// fcmpu cr6,f0,f31
	ctx.cr6.compare(ctx.f0.f64, ctx.f31.f64);
	// blt cr6,0x82475fc8
	if (ctx.cr6.lt) goto loc_82475FC8;
	// fsqrts f0,f0
	ctx.f0.f64 = double(float(sqrt(ctx.f0.f64)));
	// stfs f0,172(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// b 0x82476000
	goto loc_82476000;
loc_82475FC8:
	// addi r11,r1,144
	ctx.r11.s64 = ctx.r1.s64 + 144;
	// stfs f31,144(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 144, temp.u32);
	// stfs f31,148(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 148, temp.u32);
	// addi r10,r1,160
	ctx.r10.s64 = ctx.r1.s64 + 160;
	// stfs f31,152(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stfs f31,156(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 156, temp.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// stw r7,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r7.u32);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r11.u32);
loc_82476000:
	// addi r11,r1,160
	ctx.r11.s64 = ctx.r1.s64 + 160;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// stw r10,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r10.u32);
	// stw r9,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r9.u32);
	// stw r8,8(r28)
	PPC_STORE_U32(ctx.r28.u32 + 8, ctx.r8.u32);
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82476034:
	// lwz r11,128(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// beq cr6,0x8247604c
	if (ctx.cr6.eq) goto loc_8247604C;
	// addi r3,r11,44
	ctx.r3.s64 = ctx.r11.s64 + 44;
	// b 0x82476060
	goto loc_82476060;
loc_8247604C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8243b750
	ctx.lr = 0x82476060;
	sub_8243B750(ctx, base);
loc_82476060:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r11.u64);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,91
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 91, ctx.xer);
	// bne cr6,0x82476238
	if (!ctx.cr6.eq) goto loc_82476238;
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476238
	if (!ctx.cr6.eq) goto loc_82476238;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f0,0(r28)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lfs f31,-28552(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -28552);
	ctx.f31.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// bl 0x82e28000
	ctx.lr = 0x82476094;
	sub_82E28000(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,84
	ctx.r11.s64 = ctx.r1.s64 + 84;
	// lfs f0,4(r28)
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	ctx.f0.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f13.u32);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// sth r11,84(r1)
	PPC_STORE_U16(ctx.r1.u32 + 84, ctx.r11.u16);
	// bl 0x82e28000
	ctx.lr = 0x824760B8;
	sub_82E28000(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,88
	ctx.r11.s64 = ctx.r1.s64 + 88;
	// lfs f0,8(r28)
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	ctx.f0.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f13.u32);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// sth r11,88(r1)
	PPC_STORE_U16(ctx.r1.u32 + 88, ctx.r11.u16);
	// bl 0x82e28000
	ctx.lr = 0x824760DC;
	sub_82E28000(ctx, base);
	// frsp f13,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,92
	ctx.r11.s64 = ctx.r1.s64 + 92;
	// lfs f0,12(r28)
	temp.u32 = PPC_LOAD_U32(ctx.r28.u32 + 12);
	ctx.f0.f64 = double(temp.f32);
	// fadds f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 + ctx.f31.f64));
	// fctiwz f13,f13
	ctx.f13.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfiwx f13,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f13.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// sth r11,92(r1)
	PPC_STORE_U16(ctx.r1.u32 + 92, ctx.r11.u16);
	// bl 0x82e28000
	ctx.lr = 0x82476100;
	sub_82E28000(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f0.u32);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, ctx.r11.u16);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82476134;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476150;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247616C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476188;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824762dc
	if (ctx.cr6.eq) goto loc_824762DC;
	// lhz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 84);
	// li r3,1
	ctx.r3.s64 = 1;
	// lhz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// extsh r7,r11
	ctx.r7.s64 = ctx.r11.s16;
	// lhz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 92);
	// extsh r10,r10
	ctx.r10.s64 = ctx.r10.s16;
	// lhz r8,96(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// extsh r9,r9
	ctx.r9.s64 = ctx.r9.s16;
	// extsh r8,r8
	ctx.r8.s64 = ctx.r8.s16;
	// addi r11,r1,160
	ctx.r11.s64 = ctx.r1.s64 + 160;
	// std r7,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r7.u64);
	// lfd f0,144(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// lfd f13,128(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// std r9,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r9.u64);
	// lfd f12,120(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// std r8,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r8.u64);
	// lfd f11,112(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// fcfid f11,f11
	ctx.f11.f64 = double(ctx.f11.s64);
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// stfs f0,160(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 160, temp.u32);
	// frsp f0,f13
	ctx.f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,164(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 164, temp.u32);
	// frsp f0,f12
	ctx.f0.f64 = double(float(ctx.f12.f64));
	// stfs f0,168(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 168, temp.u32);
	// frsp f0,f11
	ctx.f0.f64 = double(float(ctx.f11.f64));
	// stfs f0,172(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 172, temp.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// stw r10,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r10.u32);
	// stw r9,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r9.u32);
	// stw r8,8(r28)
	PPC_STORE_U32(ctx.r28.u32 + 8, ctx.r8.u32);
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-72(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82476238:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwz r4,128(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// bl 0x8245c740
	ctx.lr = 0x82476244;
	sub_8245C740(ctx, base);
	// lwz r31,148(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824762dc
	if (ctx.cr6.eq) goto loc_824762DC;
loc_82476250:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,272(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 272);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476268;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824762c0
	if (ctx.cr6.eq) goto loc_824762C0;
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// li r30,0
	ctx.r30.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824762c0
	if (!ctx.cr6.gt) goto loc_824762C0;
loc_82476280:
	// lwz r11,72(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 72);
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// mullw r11,r11,r30
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r30.s32);
	// lwz r9,304(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 304);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r6,r11,r28
	ctx.r6.u64 = ctx.r11.u64 + ctx.r28.u64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x824762B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82476280
	if (ctx.cr6.lt) goto loc_82476280;
loc_824762C0:
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824762D0;
	sub_8245C128(ctx, base);
	// lwz r31,148(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82476250
	if (!ctx.cr6.eq) goto loc_82476250;
loc_824762DC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lfd f31,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824762F0"))) PPC_WEAK_FUNC(sub_824762F0);
PPC_FUNC_IMPL(__imp__sub_824762F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x824762F8;
	__savegprlr_14(ctx, base);
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,128(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
	// li r29,0
	ctx.r29.s64 = 0;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// mr r23,r6
	ctx.r23.u64 = ctx.r6.u64;
	// mr r21,r7
	ctx.r21.u64 = ctx.r7.u64;
	// lwz r10,152(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 152);
	// mr r14,r8
	ctx.r14.u64 = ctx.r8.u64;
	// mr r15,r29
	ctx.r15.u64 = ctx.r29.u64;
	// rlwinm r10,r10,0,27,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82476330
	if (ctx.cr6.eq) goto loc_82476330;
	// mr r23,r22
	ctx.r23.u64 = ctx.r22.u64;
loc_82476330:
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476348
	if (ctx.cr6.eq) goto loc_82476348;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// b 0x8247634c
	goto loc_8247634C;
loc_82476348:
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
loc_8247634C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8245c128
	ctx.lr = 0x82476354;
	sub_8245C128(ctx, base);
	// lwz r27,84(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x824768f4
	if (ctx.cr6.eq) goto loc_824768F4;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// addi r25,r11,-29761
	ctx.r25.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r19,r11,-28532
	ctx.r19.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r20,r11,-13520
	ctx.r20.s64 = ctx.r11.s64 + -13520;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r18,r11,-13524
	ctx.r18.s64 = ctx.r11.s64 + -13524;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r17,r11,16868
	ctx.r17.s64 = ctx.r11.s64 + 16868;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r16,r11,-13528
	ctx.r16.s64 = ctx.r11.s64 + -13528;
loc_82476394:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 344);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824763AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824768c0
	if (ctx.cr6.eq) goto loc_824768C0;
	// lwz r11,68(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 68);
	// mr r28,r29
	ctx.r28.u64 = ctx.r29.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x824768c0
	if (!ctx.cr6.gt) goto loc_824768C0;
	// ori r24,r14,2
	ctx.r24.u64 = ctx.r14.u64 | 2;
loc_824763C8:
	// mr r9,r24
	ctx.r9.u64 = ctx.r24.u64;
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// mr r8,r21
	ctx.r8.u64 = ctx.r21.u64;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// mr r6,r22
	ctx.r6.u64 = ctx.r22.u64;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8245f418
	ctx.lr = 0x824763F4;
	sub_8245F418(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824767f4
	if (ctx.cr6.eq) goto loc_824767F4;
	// addi r15,r15,1
	ctx.r15.s64 = ctx.r15.s64 + 1;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// cmpwi cr6,r15,1
	ctx.cr6.compare<int32_t>(ctx.r15.s32, 1, ctx.xer);
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// beq cr6,0x82476414
	if (ctx.cr6.eq) goto loc_82476414;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
loc_82476414:
	// bl 0x82309ae0
	ctx.lr = 0x82476418;
	sub_82309AE0(ctx, base);
	// lwz r11,68(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// bne cr6,0x82476600
	if (!ctx.cr6.eq) goto loc_82476600;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bne cr6,0x82476440
	if (!ctx.cr6.eq) goto loc_82476440;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247643C;
	sub_823099B0(ctx, base);
	// b 0x82476448
	goto loc_82476448;
loc_82476440:
	// addi r4,r27,44
	ctx.r4.s64 = ctx.r27.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82476448;
	sub_8242BA60(ctx, base);
loc_82476448:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r5,104(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247645c
	if (!ctx.cr6.eq) goto loc_8247645C;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
loc_8247645C:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x8242a860
	ctx.lr = 0x82476468;
	sub_8242A860(ctx, base);
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247647c
	if (!ctx.cr6.eq) goto loc_8247647C;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247647C:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82309ae0
	ctx.lr = 0x82476484;
	sub_82309AE0(ctx, base);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824764e0
	if (ctx.cr6.eq) goto loc_824764E0;
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824764e0
	if (ctx.cr6.eq) goto loc_824764E0;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824764bc
	if (!ctx.cr6.eq) goto loc_824764BC;
	// bl 0x82545cc0
	ctx.lr = 0x824764B8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_824764BC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824764DC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
loc_824764E0:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82416660
	ctx.lr = 0x824764FC;
	sub_82416660(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476534
	if (ctx.cr6.eq) goto loc_82476534;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82476520
	if (!ctx.cr6.eq) goto loc_82476520;
	// bl 0x82545cc0
	ctx.lr = 0x8247651C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82476520:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476534;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82476534:
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r29,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r29.u32);
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r29.u32);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r29.u32);
	// beq cr6,0x8247659c
	if (ctx.cr6.eq) goto loc_8247659C;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247659c
	if (ctx.cr6.eq) goto loc_8247659C;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82476578
	if (!ctx.cr6.eq) goto loc_82476578;
	// bl 0x82545cc0
	ctx.lr = 0x82476574;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82476578:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476598;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
loc_8247659C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82416660
	ctx.lr = 0x824765B8;
	sub_82416660(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824765f0
	if (ctx.cr6.eq) goto loc_824765F0;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824765dc
	if (!ctx.cr6.eq) goto loc_824765DC;
	// bl 0x82545cc0
	ctx.lr = 0x824765D8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_824765DC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824765F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824765F0:
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r29.u32);
	// b 0x824767d8
	goto loc_824767D8;
loc_82476600:
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bne cr6,0x82476618
	if (!ctx.cr6.eq) goto loc_82476618;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// bl 0x823099b0
	ctx.lr = 0x82476614;
	sub_823099B0(ctx, base);
	// b 0x82476620
	goto loc_82476620;
loc_82476618:
	// addi r4,r27,44
	ctx.r4.s64 = ctx.r27.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82476620;
	sub_8242BA60(ctx, base);
loc_82476620:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476634
	if (!ctx.cr6.eq) goto loc_82476634;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
loc_82476634:
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8242a860
	ctx.lr = 0x82476644;
	sub_8242A860(ctx, base);
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476658
	if (!ctx.cr6.eq) goto loc_82476658;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_82476658:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82309ae0
	ctx.lr = 0x82476660;
	sub_82309AE0(ctx, base);
	// lwz r11,160(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// stw r29,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824766bc
	if (ctx.cr6.eq) goto loc_824766BC;
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r29,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824766bc
	if (ctx.cr6.eq) goto loc_824766BC;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82476698
	if (!ctx.cr6.eq) goto loc_82476698;
	// bl 0x82545cc0
	ctx.lr = 0x82476694;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82476698:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824766B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r3.u32);
loc_824766BC:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,156(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82416660
	ctx.lr = 0x824766D8;
	sub_82416660(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476710
	if (ctx.cr6.eq) goto loc_82476710;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824766fc
	if (!ctx.cr6.eq) goto loc_824766FC;
	// bl 0x82545cc0
	ctx.lr = 0x824766F8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_824766FC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476710;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82476710:
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r29,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r29.u32);
	// stw r29,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r29,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r29.u32);
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r29.u32);
	// beq cr6,0x82476778
	if (ctx.cr6.eq) goto loc_82476778;
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476778
	if (ctx.cr6.eq) goto loc_82476778;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82476754
	if (!ctx.cr6.eq) goto loc_82476754;
	// bl 0x82545cc0
	ctx.lr = 0x82476750;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82476754:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476774;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r3.u32);
loc_82476778:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,124(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82416660
	ctx.lr = 0x82476794;
	sub_82416660(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824767cc
	if (ctx.cr6.eq) goto loc_824767CC;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824767b8
	if (!ctx.cr6.eq) goto loc_824767B8;
	// bl 0x82545cc0
	ctx.lr = 0x824767B4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_824767B8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824767CC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824767CC:
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r29.u32);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r29.u32);
	// stw r29,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r29.u32);
loc_824767D8:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824767ec
	if (!ctx.cr6.eq) goto loc_824767EC;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_824767EC:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82309ae0
	ctx.lr = 0x824767F4;
	sub_82309AE0(ctx, base);
loc_824767F4:
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476850
	if (ctx.cr6.eq) goto loc_82476850;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476850
	if (ctx.cr6.eq) goto loc_82476850;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247682c
	if (!ctx.cr6.eq) goto loc_8247682C;
	// bl 0x82545cc0
	ctx.lr = 0x82476828;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_8247682C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247684C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
loc_82476850:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,92(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82416660
	ctx.lr = 0x8247686C;
	sub_82416660(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824768a4
	if (ctx.cr6.eq) goto loc_824768A4;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82476890
	if (!ctx.cr6.eq) goto loc_82476890;
	// bl 0x82545cc0
	ctx.lr = 0x8247688C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82476890:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824768A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824768A4:
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// lwz r11,68(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 68);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x824763c8
	if (ctx.cr6.lt) goto loc_824763C8;
loc_824768C0:
	// lwz r11,64(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824768D0;
	sub_8245C128(ctx, base);
	// lwz r27,84(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82476394
	if (!ctx.cr6.eq) goto loc_82476394;
	// cmpwi cr6,r15,0
	ctx.cr6.compare<int32_t>(ctx.r15.s32, 0, ctx.xer);
	// ble cr6,0x824768f4
	if (!ctx.cr6.gt) goto loc_824768F4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// addi r4,r11,22356
	ctx.r4.s64 = ctx.r11.s64 + 22356;
	// bl 0x82309ae0
	ctx.lr = 0x824768F4;
	sub_82309AE0(ctx, base);
loc_824768F4:
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82476900"))) PPC_WEAK_FUNC(sub_82476900);
PPC_FUNC_IMPL(__imp__sub_82476900) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82476908;
	__savegprlr_14(ctx, base);
	// stwu r1,-608(r1)
	ea = -608 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r23,r6
	ctx.r23.u64 = ctx.r6.u64;
	// mr r15,r8
	ctx.r15.u64 = ctx.r8.u64;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// stw r27,636(r1)
	PPC_STORE_U32(ctx.r1.u32 + 636, ctx.r27.u32);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// stw r29,628(r1)
	PPC_STORE_U32(ctx.r1.u32 + 628, ctx.r29.u32);
	// mr r24,r7
	ctx.r24.u64 = ctx.r7.u64;
	// bl 0x82468f58
	ctx.lr = 0x82476938;
	sub_82468F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247767c
	if (ctx.cr6.eq) goto loc_8247767C;
	// addi r31,r27,1
	ctx.r31.s64 = ctx.r27.s64 + 1;
	// lbz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 0);
	// li r18,0
	ctx.r18.s64 = 0;
	// cmplwi cr6,r11,40
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 40, ctx.xer);
	// mr r14,r18
	ctx.r14.u64 = ctx.r18.u64;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bne cr6,0x824775fc
	if (!ctx.cr6.eq) goto loc_824775FC;
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,41
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 41, ctx.xer);
	// beq cr6,0x824770d0
	if (ctx.cr6.eq) goto loc_824770D0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r20,3
	ctx.r20.s64 = 3;
	// addi r28,r11,-28532
	ctx.r28.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r26,r11,-26176
	ctx.r26.s64 = ctx.r11.s64 + -26176;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r28.u32);
	// addi r30,r11,-8076
	ctx.r30.s64 = ctx.r11.s64 + -8076;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// stw r26,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r26.u32);
	// addi r21,r11,-6756
	ctx.r21.s64 = ctx.r11.s64 + -6756;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r30.u32);
	// addi r19,r11,-13060
	ctx.r19.s64 = ctx.r11.s64 + -13060;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r17,r11,-5704
	ctx.r17.s64 = ctx.r11.s64 + -5704;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r16,r11,-29761
	ctx.r16.s64 = ctx.r11.s64 + -29761;
loc_824769B0:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x824769c8
	if (ctx.cr6.eq) goto loc_824769C8;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x824769d4
	if (!ctx.cr6.eq) goto loc_824769D4;
loc_824769C8:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x824769b0
	if (!ctx.cr6.eq) goto loc_824769B0;
loc_824769D4:
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// mr r10,r18
	ctx.r10.u64 = ctx.r18.u64;
loc_824769DC:
	// lbz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r9
	ctx.r11.s64 = ctx.r9.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// cmpwi cr6,r11,61
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 61, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// cmpwi cr6,r11,91
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 91, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// cmpwi cr6,r11,40
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 40, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// extsb r11,r9
	ctx.r11.s64 = ctx.r9.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// beq cr6,0x82476a30
	if (ctx.cr6.eq) goto loc_82476A30;
	// addi r11,r1,320
	ctx.r11.s64 = ctx.r1.s64 + 320;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// stbx r9,r10,r11
	PPC_STORE_U8(ctx.r10.u32 + ctx.r11.u32, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,127
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 127, ctx.xer);
	// blt cr6,0x824769dc
	if (ctx.cr6.lt) goto loc_824769DC;
loc_82476A30:
	// addi r11,r1,320
	ctx.r11.s64 = ctx.r1.s64 + 320;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// stbx r18,r10,r11
	PPC_STORE_U8(ctx.r10.u32 + ctx.r11.u32, ctx.r18.u8);
	// bl 0x823099b0
	ctx.lr = 0x82476A48;
	sub_823099B0(ctx, base);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r3,52(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 52);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r21.u32);
	// bl 0x8246d018
	ctx.lr = 0x82476A5C;
	sub_8246D018(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476a78
	if (ctx.cr6.eq) goto loc_82476A78;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824770dc
	if (!ctx.cr6.eq) goto loc_824770DC;
loc_82476A78:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476aa8
	if (ctx.cr6.eq) goto loc_82476AA8;
loc_82476A84:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,32
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 32, ctx.xer);
	// beq cr6,0x82476a9c
	if (ctx.cr6.eq) goto loc_82476A9C;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// bne cr6,0x82476aa8
	if (!ctx.cr6.eq) goto loc_82476AA8;
loc_82476A9C:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82476a84
	if (!ctx.cr6.eq) goto loc_82476A84;
loc_82476AA8:
	// addi r31,r11,1
	ctx.r31.s64 = ctx.r11.s64 + 1;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,61
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 61, ctx.xer);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bne cr6,0x82477180
	if (!ctx.cr6.eq) goto loc_82477180;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,320
	ctx.r4.s64 = ctx.r1.s64 + 320;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8243b750
	ctx.lr = 0x82476AD0;
	sub_8243B750(ctx, base);
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476ae8
	if (!ctx.cr6.eq) goto loc_82476AE8;
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476b9c
	if (ctx.cr6.eq) goto loc_82476B9C;
loc_82476AE8:
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// lwz r4,128(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 128);
	// bl 0x8245c740
	ctx.lr = 0x82476AF4;
	sub_8245C740(ctx, base);
	// lwz r30,124(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82476b9c
	if (ctx.cr6.eq) goto loc_82476B9C;
loc_82476B00:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82476b14
	if (ctx.cr6.eq) goto loc_82476B14;
	// addi r3,r30,44
	ctx.r3.s64 = ctx.r30.s64 + 44;
	// b 0x82476b28
	goto loc_82476B28;
loc_82476B14:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,312
	ctx.r3.s64 = ctx.r1.s64 + 312;
	// bl 0x8243b750
	ctx.lr = 0x82476B28;
	sub_8243B750(ctx, base);
loc_82476B28:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82476b80
	if (!ctx.cr6.eq) goto loc_82476B80;
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82476b80
	if (!ctx.cr6.eq) goto loc_82476B80;
	// lwz r11,72(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 72);
	// lwz r10,68(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// mullw. r11,r11,r10
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r10.s32);
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq 0x82476b80
	if (ctx.cr0.eq) goto loc_82476B80;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 344);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82476B78;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82476bd0
	if (!ctx.cr6.eq) goto loc_82476BD0;
loc_82476B80:
	// lwz r11,64(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 64);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82476B90;
	sub_8245C128(ctx, base);
	// lwz r30,124(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82476b00
	if (!ctx.cr6.eq) goto loc_82476B00;
loc_82476B9C:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x82476f1c
	if (ctx.cr6.eq) goto loc_82476F1C;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// addi r14,r14,1
	ctx.r14.s64 = ctx.r14.s64 + 1;
	// mr r30,r17
	ctx.r30.u64 = ctx.r17.u64;
	// bgt cr6,0x82476bb8
	if (ctx.cr6.gt) goto loc_82476BB8;
	// mr r30,r16
	ctx.r30.u64 = ctx.r16.u64;
loc_82476BB8:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bne cr6,0x82476ec8
	if (!ctx.cr6.eq) goto loc_82476EC8;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x82476BCC;
	sub_823099B0(ctx, base);
	// b 0x82476ee8
	goto loc_82476EE8;
loc_82476BD0:
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82476bf4
	if (ctx.cr6.lt) goto loc_82476BF4;
	// bl 0x8230a238
	ctx.lr = 0x82476BE0;
	sub_8230A238(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82476BEC;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824772d8
	if (ctx.cr6.eq) goto loc_824772D8;
loc_82476BF4:
	// bl 0x8230a238
	ctx.lr = 0x82476BF8;
	sub_8230A238(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82476C04;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82476df4
	if (ctx.cr6.eq) goto loc_82476DF4;
	// cmpwi cr6,r25,-1
	ctx.cr6.compare<int32_t>(ctx.r25.s32, -1, ctx.xer);
	// bne cr6,0x82476cac
	if (!ctx.cr6.eq) goto loc_82476CAC;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82477164
	if (ctx.cr6.eq) goto loc_82477164;
loc_82476C1C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82476c34
	if (ctx.cr6.eq) goto loc_82476C34;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x82476c60
	if (!ctx.cr6.eq) goto loc_82476C60;
loc_82476C34:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bne cr6,0x82476c1c
	if (!ctx.cr6.eq) goto loc_82476C1C;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82476C54;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82476C60:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r8,r15
	ctx.r8.u64 = ctx.r15.u64;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// ori r6,r23,2
	ctx.r6.u64 = ctx.r23.u64 | 2;
	// add r5,r11,r22
	ctx.r5.u64 = ctx.r11.u64 + ctx.r22.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,312(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 312);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// b 0x82476ea0
	goto loc_82476EA0;
loc_82476CAC:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82477164
	if (ctx.cr6.eq) goto loc_82477164;
loc_82476CB4:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82476ccc
	if (ctx.cr6.eq) goto loc_82476CCC;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x82476cf8
	if (!ctx.cr6.eq) goto loc_82476CF8;
loc_82476CCC:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bne cr6,0x82476cb4
	if (!ctx.cr6.eq) goto loc_82476CB4;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82476CEC;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82476CF8:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// lwz r11,100(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// add r27,r11,r22
	ctx.r27.u64 = ctx.r11.u64 + ctx.r22.u64;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82476dcc
	if (ctx.cr6.lt) goto loc_82476DCC;
	// subf r11,r11,r25
	ctx.r11.s64 = ctx.r25.s64 - ctx.r11.s64;
	// lwz r10,128(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r26,r11,1
	ctx.r26.s64 = ctx.r11.s64 + 1;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// lwz r5,72(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 72);
	// bl 0x82302b88
	ctx.lr = 0x82476D50;
	sub_82302B88(ctx, base);
	// lwz r28,128(r30)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82476dcc
	if (ctx.cr6.eq) goto loc_82476DCC;
	// lwz r11,52(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82476dcc
	if (ctx.cr6.eq) goto loc_82476DCC;
	// li r29,1
	ctx.r29.s64 = 1;
	// cmpwi cr6,r26,1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 1, ctx.xer);
	// blt cr6,0x82476dcc
	if (ctx.cr6.lt) goto loc_82476DCC;
loc_82476D7C:
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r7,0
	ctx.r7.s64 = 0;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r5,128(r28)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r28.u32 + 128);
	// subf r4,r29,r10
	ctx.r4.s64 = ctx.r10.s64 - ctx.r29.s64;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mullw r11,r4,r11
	ctx.r11.s64 = int64_t(ctx.r4.s32) * int64_t(ctx.r11.s32);
	// lwz r9,324(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 324);
	// lwz r5,156(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + 156);
	// add r4,r11,r10
	ctx.r4.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x82476DC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r29,r26
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r26.s32, ctx.xer);
	// ble cr6,0x82476d7c
	if (!ctx.cr6.gt) goto loc_82476D7C;
loc_82476DCC:
	// lwz r3,128(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// mr r6,r23
	ctx.r6.u64 = ctx.r23.u64;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// rlwimi r6,r20,1,27,25
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r20.u32, 1) & 0xFFFFFFFFFFFFFFDF) | (ctx.r6.u64 & 0x20);
	// lwz r10,72(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 72);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mullw r10,r10,r25
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r25.s32);
	// add r5,r10,r11
	ctx.r5.u64 = ctx.r10.u64 + ctx.r11.u64;
	// b 0x82476e90
	goto loc_82476E90;
loc_82476DF4:
	// cmpwi cr6,r25,-1
	ctx.cr6.compare<int32_t>(ctx.r25.s32, -1, ctx.xer);
	// bne cr6,0x82476e00
	if (!ctx.cr6.eq) goto loc_82476E00;
	// mr r25,r18
	ctx.r25.u64 = ctx.r18.u64;
loc_82476E00:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82477164
	if (ctx.cr6.eq) goto loc_82477164;
loc_82476E08:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82476e20
	if (ctx.cr6.eq) goto loc_82476E20;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x82476e4c
	if (!ctx.cr6.eq) goto loc_82476E4C;
loc_82476E20:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bne cr6,0x82476e08
	if (!ctx.cr6.eq) goto loc_82476E08;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82476E40;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82476E4C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// beq cr6,0x82476eac
	if (ctx.cr6.eq) goto loc_82476EAC;
	// lwz r11,72(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 72);
	// mr r8,r15
	ctx.r8.u64 = ctx.r15.u64;
	// lwz r10,100(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 100);
	// ori r6,r23,2
	ctx.r6.u64 = ctx.r23.u64 | 2;
	// mullw r11,r11,r25
	ctx.r11.s64 = int64_t(ctx.r11.s32) * int64_t(ctx.r25.s32);
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// add r5,r11,r22
	ctx.r5.u64 = ctx.r11.u64 + ctx.r22.u64;
loc_82476E90:
	// lwz r9,312(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 312);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82476EA0:
	// bctrl 
	ctx.lr = 0x82476EA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
loc_82476EAC:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82477164
	if (ctx.cr6.eq) goto loc_82477164;
	// lwz r26,196(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r28,112(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lwz r27,636(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 636);
	// lwz r29,628(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 628);
	// b 0x82477038
	goto loc_82477038;
loc_82476EC8:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82476ee0
	if (!ctx.cr6.eq) goto loc_82476EE0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82476EDC;
	sub_823099B0(ctx, base);
	// b 0x82476ee8
	goto loc_82476EE8;
loc_82476EE0:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82476EE8;
	sub_8242BA60(ctx, base);
loc_82476EE8:
	// lwz r11,172(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r6,168(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476efc
	if (!ctx.cr6.eq) goto loc_82476EFC;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82476EFC:
	// mr r8,r27
	ctx.r8.u64 = ctx.r27.u64;
	// addi r7,r1,320
	ctx.r7.s64 = ctx.r1.s64 + 320;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82476F14;
	sub_824211F0(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82309a60
	ctx.lr = 0x82476F1C;
	sub_82309A60(ctx, base);
loc_82476F1C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// mr r10,r18
	ctx.r10.u64 = ctx.r18.u64;
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477038
	if (ctx.cr6.eq) goto loc_82477038;
loc_82476F30:
	// cmpwi cr6,r11,13
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 13, ctx.xer);
	// beq cr6,0x82477030
	if (ctx.cr6.eq) goto loc_82477030;
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// beq cr6,0x82477030
	if (ctx.cr6.eq) goto loc_82477030;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x82476f58
	if (ctx.cr6.gt) goto loc_82476F58;
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// beq cr6,0x82477030
	if (ctx.cr6.eq) goto loc_82477030;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// beq cr6,0x82477030
	if (ctx.cr6.eq) goto loc_82477030;
loc_82476F58:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82476f70
	if (ctx.cr6.eq) goto loc_82476F70;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x82476f7c
	if (!ctx.cr6.eq) goto loc_82476F7C;
loc_82476F70:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82476f58
	if (!ctx.cr6.eq) goto loc_82476F58;
loc_82476F7C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,34
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 34, ctx.xer);
	// bne cr6,0x82476ff4
	if (!ctx.cr6.eq) goto loc_82476FF4;
loc_82476F8C:
	// cmpwi cr6,r11,34
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 34, ctx.xer);
	// beq cr6,0x82476fb8
	if (ctx.cr6.eq) goto loc_82476FB8;
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// beq cr6,0x82476fb8
	if (ctx.cr6.eq) goto loc_82476FB8;
	// cmpwi cr6,r11,13
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 13, ctx.xer);
	// beq cr6,0x82476fb8
	if (ctx.cr6.eq) goto loc_82476FB8;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476f8c
	if (!ctx.cr6.eq) goto loc_82476F8C;
loc_82476FB8:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,34
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 34, ctx.xer);
	// beq cr6,0x82477018
	if (ctx.cr6.eq) goto loc_82477018;
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x82477400
	if (ctx.cr6.eq) goto loc_82477400;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r30,r17
	ctx.r30.u64 = ctx.r17.u64;
	// bgt cr6,0x82476fdc
	if (ctx.cr6.gt) goto loc_82476FDC;
	// mr r30,r16
	ctx.r30.u64 = ctx.r16.u64;
loc_82476FDC:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bne cr6,0x824773ac
	if (!ctx.cr6.eq) goto loc_824773AC;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x82476FF0;
	sub_823099B0(ctx, base);
	// b 0x824773cc
	goto loc_824773CC;
loc_82476FF4:
	// cmpwi cr6,r11,40
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 40, ctx.xer);
	// bne cr6,0x82477004
	if (!ctx.cr6.eq) goto loc_82477004;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// b 0x82477018
	goto loc_82477018;
loc_82477004:
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// bne cr6,0x82477018
	if (!ctx.cr6.eq) goto loc_82477018;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// blt cr6,0x8247741c
	if (ctx.cr6.lt) goto loc_8247741C;
loc_82477018:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82476f30
	if (!ctx.cr6.eq) goto loc_82476F30;
loc_82477030:
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bgt cr6,0x824774bc
	if (ctx.cr6.gt) goto loc_824774BC;
loc_82477038:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x82477050
	if (ctx.cr6.eq) goto loc_82477050;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x8247705c
	if (!ctx.cr6.eq) goto loc_8247705C;
loc_82477050:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82477038
	if (!ctx.cr6.eq) goto loc_82477038;
loc_8247705C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,44
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 44, ctx.xer);
	// bne cr6,0x8247707c
	if (!ctx.cr6.eq) goto loc_8247707C;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// b 0x82477084
	goto loc_82477084;
loc_8247707C:
	// cmpwi cr6,r11,41
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 41, ctx.xer);
	// bne cr6,0x8247755c
	if (!ctx.cr6.eq) goto loc_8247755C;
loc_82477084:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824770b4
	if (ctx.cr6.eq) goto loc_824770B4;
loc_8247708C:
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// beq cr6,0x824770a4
	if (ctx.cr6.eq) goto loc_824770A4;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x824770b0
	if (!ctx.cr6.eq) goto loc_824770B0;
loc_824770A4:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247708c
	if (!ctx.cr6.eq) goto loc_8247708C;
loc_824770B0:
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
loc_824770B4:
	// lwz r30,88(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r30.u32);
	// bl 0x82309a60
	ctx.lr = 0x824770C4;
	sub_82309A60(ctx, base);
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,41
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 41, ctx.xer);
	// bne cr6,0x824769b0
	if (!ctx.cr6.eq) goto loc_824769B0;
loc_824770D0:
	// addi r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 1;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824770DC:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x82477164
	if (ctx.cr6.eq) goto loc_82477164;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r30,r17
	ctx.r30.u64 = ctx.r17.u64;
	// bgt cr6,0x824770f4
	if (ctx.cr6.gt) goto loc_824770F4;
	// mr r30,r16
	ctx.r30.u64 = ctx.r16.u64;
loc_824770F4:
	// lwz r31,100(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,248
	ctx.r3.s64 = ctx.r1.s64 + 248;
	// bne cr6,0x82477110
	if (!ctx.cr6.eq) goto loc_82477110;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247710C;
	sub_823099B0(ctx, base);
	// b 0x82477130
	goto loc_82477130;
loc_82477110:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82477128
	if (!ctx.cr6.eq) goto loc_82477128;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477124;
	sub_823099B0(ctx, base);
	// b 0x82477130
	goto loc_82477130;
loc_82477128:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477130;
	sub_8242BA60(ctx, base);
loc_82477130:
	// lwz r11,252(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// lwz r6,248(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477144
	if (!ctx.cr6.eq) goto loc_82477144;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82477144:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-13084
	ctx.r4.s64 = ctx.r11.s64 + -13084;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247715C;
	sub_824211F0(ctx, base);
	// addi r3,r1,248
	ctx.r3.s64 = ctx.r1.s64 + 248;
	// bl 0x82309a60
	ctx.lr = 0x82477164;
	sub_82309A60(ctx, base);
loc_82477164:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82477174;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82477180:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x824772c0
	if (ctx.cr6.eq) goto loc_824772C0;
	// addi r11,r1,320
	ctx.r11.s64 = ctx.r1.s64 + 320;
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82477190:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82477190
	if (!ctx.cr6.eq) goto loc_82477190;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// mr r31,r17
	ctx.r31.u64 = ctx.r17.u64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477248
	if (!ctx.cr6.eq) goto loc_82477248;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// bgt cr6,0x824771c4
	if (ctx.cr6.gt) goto loc_824771C4;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_824771C4:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bne cr6,0x824771dc
	if (!ctx.cr6.eq) goto loc_824771DC;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x824771D8;
	sub_823099B0(ctx, base);
	// b 0x824771fc
	goto loc_824771FC;
loc_824771DC:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824771f4
	if (!ctx.cr6.eq) goto loc_824771F4;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x824771F0;
	sub_823099B0(ctx, base);
	// b 0x824771fc
	goto loc_824771FC;
loc_824771F4:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824771FC;
	sub_8242BA60(ctx, base);
loc_824771FC:
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r6,136(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477210
	if (!ctx.cr6.eq) goto loc_82477210;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82477210:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// addi r4,r11,-13128
	ctx.r4.s64 = ctx.r11.s64 + -13128;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82477228;
	sub_824211F0(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82477230;
	sub_82309A60(ctx, base);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r30.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247723C;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82477248:
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// bgt cr6,0x82477254
	if (ctx.cr6.gt) goto loc_82477254;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_82477254:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bne cr6,0x8247726c
	if (!ctx.cr6.eq) goto loc_8247726C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477268;
	sub_823099B0(ctx, base);
	// b 0x8247728c
	goto loc_8247728C;
loc_8247726C:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82477284
	if (!ctx.cr6.eq) goto loc_82477284;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477280;
	sub_823099B0(ctx, base);
	// b 0x8247728c
	goto loc_8247728C;
loc_82477284:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247728C;
	sub_8242BA60(ctx, base);
loc_8247728C:
	// lwz r11,236(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r6,232(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824772a0
	if (!ctx.cr6.eq) goto loc_824772A0;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_824772A0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r7,r1,320
	ctx.r7.s64 = ctx.r1.s64 + 320;
	// addi r4,r11,-13180
	ctx.r4.s64 = ctx.r11.s64 + -13180;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x824772B8;
	sub_824211F0(ctx, base);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82309a60
	ctx.lr = 0x824772C0;
	sub_82309A60(ctx, base);
loc_824772C0:
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r30.u32);
	// bl 0x82309a60
	ctx.lr = 0x824772CC;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824772D8:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x82477390
	if (ctx.cr6.eq) goto loc_82477390;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r29,r17
	ctx.r29.u64 = ctx.r17.u64;
	// bgt cr6,0x824772f0
	if (ctx.cr6.gt) goto loc_824772F0;
	// mr r29,r16
	ctx.r29.u64 = ctx.r16.u64;
loc_824772F0:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r3,r1,296
	ctx.r3.s64 = ctx.r1.s64 + 296;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247730c
	if (!ctx.cr6.eq) goto loc_8247730C;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823099b0
	ctx.lr = 0x82477308;
	sub_823099B0(ctx, base);
	// b 0x82477314
	goto loc_82477314;
loc_8247730C:
	// addi r4,r30,44
	ctx.r4.s64 = ctx.r30.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477314;
	sub_8242BA60(ctx, base);
loc_82477314:
	// lwz r11,300(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 300);
	// lwz r31,296(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 296);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477328
	if (!ctx.cr6.eq) goto loc_82477328;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_82477328:
	// lwz r11,628(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 628);
	// addi r3,r1,280
	ctx.r3.s64 = ctx.r1.s64 + 280;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x82477348
	if (!ctx.cr6.eq) goto loc_82477348;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x823099b0
	ctx.lr = 0x82477344;
	sub_823099B0(ctx, base);
	// b 0x82477350
	goto loc_82477350;
loc_82477348:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477350;
	sub_8242BA60(ctx, base);
loc_82477350:
	// lwz r11,284(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// lwz r6,280(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 280);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477364
	if (!ctx.cr6.eq) goto loc_82477364;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82477364:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r8,636(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 636);
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-13248
	ctx.r4.s64 = ctx.r11.s64 + -13248;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82477380;
	sub_824211F0(ctx, base);
	// addi r3,r1,280
	ctx.r3.s64 = ctx.r1.s64 + 280;
	// bl 0x82309a60
	ctx.lr = 0x82477388;
	sub_82309A60(ctx, base);
	// addi r3,r1,296
	ctx.r3.s64 = ctx.r1.s64 + 296;
	// bl 0x82309a60
	ctx.lr = 0x82477390;
	sub_82309A60(ctx, base);
loc_82477390:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x824773A0;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824773AC:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824773c4
	if (!ctx.cr6.eq) goto loc_824773C4;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x824773C0;
	sub_823099B0(ctx, base);
	// b 0x824773cc
	goto loc_824773CC;
loc_824773C4:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824773CC;
	sub_8242BA60(ctx, base);
loc_824773CC:
	// lwz r11,220(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// lwz r6,216(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824773e0
	if (!ctx.cr6.eq) goto loc_824773E0;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_824773E0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-13296
	ctx.r4.s64 = ctx.r11.s64 + -13296;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x824773F8;
	sub_824211F0(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x82309a60
	ctx.lr = 0x82477400;
	sub_82309A60(ctx, base);
loc_82477400:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82477410;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247741C:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x824774a0
	if (ctx.cr6.eq) goto loc_824774A0;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r31,r17
	ctx.r31.u64 = ctx.r17.u64;
	// bgt cr6,0x82477434
	if (ctx.cr6.gt) goto loc_82477434;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_82477434:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,264
	ctx.r3.s64 = ctx.r1.s64 + 264;
	// bne cr6,0x8247744c
	if (!ctx.cr6.eq) goto loc_8247744C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477448;
	sub_823099B0(ctx, base);
	// b 0x8247746c
	goto loc_8247746C;
loc_8247744C:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82477464
	if (!ctx.cr6.eq) goto loc_82477464;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477460;
	sub_823099B0(ctx, base);
	// b 0x8247746c
	goto loc_8247746C;
loc_82477464:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247746C;
	sub_8242BA60(ctx, base);
loc_8247746C:
	// lwz r11,268(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// lwz r6,264(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477480
	if (!ctx.cr6.eq) goto loc_82477480;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82477480:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// addi r4,r11,-13352
	ctx.r4.s64 = ctx.r11.s64 + -13352;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82477498;
	sub_824211F0(ctx, base);
	// addi r3,r1,264
	ctx.r3.s64 = ctx.r1.s64 + 264;
	// bl 0x82309a60
	ctx.lr = 0x824774A0;
	sub_82309A60(ctx, base);
loc_824774A0:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x824774B0;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824774BC:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x82477540
	if (ctx.cr6.eq) goto loc_82477540;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r31,r17
	ctx.r31.u64 = ctx.r17.u64;
	// bgt cr6,0x824774d4
	if (ctx.cr6.gt) goto loc_824774D4;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_824774D4:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bne cr6,0x824774ec
	if (!ctx.cr6.eq) goto loc_824774EC;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x824774E8;
	sub_823099B0(ctx, base);
	// b 0x8247750c
	goto loc_8247750C;
loc_824774EC:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82477504
	if (!ctx.cr6.eq) goto loc_82477504;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477500;
	sub_823099B0(ctx, base);
	// b 0x8247750c
	goto loc_8247750C;
loc_82477504:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247750C;
	sub_8242BA60(ctx, base);
loc_8247750C:
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r6,152(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477520
	if (!ctx.cr6.eq) goto loc_82477520;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_82477520:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// addi r4,r11,-13408
	ctx.r4.s64 = ctx.r11.s64 + -13408;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82477538;
	sub_824211F0(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82477540;
	sub_82309A60(ctx, base);
loc_82477540:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x82477550;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247755C:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x824775e0
	if (ctx.cr6.eq) goto loc_824775E0;
	// cmpwi cr6,r14,0
	ctx.cr6.compare<int32_t>(ctx.r14.s32, 0, ctx.xer);
	// mr r31,r17
	ctx.r31.u64 = ctx.r17.u64;
	// bgt cr6,0x82477574
	if (ctx.cr6.gt) goto loc_82477574;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
loc_82477574:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bne cr6,0x8247758c
	if (!ctx.cr6.eq) goto loc_8247758C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477588;
	sub_823099B0(ctx, base);
	// b 0x824775ac
	goto loc_824775AC;
loc_8247758C:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824775a4
	if (!ctx.cr6.eq) goto loc_824775A4;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x824775A0;
	sub_823099B0(ctx, base);
	// b 0x824775ac
	goto loc_824775AC;
loc_824775A4:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824775AC;
	sub_8242BA60(ctx, base);
loc_824775AC:
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r6,184(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824775c0
	if (!ctx.cr6.eq) goto loc_824775C0;
	// mr r6,r16
	ctx.r6.u64 = ctx.r16.u64;
loc_824775C0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// addi r4,r11,-13460
	ctx.r4.s64 = ctx.r11.s64 + -13460;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x824775D8;
	sub_824211F0(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82309a60
	ctx.lr = 0x824775E0;
	sub_82309A60(ctx, base);
loc_824775E0:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r3,r1,100
	ctx.r3.s64 = ctx.r1.s64 + 100;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x824775F0;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824775FC:
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x8247767c
	if (ctx.cr6.eq) goto loc_8247767C;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bne cr6,0x82477620
	if (!ctx.cr6.eq) goto loc_82477620;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x8247761C;
	sub_823099B0(ctx, base);
	// b 0x82477644
	goto loc_82477644;
loc_82477620:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247763c
	if (!ctx.cr6.eq) goto loc_8247763C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82477638;
	sub_823099B0(ctx, base);
	// b 0x82477644
	goto loc_82477644;
loc_8247763C:
	// addi r4,r29,44
	ctx.r4.s64 = ctx.r29.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477644;
	sub_8242BA60(ctx, base);
loc_82477644:
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r6,200(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r5,r11,-29761
	ctx.r5.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82477660
	if (!ctx.cr6.eq) goto loc_82477660;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
loc_82477660:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// addi r4,r11,-13512
	ctx.r4.s64 = ctx.r11.s64 + -13512;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x824211f0
	ctx.lr = 0x82477674;
	sub_824211F0(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x82309a60
	ctx.lr = 0x8247767C;
	sub_82309A60(ctx, base);
loc_8247767C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,608
	ctx.r1.s64 = ctx.r1.s64 + 608;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477688"))) PPC_WEAK_FUNC(sub_82477688);
PPC_FUNC_IMPL(__imp__sub_82477688) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82477690;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// ld r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 76);
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// rlwinm r11,r11,0,9,9
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400000;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// mr r26,r8
	ctx.r26.u64 = ctx.r8.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247773c
	if (ctx.cr6.eq) goto loc_8247773C;
	// lwz r11,128(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// beq cr6,0x824776d0
	if (ctx.cr6.eq) goto loc_824776D0;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// b 0x824776d4
	goto loc_824776D4;
loc_824776D0:
	// li r11,0
	ctx.r11.s64 = 0;
loc_824776D4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824776E0;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247774c
	if (ctx.cr6.eq) goto loc_8247774C;
loc_824776EC:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r5,r11,r29
	ctx.r5.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r10,328(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 328);
	// add r4,r11,r30
	ctx.r4.u64 = ctx.r11.u64 + ctx.r30.u64;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82477718;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82477728;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x824776ec
	if (!ctx.cr6.eq) goto loc_824776EC;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
loc_8247773C:
	// lwz r5,72(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 72);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82b06418
	ctx.lr = 0x8247774C;
	sub_82B06418(ctx, base);
loc_8247774C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477758"))) PPC_WEAK_FUNC(sub_82477758);
PPC_FUNC_IMPL(__imp__sub_82477758) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,128(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// beq cr6,0x82477788
	if (ctx.cr6.eq) goto loc_82477788;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// b 0x8247778c
	goto loc_8247778C;
loc_82477788:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8247778C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x82477798;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824777dc
	if (ctx.cr6.eq) goto loc_824777DC;
loc_824777A4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 352);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824777B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247780c
	if (!ctx.cr6.eq) goto loc_8247780C;
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x824777D0;
	sub_8245C128(ctx, base);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x824777a4
	if (!ctx.cr6.eq) goto loc_824777A4;
loc_824777DC:
	// ld r11,76(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 76);
	// li r3,1
	ctx.r3.s64 = 1;
	// rlwinm r11,r11,0,16,16
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x8000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x824777f4
	if (!ctx.cr6.eq) goto loc_824777F4;
	// li r3,0
	ctx.r3.s64 = 0;
loc_824777F4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_8247780C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x824777f4
	goto loc_824777F4;
}

__attribute__((alias("__imp__sub_82477818"))) PPC_WEAK_FUNC(sub_82477818);
PPC_FUNC_IMPL(__imp__sub_82477818) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r11.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// li r11,8
	ctx.r11.s64 = 8;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r11.u32);
	// bl 0x8245c868
	ctx.lr = 0x82477854;
	sub_8245C868(ctx, base);
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r11,19848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247787c
	if (!ctx.cr6.eq) goto loc_8247787C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82462518
	ctx.lr = 0x82477870;
	sub_82462518(ctx, base);
	// stw r3,19848(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x82477878;
	sub_8245F220(ctx, base);
	// lwz r11,19848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
loc_8247787C:
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x82477890;
	sub_82302F00(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_82477898:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x824778d4
	if (!ctx.cr6.lt) goto loc_824778D4;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r12,-4
	ctx.r12.s64 = -4;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// rldicr r12,r12,35,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 35) & 0xFFFFFFFFFFFFFFFF;
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// and r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 & ctx.r12.u64;
	// std r10,8(r11)
	PPC_STORE_U64(ctx.r11.u32 + 8, ctx.r10.u64);
	// bl 0x82302f00
	ctx.lr = 0x824778D0;
	sub_82302F00(ctx, base);
	// b 0x82477898
	goto loc_82477898;
loc_824778D4:
	// li r11,128
	ctx.r11.s64 = 128;
	// lwz r5,52(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// mr r10,r30
	ctx.r10.u64 = ctx.r30.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r4,-17808(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17808);
	// bl 0x82472110
	ctx.lr = 0x82477904;
	sub_82472110(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82458ea8
	ctx.lr = 0x8247790C;
	sub_82458EA8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82477928"))) PPC_WEAK_FUNC(sub_82477928);
PPC_FUNC_IMPL(__imp__sub_82477928) {
	PPC_FUNC_PROLOGUE();
	// ori r6,r6,9
	ctx.r6.u64 = ctx.r6.u64 | 9;
	// b 0x82473018
	sub_82473018(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477930"))) PPC_WEAK_FUNC(sub_82477930);
PPC_FUNC_IMPL(__imp__sub_82477930) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e40
	ctx.lr = 0x82477938;
	__savegprlr_18(ctx, base);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r28,112(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 112);
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// mr r24,r5
	ctx.r24.u64 = ctx.r5.u64;
	// mr r21,r6
	ctx.r21.u64 = ctx.r6.u64;
	// mr r23,r7
	ctx.r23.u64 = ctx.r7.u64;
	// mr r22,r8
	ctx.r22.u64 = ctx.r8.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82477e94
	if (ctx.cr6.eq) goto loc_82477E94;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// addi r26,r11,-29761
	ctx.r26.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r29,0
	ctx.r29.s64 = 0;
	// addi r18,r11,-28532
	ctx.r18.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r19,r11,-13012
	ctx.r19.s64 = ctx.r11.s64 + -13012;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r20,r11,-13016
	ctx.r20.s64 = ctx.r11.s64 + -13016;
loc_82477984:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,352(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 352);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477998;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82477e88
	if (ctx.cr6.eq) goto loc_82477E88;
	// lwz r11,68(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 68);
	// mr r27,r29
	ctx.r27.u64 = ctx.r29.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82477e88
	if (!ctx.cr6.gt) goto loc_82477E88;
loc_824779B0:
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r29.u32);
	// cmplwi cr6,r21,0
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, 0, ctx.xer);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// beq cr6,0x82477a9c
	if (ctx.cr6.eq) goto loc_82477A9C;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x8242a860
	ctx.lr = 0x824779D4;
	sub_8242A860(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x824779E0;
	sub_82302D08(ctx, base);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// stw r29,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477a3c
	if (ctx.cr6.eq) goto loc_82477A3C;
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r29,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477a3c
	if (ctx.cr6.eq) goto loc_82477A3C;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477a18
	if (!ctx.cr6.eq) goto loc_82477A18;
	// bl 0x82545cc0
	ctx.lr = 0x82477A14;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477A18:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477A38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
loc_82477A3C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,148(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82416660
	ctx.lr = 0x82477A58;
	sub_82416660(ctx, base);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477a90
	if (ctx.cr6.eq) goto loc_82477A90;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477a7c
	if (!ctx.cr6.eq) goto loc_82477A7C;
	// bl 0x82545cc0
	ctx.lr = 0x82477A78;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477A7C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477A90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82477A90:
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r29.u32);
	// stw r29,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r29.u32);
	// stw r29,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r29.u32);
loc_82477A9C:
	// lwz r11,68(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// ble cr6,0x82477c88
	if (!ctx.cr6.gt) goto loc_82477C88;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bne cr6,0x82477ac4
	if (!ctx.cr6.eq) goto loc_82477AC4;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477AC0;
	sub_823099B0(ctx, base);
	// b 0x82477acc
	goto loc_82477ACC;
loc_82477AC4:
	// addi r4,r28,44
	ctx.r4.s64 = ctx.r28.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477ACC;
	sub_8242BA60(ctx, base);
loc_82477ACC:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477ae0
	if (!ctx.cr6.eq) goto loc_82477AE0;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_82477AE0:
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8242a860
	ctx.lr = 0x82477AF0;
	sub_8242A860(ctx, base);
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r4,128(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477b04
	if (!ctx.cr6.eq) goto loc_82477B04;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
loc_82477B04:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309ae0
	ctx.lr = 0x82477B0C;
	sub_82309AE0(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477b68
	if (ctx.cr6.eq) goto loc_82477B68;
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r29,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477b68
	if (ctx.cr6.eq) goto loc_82477B68;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477b44
	if (!ctx.cr6.eq) goto loc_82477B44;
	// bl 0x82545cc0
	ctx.lr = 0x82477B40;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477B44:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477B64;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r3.u32);
loc_82477B68:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,132(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82416660
	ctx.lr = 0x82477B84;
	sub_82416660(ctx, base);
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477bbc
	if (ctx.cr6.eq) goto loc_82477BBC;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477ba8
	if (!ctx.cr6.eq) goto loc_82477BA8;
	// bl 0x82545cc0
	ctx.lr = 0x82477BA4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477BA8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477BBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82477BBC:
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r29.u32);
	// stw r29,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r29.u32);
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// beq cr6,0x82477c24
	if (ctx.cr6.eq) goto loc_82477C24;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477c24
	if (ctx.cr6.eq) goto loc_82477C24;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477c00
	if (!ctx.cr6.eq) goto loc_82477C00;
	// bl 0x82545cc0
	ctx.lr = 0x82477BFC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477C00:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477C20;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
loc_82477C24:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x82477C40;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477c78
	if (ctx.cr6.eq) goto loc_82477C78;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477c64
	if (!ctx.cr6.eq) goto loc_82477C64;
	// bl 0x82545cc0
	ctx.lr = 0x82477C60;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477C64:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477C78;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82477C78:
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// b 0x82477d80
	goto loc_82477D80;
loc_82477C88:
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bne cr6,0x82477ca0
	if (!ctx.cr6.eq) goto loc_82477CA0;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x82477C9C;
	sub_823099B0(ctx, base);
	// b 0x82477ca8
	goto loc_82477CA8;
loc_82477CA0:
	// addi r4,r28,44
	ctx.r4.s64 = ctx.r28.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82477CA8;
	sub_8242BA60(ctx, base);
loc_82477CA8:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477cbc
	if (!ctx.cr6.eq) goto loc_82477CBC;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
loc_82477CBC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309ae0
	ctx.lr = 0x82477CC4;
	sub_82309AE0(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477d20
	if (ctx.cr6.eq) goto loc_82477D20;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477d20
	if (ctx.cr6.eq) goto loc_82477D20;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477cfc
	if (!ctx.cr6.eq) goto loc_82477CFC;
	// bl 0x82545cc0
	ctx.lr = 0x82477CF8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477CFC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477D1C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
loc_82477D20:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82416660
	ctx.lr = 0x82477D3C;
	sub_82416660(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477d74
	if (ctx.cr6.eq) goto loc_82477D74;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477d60
	if (!ctx.cr6.eq) goto loc_82477D60;
	// bl 0x82545cc0
	ctx.lr = 0x82477D5C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477D60:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477D74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82477D74:
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r29.u32);
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r29.u32);
loc_82477D80:
	// lwz r11,72(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 72);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mullw r11,r27,r11
	ctx.r11.s64 = int64_t(ctx.r27.s32) * int64_t(ctx.r11.s32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// lwz r10,100(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 100);
	// add r11,r11,r22
	ctx.r11.u64 = ctx.r11.u64 + ctx.r22.u64;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// bne cr6,0x82477da8
	if (!ctx.cr6.eq) goto loc_82477DA8;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_82477DA8:
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82474340
	ctx.lr = 0x82477DBC;
	sub_82474340(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477e18
	if (ctx.cr6.eq) goto loc_82477E18;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477e18
	if (ctx.cr6.eq) goto loc_82477E18;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477df4
	if (!ctx.cr6.eq) goto loc_82477DF4;
	// bl 0x82545cc0
	ctx.lr = 0x82477DF0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477DF4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477E14;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82477E18:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x82477E34;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477e6c
	if (ctx.cr6.eq) goto loc_82477E6C;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82477e58
	if (!ctx.cr6.eq) goto loc_82477E58;
	// bl 0x82545cc0
	ctx.lr = 0x82477E54;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82477E58:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82477E6C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82477E6C:
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r29.u32);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// lwz r11,68(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 68);
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x824779b0
	if (ctx.cr6.lt) goto loc_824779B0;
loc_82477E88:
	// lwz r28,104(r28)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r28.u32 + 104);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82477984
	if (!ctx.cr6.eq) goto loc_82477984;
loc_82477E94:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477EA0"))) PPC_WEAK_FUNC(sub_82477EA0);
PPC_FUNC_IMPL(__imp__sub_82477EA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82477EA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82477ec0
	if (!ctx.cr6.eq) goto loc_82477EC0;
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_82477EC0:
	// lwz r29,52(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,204(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 204);
	// rlwinm r11,r11,0,26,26
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82477fb4
	if (ctx.cr6.eq) goto loc_82477FB4;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30016(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82477fb4
	if (!ctx.cr6.eq) goto loc_82477FB4;
	// cmpwi cr6,r5,1
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 1, ctx.xer);
	// bne cr6,0x82477ef8
	if (!ctx.cr6.eq) goto loc_82477EF8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r4,56(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// bl 0x82477ea0
	ctx.lr = 0x82477EF8;
	sub_82477EA0(ctx, base);
loc_82477EF8:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r31.u32);
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r31.u32);
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r31.u32);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// bl 0x82464ed8
	ctx.lr = 0x82477F38;
	sub_82464ED8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82477f9c
	if (ctx.cr6.eq) goto loc_82477F9C;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477f5c
	if (ctx.cr6.eq) goto loc_82477F5C;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bgt cr6,0x82477f60
	if (ctx.cr6.gt) goto loc_82477F60;
loc_82477F5C:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
loc_82477F60:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82477f7c
	if (!ctx.cr6.eq) goto loc_82477F7C;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
loc_82477F7C:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82477f8c
	if (ctx.cr6.eq) goto loc_82477F8C;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
loc_82477F8C:
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82477930
	ctx.lr = 0x82477F9C;
	sub_82477930(ctx, base);
loc_82477F9C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82477FA4;
	sub_82309A60(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82477FAC;
	sub_82309A60(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x82477FB4;
	sub_82309A60(ctx, base);
loc_82477FB4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477FC0"))) PPC_WEAK_FUNC(sub_82477FC0);
PPC_FUNC_IMPL(__imp__sub_82477FC0) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x82477ea0
	sub_82477EA0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82477FD0"))) PPC_WEAK_FUNC(sub_82477FD0);
PPC_FUNC_IMPL(__imp__sub_82477FD0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82477FD8;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// mr r26,r8
	ctx.r26.u64 = ctx.r8.u64;
	// mr r25,r9
	ctx.r25.u64 = ctx.r9.u64;
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// mr r24,r10
	ctx.r24.u64 = ctx.r10.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82478018
	if (ctx.cr6.eq) goto loc_82478018;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r4,52(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x8245ee18
	ctx.lr = 0x82478018;
	sub_8245EE18(ctx, base);
loc_82478018:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// mr r9,r24
	ctx.r9.u64 = ctx.r24.u64;
	// mr r8,r25
	ctx.r8.u64 = ctx.r25.u64;
	// lwz r10,244(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	// oris r11,r11,16
	ctx.r11.u64 = ctx.r11.u64 | 1048576;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// bl 0x82474d00
	ctx.lr = 0x82478048;
	sub_82474D00(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82478050"))) PPC_WEAK_FUNC(sub_82478050);
PPC_FUNC_IMPL(__imp__sub_82478050) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82478058;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// beq cr6,0x82478090
	if (ctx.cr6.eq) goto loc_82478090;
	// li r5,60
	ctx.r5.s64 = 60;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82e29500
	ctx.lr = 0x8247807C;
	sub_82E29500(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r30,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r30.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
loc_82478090:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x824780a8
	if (ctx.cr6.eq) goto loc_824780A8;
	// lwz r11,40(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 40);
	// mr r28,r31
	ctx.r28.u64 = ctx.r31.u64;
	// stw r11,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r11.u32);
	// b 0x824780ac
	goto loc_824780AC;
loc_824780A8:
	// li r28,0
	ctx.r28.s64 = 0;
loc_824780AC:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r30,60(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 60);
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824780C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// rlwinm r11,r11,0,11,11
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x100000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x824780e4
	if (ctx.cr6.eq) goto loc_824780E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,52(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x8245ee18
	ctx.lr = 0x824780E4;
	sub_8245EE18(ctx, base);
loc_824780E4:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// oris r11,r11,16
	ctx.r11.u64 = ctx.r11.u64 | 1048576;
	// mr r8,r28
	ctx.r8.u64 = ctx.r28.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82474d00
	ctx.lr = 0x82478114;
	sub_82474D00(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82478120"))) PPC_WEAK_FUNC(sub_82478120);
PPC_FUNC_IMPL(__imp__sub_82478120) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82477ea0
	sub_82477EA0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82478130"))) PPC_WEAK_FUNC(sub_82478130);
PPC_FUNC_IMPL(__imp__sub_82478130) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82478138;
	__savegprlr_29(ctx, base);
	// stwu r1,-624(r1)
	ea = -624 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stw r3,644(r1)
	PPC_STORE_U32(ctx.r1.u32 + 644, ctx.r3.u32);
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,336
	ctx.r4.s64 = ctx.r1.s64 + 336;
	// addi r3,r1,644
	ctx.r3.s64 = ctx.r1.s64 + 644;
	// bl 0x82419600
	ctx.lr = 0x8247815C;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247823c
	if (ctx.cr6.eq) goto loc_8247823C;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lwz r3,1260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247818c
	if (!ctx.cr6.eq) goto loc_8247818C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8243aa40
	ctx.lr = 0x82478180;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82478188;
	sub_824455B8(ctx, base);
	// lwz r3,1260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8247818C:
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r1,336
	ctx.r5.s64 = ctx.r1.s64 + 336;
	// li r4,-1
	ctx.r4.s64 = -1;
	// bl 0x824656c0
	ctx.lr = 0x8247819C;
	sub_824656C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247823c
	if (ctx.cr6.eq) goto loc_8247823C;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,644
	ctx.r3.s64 = ctx.r1.s64 + 644;
	// bl 0x82419600
	ctx.lr = 0x824781BC;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247821c
	if (ctx.cr6.eq) goto loc_8247821C;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8245cb88
	ctx.lr = 0x824781D0;
	sub_8245CB88(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// beq cr6,0x8247821c
	if (ctx.cr6.eq) goto loc_8247821C;
	// lwz r11,644(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 644);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,32
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 32, ctx.xer);
	// bne cr6,0x82478200
	if (!ctx.cr6.eq) goto loc_82478200;
loc_824781EC:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,644(r1)
	PPC_STORE_U32(ctx.r1.u32 + 644, ctx.r11.u32);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,32
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 32, ctx.xer);
	// beq cr6,0x824781ec
	if (ctx.cr6.eq) goto loc_824781EC;
loc_82478200:
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// lwz r6,100(r5)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r5.u32 + 100);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x82474f70
	ctx.lr = 0x82478214;
	sub_82474F70(ctx, base);
	// addi r1,r1,624
	ctx.r1.s64 = ctx.r1.s64 + 624;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_8247821C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// addi r5,r11,-12980
	ctx.r5.s64 = ctx.r11.s64 + -12980;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82421110
	ctx.lr = 0x82478234;
	sub_82421110(ctx, base);
	// addi r1,r1,624
	ctx.r1.s64 = ctx.r1.s64 + 624;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_8247823C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,336
	ctx.r6.s64 = ctx.r1.s64 + 336;
	// addi r5,r11,-13004
	ctx.r5.s64 = ctx.r11.s64 + -13004;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82421110
	ctx.lr = 0x82478254;
	sub_82421110(ctx, base);
	// addi r1,r1,624
	ctx.r1.s64 = ctx.r1.s64 + 624;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82478260"))) PPC_WEAK_FUNC(sub_82478260);
PPC_FUNC_IMPL(__imp__sub_82478260) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82478268;
	__savegprlr_14(ctx, base);
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r22,r4
	ctx.r22.u64 = ctx.r4.u64;
	// std r5,592(r1)
	PPC_STORE_U64(ctx.r1.u32 + 592, ctx.r5.u64);
	// mr r31,r6
	ctx.r31.u64 = ctx.r6.u64;
	// stw r10,636(r1)
	PPC_STORE_U32(ctx.r1.u32 + 636, ctx.r10.u32);
	// li r26,0
	ctx.r26.s64 = 0;
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// mr r25,r7
	ctx.r25.u64 = ctx.r7.u64;
	// stw r22,588(r1)
	PPC_STORE_U32(ctx.r1.u32 + 588, ctx.r22.u32);
	// mr r24,r8
	ctx.r24.u64 = ctx.r8.u64;
	// std r31,600(r1)
	PPC_STORE_U64(ctx.r1.u32 + 600, ctx.r31.u64);
	// mr r23,r9
	ctx.r23.u64 = ctx.r9.u64;
	// stw r26,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r26.u32);
	// cmplwi cr6,r21,0
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, 0, ctx.xer);
	// bne cr6,0x824782f0
	if (!ctx.cr6.eq) goto loc_824782F0;
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8242ba60
	ctx.lr = 0x824782B0;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824782c4
	if (ctx.cr6.eq) goto loc_824782C4;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824782cc
	goto loc_824782CC;
loc_824782C4:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r5,r11,-29761
	ctx.r5.s64 = ctx.r11.s64 + -29761;
loc_824782CC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r11,-12844
	ctx.r4.s64 = ctx.r11.s64 + -12844;
	// bl 0x824211f0
	ctx.lr = 0x824782DC;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x824782E4;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_824782F0:
	// lwz r10,4(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x82478358
	if (!ctx.cr6.eq) goto loc_82478358;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19740(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19740);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82478358
	if (!ctx.cr6.eq) goto loc_82478358;
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8242ba60
	ctx.lr = 0x82478318;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247832c
	if (ctx.cr6.eq) goto loc_8247832C;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82478334
	goto loc_82478334;
loc_8247832C:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r5,r11,-29761
	ctx.r5.s64 = ctx.r11.s64 + -29761;
loc_82478334:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r11,-12872
	ctx.r4.s64 = ctx.r11.s64 + -12872;
	// bl 0x824211f0
	ctx.lr = 0x82478344;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247834C;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478358:
	// lwz r11,204(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 204);
	// clrlwi r11,r11,31
	ctx.r11.u64 = ctx.r11.u32 & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478440
	if (ctx.cr6.eq) goto loc_82478440;
	// rlwinm r11,r31,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82478440
	if (!ctx.cr6.eq) goto loc_82478440;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bne cr6,0x82478390
	if (!ctx.cr6.eq) goto loc_82478390;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x8247838C;
	sub_823099B0(ctx, base);
	// b 0x82478398
	goto loc_82478398;
loc_82478390:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82478398;
	sub_8242BA60(ctx, base);
loc_82478398:
	// lwz r11,220(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// lwz r29,216(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x824783b4
	if (!ctx.cr6.eq) goto loc_824783B4;
	// mr r29,r30
	ctx.r29.u64 = ctx.r30.u64;
loc_824783B4:
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8242ba60
	ctx.lr = 0x824783C0;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824783d4
	if (ctx.cr6.eq) goto loc_824783D4;
	// lwz r31,0(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824783d8
	goto loc_824783D8;
loc_824783D4:
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_824783D8:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,13540
	ctx.r4.s64 = ctx.r11.s64 + 13540;
	// bl 0x82431548
	ctx.lr = 0x824783F4;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478408
	if (ctx.cr6.eq) goto loc_82478408;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247840c
	goto loc_8247840C;
loc_82478408:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
loc_8247840C:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247841C;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478424;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247842C;
	sub_82309A60(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x82309a60
	ctx.lr = 0x82478434;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478440:
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// bne cr6,0x82478590
	if (!ctx.cr6.eq) goto loc_82478590;
	// bl 0x822e19f0
	ctx.lr = 0x8247844C;
	sub_822E19F0(ctx, base);
	// cmplw cr6,r21,r3
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x82478524
	if (ctx.cr6.eq) goto loc_82478524;
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8242ba60
	ctx.lr = 0x82478460;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x8247847c
	if (ctx.cr6.eq) goto loc_8247847C;
	// lwz r29,0(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82478480
	goto loc_82478480;
loc_8247847C:
	// mr r29,r30
	ctx.r29.u64 = ctx.r30.u64;
loc_82478480:
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824784a0
	if (!ctx.cr6.eq) goto loc_824784A0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x8247849C;
	sub_823099B0(ctx, base);
	// b 0x824784a8
	goto loc_824784A8;
loc_824784A0:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824784A8;
	sub_8242BA60(ctx, base);
loc_824784A8:
	// lwz r11,188(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// lwz r31,184(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 184);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824784bc
	if (!ctx.cr6.eq) goto loc_824784BC;
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_824784BC:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-12884
	ctx.r4.s64 = ctx.r11.s64 + -12884;
	// bl 0x82431548
	ctx.lr = 0x824784D8;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824784ec
	if (ctx.cr6.eq) goto loc_824784EC;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824784f0
	goto loc_824784F0;
loc_824784EC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
loc_824784F0:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x82478500;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478508;
	sub_82309A60(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82309a60
	ctx.lr = 0x82478510;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82478518;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478524:
	// lwz r11,592(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 592);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82478744
	if (!ctx.cr6.eq) goto loc_82478744;
	// lwz r11,596(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 596);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82478744
	if (!ctx.cr6.eq) goto loc_82478744;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-12904
	ctx.r4.s64 = ctx.r11.s64 + -12904;
	// bl 0x82431548
	ctx.lr = 0x82478558;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247856c
	if (ctx.cr6.eq) goto loc_8247856C;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82478574
	goto loc_82478574;
loc_8247856C:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_82478574:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247857C;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478584;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478590:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r4,216(r21)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r21.u32 + 216);
	// bl 0x822e1bd0
	ctx.lr = 0x8247859C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82478744
	if (!ctx.cr6.eq) goto loc_82478744;
	// rlwinm r11,r31,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82478744
	if (!ctx.cr6.eq) goto loc_82478744;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lwz r11,216(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 216);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// addi r31,r10,-26176
	ctx.r31.s64 = ctx.r10.s64 + -26176;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r27,r10,-28532
	ctx.r27.s64 = ctx.r10.s64 + -28532;
	// bne cr6,0x824785dc
	if (!ctx.cr6.eq) goto loc_824785DC;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x823099b0
	ctx.lr = 0x824785D8;
	sub_823099B0(ctx, base);
	// b 0x824785fc
	goto loc_824785FC;
loc_824785DC:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x824785f4
	if (!ctx.cr6.eq) goto loc_824785F4;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x823099b0
	ctx.lr = 0x824785F0;
	sub_823099B0(ctx, base);
	// b 0x824785fc
	goto loc_824785FC;
loc_824785F4:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824785FC;
	sub_8242BA60(ctx, base);
loc_824785FC:
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r26,152(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r29,r11,-29761
	ctx.r29.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82478618
	if (!ctx.cr6.eq) goto loc_82478618;
	// mr r26,r29
	ctx.r26.u64 = ctx.r29.u64;
loc_82478618:
	// lwz r11,52(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 52);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82478634
	if (!ctx.cr6.eq) goto loc_82478634;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x823099b0
	ctx.lr = 0x82478630;
	sub_823099B0(ctx, base);
	// b 0x82478654
	goto loc_82478654;
loc_82478634:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247864c
	if (!ctx.cr6.eq) goto loc_8247864C;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x823099b0
	ctx.lr = 0x82478648;
	sub_823099B0(ctx, base);
	// b 0x82478654
	goto loc_82478654;
loc_8247864C:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82478654;
	sub_8242BA60(ctx, base);
loc_82478654:
	// lwz r11,172(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// lwz r28,168(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82478668
	if (!ctx.cr6.eq) goto loc_82478668;
	// mr r28,r29
	ctx.r28.u64 = ctx.r29.u64;
loc_82478668:
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8242ba60
	ctx.lr = 0x82478674;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478688
	if (ctx.cr6.eq) goto loc_82478688;
	// lwz r30,0(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247868c
	goto loc_8247868C;
loc_82478688:
	// mr r30,r29
	ctx.r30.u64 = ctx.r29.u64;
loc_8247868C:
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824786a8
	if (!ctx.cr6.eq) goto loc_824786A8;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x823099b0
	ctx.lr = 0x824786A4;
	sub_823099B0(ctx, base);
	// b 0x824786b0
	goto loc_824786B0;
loc_824786A8:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x824786B0;
	sub_8242BA60(ctx, base);
loc_824786B0:
	// lwz r11,236(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// lwz r31,232(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824786c4
	if (!ctx.cr6.eq) goto loc_824786C4;
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
loc_824786C4:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-12916
	ctx.r4.s64 = ctx.r11.s64 + -12916;
	// bl 0x82431548
	ctx.lr = 0x824786E0;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824786f4
	if (ctx.cr6.eq) goto loc_824786F4;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824786f8
	goto loc_824786F8;
loc_824786F4:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
loc_824786F8:
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x82478710;
	sub_824211F0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478718;
	sub_82309A60(ctx, base);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x82309a60
	ctx.lr = 0x82478720;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82478728;
	sub_82309A60(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82309a60
	ctx.lr = 0x82478730;
	sub_82309A60(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82478738;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478744:
	// rlwinm r11,r31,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r27,r11,-28532
	ctx.r27.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r28,r11,-28548
	ctx.r28.s64 = ctx.r11.s64 + -28548;
	// stw r30,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r30.u32);
	// beq cr6,0x8247885c
	if (ctx.cr6.eq) goto loc_8247885C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r10,r1,272
	ctx.r10.s64 = ctx.r1.s64 + 272;
	// addi r11,r11,-12928
	ctx.r11.s64 = ctx.r11.s64 + -12928;
	// li r9,10
	ctx.r9.s64 = 10;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82478780:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x82478780
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82478780;
	// li r5,118
	ctx.r5.s64 = 118;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,282
	ctx.r3.s64 = ctx.r1.s64 + 282;
	// bl 0x82e29500
	ctx.lr = 0x824787A4;
	sub_82E29500(ctx, base);
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x824787c4
	if (!ctx.cr6.eq) goto loc_824787C4;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// lwz r4,44(r21)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r21.u32 + 44);
	// li r31,1
	ctx.r31.s64 = 1;
	// bl 0x823099b0
	ctx.lr = 0x824787C0;
	sub_823099B0(ctx, base);
	// b 0x824787d4
	goto loc_824787D4;
loc_824787C4:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// li r31,2
	ctx.r31.s64 = 2;
	// bl 0x8242ba60
	ctx.lr = 0x824787D4;
	sub_8242BA60(ctx, base);
loc_824787D4:
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,248
	ctx.r3.s64 = ctx.r1.s64 + 248;
	// bl 0x82309dd8
	ctx.lr = 0x824787E0;
	sub_82309DD8(ctx, base);
	// rlwinm r11,r31,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824787f8
	if (ctx.cr6.eq) goto loc_824787F8;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// rlwinm r31,r31,0,31,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x824787F8;
	sub_82309A60(ctx, base);
loc_824787F8:
	// clrlwi r11,r31,31
	ctx.r11.u64 = ctx.r31.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247880c
	if (ctx.cr6.eq) goto loc_8247880C;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247880C;
	sub_82309A60(ctx, base);
loc_8247880C:
	// lwz r11,252(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// lwz r4,248(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82478820
	if (!ctx.cr6.eq) goto loc_82478820;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
loc_82478820:
	// li r5,128
	ctx.r5.s64 = 128;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x82406668
	ctx.lr = 0x8247882C;
	sub_82406668(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,272
	ctx.r4.s64 = ctx.r1.s64 + 272;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8243b750
	ctx.lr = 0x82478840;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,248
	ctx.r3.s64 = ctx.r1.s64 + 248;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// stw r10,592(r1)
	PPC_STORE_U32(ctx.r1.u32 + 592, ctx.r10.u32);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r11,596(r1)
	PPC_STORE_U32(ctx.r1.u32 + 596, ctx.r11.u32);
	// b 0x824788e8
	goto loc_824788E8;
loc_8247885C:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82407e18
	ctx.lr = 0x82478864;
	sub_82407E18(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824788ec
	if (ctx.cr6.eq) goto loc_824788EC;
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82478888
	if (!ctx.cr6.eq) goto loc_82478888;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x823099b0
	ctx.lr = 0x82478884;
	sub_823099B0(ctx, base);
	// b 0x82478890
	goto loc_82478890;
loc_82478888:
	// addi r4,r21,44
	ctx.r4.s64 = ctx.r21.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82478890;
	sub_8242BA60(ctx, base);
loc_82478890:
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// lwz r31,200(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824788a4
	if (!ctx.cr6.eq) goto loc_824788A4;
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_824788A4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-12952
	ctx.r4.s64 = ctx.r11.s64 + -12952;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82431548
	ctx.lr = 0x824788BC;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824788d0
	if (ctx.cr6.eq) goto loc_824788D0;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824788d4
	goto loc_824788D4;
loc_824788D0:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_824788D4:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418a18
	ctx.lr = 0x824788DC;
	sub_82418A18(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x824788E4;
	sub_82309A60(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
loc_824788E8:
	// bl 0x82309a60
	ctx.lr = 0x824788EC;
	sub_82309A60(ctx, base);
loc_824788EC:
	// lwz r11,592(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 592);
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247893c
	if (!ctx.cr6.eq) goto loc_8247893C;
	// lwz r11,596(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 596);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247893c
	if (!ctx.cr6.eq) goto loc_8247893C;
	// addi r11,r1,112
	ctx.r11.s64 = ctx.r1.s64 + 112;
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r26.u32);
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// stw r26,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r26.u32);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// ld r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8245efe8
	ctx.lr = 0x82478928;
	sub_8245EFE8(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,592(r1)
	PPC_STORE_U32(ctx.r1.u32 + 592, ctx.r11.u32);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,596(r1)
	PPC_STORE_U32(ctx.r1.u32 + 596, ctx.r11.u32);
	// b 0x82478998
	goto loc_82478998;
loc_8247893C:
	// li r8,0
	ctx.r8.s64 = 0;
	// ld r5,592(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 592);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x8245ea70
	ctx.lr = 0x82478958;
	sub_8245EA70(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82478998
	if (ctx.cr6.eq) goto loc_82478998;
	// lis r30,-31971
	ctx.r30.s64 = -2095251456;
	// lwz r29,52(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,1260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1260);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247898c
	if (!ctx.cr6.eq) goto loc_8247898C;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8243aa40
	ctx.lr = 0x82478980;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x82478988;
	sub_824455B8(ctx, base);
	// lwz r11,1260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1260);
loc_8247898C:
	// cmplw cr6,r29,r11
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82478998
	if (!ctx.cr6.eq) goto loc_82478998;
	// mr r26,r31
	ctx.r26.u64 = ctx.r31.u64;
loc_82478998:
	// li r30,0
	ctx.r30.s64 = 0;
	// li r20,-1
	ctx.r20.s64 = -1;
	// mr r18,r30
	ctx.r18.u64 = ctx.r30.u64;
	// mr r24,r20
	ctx.r24.u64 = ctx.r20.u64;
	// mr r19,r30
	ctx.r19.u64 = ctx.r30.u64;
	// mr r17,r30
	ctx.r17.u64 = ctx.r30.u64;
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r30.u32);
	// mr r16,r30
	ctx.r16.u64 = ctx.r30.u64;
	// mr r15,r30
	ctx.r15.u64 = ctx.r30.u64;
	// mr r29,r30
	ctx.r29.u64 = ctx.r30.u64;
	// mr r28,r20
	ctx.r28.u64 = ctx.r20.u64;
	// mr r22,r20
	ctx.r22.u64 = ctx.r20.u64;
	// mr r14,r30
	ctx.r14.u64 = ctx.r30.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82478ac8
	if (!ctx.cr6.eq) goto loc_82478AC8;
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824789E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,104(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 104);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 8, ctx.xer);
	// bgt cr6,0x824789fc
	if (ctx.cr6.gt) goto loc_824789FC;
	// li r11,8
	ctx.r11.s64 = 8;
loc_824789FC:
	// addi r9,r11,-1
	ctx.r9.s64 = ctx.r11.s64 + -1;
	// ld r27,600(r1)
	ctx.r27.u64 = PPC_LOAD_U64(ctx.r1.u32 + 600);
	// add r10,r11,r8
	ctx.r10.u64 = ctx.r11.u64 + ctx.r8.u64;
	// not r6,r9
	ctx.r6.u64 = ~ctx.r9.u64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// and r3,r10,r6
	ctx.r3.u64 = ctx.r10.u64 & ctx.r6.u64;
	// beq cr6,0x82478a24
	if (ctx.cr6.eq) goto loc_82478A24;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
	// b 0x82478a94
	goto loc_82478A94;
loc_82478A24:
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,39,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 39) & 0xFFFFFFFFFFFFFFFF;
	// and r10,r27,r12
	ctx.r10.u64 = ctx.r27.u64 & ctx.r12.u64;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x82478a84
	if (ctx.cr6.eq) goto loc_82478A84;
	// lis r9,-31970
	ctx.r9.s64 = -2095185920;
	// addi r5,r11,-1
	ctx.r5.s64 = ctx.r11.s64 + -1;
	// lis r7,-31970
	ctx.r7.s64 = -2095185920;
	// lwz r10,19820(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 19820);
	// add r10,r11,r10
	ctx.r10.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r7,19816(r7)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r7.u32 + 19816);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19812(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19812);
	// add r7,r11,r7
	ctx.r7.u64 = ctx.r11.u64 + ctx.r7.u64;
	// addi r11,r10,-1
	ctx.r11.s64 = ctx.r10.s64 + -1;
	// andc r11,r11,r5
	ctx.r11.u64 = ctx.r11.u64 & ~ctx.r5.u64;
	// add r11,r11,r8
	ctx.r11.u64 = ctx.r11.u64 + ctx.r8.u64;
	// cmplw cr6,r11,r7
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r7.u32, ctx.xer);
	// bgt cr6,0x82478a84
	if (ctx.cr6.gt) goto loc_82478A84;
	// addi r11,r10,-1
	ctx.r11.s64 = ctx.r10.s64 + -1;
	// and r31,r11,r6
	ctx.r31.u64 = ctx.r11.u64 & ctx.r6.u64;
	// add r11,r31,r8
	ctx.r11.u64 = ctx.r31.u64 + ctx.r8.u64;
	// stw r11,19820(r9)
	PPC_STORE_U32(ctx.r9.u32 + 19820, ctx.r11.u32);
	// b 0x82478a94
	goto loc_82478A94;
loc_82478A84:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,16
	ctx.r4.s64 = 16;
	// bl 0x823dfea8
	ctx.lr = 0x82478A90;
	sub_823DFEA8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_82478A94:
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82478c9c
	if (ctx.cr6.eq) goto loc_82478C9C;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x82478c9c
	if (!ctx.cr6.eq) goto loc_82478C9C;
	// bl 0x822e08e0
	ctx.lr = 0x82478AAC;
	sub_822E08E0(ctx, base);
	// cmplw cr6,r21,r3
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x82478c9c
	if (ctx.cr6.eq) goto loc_82478C9C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82424430
	ctx.lr = 0x82478AC0;
	sub_82424430(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// b 0x82478c9c
	goto loc_82478C9C;
loc_82478AC8:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30016(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478b1c
	if (ctx.cr6.eq) goto loc_82478B1C;
	// lwz r11,4(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82478af8
	if (!ctx.cr6.eq) goto loc_82478AF8;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8243b750
	ctx.lr = 0x82478AF8;
	sub_8243B750(ctx, base);
loc_82478AF8:
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82478b1c
	if (!ctx.cr6.eq) goto loc_82478B1C;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82478B1C;
	sub_8243B750(ctx, base);
loc_82478B1C:
	// lis r12,3200
	ctx.r12.s64 = 209715200;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// ld r8,600(r1)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 600);
	// ori r12,r12,384
	ctx.r12.u64 = ctx.r12.u64 | 384;
	// lwz r29,28(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// rlwinm r9,r11,0,22,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// lwz r28,32(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// rldicr r12,r12,32,31
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 32) & 0xFFFFFFFF00000000;
	// lwz r24,4(r31)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r22,36(r31)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// oris r12,r12,8
	ctx.r12.u64 = ctx.r12.u64 | 524288;
	// ori r12,r12,24576
	ctx.r12.u64 = ctx.r12.u64 | 24576;
	// and r10,r11,r12
	ctx.r10.u64 = ctx.r11.u64 & ctx.r12.u64;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// std r10,600(r1)
	PPC_STORE_U64(ctx.r1.u32 + 600, ctx.r10.u64);
	// beq cr6,0x82478b80
	if (ctx.cr6.eq) goto loc_82478B80;
	// li r12,-8194
	ctx.r12.s64 = -8194;
	// or r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 | ctx.r10.u64;
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82478B80:
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,56,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 56) & 0xFFFFFFFFFFFFFFFF;
	// and r10,r11,r12
	ctx.r10.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x82478bc8
	if (ctx.cr6.eq) goto loc_82478BC8;
	// li r12,-2050
	ctx.r12.s64 = -2050;
	// rldicr r12,r12,56,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 56) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30080(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30080);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478bc8
	if (ctx.cr6.eq) goto loc_82478BC8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478BC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82478BC8:
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x82478bf4
	if (!ctx.cr6.eq) goto loc_82478BF4;
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478be4
	if (ctx.cr6.eq) goto loc_82478BE4;
	// mr r25,r11
	ctx.r25.u64 = ctx.r11.u64;
	// b 0x82478bf4
	goto loc_82478BF4;
loc_82478BE4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x82424430
	ctx.lr = 0x82478BF0;
	sub_82424430(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
loc_82478BF4:
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82478c5c
	if (ctx.cr6.eq) goto loc_82478C5C;
	// lwz r11,204(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 204);
	// lwz r10,300(r26)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r26.u32 + 300);
	// clrlwi r17,r11,31
	ctx.r17.u64 = ctx.r11.u32 & 0x1;
	// lwz r11,312(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 312);
	// lwz r18,216(r26)
	ctx.r18.u64 = PPC_LOAD_U32(ctx.r26.u32 + 216);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// lbz r16,212(r26)
	ctx.r16.u64 = PPC_LOAD_U8(ctx.r26.u32 + 212);
	// lwz r15,304(r26)
	ctx.r15.u64 = PPC_LOAD_U32(ctx.r26.u32 + 304);
	// lwz r14,308(r26)
	ctx.r14.u64 = PPC_LOAD_U32(ctx.r26.u32 + 308);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// beq cr6,0x82478c58
	if (ctx.cr6.eq) goto loc_82478C58;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478C3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82478c58
	if (ctx.cr6.eq) goto loc_82478C58;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82424430
	ctx.lr = 0x82478C50;
	sub_82424430(ctx, base);
	// mr r19,r3
	ctx.r19.u64 = ctx.r3.u64;
	// b 0x82478c5c
	goto loc_82478C5C;
loc_82478C58:
	// mr r19,r30
	ctx.r19.u64 = ctx.r30.u64;
loc_82478C5C:
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,24824(r30)
	PPC_STORE_U32(ctx.r30.u32 + 24824, ctx.r11.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478C80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r3,r11,20052
	ctx.r3.s64 = ctx.r11.s64 + 20052;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,24824(r30)
	PPC_STORE_U32(ctx.r30.u32 + 24824, ctx.r11.u32);
	// bl 0x82480c30
	ctx.lr = 0x82478C94;
	sub_82480C30(ctx, base);
	// ld r27,600(r1)
	ctx.r27.u64 = PPC_LOAD_U64(ctx.r1.u32 + 600);
	// li r30,0
	ctx.r30.s64 = 0;
loc_82478C9C:
	// rlwinm r11,r27,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82478cc8
	if (!ctx.cr6.eq) goto loc_82478CC8;
	// lwz r11,204(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 204);
	// rlwinm r11,r11,0,28,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x8;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478cd4
	if (ctx.cr6.eq) goto loc_82478CD4;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,46,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 46) & 0xFFFFFFFFFFFFFFFF;
	// or r27,r27,r12
	ctx.r27.u64 = ctx.r27.u64 | ctx.r12.u64;
	// b 0x82478cd4
	goto loc_82478CD4;
loc_82478CC8:
	// li r12,-8194
	ctx.r12.s64 = -8194;
	// rldicr r12,r12,43,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 43) & 0xFFFFFFFFFFFFFFFF;
	// and r27,r27,r12
	ctx.r27.u64 = ctx.r27.u64 & ctx.r12.u64;
loc_82478CD4:
	// lwz r11,204(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 204);
	// rlwinm r11,r11,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478cf0
	if (ctx.cr6.eq) goto loc_82478CF0;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,40,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 40) & 0xFFFFFFFFFFFFFFFF;
	// or r27,r27,r12
	ctx.r27.u64 = ctx.r27.u64 | ctx.r12.u64;
loc_82478CF0:
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478D04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82e29500
	ctx.lr = 0x82478D14;
	sub_82E29500(ctx, base);
	// lwz r9,588(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 588);
	// stw r20,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r20.u32);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// stw r30,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r30.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r30.u32);
	// stw r29,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r29.u32);
	// stw r28,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r28.u32);
	// stw r9,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r9.u32);
	// std r27,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r27.u64);
	// lwz r11,592(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 592);
	// stw r11,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r11.u32);
	// lwz r11,596(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 596);
	// stw r11,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r11.u32);
	// stw r21,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r21.u32);
	// stw r25,56(r31)
	PPC_STORE_U32(ctx.r31.u32 + 56, ctx.r25.u32);
	// beq cr6,0x82478df8
	if (ctx.cr6.eq) goto loc_82478DF8;
	// lwz r11,196(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 196);
	// mulli r10,r28,108
	ctx.r10.s64 = ctx.r28.s64 * 108;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// stw r31,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r31.u32);
	// stw r30,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r30.u32);
	// stw r30,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r30.u32);
	// stw r30,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r30.u32);
	// beq cr6,0x82478dbc
	if (ctx.cr6.eq) goto loc_82478DBC;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// li r5,0
	ctx.r5.s64 = 0;
	// rotlwi r4,r9,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// addi r30,r11,-27240
	ctx.r30.s64 = ctx.r11.s64 + -27240;
	// bl 0x824643b8
	ctx.lr = 0x82478D90;
	sub_824643B8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82309bc8
	ctx.lr = 0x82478DA0;
	sub_82309BC8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82302d08
	ctx.lr = 0x82478DAC;
	sub_82302D08(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478DB4;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82478DBC;
	sub_82309A60(ctx, base);
loc_82478DBC:
	// addi r4,r1,592
	ctx.r4.s64 = ctx.r1.s64 + 592;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8242ba60
	ctx.lr = 0x82478DC8;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478ddc
	if (ctx.cr6.eq) goto loc_82478DDC;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82478de0
	goto loc_82478DE0;
loc_82478DDC:
	// lwz r4,132(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
loc_82478DE0:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309ae0
	ctx.lr = 0x82478DE8;
	sub_82309AE0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82478DF0;
	sub_82309A60(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82478DF8;
	sub_82309A60(ctx, base);
loc_82478DF8:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82478e10
	if (ctx.cr6.eq) goto loc_82478E10;
	// lwz r28,60(r21)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r21.u32 + 60);
	// b 0x82478e14
	goto loc_82478E14;
loc_82478E10:
	// mr r28,r21
	ctx.r28.u64 = ctx.r21.u64;
loc_82478E14:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82478e20
	if (!ctx.cr6.eq) goto loc_82478E20;
	// mr r28,r21
	ctx.r28.u64 = ctx.r21.u64;
loc_82478E20:
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x82478e34
	if (ctx.cr6.eq) goto loc_82478E34;
	// lwz r3,52(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 52);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82478e3c
	goto loc_82478E3C;
loc_82478E34:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82478E3C:
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478E48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r29,644(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 644);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82478e80
	if (ctx.cr6.eq) goto loc_82478E80;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478e78
	if (ctx.cr6.eq) goto loc_82478E78;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// bl 0x82437438
	ctx.lr = 0x82478E74;
	sub_82437438(ctx, base);
	// b 0x82478e80
	goto loc_82478E80;
loc_82478E78:
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82437398
	ctx.lr = 0x82478E80;
	sub_82437398(ctx, base);
loc_82478E80:
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// li r30,0
	ctx.r30.s64 = 0;
	// rldicr r12,r12,41,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 41) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x82478ea0
	if (!ctx.cr6.eq) goto loc_82478EA0;
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
loc_82478EA0:
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82478EB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r10,636(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 636);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r7,r25
	ctx.r7.u64 = ctx.r25.u64;
	// mr r8,r27
	ctx.r8.u64 = ctx.r27.u64;
	// mr r9,r30
	ctx.r9.u64 = ctx.r30.u64;
	// bl 0x82477fd0
	ctx.lr = 0x82478EDC;
	sub_82477FD0(ctx, base);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r20,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r20.u32);
	// bl 0x82464338
	ctx.lr = 0x82478EEC;
	sub_82464338(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82465bc8
	ctx.lr = 0x82478EF8;
	sub_82465BC8(ctx, base);
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82478f34
	if (ctx.cr6.eq) goto loc_82478F34;
	// lwz r11,204(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 204);
	// clrlwi r9,r16,24
	ctx.r9.u64 = ctx.r16.u32 & 0xFF;
	// lbz r10,212(r26)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r26.u32 + 212);
	// or r11,r11,r17
	ctx.r11.u64 = ctx.r11.u64 | ctx.r17.u64;
	// stw r18,216(r26)
	PPC_STORE_U32(ctx.r26.u32 + 216, ctx.r18.u32);
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// stw r15,304(r26)
	PPC_STORE_U32(ctx.r26.u32 + 304, ctx.r15.u32);
	// stw r14,308(r26)
	PPC_STORE_U32(ctx.r26.u32 + 308, ctx.r14.u32);
	// stw r19,300(r26)
	PPC_STORE_U32(ctx.r26.u32 + 300, ctx.r19.u32);
	// stw r11,204(r26)
	PPC_STORE_U32(ctx.r26.u32 + 204, ctx.r11.u32);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stb r10,212(r26)
	PPC_STORE_U8(ctx.r26.u32 + 212, ctx.r10.u8);
	// stw r11,312(r26)
	PPC_STORE_U32(ctx.r26.u32 + 312, ctx.r11.u32);
loc_82478F34:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30036(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30036);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82478f74
	if (ctx.cr6.eq) goto loc_82478F74;
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// rldicr r12,r12,42,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 42) & 0xFFFFFFFFFFFFFFFF;
	// addi r4,r11,19964
	ctx.r4.s64 = ctx.r11.s64 + 19964;
	// or r11,r10,r12
	ctx.r11.u64 = ctx.r10.u64 | ctx.r12.u64;
	// li r3,4
	ctx.r3.s64 = 4;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// bl 0x82741028
	ctx.lr = 0x82478F68;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82478f74
	if (ctx.cr6.eq) goto loc_82478F74;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_82478F74:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82478F80"))) PPC_WEAK_FUNC(sub_82478F80);
PPC_FUNC_IMPL(__imp__sub_82478F80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x82478F88;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r10
	ctx.r23.u64 = ctx.r10.u64;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r25,r6
	ctx.r25.u64 = ctx.r6.u64;
	// mr r28,r7
	ctx.r28.u64 = ctx.r7.u64;
	// mr r27,r8
	ctx.r27.u64 = ctx.r8.u64;
	// mr r26,r9
	ctx.r26.u64 = ctx.r9.u64;
	// mr r29,r23
	ctx.r29.u64 = ctx.r23.u64;
	// li r22,0
	ctx.r22.s64 = 0;
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// bne cr6,0x82478fec
	if (!ctx.cr6.eq) goto loc_82478FEC;
	// lwz r11,204(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 204);
	// rlwinm r11,r11,0,8,8
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x800000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82478fec
	if (ctx.cr6.eq) goto loc_82478FEC;
	// li r3,72
	ctx.r3.s64 = 72;
	// bl 0x82545e80
	ctx.lr = 0x82478FD4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82478fe8
	if (ctx.cr6.eq) goto loc_82478FE8;
	// bl 0x82437340
	ctx.lr = 0x82478FE0;
	sub_82437340(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// b 0x82478fec
	goto loc_82478FEC;
loc_82478FE8:
	// mr r29,r22
	ctx.r29.u64 = ctx.r22.u64;
loc_82478FEC:
	// mr r10,r26
	ctx.r10.u64 = ctx.r26.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r8,r27
	ctx.r8.u64 = ctx.r27.u64;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82478260
	ctx.lr = 0x82479014;
	sub_82478260(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247913c
	if (ctx.cr6.eq) goto loc_8247913C;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// rlwinm r10,r25,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0x200;
	// li r11,1
	ctx.r11.s64 = 1;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// lwz r28,24836(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24836);
	// bne cr6,0x8247903c
	if (!ctx.cr6.eq) goto loc_8247903C;
	// mr r11,r22
	ctx.r11.u64 = ctx.r22.u64;
loc_8247903C:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// stw r11,24836(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24836, ctx.r11.u32);
	// bl 0x82407e18
	ctx.lr = 0x82479048;
	sub_82407E18(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82479058
	if (!ctx.cr6.eq) goto loc_82479058;
	// lwz r11,304(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 304);
	// b 0x82479064
	goto loc_82479064;
loc_82479058:
	// bl 0x822e08e0
	ctx.lr = 0x8247905C;
	sub_822E08E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r11,304(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 304);
loc_82479064:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479070;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r12,1
	ctx.r12.s64 = 1;
	// stw r28,24836(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24836, ctx.r28.u32);
	// rldicr r12,r12,41,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 41) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r25,r12
	ctx.r11.u64 = ctx.r25.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247913c
	if (!ctx.cr6.eq) goto loc_8247913C;
	// lwz r11,204(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 204);
	// rlwinm r11,r11,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824790cc
	if (ctx.cr6.eq) goto loc_824790CC;
	// rlwinm r11,r25,0,21,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x824790cc
	if (!ctx.cr6.eq) goto loc_824790CC;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82473018
	ctx.lr = 0x824790BC;
	sub_82473018(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82477ea0
	ctx.lr = 0x824790CC;
	sub_82477EA0(ctx, base);
loc_824790CC:
	// lwz r11,204(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 204);
	// rlwinm r11,r11,0,8,8
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x800000;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247913c
	if (ctx.cr6.eq) goto loc_8247913C;
	// ld r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247913c
	if (!ctx.cr6.eq) goto loc_8247913C;
	// lwz r11,20(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247913c
	if (ctx.cr6.eq) goto loc_8247913C;
	// lwz r11,56(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82479120
	if (ctx.cr6.eq) goto loc_82479120;
	// lwz r3,52(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479118;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// b 0x82479124
	goto loc_82479124;
loc_82479120:
	// mr r6,r22
	ctx.r6.u64 = ctx.r22.u64;
loc_82479124:
	// mr r8,r29
	ctx.r8.u64 = ctx.r29.u64;
	// lwz r5,56(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82407c88
	ctx.lr = 0x8247913C;
	sub_82407C88(ctx, base);
loc_8247913C:
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// bne cr6,0x8247918c
	if (!ctx.cr6.eq) goto loc_8247918C;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247918c
	if (ctx.cr6.eq) goto loc_8247918C;
	// addi r31,r29,52
	ctx.r31.s64 = ctx.r29.s64 + 52;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// bl 0x82545fb0
	ctx.lr = 0x82479158;
	sub_82545FB0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r22,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r22.u32);
	// stw r22,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r22.u32);
	// bl 0x82454048
	ctx.lr = 0x82479168;
	sub_82454048(ctx, base);
	// addi r31,r29,32
	ctx.r31.s64 = ctx.r29.s64 + 32;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// bl 0x82545fb0
	ctx.lr = 0x82479174;
	sub_82545FB0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r22,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r22.u32);
	// stw r22,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r22.u32);
	// bl 0x82454048
	ctx.lr = 0x82479184;
	sub_82454048(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82545ee8
	ctx.lr = 0x8247918C;
	sub_82545EE8(ctx, base);
loc_8247918C:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82479198"))) PPC_WEAK_FUNC(sub_82479198);
PPC_FUNC_IMPL(__imp__sub_82479198) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x824791A0;
	__savegprlr_23(ctx, base);
	// stwu r1,-592(r1)
	ea = -592 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82437340
	ctx.lr = 0x824791B0;
	sub_82437340(ctx, base);
	// li r25,0
	ctx.r25.s64 = 0;
	// li r26,1
	ctx.r26.s64 = 1;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// ld r6,16(r27)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r27.u32 + 16);
	// lis r8,-31973
	ctx.r8.s64 = -2095382528;
	// ld r31,24(r27)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r27.u32 + 24);
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// li r9,-1
	ctx.r9.s64 = -1;
	// ld r5,8(r27)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r27.u32 + 8);
	// stw r25,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r25.u32);
	// stw r25,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r25.u32);
	// stw r26,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r26.u32);
	// ld r30,8(r11)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// lwz r7,56(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// and r11,r30,r6
	ctx.r11.u64 = ctx.r30.u64 & ctx.r6.u64;
	// lwz r4,4(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// lwz r3,32(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 32);
	// or r6,r11,r31
	ctx.r6.u64 = ctx.r11.u64 | ctx.r31.u64;
	// lwz r8,8324(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8324);
	// bl 0x82478f80
	ctx.lr = 0x82479200;
	sub_82478F80(ctx, base);
	// li r28,8
	ctx.r28.s64 = 8;
	// lwz r11,44(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 44);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// stw r25,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r25.u32);
	// stw r25,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r25.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r25,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r25.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r25.u32);
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r25.u32);
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r25.u32);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r28.u32);
	// ble cr6,0x824792b4
	if (!ctx.cr6.gt) goto loc_824792B4;
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82479238:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x824792b4
	if (ctx.cr6.lt) goto loc_824792B4;
	// lwz r11,44(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 44);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x824792b4
	if (!ctx.cr6.lt) goto loc_824792B4;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,40(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// li r3,24
	ctx.r3.s64 = 24;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r29,8(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// bl 0x82545e80
	ctx.lr = 0x82479270;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82479294
	if (ctx.cr6.eq) goto loc_82479294;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r25.u32);
	// stw r25,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r25.u32);
	// stw r25,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r25.u32);
	// stw r28,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r28.u32);
	// b 0x82479298
	goto loc_82479298;
loc_82479294:
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
loc_82479298:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x824582f8
	ctx.lr = 0x824792A4;
	sub_824582F8(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// stw r29,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r29.u32);
	// b 0x82479238
	goto loc_82479238;
loc_824792B4:
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// ld r9,24(r27)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r27.u32 + 24);
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// ld r8,16(r27)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r27.u32 + 16);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// lwz r6,0(r27)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x8244d138
	ctx.lr = 0x824792D8;
	sub_8244D138(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r25.u32);
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r25.u32);
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r25.u32);
	// lwz r5,56(r23)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r23.u32 + 56);
	// bl 0x82437398
	ctx.lr = 0x824792F4;
	sub_82437398(ctx, base);
	// lwz r11,368(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 368);
	// lis r24,-31973
	ctx.r24.s64 = -2095382528;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824793fc
	if (ctx.cr6.eq) goto loc_824793FC;
loc_82479304:
	// lwz r9,364(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// li r8,0
	ctx.r8.s64 = 0;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-1
	ctx.r4.s64 = ctx.r11.s64 + -1;
	// addi r3,r1,364
	ctx.r3.s64 = ctx.r1.s64 + 364;
	// lwz r29,-4(r10)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4);
	// bl 0x82416660
	ctx.lr = 0x82479330;
	sub_82416660(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479348;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r28,r11
	ctx.r28.u64 = ctx.r11.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ble cr6,0x824793d8
	if (!ctx.cr6.gt) goto loc_824793D8;
	// li r4,4
	ctx.r4.s64 = 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416640
	ctx.lr = 0x82479370;
	sub_82416640(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// bne cr6,0x82479390
	if (!ctx.cr6.eq) goto loc_82479390;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x824793dc
	if (ctx.cr6.eq) goto loc_824793DC;
loc_82479390:
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// rlwinm r31,r10,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824793ac
	if (!ctx.cr6.eq) goto loc_824793AC;
	// bl 0x82545cc0
	ctx.lr = 0x824793A8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_824793AC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824793CC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// b 0x824793dc
	goto loc_824793DC;
loc_824793D8:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_824793DC:
	// rlwinm r10,r28,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824793f0
	if (ctx.cr6.eq) goto loc_824793F0;
	// stw r29,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r29.u32);
loc_824793F0:
	// lwz r11,368(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 368);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82479304
	if (!ctx.cr6.eq) goto loc_82479304;
loc_824793FC:
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,384
	ctx.r3.s64 = ctx.r1.s64 + 384;
	// bl 0x82419cb8
	ctx.lr = 0x8247940C;
	sub_82419CB8(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247945c
	if (!ctx.cr6.gt) goto loc_8247945C;
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82479420:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// add r4,r31,r11
	ctx.r4.u64 = ctx.r31.u64 + ctx.r11.u64;
	// bl 0x827d0bb8
	ctx.lr = 0x82479430;
	sub_827D0BB8(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r4,r1,384
	ctx.r4.s64 = ctx.r1.s64 + 384;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479448;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82479420
	if (ctx.cr6.lt) goto loc_82479420;
loc_8247945C:
	// stw r26,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r26.u32);
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// stw r26,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r26.u32);
loc_82479468:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// blt cr6,0x824794e0
	if (ctx.cr6.lt) goto loc_824794E0;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x824794e0
	if (!ctx.cr6.lt) goto loc_824794E0;
	// rlwinm r11,r30,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// addi r3,r27,40
	ctx.r3.s64 = ctx.r27.s64 + 40;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r31,8(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// bl 0x827d0b20
	ctx.lr = 0x824794A8;
	sub_827D0B20(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824794d8
	if (!ctx.cr6.eq) goto loc_824794D8;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824794C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824794D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824794D8:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// b 0x82479468
	goto loc_82479468;
loc_824794E0:
	// lwz r11,36(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82479600
	if (ctx.cr6.eq) goto loc_82479600;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r29,r25
	ctx.r29.u64 = ctx.r25.u64;
	// addi r26,r11,-28548
	ctx.r26.s64 = ctx.r11.s64 + -28548;
	// lis r28,-31971
	ctx.r28.s64 = -2095251456;
loc_824794FC:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// blt cr6,0x82479600
	if (ctx.cr6.lt) goto loc_82479600;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82479600
	if (!ctx.cr6.lt) goto loc_82479600;
	// rlwinm r11,r29,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r29.u32 | (ctx.r29.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// addi r3,r27,40
	ctx.r3.s64 = ctx.r27.s64 + 40;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r31,8(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// bl 0x827d0b20
	ctx.lr = 0x8247953C;
	sub_827D0B20(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824795f8
	if (!ctx.cr6.eq) goto loc_824795F8;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,220(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 220);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479564;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r31,0(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824795f8
	if (ctx.cr6.eq) goto loc_824795F8;
	// lwz r4,1300(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1300);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82479590
	if (!ctx.cr6.eq) goto loc_82479590;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x824375d8
	ctx.lr = 0x82479584;
	sub_824375D8(ctx, base);
	// stw r3,1300(r28)
	PPC_STORE_U32(ctx.r28.u32 + 1300, ctx.r3.u32);
	// bl 0x82447280
	ctx.lr = 0x8247958C;
	sub_82447280(ctx, base);
	// lwz r4,1300(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 1300);
loc_82479590:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82479598;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824795f8
	if (ctx.cr6.eq) goto loc_824795F8;
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824795f8
	if (!ctx.cr6.eq) goto loc_824795F8;
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x824795f8
	if (!ctx.cr6.eq) goto loc_824795F8;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x824795f8
	if (ctx.cr6.eq) goto loc_824795F8;
loc_824795C4:
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r10,r10,0,21,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x824795e8
	if (!ctx.cr6.eq) goto loc_824795E8;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824795c4
	if (!ctx.cr6.eq) goto loc_824795C4;
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// b 0x824794fc
	goto loc_824794FC;
loc_824795E8:
	// lwz r11,64(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 64);
	// stw r11,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r11.u32);
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// stw r11,68(r31)
	PPC_STORE_U32(ctx.r31.u32 + 68, ctx.r11.u32);
loc_824795F8:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// b 0x824794fc
	goto loc_824794FC;
loc_82479600:
	// lwz r11,60(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479670
	if (ctx.cr6.eq) goto loc_82479670;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
loc_82479610:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// blt cr6,0x82479670
	if (ctx.cr6.lt) goto loc_82479670;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82479670
	if (!ctx.cr6.lt) goto loc_82479670;
	// rlwinm r11,r30,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// addi r3,r27,40
	ctx.r3.s64 = ctx.r27.s64 + 40;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r11,r10
	ctx.r31.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r29,4(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// bl 0x827d0b20
	ctx.lr = 0x8247964C;
	sub_827D0B20(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479668
	if (!ctx.cr6.eq) goto loc_82479668;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,60(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 60);
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x824582f8
	ctx.lr = 0x82479668;
	sub_824582F8(ctx, base);
loc_82479668:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// b 0x82479610
	goto loc_82479610;
loc_82479670:
	// mr r28,r25
	ctx.r28.u64 = ctx.r25.u64;
loc_82479674:
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// blt cr6,0x82479728
	if (ctx.cr6.lt) goto loc_82479728;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82479728
	if (!ctx.cr6.lt) goto loc_82479728;
	// rlwinm r11,r28,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// add r11,r28,r11
	ctx.r11.u64 = ctx.r28.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r30,8(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82479720
	if (ctx.cr6.eq) goto loc_82479720;
	// addi r31,r30,4
	ctx.r31.s64 = ctx.r30.s64 + 4;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// bl 0x82545fb0
	ctx.lr = 0x824796B4;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r25.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r25,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82416660
	ctx.lr = 0x824796D8;
	sub_82416660(ctx, base);
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247970c
	if (ctx.cr6.eq) goto loc_8247970C;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824796f8
	if (!ctx.cr6.eq) goto loc_824796F8;
	// bl 0x82545cc0
	ctx.lr = 0x824796F4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_824796F8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247970C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247970C:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r25,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r25.u32);
	// stw r25,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r25.u32);
	// stw r25,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r25.u32);
	// bl 0x82545ee8
	ctx.lr = 0x82479720;
	sub_82545EE8(ctx, base);
loc_82479720:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// b 0x82479674
	goto loc_82479674;
loc_82479728:
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r30,r11,-7232
	ctx.r30.s64 = ctx.r11.s64 + -7232;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r30,384(r1)
	PPC_STORE_U32(ctx.r1.u32 + 384, ctx.r30.u32);
	// bl 0x82416660
	ctx.lr = 0x82479750;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479788
	if (ctx.cr6.eq) goto loc_82479788;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479774
	if (!ctx.cr6.eq) goto loc_82479774;
	// bl 0x82545cc0
	ctx.lr = 0x82479770;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_82479774:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479788;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82479788:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,368(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 368);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r25.u32);
	// li r6,4
	ctx.r6.s64 = 4;
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r25.u32);
	// addi r3,r1,364
	ctx.r3.s64 = ctx.r1.s64 + 364;
	// bl 0x82416660
	ctx.lr = 0x824797B0;
	sub_82416660(ctx, base);
	// lwz r11,364(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824797e8
	if (ctx.cr6.eq) goto loc_824797E8;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824797d4
	if (!ctx.cr6.eq) goto loc_824797D4;
	// bl 0x82545cc0
	ctx.lr = 0x824797D0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_824797D4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824797E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824797E8:
	// lwz r3,108(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stw r25,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, ctx.r25.u32);
	// stw r25,372(r1)
	PPC_STORE_U32(ctx.r1.u32 + 372, ctx.r25.u32);
	// stw r25,368(r1)
	PPC_STORE_U32(ctx.r1.u32 + 368, ctx.r25.u32);
	// stw r30,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r30.u32);
	// bl 0x82545fb0
	ctx.lr = 0x82479800;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r25.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x82479824;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247985c
	if (ctx.cr6.eq) goto loc_8247985C;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479848
	if (!ctx.cr6.eq) goto loc_82479848;
	// bl 0x82545cc0
	ctx.lr = 0x82479844;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_82479848:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247985C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247985C:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,124(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r25.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82416660
	ctx.lr = 0x82479884;
	sub_82416660(ctx, base);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824798bc
	if (ctx.cr6.eq) goto loc_824798BC;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x824798a8
	if (!ctx.cr6.eq) goto loc_824798A8;
	// bl 0x82545cc0
	ctx.lr = 0x824798A4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_824798A8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824798BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_824798BC:
	// lwz r3,208(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// stw r25,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r25.u32);
	// stw r25,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r25.u32);
	// stw r25,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r25.u32);
	// bl 0x82545fb0
	ctx.lr = 0x824798D0;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,200(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 200);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r25.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r25,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// bl 0x82416660
	ctx.lr = 0x824798F4;
	sub_82416660(ctx, base);
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247992c
	if (ctx.cr6.eq) goto loc_8247992C;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479918
	if (!ctx.cr6.eq) goto loc_82479918;
	// bl 0x82545cc0
	ctx.lr = 0x82479914;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_82479918:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247992C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247992C:
	// lwz r3,188(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// stw r25,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r25.u32);
	// stw r25,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r25.u32);
	// stw r25,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r25.u32);
	// bl 0x82545fb0
	ctx.lr = 0x82479940;
	sub_82545FB0(ctx, base);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,180(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r25,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r25.u32);
	// li r6,12
	ctx.r6.s64 = 12;
	// stw r25,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r25.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82416660
	ctx.lr = 0x82479964;
	sub_82416660(ctx, base);
	// lwz r11,176(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247999c
	if (ctx.cr6.eq) goto loc_8247999C;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479988
	if (!ctx.cr6.eq) goto loc_82479988;
	// bl 0x82545cc0
	ctx.lr = 0x82479984;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_82479988:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247999C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247999C:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r1,r1,592
	ctx.r1.s64 = ctx.r1.s64 + 592;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824799A8"))) PPC_WEAK_FUNC(sub_824799A8);
PPC_FUNC_IMPL(__imp__sub_824799A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x824799B0;
	__savegprlr_25(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lis r28,256
	ctx.r28.s64 = 16777216;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// ori r28,r28,1
	ctx.r28.u64 = ctx.r28.u64 | 1;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r4,1296(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r27,r6
	ctx.r27.u64 = ctx.r6.u64;
	// mr r25,r7
	ctx.r25.u64 = ctx.r7.u64;
	// rldicr r28,r28,10,53
	ctx.r28.u64 = __builtin_rotateleft64(ctx.r28.u64, 10) & 0xFFFFFFFFFFFFFC00;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x824799fc
	if (!ctx.cr6.eq) goto loc_824799FC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82437288
	ctx.lr = 0x824799F0;
	sub_82437288(ctx, base);
	// stw r3,1296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x824799F8;
	sub_82408430(ctx, base);
	// lwz r4,1296(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
loc_824799FC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82479A04;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82479a1c
	if (ctx.cr6.eq) goto loc_82479A1C;
	// lis r11,8
	ctx.r11.s64 = 524288;
	// li r28,1024
	ctx.r28.s64 = 1024;
	// ori r11,r11,4
	ctx.r11.u64 = ctx.r11.u64 | 4;
	// rldimi r28,r11,32,0
	ctx.r28.u64 = (__builtin_rotateleft64(ctx.r11.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r28.u64 & 0xFFFFFFFF);
loc_82479A1C:
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r31,52(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82479A34;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lis r8,-31973
	ctx.r8.s64 = -2095382528;
	// mr r10,r25
	ctx.r10.u64 = ctx.r25.u64;
	// li r9,-1
	ctx.r9.s64 = -1;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// ld r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r8,8324(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8324);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82478f80
	ctx.lr = 0x82479A60;
	sub_82478F80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82479a74
	if (!ctx.cr6.eq) goto loc_82479A74;
	// lwz r4,56(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// b 0x82479a78
	goto loc_82479A78;
loc_82479A74:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
loc_82479A78:
	// cmplw cr6,r4,r31
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, ctx.r31.u32, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// beq cr6,0x82479aa0
	if (ctx.cr6.eq) goto loc_82479AA0;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,220(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 220);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479A9C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82479AA0:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82479AA8"))) PPC_WEAK_FUNC(sub_82479AA8);
PPC_FUNC_IMPL(__imp__sub_82479AA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82479AB0;
	__savegprlr_24(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r25,0
	ctx.r25.s64 = 0;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r25.u32);
	// stw r25,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r25.u32);
	// bl 0x82312730
	ctx.lr = 0x82479AD8;
	sub_82312730(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82479AE4;
	sub_823099B0(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r31,52(r26)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r26.u32 + 52);
	// addi r5,r11,-27240
	ctx.r5.s64 = ctx.r11.s64 + -27240;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8242fd50
	ctx.lr = 0x82479B00;
	sub_8242FD50(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// mr r28,r25
	ctx.r28.u64 = ctx.r25.u64;
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// ble cr6,0x82479b88
	if (!ctx.cr6.gt) goto loc_82479B88;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r29,r25
	ctx.r29.u64 = ctx.r25.u64;
	// addi r24,r11,-29761
	ctx.r24.s64 = ctx.r11.s64 + -29761;
loc_82479B20:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82479b88
	if (ctx.cr6.eq) goto loc_82479B88;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82479b44
	if (ctx.cr6.eq) goto loc_82479B44;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x82479b48
	goto loc_82479B48;
loc_82479B44:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_82479B48:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8245cb88
	ctx.lr = 0x82479B50;
	sub_8245CB88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82479ca0
	if (ctx.cr6.eq) goto loc_82479CA0;
	// lwz r11,100(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// add r30,r11,r30
	ctx.r30.u64 = ctx.r11.u64 + ctx.r30.u64;
	// bl 0x82543388
	ctx.lr = 0x82479B64;
	sub_82543388(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82479b74
	if (ctx.cr6.eq) goto loc_82479B74;
	// lwz r31,128(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
	// b 0x82479b78
	goto loc_82479B78;
loc_82479B74:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82479B78:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r29,r29,12
	ctx.r29.s64 = ctx.r29.s64 + 12;
	// cmpw cr6,r28,r27
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r27.s32, ctx.xer);
	// blt cr6,0x82479b20
	if (ctx.cr6.lt) goto loc_82479B20;
loc_82479B88:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// add r29,r30,r26
	ctx.r29.u64 = ctx.r30.u64 + ctx.r26.u64;
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r25.u32);
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82479bec
	if (ctx.cr6.eq) goto loc_82479BEC;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r25.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479bec
	if (ctx.cr6.eq) goto loc_82479BEC;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479bc8
	if (!ctx.cr6.eq) goto loc_82479BC8;
	// bl 0x82545cc0
	ctx.lr = 0x82479BC4;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82479BC8:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479BE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_82479BEC:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x82479C08;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479c40
	if (ctx.cr6.eq) goto loc_82479C40;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479c2c
	if (!ctx.cr6.eq) goto loc_82479C2C;
	// bl 0x82545cc0
	ctx.lr = 0x82479C28;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82479C2C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479C40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82479C40:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r25.u32);
	// stw r25,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r25.u32);
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r25.u32);
	// bl 0x8259c3a0
	ctx.lr = 0x82479C5C;
	sub_8259C3A0(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479c94
	if (ctx.cr6.eq) goto loc_82479C94;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479c80
	if (!ctx.cr6.eq) goto loc_82479C80;
	// bl 0x82545cc0
	ctx.lr = 0x82479C7C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82479C80:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479C94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82479C94:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82479CA0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82479CA8;
	sub_82309A60(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// bl 0x8259c3a0
	ctx.lr = 0x82479CB8;
	sub_8259C3A0(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479cf4
	if (ctx.cr6.eq) goto loc_82479CF4;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82479ce0
	if (!ctx.cr6.eq) goto loc_82479CE0;
	// bl 0x82545cc0
	ctx.lr = 0x82479CDC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82479CE0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82479CF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82479CF4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82479D00"))) PPC_WEAK_FUNC(sub_82479D00);
PPC_FUNC_IMPL(__imp__sub_82479D00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e44
	ctx.lr = 0x82479D08;
	__savegprlr_19(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// mr r20,r5
	ctx.r20.u64 = ctx.r5.u64;
	// mr r28,r7
	ctx.r28.u64 = ctx.r7.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82479f44
	if (ctx.cr6.eq) goto loc_82479F44;
	// ld r11,76(r22)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r22.u32 + 76);
	// rlwinm r11,r11,0,9,9
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400000;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82479f44
	if (ctx.cr6.eq) goto loc_82479F44;
	// lwz r11,68(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 68);
	// li r23,0
	ctx.r23.s64 = 0;
	// mr r25,r23
	ctx.r25.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82479f44
	if (!ctx.cr6.gt) goto loc_82479F44;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// subf r21,r4,r20
	ctx.r21.s64 = ctx.r20.s64 - ctx.r4.s64;
	// lis r26,-31973
	ctx.r26.s64 = -2095382528;
	// addi r24,r11,-28532
	ctx.r24.s64 = ctx.r11.s64 + -28532;
	// lis r27,-31973
	ctx.r27.s64 = -2095382528;
loc_82479D60:
	// cmplwi cr6,r20,0
	ctx.cr6.compare<uint32_t>(ctx.r20.u32, 0, ctx.xer);
	// beq cr6,0x82479f30
	if (ctx.cr6.eq) goto loc_82479F30;
	// lwzx r29,r21,r31
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r21.u32 + ctx.r31.u32);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82479f30
	if (ctx.cr6.eq) goto loc_82479F30;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82479f30
	if (ctx.cr6.eq) goto loc_82479F30;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
loc_82479D84:
	// ld r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r9,r9,0,21,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// bne cr6,0x82479da4
	if (!ctx.cr6.eq) goto loc_82479DA4;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82479d84
	if (!ctx.cr6.eq) goto loc_82479D84;
	// b 0x82479f30
	goto loc_82479F30;
loc_82479DA4:
	// subf r11,r10,r29
	ctx.r11.s64 = ctx.r29.s64 - ctx.r10.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82479e04
	if (!ctx.cr6.eq) goto loc_82479E04;
	// lwz r11,56(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// ld r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r11,r11,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x400;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82479f30
	if (ctx.cr6.eq) goto loc_82479F30;
	// lwz r11,56(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 56);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82479f30
	if (ctx.cr6.eq) goto loc_82479F30;
loc_82479DD8:
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x82479df0
	if (ctx.cr6.eq) goto loc_82479DF0;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82479dd8
	if (!ctx.cr6.eq) goto loc_82479DD8;
	// b 0x82479f30
	goto loc_82479F30;
loc_82479DF0:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82479e0c
	if (ctx.cr6.eq) goto loc_82479E0C;
	// lwz r11,16(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// b 0x82479e08
	goto loc_82479E08;
loc_82479E04:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
loc_82479E08:
	// bne cr6,0x82479f30
	if (!ctx.cr6.eq) goto loc_82479F30;
loc_82479E0C:
	// stw r23,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r23.u32);
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// stw r23,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r23.u32);
loc_82479E18:
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r10,r10,0,21,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x82479e38
	if (!ctx.cr6.eq) goto loc_82479E38;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82479e18
	if (!ctx.cr6.eq) goto loc_82479E18;
	// b 0x82479ee4
	goto loc_82479EE4;
loc_82479E38:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82479e4c
	if (ctx.cr6.eq) goto loc_82479E4C;
	// addi r3,r29,44
	ctx.r3.s64 = ctx.r29.s64 + 44;
	// b 0x82479e60
	goto loc_82479E60;
loc_82479E4C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82479E60;
	sub_8243B750(ctx, base);
loc_82479E60:
	// lwz r11,30036(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 30036);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r3,52(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// beq cr6,0x82479e94
	if (ctx.cr6.eq) goto loc_82479E94;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// b 0x82479e9c
	goto loc_82479E9C;
loc_82479E94:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_82479E9C:
	// ld r19,80(r1)
	ctx.r19.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r19
	ctx.r5.u64 = ctx.r19.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x8245ea70
	ctx.lr = 0x82479EB4;
	sub_8245EA70(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82479ee4
	if (ctx.cr6.eq) goto loc_82479EE4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r5,52(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x8245efe8
	ctx.lr = 0x82479ED4;
	sub_8245EFE8(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
loc_82479EE4:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82479ef4
	if (ctx.cr6.eq) goto loc_82479EF4;
	// lwz r9,4(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// b 0x82479ef8
	goto loc_82479EF8;
loc_82479EF4:
	// mr r9,r30
	ctx.r9.u64 = ctx.r30.u64;
loc_82479EF8:
	// lis r12,320
	ctx.r12.s64 = 20971520;
	// ld r7,8(r30)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
	// ori r12,r12,1
	ctx.r12.u64 = ctx.r12.u64 | 1;
	// lwz r8,8324(r27)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r27.u32 + 8324);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// ld r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// rldicr r12,r12,10,53
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 10) & 0xFFFFFFFFFFFFFC00;
	// and r6,r7,r12
	ctx.r6.u64 = ctx.r7.u64 & ctx.r12.u64;
	// lwz r3,52(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// bl 0x82478f80
	ctx.lr = 0x82479F2C;
	sub_82478F80(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
loc_82479F30:
	// lwz r11,68(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 68);
	// addi r25,r25,1
	ctx.r25.s64 = ctx.r25.s64 + 1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82479d60
	if (ctx.cr6.lt) goto loc_82479D60;
loc_82479F44:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28e94
	__restgprlr_19(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82479F50"))) PPC_WEAK_FUNC(sub_82479F50);
PPC_FUNC_IMPL(__imp__sub_82479F50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82479F58;
	__savegprlr_14(ctx, base);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r17,r3
	ctx.r17.u64 = ctx.r3.u64;
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
	// mr r20,r6
	ctx.r20.u64 = ctx.r6.u64;
	// mr r24,r7
	ctx.r24.u64 = ctx.r7.u64;
	// mr r22,r8
	ctx.r22.u64 = ctx.r8.u64;
	// ld r10,76(r17)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r17.u32 + 76);
	// rlwinm r10,r10,0,9,9
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400000;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// beq cr6,0x8247a260
	if (ctx.cr6.eq) goto loc_8247A260;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x8247a260
	if (ctx.cr6.eq) goto loc_8247A260;
	// lis r10,-31973
	ctx.r10.s64 = -2095382528;
	// lwz r10,24776(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24776);
	// clrlwi r9,r10,31
	ctx.r9.u64 = ctx.r10.u32 & 0x1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247a260
	if (!ctx.cr6.eq) goto loc_8247A260;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// beq cr6,0x82479fb0
	if (ctx.cr6.eq) goto loc_82479FB0;
	// lwz r9,24(r22)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r22.u32 + 24);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x8247a260
	if (ctx.cr6.eq) goto loc_8247A260;
loc_82479FB0:
	// lwz r9,68(r17)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r17.u32 + 68);
	// li r19,0
	ctx.r19.s64 = 0;
	// mr r15,r19
	ctx.r15.u64 = ctx.r19.u64;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x8247a290
	if (!ctx.cr6.gt) goto loc_8247A290;
	// mr r23,r11
	ctx.r23.u64 = ctx.r11.u64;
	// subf r14,r11,r5
	ctx.r14.s64 = ctx.r5.s64 - ctx.r11.s64;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r16,-31973
	ctx.r16.s64 = -2095382528;
	// addi r18,r11,-28532
	ctx.r18.s64 = ctx.r11.s64 + -28532;
	// lis r21,-31973
	ctx.r21.s64 = -2095382528;
	// b 0x82479fe8
	goto loc_82479FE8;
loc_82479FE0:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r10,24776(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24776);
loc_82479FE8:
	// lwzx r27,r14,r23
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r14.u32 + ctx.r23.u32);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x8247a240
	if (ctx.cr6.eq) goto loc_8247A240;
	// lis r12,320
	ctx.r12.s64 = 20971520;
	// ld r11,8(r24)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r24.u32 + 8);
	// lwz r26,52(r27)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r27.u32 + 52);
	// ori r12,r12,1
	ctx.r12.u64 = ctx.r12.u64 | 1;
	// rldicr r12,r12,10,53
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 10) & 0xFFFFFFFFFFFFFC00;
	// and r25,r11,r12
	ctx.r25.u64 = ctx.r11.u64 & ctx.r12.u64;
	// rlwinm r11,r25,0,21,21
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0x400;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247a040
	if (ctx.cr6.eq) goto loc_8247A040;
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
loc_8247A01C:
	// ld r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r9,r9,0,21,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// bne cr6,0x8247a040
	if (!ctx.cr6.eq) goto loc_8247A040;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247a01c
	if (!ctx.cr6.eq) goto loc_8247A01C;
	// li r28,1
	ctx.r28.s64 = 1;
	// b 0x8247a044
	goto loc_8247A044;
loc_8247A040:
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
loc_8247A044:
	// rlwinm r30,r10,30,31,31
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x1;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// beq cr6,0x8247a090
	if (ctx.cr6.eq) goto loc_8247A090;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x8247a070
	if (ctx.cr6.eq) goto loc_8247A070;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82452318
	ctx.lr = 0x8247A064;
	sub_82452318(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r28,1
	ctx.r28.s64 = 1;
	// bne cr6,0x8247a074
	if (!ctx.cr6.eq) goto loc_8247A074;
loc_8247A070:
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
loc_8247A074:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// beq cr6,0x8247a08c
	if (ctx.cr6.eq) goto loc_8247A08C;
	// lwz r11,16(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 16);
	// li r30,1
	ctx.r30.s64 = 1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247a090
	if (!ctx.cr6.eq) goto loc_8247A090;
loc_8247A08C:
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
loc_8247A090:
	// stw r19,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r19.u32);
	// mr r29,r19
	ctx.r29.u64 = ctx.r19.u64;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r19.u32);
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// bne cr6,0x8247a0fc
	if (!ctx.cr6.eq) goto loc_8247A0FC;
	// lwz r31,56(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 56);
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// bne cr6,0x8247a0f4
	if (!ctx.cr6.eq) goto loc_8247A0F4;
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x8247a0c4
	if (ctx.cr6.eq) goto loc_8247A0C4;
	// addi r3,r31,44
	ctx.r3.s64 = ctx.r31.s64 + 44;
	// b 0x8247a0d8
	goto loc_8247A0D8;
loc_8247A0C4:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x8247A0D8;
	sub_8243B750(ctx, base);
loc_8247A0D8:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r29,56(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// b 0x8247a1c0
	goto loc_8247A1C0;
loc_8247A0F4:
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
	// b 0x8247a1c4
	goto loc_8247A1C4;
loc_8247A0FC:
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_8247A100:
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r10,r10,0,21,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x600;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x8247a120
	if (!ctx.cr6.eq) goto loc_8247A120;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247a100
	if (!ctx.cr6.eq) goto loc_8247A100;
	// b 0x8247a1c4
	goto loc_8247A1C4;
loc_8247A120:
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x8247a134
	if (ctx.cr6.eq) goto loc_8247A134;
	// addi r3,r27,44
	ctx.r3.s64 = ctx.r27.s64 + 44;
	// b 0x8247a148
	goto loc_8247A148;
loc_8247A134:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8243b750
	ctx.lr = 0x8247A148;
	sub_8243B750(ctx, base);
loc_8247A148:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,30036(r16)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r16.u32 + 30036);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// beq cr6,0x8247a174
	if (ctx.cr6.eq) goto loc_8247A174;
	// mr r8,r19
	ctx.r8.u64 = ctx.r19.u64;
	// b 0x8247a17c
	goto loc_8247A17C;
loc_8247A174:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_8247A17C:
	// ld r31,80(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8245ea70
	ctx.lr = 0x8247A198;
	sub_8245EA70(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a1c4
	if (ctx.cr6.eq) goto loc_8247A1C4;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8245efe8
	ctx.lr = 0x8247A1B4;
	sub_8245EFE8(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_8247A1C0:
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
loc_8247A1C4:
	// mr r10,r22
	ctx.r10.u64 = ctx.r22.u64;
	// lwz r8,8324(r21)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r21.u32 + 8324);
	// mr r9,r20
	ctx.r9.u64 = ctx.r20.u64;
	// ld r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82478f80
	ctx.lr = 0x8247A1E8;
	sub_82478F80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// stw r31,0(r23)
	PPC_STORE_U32(ctx.r23.u32 + 0, ctx.r31.u32);
	// beq cr6,0x8247a244
	if (ctx.cr6.eq) goto loc_8247A244;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,220(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 220);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A214;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823faba8
	ctx.lr = 0x8247A21C;
	sub_823FABA8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a244
	if (ctx.cr6.eq) goto loc_8247A244;
	// lwz r11,60(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 60);
	// stw r11,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r11.u32);
	// lwz r11,64(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 64);
	// stw r11,64(r3)
	PPC_STORE_U32(ctx.r3.u32 + 64, ctx.r11.u32);
	// lwz r11,68(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 68);
	// stw r11,68(r3)
	PPC_STORE_U32(ctx.r3.u32 + 68, ctx.r11.u32);
	// b 0x8247a244
	goto loc_8247A244;
loc_8247A240:
	// stw r19,0(r23)
	PPC_STORE_U32(ctx.r23.u32 + 0, ctx.r19.u32);
loc_8247A244:
	// lwz r11,68(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 68);
	// addi r15,r15,1
	ctx.r15.s64 = ctx.r15.s64 + 1;
	// addi r23,r23,4
	ctx.r23.s64 = ctx.r23.s64 + 4;
	// cmpw cr6,r15,r11
	ctx.cr6.compare<int32_t>(ctx.r15.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82479fe0
	if (ctx.cr6.lt) goto loc_82479FE0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247A260:
	// lwz r9,68(r17)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r17.u32 + 68);
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x8247a290
	if (!ctx.cr6.gt) goto loc_8247A290;
	// subf r9,r11,r5
	ctx.r9.s64 = ctx.r5.s64 - ctx.r11.s64;
loc_8247A274:
	// lwzx r8,r11,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r8,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// lwz r8,68(r17)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r17.u32 + 68);
	// cmpw cr6,r10,r8
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, ctx.xer);
	// blt cr6,0x8247a274
	if (ctx.cr6.lt) goto loc_8247A274;
loc_8247A290:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247A298"))) PPC_WEAK_FUNC(sub_8247A298);
PPC_FUNC_IMPL(__imp__sub_8247A298) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x8247A2A0;
	__savegprlr_23(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r6
	ctx.r29.u64 = ctx.r6.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x8247a2cc
	if (ctx.cr6.eq) goto loc_8247A2CC;
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r4,216(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 216);
	// bl 0x822e1bd0
	ctx.lr = 0x8247A2CC;
	sub_822E1BD0(ctx, base);
loc_8247A2CC:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247a310
	if (ctx.cr6.eq) goto loc_8247A310;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247A2E8;
	sub_824656C0(ctx, base);
	// cmplw cr6,r3,r31
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, ctx.r31.u32, ctx.xer);
	// beq cr6,0x8247a538
	if (ctx.cr6.eq) goto loc_8247A538;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a310
	if (ctx.cr6.eq) goto loc_8247A310;
	// rlwinm r11,r29,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r29.u32 | (ctx.r29.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247a310
	if (ctx.cr6.eq) goto loc_8247A310;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_8247A310:
	// rlwinm r11,r29,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r29.u32 | (ctx.r29.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247a538
	if (!ctx.cr6.eq) goto loc_8247A538;
	// clrlwi r11,r29,31
	ctx.r11.u64 = ctx.r29.u32 & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247a330
	if (!ctx.cr6.eq) goto loc_8247A330;
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// bl 0x82465a58
	ctx.lr = 0x8247A330;
	sub_82465A58(ctx, base);
loc_8247A330:
	// li r29,0
	ctx.r29.s64 = 0;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247a354
	if (ctx.cr6.eq) goto loc_8247A354;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8243b750
	ctx.lr = 0x8247A350;
	sub_8243B750(ctx, base);
	// b 0x8247a380
	goto loc_8247A380;
loc_8247A354:
	// addi r11,r1,88
	ctx.r11.s64 = ctx.r1.s64 + 88;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// bne cr6,0x8247a368
	if (!ctx.cr6.eq) goto loc_8247A368;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
loc_8247A368:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// lwz r5,52(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// ld r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8245efe8
	ctx.lr = 0x8247A380;
	sub_8245EFE8(ctx, base);
loc_8247A380:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// bl 0x8242ba60
	ctx.lr = 0x8247A394;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247a3a8
	if (ctx.cr6.eq) goto loc_8247A3A8;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247a3b0
	goto loc_8247A3B0;
loc_8247A3A8:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r5,r11,-29761
	ctx.r5.s64 = ctx.r11.s64 + -29761;
loc_8247A3B0:
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-17384(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17384);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A3CC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247A3D4;
	sub_82309A60(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8245f128
	ctx.lr = 0x8247A3DC;
	sub_8245F128(ctx, base);
	// lwz r3,40(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a3f0
	if (ctx.cr6.eq) goto loc_8247A3F0;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x824624a8
	ctx.lr = 0x8247A3F0;
	sub_824624A8(ctx, base);
loc_8247A3F0:
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// rldicr r12,r12,34,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247a4c4
	if (ctx.cr6.eq) goto loc_8247A4C4;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x8247a41c
	if (ctx.cr6.eq) goto loc_8247A41C;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplw cr6,r11,r25
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r25.u32, ctx.xer);
	// bne cr6,0x8247a440
	if (!ctx.cr6.eq) goto loc_8247A440;
loc_8247A41C:
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x8247a440
	if (!ctx.cr6.eq) goto loc_8247A440;
	// lwz r11,48(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 48);
	// mr r28,r29
	ctx.r28.u64 = ctx.r29.u64;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// beq cr6,0x8247a444
	if (ctx.cr6.eq) goto loc_8247A444;
loc_8247A440:
	// li r28,1
	ctx.r28.s64 = 1;
loc_8247A444:
	// lwz r30,52(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x822e19f0
	ctx.lr = 0x8247A44C;
	sub_822E19F0(ctx, base);
	// cmplw cr6,r30,r3
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x8247a460
	if (!ctx.cr6.eq) goto loc_8247A460;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247a4c4
	if (ctx.cr6.eq) goto loc_8247A4C4;
loc_8247A460:
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// bne cr6,0x8247a4c4
	if (!ctx.cr6.eq) goto loc_8247A4C4;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30052(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30052);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247a4c4
	if (!ctx.cr6.eq) goto loc_8247A4C4;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// ld r24,44(r31)
	ctx.r24.u64 = PPC_LOAD_U64(ctx.r31.u32 + 44);
	// lis r26,2
	ctx.r26.s64 = 131072;
	// lwz r23,40(r31)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// mr r28,r29
	ctx.r28.u64 = ctx.r29.u64;
	// ori r26,r26,1
	ctx.r26.u64 = ctx.r26.u64 | 1;
	// mr r27,r29
	ctx.r27.u64 = ctx.r29.u64;
	// lwz r30,8324(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8324);
	// rldicr r26,r26,34,29
	ctx.r26.u64 = __builtin_rotateleft64(ctx.r26.u64, 34) & 0xFFFFFFFC00000000;
	// bl 0x823fa8e8
	ctx.lr = 0x8247A4A0;
	sub_823FA8E8(ctx, base);
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// mr r9,r28
	ctx.r9.u64 = ctx.r28.u64;
	// mr r10,r29
	ctx.r10.u64 = ctx.r29.u64;
	// bl 0x82478f80
	ctx.lr = 0x8247A4C0;
	sub_82478F80(ctx, base);
	// stw r31,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r31.u32);
loc_8247A4C4:
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x8247a50c
	if (ctx.cr6.eq) goto loc_8247A50C;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82464338
	ctx.lr = 0x8247A4D8;
	sub_82464338(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_8247A4DC:
	// lwz r11,40(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247a4f4
	if (ctx.cr6.eq) goto loc_8247A4F4;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247a4dc
	if (!ctx.cr6.eq) goto loc_8247A4DC;
loc_8247A4F4:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x8241c970
	ctx.lr = 0x8247A4FC;
	sub_8241C970(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824624a8
	ctx.lr = 0x8247A508;
	sub_824624A8(ctx, base);
	// stw r25,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r25.u32);
loc_8247A50C:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r11.u32);
	// stw r10,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r10.u32);
	// bl 0x8245f0a8
	ctx.lr = 0x8247A524;
	sub_8245F0A8(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,84(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A538;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247A538:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247A548"))) PPC_WEAK_FUNC(sub_8247A548);
PPC_FUNC_IMPL(__imp__sub_8247A548) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// lwz r10,52(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// ori r11,r11,8
	ctx.r11.u64 = ctx.r11.u64 | 8;
	// std r11,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r11.u64);
	// lwz r10,204(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 204);
	// rlwinm r10,r10,0,21,21
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x400;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x8247a590
	if (!ctx.cr6.eq) goto loc_8247A590;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,40,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 40) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x8247a5b8
	if (ctx.cr6.eq) goto loc_8247A5B8;
loc_8247A590:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82473018
	ctx.lr = 0x8247A5A8;
	sub_82473018(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82477ea0
	ctx.lr = 0x8247A5B8;
	sub_82477EA0(ctx, base);
loc_8247A5B8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8247A5D0"))) PPC_WEAK_FUNC(sub_8247A5D0);
PPC_FUNC_IMPL(__imp__sub_8247A5D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8247A5D8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247a5f4
	if (!ctx.cr6.eq) goto loc_8247A5F4;
	// lwz r30,56(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
loc_8247A5F4:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// ld r29,8(r31)
	ctx.r29.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x8247a60c
	if (ctx.cr6.eq) goto loc_8247A60C;
	// addi r3,r31,44
	ctx.r3.s64 = ctx.r31.s64 + 44;
	// b 0x8247a624
	goto loc_8247A624;
loc_8247A60C:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x8247A624;
	sub_8243B750(ctx, base);
loc_8247A624:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// ld r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// lwz r8,8324(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8324);
	// bl 0x82478f80
	ctx.lr = 0x8247A64C;
	sub_82478F80(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247A658"))) PPC_WEAK_FUNC(sub_8247A658);
PPC_FUNC_IMPL(__imp__sub_8247A658) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8247A660;
	__savegprlr_28(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r29,-31973
	ctx.r29.s64 = -2095382528;
	// li r28,0
	ctx.r28.s64 = 0;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// stw r11,19732(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19732, ctx.r11.u32);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r3,8332(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8332);
	// addi r31,r11,24872
	ctx.r31.s64 = ctx.r11.s64 + 24872;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r28.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r28.u32);
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r5,r11,-12776
	ctx.r5.s64 = ctx.r11.s64 + -12776;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r30,r11,-12788
	ctx.r30.s64 = ctx.r11.s64 + -12788;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,16(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A6B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,8332(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8332);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r5,r11,-12816
	ctx.r5.s64 = ctx.r11.s64 + -12816;
	// addi r6,r1,100
	ctx.r6.s64 = ctx.r1.s64 + 100;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,16(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A6E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// stw r11,19808(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19808, ctx.r11.u32);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,19812(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19812, ctx.r11.u32);
	// bne cr6,0x8247a714
	if (!ctx.cr6.eq) goto loc_8247A714;
	// bl 0x82545cc0
	ctx.lr = 0x8247A710;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_8247A714:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,16
	ctx.r5.s64 = 16;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247A730;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r4,19808(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19808);
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// stw r3,19816(r11)
	PPC_STORE_U32(ctx.r11.u32 + 19816, ctx.r3.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// stw r3,19820(r11)
	PPC_STORE_U32(ctx.r11.u32 + 19820, ctx.r3.u32);
	// beq cr6,0x8247a758
	if (ctx.cr6.eq) goto loc_8247A758;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r3,r11,20028
	ctx.r3.s64 = ctx.r11.s64 + 20028;
	// bl 0x82453818
	ctx.lr = 0x8247A758;
	sub_82453818(ctx, base);
loc_8247A758:
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lis r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-13040
	ctx.r3.s64 = ctx.r11.s64 + -13040;
	// ori r5,r5,32768
	ctx.r5.u64 = ctx.r5.u64 | 32768;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82e29500
	ctx.lr = 0x8247A770;
	sub_82E29500(ctx, base);
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// lis r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,19728
	ctx.r3.s64 = ctx.r11.s64 + 19728;
	// ori r5,r5,32768
	ctx.r5.u64 = ctx.r5.u64 | 32768;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82e29500
	ctx.lr = 0x8247A788;
	sub_82E29500(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// stw r28,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r28.u32);
	// bl 0x82450b48
	ctx.lr = 0x8247A794;
	sub_82450B48(ctx, base);
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,19728(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19728, ctx.r11.u32);
	// bl 0x82468498
	ctx.lr = 0x8247A7A4;
	sub_82468498(ctx, base);
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,6020
	ctx.r4.s64 = ctx.r11.s64 + 6020;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8243b750
	ctx.lr = 0x8247A7BC;
	sub_8243B750(ctx, base);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// ld r30,0(r3)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r11,1296(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247a7e8
	if (!ctx.cr6.eq) goto loc_8247A7E8;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82437288
	ctx.lr = 0x8247A7DC;
	sub_82437288(ctx, base);
	// stw r3,1296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247A7E4;
	sub_82408430(ctx, base);
	// lwz r11,1296(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
loc_8247A7E8:
	// lis r8,-31973
	ctx.r8.s64 = -2095382528;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r28.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// lwz r8,8324(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + 8324);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x82478260
	ctx.lr = 0x8247A814;
	sub_82478260(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a824
	if (ctx.cr6.eq) goto loc_8247A824;
	// bl 0x82424830
	ctx.lr = 0x8247A820;
	sub_82424830(ctx, base);
	// b 0x8247a828
	goto loc_8247A828;
loc_8247A824:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_8247A828:
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r11,r11,19756
	ctx.r11.s64 = ctx.r11.s64 + 19756;
	// stw r3,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r3.u32);
	// ld r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// ori r11,r11,16384
	ctx.r11.u64 = ctx.r11.u64 | 16384;
	// std r11,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, ctx.r11.u64);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247A848"))) PPC_WEAK_FUNC(sub_8247A848);
PPC_FUNC_IMPL(__imp__sub_8247A848) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x8247A850;
	__savegprlr_26(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r27,0
	ctx.r27.s64 = 0;
	// stw r3,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r3.u32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// addi r26,r11,-28548
	ctx.r26.s64 = ctx.r11.s64 + -28548;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r27.u32);
	// stw r27,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r27.u32);
	// beq cr6,0x8247a88c
	if (ctx.cr6.eq) goto loc_8247A88C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x822e0818
	ctx.lr = 0x8247A888;
	sub_822E0818(ctx, base);
	// b 0x8247a8e8
	goto loc_8247A8E8;
loc_8247A88C:
	// lwz r5,1296(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
	// addi r30,r1,80
	ctx.r30.s64 = ctx.r1.s64 + 80;
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// bne cr6,0x8247a8b8
	if (!ctx.cr6.eq) goto loc_8247A8B8;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82437288
	ctx.lr = 0x8247A8AC;
	sub_82437288(ctx, base);
	// stw r3,1296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247A8B4;
	sub_82408430(ctx, base);
	// lwz r5,1296(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
loc_8247A8B8:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// ld r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// lwz r4,212(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// bl 0x8245efe8
	ctx.lr = 0x8247A8C8;
	sub_8245EFE8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8242ba60
	ctx.lr = 0x8247A8D4;
	sub_8242BA60(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82302d08
	ctx.lr = 0x8247A8E0;
	sub_82302D08(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247A8E8;
	sub_82309A60(ctx, base);
loc_8247A8E8:
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,212
	ctx.r3.s64 = ctx.r1.s64 + 212;
	// bl 0x8247aa08
	ctx.lr = 0x8247A900;
	sub_8247AA08(ctx, base);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r3,96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r28,r11,-29761
	ctx.r28.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247a920
	if (!ctx.cr6.eq) goto loc_8247A920;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_8247A920:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x82e28c50
	ctx.lr = 0x8247A92C;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247a9f0
	if (ctx.cr6.eq) goto loc_8247A9F0;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r29,96(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247a948
	if (!ctx.cr6.eq) goto loc_8247A948;
	// mr r29,r28
	ctx.r29.u64 = ctx.r28.u64;
loc_8247A948:
	// lwz r3,1296(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
	// lwz r30,212(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247a96c
	if (!ctx.cr6.eq) goto loc_8247A96C;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82437288
	ctx.lr = 0x8247A960;
	sub_82437288(ctx, base);
	// stw r3,1296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247A968;
	sub_82408430(ctx, base);
	// lwz r3,1296(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
loc_8247A96C:
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247A97C;
	sub_824656C0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247a9f0
	if (!ctx.cr6.eq) goto loc_8247A9F0;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247a99c
	if (!ctx.cr6.eq) goto loc_8247A99C;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_8247A99C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8243b750
	ctx.lr = 0x8247A9AC;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r4,212(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 212);
	// li r3,160
	ctx.r3.s64 = 160;
	// rldicr r6,r6,34,63
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r6.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// ld r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x82543400
	ctx.lr = 0x8247A9C8;
	sub_82543400(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247a9ec
	if (ctx.cr6.eq) goto loc_8247A9EC;
	// bl 0x82424830
	ctx.lr = 0x8247A9D4;
	sub_82424830(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247A9E0;
	sub_82309A60(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
loc_8247A9EC:
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
loc_8247A9F0:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247A9F8;
	sub_82309A60(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247AA08"))) PPC_WEAK_FUNC(sub_8247AA08);
PPC_FUNC_IMPL(__imp__sub_8247AA08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e34
	ctx.lr = 0x8247AA10;
	__savegprlr_15(ctx, base);
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r22,r4
	ctx.r22.u64 = ctx.r4.u64;
	// mr r17,r3
	ctx.r17.u64 = ctx.r3.u64;
	// mr r16,r5
	ctx.r16.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// mr r15,r7
	ctx.r15.u64 = ctx.r7.u64;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r21,r11,-29761
	ctx.r21.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x8247aa44
	if (ctx.cr6.eq) goto loc_8247AA44;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247aa48
	goto loc_8247AA48;
loc_8247AA44:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AA48:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,11
	ctx.r5.s64 = 11;
	// addi r4,r11,-12688
	ctx.r4.s64 = ctx.r11.s64 + -12688;
	// bl 0x82e28c58
	ctx.lr = 0x8247AA58;
	sub_82E28C58(ctx, base);
	// lis r11,32767
	ctx.r11.s64 = 2147418112;
	// li r20,0
	ctx.r20.s64 = 0;
	// ori r19,r11,65535
	ctx.r19.u64 = ctx.r11.u64 | 65535;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r18,r11,-27240
	ctx.r18.s64 = ctx.r11.s64 + -27240;
	// bne cr6,0x8247aa80
	if (!ctx.cr6.eq) goto loc_8247AA80;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r28,r11,24872
	ctx.r28.s64 = ctx.r11.s64 + 24872;
	// b 0x8247ab30
	goto loc_8247AB30;
loc_8247AA80:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247aa94
	if (ctx.cr6.eq) goto loc_8247AA94;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247aa98
	goto loc_8247AA98;
loc_8247AA94:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AA98:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,9
	ctx.r5.s64 = 9;
	// addi r4,r11,-12700
	ctx.r4.s64 = ctx.r11.s64 + -12700;
	// bl 0x82e28c58
	ctx.lr = 0x8247AAA8;
	sub_82E28C58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247aabc
	if (!ctx.cr6.eq) goto loc_8247AABC;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r28,r11,28968
	ctx.r28.s64 = ctx.r11.s64 + 28968;
	// b 0x8247ab30
	goto loc_8247AB30;
loc_8247AABC:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247aad0
	if (ctx.cr6.eq) goto loc_8247AAD0;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247aad4
	goto loc_8247AAD4;
loc_8247AAD0:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AAD4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,10
	ctx.r5.s64 = 10;
	// addi r4,r11,-12712
	ctx.r4.s64 = ctx.r11.s64 + -12712;
	// bl 0x82e28c58
	ctx.lr = 0x8247AAE4;
	sub_82E28C58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247aaf8
	if (!ctx.cr6.eq) goto loc_8247AAF8;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r28,r11,27944
	ctx.r28.s64 = ctx.r11.s64 + 27944;
	// b 0x8247ab30
	goto loc_8247AB30;
loc_8247AAF8:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ab0c
	if (ctx.cr6.eq) goto loc_8247AB0C;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247ab10
	goto loc_8247AB10;
loc_8247AB0C:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AB10:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,11
	ctx.r5.s64 = 11;
	// addi r4,r11,-12724
	ctx.r4.s64 = ctx.r11.s64 + -12724;
	// bl 0x82e28c58
	ctx.lr = 0x8247AB20;
	sub_82E28C58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247ade4
	if (!ctx.cr6.eq) goto loc_8247ADE4;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r28,r11,25896
	ctx.r28.s64 = ctx.r11.s64 + 25896;
loc_8247AB30:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ab44
	if (ctx.cr6.eq) goto loc_8247AB44;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247ab48
	goto loc_8247AB48;
loc_8247AB44:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AB48:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247AB50;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247ade4
	if (ctx.cr6.eq) goto loc_8247ADE4;
	// lwz r10,4(r22)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247ab6c
	if (ctx.cr6.eq) goto loc_8247AB6C;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247ab70
	goto loc_8247AB70;
loc_8247AB6C:
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
loc_8247AB70:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x8247ade4
	if (ctx.cr6.eq) goto loc_8247ADE4;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247ab8c
	if (ctx.cr6.eq) goto loc_8247AB8C;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247ab90
	goto loc_8247AB90;
loc_8247AB8C:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AB90:
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r4,r11,5272
	ctx.r4.s64 = ctx.r11.s64 + 5272;
	// bl 0x82e29e88
	ctx.lr = 0x8247AB9C;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247abc8
	if (ctx.cr6.eq) goto loc_8247ABC8;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247abbc
	if (ctx.cr6.eq) goto loc_8247ABBC;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// b 0x8247abcc
	goto loc_8247ABCC;
loc_8247ABBC:
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// b 0x8247abcc
	goto loc_8247ABCC;
loc_8247ABC8:
	// li r11,-1
	ctx.r11.s64 = -1;
loc_8247ABCC:
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// addi r5,r11,1
	ctx.r5.s64 = ctx.r11.s64 + 1;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238ac70
	ctx.lr = 0x8247ABE0;
	sub_8238AC70(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238c538
	ctx.lr = 0x8247ABF4;
	sub_8238C538(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r20,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r20.u32);
	// stw r20,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r20.u32);
	// cmpwi cr6,r31,-1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, -1, ctx.xer);
	// stw r20,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r20.u32);
	// beq cr6,0x8247ac58
	if (ctx.cr6.eq) goto loc_8247AC58;
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// addi r5,r31,1
	ctx.r5.s64 = ctx.r31.s64 + 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8238ac70
	ctx.lr = 0x8247AC20;
	sub_8238AC70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82302d08
	ctx.lr = 0x8247AC2C;
	sub_82302D08(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247AC34;
	sub_82309A60(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8238abb8
	ctx.lr = 0x8247AC44;
	sub_8238ABB8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82302d08
	ctx.lr = 0x8247AC50;
	sub_82302D08(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247AC58;
	sub_82309A60(ctx, base);
loc_8247AC58:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r5,128(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// stw r20,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r20.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r20,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r20.u32);
	// stw r20,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r20.u32);
	// bne cr6,0x8247ac78
	if (!ctx.cr6.eq) goto loc_8247AC78;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
loc_8247AC78:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ac8c
	if (!ctx.cr6.eq) goto loc_8247AC8C;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
loc_8247AC8C:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// lwz r3,8332(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8332);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247ACAC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247adc0
	if (!ctx.cr6.eq) goto loc_8247ADC0;
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// bne cr6,0x8247ad9c
	if (!ctx.cr6.eq) goto loc_8247AD9C;
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r29,128(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247acd0
	if (!ctx.cr6.eq) goto loc_8247ACD0;
	// mr r29,r21
	ctx.r29.u64 = ctx.r21.u64;
loc_8247ACD0:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r30,112(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ace4
	if (!ctx.cr6.eq) goto loc_8247ACE4;
	// mr r30,r21
	ctx.r30.u64 = ctx.r21.u64;
loc_8247ACE4:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247acf8
	if (ctx.cr6.eq) goto loc_8247ACF8;
	// lwz r31,0(r22)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247acfc
	goto loc_8247ACFC;
loc_8247ACF8:
	// mr r31,r21
	ctx.r31.u64 = ctx.r21.u64;
loc_8247ACFC:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,-28548
	ctx.r5.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// addi r4,r11,-12740
	ctx.r4.s64 = ctx.r11.s64 + -12740;
	// bl 0x82431548
	ctx.lr = 0x8247AD18;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ad2c
	if (ctx.cr6.eq) goto loc_8247AD2C;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247ad30
	goto loc_8247AD30;
loc_8247AD2C:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
loc_8247AD30:
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8242a860
	ctx.lr = 0x8247AD44;
	sub_8242A860(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247AD4C;
	sub_82309A60(ctx, base);
	// lwz r11,180(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// lwz r5,176(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ad60
	if (!ctx.cr6.eq) goto loc_8247AD60;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
loc_8247AD60:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// addi r4,r11,-12748
	ctx.r4.s64 = ctx.r11.s64 + -12748;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8242a860
	ctx.lr = 0x8247AD74;
	sub_8242A860(ctx, base);
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r3,160(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ad88
	if (!ctx.cr6.eq) goto loc_8247AD88;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AD88:
	// bl 0x82418a18
	ctx.lr = 0x8247AD8C;
	sub_82418A18(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82309a60
	ctx.lr = 0x8247AD94;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247AD9C;
	sub_82309A60(ctx, base);
loc_8247AD9C:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x8247ADA4;
	sub_82309A60(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x8247ADAC;
	sub_82309A60(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247ADB4;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
loc_8247ADC0:
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82302d08
	ctx.lr = 0x8247ADCC;
	sub_82302D08(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x8247ADD4;
	sub_82309A60(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x8247ADDC;
	sub_82309A60(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247ADE4;
	sub_82309A60(ctx, base);
loc_8247ADE4:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247adf8
	if (ctx.cr6.eq) goto loc_8247ADF8;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247adfc
	goto loc_8247ADFC;
loc_8247ADF8:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247ADFC:
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r30,r11,17436
	ctx.r30.s64 = ctx.r11.s64 + 17436;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247AE0C;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247ae80
	if (ctx.cr6.eq) goto loc_8247AE80;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ae28
	if (ctx.cr6.eq) goto loc_8247AE28;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247ae2c
	goto loc_8247AE2C;
loc_8247AE28:
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
loc_8247AE2C:
	// subf r31,r11,r3
	ctx.r31.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r31,-1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, -1, ctx.xer);
	// beq cr6,0x8247ae80
	if (ctx.cr6.eq) goto loc_8247AE80;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8238c538
	ctx.lr = 0x8247AE4C;
	sub_8238C538(ctx, base);
	// cmpw cr6,r3,r31
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r31.s32, ctx.xer);
	// ble cr6,0x8247ae80
	if (!ctx.cr6.gt) goto loc_8247AE80;
	// subf r11,r31,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r31.s64;
	// addi r5,r31,1
	ctx.r5.s64 = ctx.r31.s64 + 1;
	// addi r6,r11,-1
	ctx.r6.s64 = ctx.r11.s64 + -1;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8238ac70
	ctx.lr = 0x8247AE6C;
	sub_8238AC70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82302d08
	ctx.lr = 0x8247AE78;
	sub_82302D08(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247AE80;
	sub_82309A60(ctx, base);
loc_8247AE80:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lis r25,-31970
	ctx.r25.s64 = -2095185920;
	// addi r27,r11,30148
	ctx.r27.s64 = ctx.r11.s64 + 30148;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r26,-31971
	ctx.r26.s64 = -2095251456;
	// lis r28,-31973
	ctx.r28.s64 = -2095382528;
	// lis r23,-31973
	ctx.r23.s64 = -2095382528;
	// addi r24,r11,-28548
	ctx.r24.s64 = ctx.r11.s64 + -28548;
loc_8247AEA0:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247aeb4
	if (ctx.cr6.eq) goto loc_8247AEB4;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247aeb8
	goto loc_8247AEB8;
loc_8247AEB4:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AEB8:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247AEC0;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247b270
	if (ctx.cr6.eq) goto loc_8247B270;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247aedc
	if (ctx.cr6.eq) goto loc_8247AEDC;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// b 0x8247aee0
	goto loc_8247AEE0;
loc_8247AEDC:
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
loc_8247AEE0:
	// subf r29,r11,r3
	ctx.r29.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r29,-1
	ctx.cr6.compare<int32_t>(ctx.r29.s32, -1, ctx.xer);
	// beq cr6,0x8247b270
	if (ctx.cr6.eq) goto loc_8247B270;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8238abb8
	ctx.lr = 0x8247AEFC;
	sub_8238ABB8(ctx, base);
	// lwz r11,30016(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247afe4
	if (ctx.cr6.eq) goto loc_8247AFE4;
	// lwz r11,0(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247afe4
	if (!ctx.cr6.eq) goto loc_8247AFE4;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247afe4
	if (ctx.cr6.eq) goto loc_8247AFE4;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247afe4
	if (!ctx.cr6.gt) goto loc_8247AFE4;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247af40
	if (!ctx.cr6.eq) goto loc_8247AF40;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AF40:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x82e28c50
	ctx.lr = 0x8247AF48;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247afe4
	if (ctx.cr6.eq) goto loc_8247AFE4;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// addi r5,r11,-1
	ctx.r5.s64 = ctx.r11.s64 + -1;
	// bne cr6,0x8247af64
	if (!ctx.cr6.eq) goto loc_8247AF64;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_8247AF64:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309cc8
	ctx.lr = 0x8247AF70;
	sub_82309CC8(ctx, base);
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247af84
	if (ctx.cr6.eq) goto loc_8247AF84;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// b 0x8247af88
	goto loc_8247AF88;
loc_8247AF84:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
loc_8247AF88:
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247af9c
	if (ctx.cr6.eq) goto loc_8247AF9C;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247afa0
	goto loc_8247AFA0;
loc_8247AF9C:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
loc_8247AFA0:
	// bl 0x82e28c50
	ctx.lr = 0x8247AFA4;
	sub_82E28C50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r31,r11,1
	ctx.r31.u64 = ctx.r11.u64 ^ 1;
	// bl 0x82309a60
	ctx.lr = 0x8247AFBC;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247afe4
	if (ctx.cr6.eq) goto loc_8247AFE4;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247afd8
	if (ctx.cr6.eq) goto loc_8247AFD8;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// b 0x8247afdc
	goto loc_8247AFDC;
loc_8247AFD8:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
loc_8247AFDC:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309ae0
	ctx.lr = 0x8247AFE4;
	sub_82309AE0(ctx, base);
loc_8247AFE4:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r16,0
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 0, ctx.xer);
	// beq cr6,0x8247b010
	if (ctx.cr6.eq) goto loc_8247B010;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247b000
	if (!ctx.cr6.eq) goto loc_8247B000;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
loc_8247B000:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,0(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// bl 0x8247a848
	ctx.lr = 0x8247B00C;
	sub_8247A848(ctx, base);
	// b 0x8247b0bc
	goto loc_8247B0BC;
loc_8247B010:
	// lwz r30,80(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247b020
	if (!ctx.cr6.eq) goto loc_8247B020;
	// mr r30,r21
	ctx.r30.u64 = ctx.r21.u64;
loc_8247B020:
	// lwz r3,1296(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 1296);
	// lwz r31,0(r17)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b044
	if (!ctx.cr6.eq) goto loc_8247B044;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82437288
	ctx.lr = 0x8247B038;
	sub_82437288(ctx, base);
	// stw r3,1296(r26)
	PPC_STORE_U32(ctx.r26.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247B040;
	sub_82408430(ctx, base);
	// lwz r3,1296(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 1296);
loc_8247B044:
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247B054;
	sub_824656C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b0bc
	if (!ctx.cr6.eq) goto loc_8247B0BC;
	// lwz r11,0(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// li r30,-1
	ctx.r30.s64 = -1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b070
	if (ctx.cr6.eq) goto loc_8247B070;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
loc_8247B070:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r31,80(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247b084
	if (!ctx.cr6.eq) goto loc_8247B084;
	// mr r31,r21
	ctx.r31.u64 = ctx.r21.u64;
loc_8247B084:
	// lwz r3,19848(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 19848);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b0a4
	if (!ctx.cr6.eq) goto loc_8247B0A4;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82462518
	ctx.lr = 0x8247B098;
	sub_82462518(ctx, base);
	// stw r3,19848(r25)
	PPC_STORE_U32(ctx.r25.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x8247B0A0;
	sub_8245F220(ctx, base);
	// lwz r3,19848(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 19848);
loc_8247B0A4:
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247B0B4;
	sub_824656C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247b25c
	if (ctx.cr6.eq) goto loc_8247B25C;
loc_8247B0BC:
	// stw r3,0(r17)
	PPC_STORE_U32(ctx.r17.u32 + 0, ctx.r3.u32);
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// addi r5,r29,1
	ctx.r5.s64 = ctx.r29.s64 + 1;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8238ac70
	ctx.lr = 0x8247B0D4;
	sub_8238AC70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82302d08
	ctx.lr = 0x8247B0E0;
	sub_82302D08(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r20,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r20.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b13c
	if (ctx.cr6.eq) goto loc_8247B13C;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r20,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r20.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b13c
	if (ctx.cr6.eq) goto loc_8247B13C;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b118
	if (!ctx.cr6.eq) goto loc_8247B118;
	// bl 0x82545cc0
	ctx.lr = 0x8247B114;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_8247B118:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B138;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
loc_8247B13C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,100(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82416660
	ctx.lr = 0x8247B158;
	sub_82416660(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b190
	if (ctx.cr6.eq) goto loc_8247B190;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b17c
	if (!ctx.cr6.eq) goto loc_8247B17C;
	// bl 0x82545cc0
	ctx.lr = 0x8247B178;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_8247B17C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B190;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247B190:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r20,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r20.u32);
	// stw r20,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r20.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r20,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r20.u32);
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r20.u32);
	// beq cr6,0x8247b1f8
	if (ctx.cr6.eq) goto loc_8247B1F8;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r20,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r20.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b1f8
	if (ctx.cr6.eq) goto loc_8247B1F8;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b1d4
	if (!ctx.cr6.eq) goto loc_8247B1D4;
	// bl 0x82545cc0
	ctx.lr = 0x8247B1D0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_8247B1D4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B1F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_8247B1F8:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x8247B214;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b24c
	if (ctx.cr6.eq) goto loc_8247B24C;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247b238
	if (!ctx.cr6.eq) goto loc_8247B238;
	// bl 0x82545cc0
	ctx.lr = 0x8247B234;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_8247B238:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B24C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247B24C:
	// stw r20,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r20.u32);
	// stw r20,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r20.u32);
	// stw r20,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r20.u32);
	// b 0x8247aea0
	goto loc_8247AEA0;
loc_8247B25C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247B264;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
loc_8247B270:
	// lwz r11,30016(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 30016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247b340
	if (!ctx.cr6.gt) goto loc_8247B340;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247b340
	if (!ctx.cr6.gt) goto loc_8247B340;
	// lwz r11,0(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247b340
	if (!ctx.cr6.eq) goto loc_8247B340;
	// cmpwi cr6,r15,0
	ctx.cr6.compare<int32_t>(ctx.r15.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// lwz r3,0(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// bl 0x82e28c50
	ctx.lr = 0x8247B2CC;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// addi r5,r11,-1
	ctx.r5.s64 = ctx.r11.s64 + -1;
	// bne cr6,0x8247b2e8
	if (!ctx.cr6.eq) goto loc_8247B2E8;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_8247B2E8:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309cc8
	ctx.lr = 0x8247B2F4;
	sub_82309CC8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x82388e30
	ctx.lr = 0x8247B2FC;
	sub_82388E30(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247B308;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247b340
	if (ctx.cr6.eq) goto loc_8247B340;
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b334
	if (ctx.cr6.eq) goto loc_8247B334;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// bl 0x82309ae0
	ctx.lr = 0x8247B328;
	sub_82309AE0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
loc_8247B334:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82309ae0
	ctx.lr = 0x8247B340;
	sub_82309AE0(ctx, base);
loc_8247B340:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247B350"))) PPC_WEAK_FUNC(sub_8247B350);
PPC_FUNC_IMPL(__imp__sub_8247B350) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x8247B358;
	__savegprlr_26(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r5,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r5.u32);
	// li r31,0
	ctx.r31.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r11.u64);
	// li r11,8
	ctx.r11.s64 = 8;
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r31.u32);
	// mr r28,r8
	ctx.r28.u64 = ctx.r8.u64;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// mr r26,r9
	ctx.r26.u64 = ctx.r9.u64;
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r31.u32);
	// std r31,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r31.u64);
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r31.u32);
	// stw r31,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r31.u32);
	// stw r31,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r31.u32);
	// stw r31,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r31.u32);
	// stw r31,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r31.u32);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r11.u32);
	// stw r31,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r31.u32);
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r11.u32);
	// beq cr6,0x8247b400
	if (ctx.cr6.eq) goto loc_8247B400;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x82e28bd8
	ctx.lr = 0x8247B3D4;
	sub_82E28BD8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b400
	if (ctx.cr6.eq) goto loc_8247B400;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x8247B3F0;
	sub_8243B750(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r11.u32);
loc_8247B400:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x8247b414
	if (!ctx.cr6.eq) goto loc_8247B414;
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r11.u32);
	// b 0x8247b418
	goto loc_8247B418;
loc_8247B414:
	// stw r28,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r28.u32);
loc_8247B418:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// std r27,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r27.u64);
	// stw r26,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r26.u32);
	// bl 0x82479198
	ctx.lr = 0x8247B428;
	sub_82479198(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,148(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// bl 0x82545fb0
	ctx.lr = 0x8247B434;
	sub_82545FB0(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stw r31,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r31.u32);
	// stw r31,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r31.u32);
	// bl 0x82454048
	ctx.lr = 0x8247B444;
	sub_82454048(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247B450"))) PPC_WEAK_FUNC(sub_8247B450);
PPC_FUNC_IMPL(__imp__sub_8247B450) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8247B458;
	__savegprlr_29(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r30,r31,44
	ctx.r30.s64 = ctx.r31.s64 + 44;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// lwz r29,44(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// bl 0x8247a848
	ctx.lr = 0x8247B478;
	sub_8247A848(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r11.u32);
	// bl 0x8243b750
	ctx.lr = 0x8247B494;
	sub_8243B750(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r9,-1
	ctx.r9.s64 = -1;
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r10,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r10.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// stw r9,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r9.u32);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// stw r8,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r8.u32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r29,r11,-28532
	ctx.r29.s64 = ctx.r11.s64 + -28532;
	// bne cr6,0x8247b4dc
	if (!ctx.cr6.eq) goto loc_8247B4DC;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8243b750
	ctx.lr = 0x8247B4DC;
	sub_8243B750(ctx, base);
loc_8247B4DC:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247b4f8
	if (!ctx.cr6.eq) goto loc_8247B4F8;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247B4F4;
	sub_823099B0(ctx, base);
	// b 0x8247b500
	goto loc_8247B500;
loc_8247B4F8:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x8242ba60
	ctx.lr = 0x8247B500;
	sub_8242BA60(ctx, base);
loc_8247B500:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b514
	if (ctx.cr6.eq) goto loc_8247B514;
	// lwz r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// b 0x8247b51c
	goto loc_8247B51C;
loc_8247B514:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r5,r11,-29761
	ctx.r5.s64 = ctx.r11.s64 + -29761;
loc_8247B51C:
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x824656c0
	ctx.lr = 0x8247B52C;
	sub_824656C0(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247B534;
	sub_82309A60(ctx, base);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82465bc8
	ctx.lr = 0x8247B540;
	sub_82465BC8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247B548"))) PPC_WEAK_FUNC(sub_8247B548);
PPC_FUNC_IMPL(__imp__sub_8247B548) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x8247B550;
	__savegprlr_14(ctx, base);
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, ctx.f31.u64);
	// stwu r1,-3824(r1)
	ea = -3824 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r19,0
	ctx.r19.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r21,r19
	ctx.r21.u64 = ctx.r19.u64;
	// mr r14,r4
	ctx.r14.u64 = ctx.r4.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-10888
	ctx.r4.s64 = ctx.r11.s64 + -10888;
	// stw r21,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r21.u32);
	// stw r14,3852(r1)
	PPC_STORE_U32(ctx.r1.u32 + 3852, ctx.r14.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r31.u32);
	// bl 0x82419458
	ctx.lr = 0x8247B584;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b724
	if (ctx.cr6.eq) goto loc_8247B724;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,472
	ctx.r3.s64 = ctx.r1.s64 + 472;
	// bl 0x8242b048
	ctx.lr = 0x8247B59C;
	sub_8242B048(ctx, base);
	// lwz r11,476(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 476);
	// lwz r3,472(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 472);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247b5b8
	if (!ctx.cr6.eq) goto loc_8247B5B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_8247B5B8:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-28460
	ctx.r4.s64 = ctx.r11.s64 + -28460;
	// bl 0x82e28c50
	ctx.lr = 0x8247B5C4;
	sub_82E28C50(ctx, base);
	// lwz r11,476(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 476);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// lwz r3,472(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 472);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r30,r11,1
	ctx.r30.u64 = ctx.r11.u64 ^ 1;
	// bne cr6,0x8247b5e4
	if (!ctx.cr6.eq) goto loc_8247B5E4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_8247B5E4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-10900
	ctx.r4.s64 = ctx.r11.s64 + -10900;
	// bl 0x82e28c50
	ctx.lr = 0x8247B5F0;
	sub_82E28C50(ctx, base);
	// cntlzw r11,r3
	ctx.r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r29,r11,27,31,31
	ctx.r29.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// bl 0x82451a50
	ctx.lr = 0x8247B5FC;
	sub_82451A50(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// rldicr r3,r3,58,63
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u64, 58) & 0xFFFFFFFFFFFFFFFF;
	// bl 0x82470b18
	ctx.lr = 0x8247B60C;
	sub_82470B18(ctx, base);
	// bl 0x825fed60
	ctx.lr = 0x8247B610;
	sub_825FED60(ctx, base);
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// beq cr6,0x8247b624
	if (ctx.cr6.eq) goto loc_8247B624;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x8247b678
	if (ctx.cr6.eq) goto loc_8247B678;
loc_8247B624:
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B640;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x82416508
	ctx.lr = 0x8247B644;
	sub_82416508(ctx, base);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// srawi r10,r3,10
	ctx.xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3FF) != 0);
	ctx.r10.s64 = ctx.r3.s32 >> 10;
	// addi r11,r11,8288
	ctx.r11.s64 = ctx.r11.s64 + 8288;
	// addze r30,r10
	temp.s64 = ctx.r10.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r30.s64 = temp.s64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x824164b8
	ctx.lr = 0x8247B65C;
	sub_824164B8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// addi r4,r11,-10956
	ctx.r4.s64 = ctx.r11.s64 + -10956;
	// srawi r11,r3,10
	ctx.xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3FF) != 0);
	ctx.r11.s64 = ctx.r3.s32 >> 10;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addze r5,r11
	temp.s64 = ctx.r11.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r11.u32;
	ctx.r5.s64 = temp.s64;
	// bl 0x824211f0
	ctx.lr = 0x8247B678;
	sub_824211F0(ctx, base);
loc_8247B678:
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// addi r5,r1,140
	ctx.r5.s64 = ctx.r1.s64 + 140;
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// addi r4,r1,132
	ctx.r4.s64 = ctx.r1.s64 + 132;
	// stw r19,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r19.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B69C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r6,132(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// addi r4,r11,-11012
	ctx.r4.s64 = ctx.r11.s64 + -11012;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// lfs f31,-11016(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -11016);
	ctx.f31.f64 = double(temp.f32);
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 * ctx.f31.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x824211f0
	ctx.lr = 0x8247B6D8;
	sub_824211F0(ctx, base);
	// lwz r6,140(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// mr r10,r6
	ctx.r10.u64 = ctx.r6.u64;
	// addi r4,r11,-11072
	ctx.r4.s64 = ctx.r11.s64 + -11072;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 * ctx.f31.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x824211f0
	ctx.lr = 0x8247B70C;
	sub_824211F0(ctx, base);
	// addi r3,r1,472
	ctx.r3.s64 = ctx.r1.s64 + 472;
	// bl 0x82309a60
	ctx.lr = 0x8247B714;
	sub_82309A60(ctx, base);
loc_8247B714:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B724:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11092
	ctx.r4.s64 = ctx.r11.s64 + -11092;
	// bl 0x82419458
	ctx.lr = 0x8247B734;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b780
	if (ctx.cr6.eq) goto loc_8247B780;
	// bl 0x82451a50
	ctx.lr = 0x8247B740;
	sub_82451A50(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// rldicr r3,r3,58,63
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u64, 58) & 0xFFFFFFFFFFFFFFFF;
	// bl 0x82470b18
	ctx.lr = 0x8247B750;
	sub_82470B18(ctx, base);
	// bl 0x825fed60
	ctx.lr = 0x8247B754;
	sub_825FED60(ctx, base);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,8344(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8344);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B774;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B780:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11108
	ctx.r4.s64 = ctx.r11.s64 + -11108;
	// bl 0x82419458
	ctx.lr = 0x8247B790;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b7c0
	if (ctx.cr6.eq) goto loc_8247B7C0;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r3,8344(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8344);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B7B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B7C0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11120
	ctx.r4.s64 = ctx.r11.s64 + -11120;
	// bl 0x82419458
	ctx.lr = 0x8247B7D0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247b714
	if (!ctx.cr6.eq) goto loc_8247B714;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11124
	ctx.r4.s64 = ctx.r11.s64 + -11124;
	// bl 0x82419458
	ctx.lr = 0x8247B7E8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247b974
	if (ctx.cr6.eq) goto loc_8247B974;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,1872
	ctx.r4.s64 = ctx.r1.s64 + 1872;
	// bl 0x82419600
	ctx.lr = 0x8247B804;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b94c
	if (ctx.cr6.eq) goto loc_8247B94C;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,1872
	ctx.r4.s64 = ctx.r1.s64 + 1872;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x823020c0
	ctx.lr = 0x8247B81C;
	sub_823020C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247b94c
	if (ctx.cr6.eq) goto loc_8247B94C;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,2384
	ctx.r4.s64 = ctx.r1.s64 + 2384;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82419600
	ctx.lr = 0x8247B83C;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b924
	if (ctx.cr6.eq) goto loc_8247B924;
	// addi r4,r1,2384
	ctx.r4.s64 = ctx.r1.s64 + 2384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8245cb88
	ctx.lr = 0x8247B850;
	sub_8245CB88(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247b924
	if (ctx.cr6.eq) goto loc_8247B924;
	// stw r19,360(r1)
	PPC_STORE_U32(ctx.r1.u32 + 360, ctx.r19.u32);
	// stw r19,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, ctx.r19.u32);
	// stw r19,368(r1)
	PPC_STORE_U32(ctx.r1.u32 + 368, ctx.r19.u32);
	// lwz r11,300(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 300);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247b8fc
	if (ctx.cr6.eq) goto loc_8247B8FC;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247B888;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247b8cc
	if (ctx.cr6.eq) goto loc_8247B8CC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424430
	ctx.lr = 0x8247B89C;
	sub_82424430(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82424430
	ctx.lr = 0x8247B8AC;
	sub_82424430(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r5,r1,360
	ctx.r5.s64 = ctx.r1.s64 + 360;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r8,r31
	ctx.r8.u64 = ctx.r31.u64;
	// li r9,1
	ctx.r9.s64 = 1;
	// bl 0x8245f418
	ctx.lr = 0x8247B8CC;
	sub_8245F418(ctx, base);
loc_8247B8CC:
	// lwz r11,364(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247b8fc
	if (ctx.cr6.eq) goto loc_8247B8FC;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// lwz r4,360(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 360);
	// bl 0x82420fe8
	ctx.lr = 0x8247B8E4;
	sub_82420FE8(ctx, base);
	// addi r3,r1,360
	ctx.r3.s64 = ctx.r1.s64 + 360;
	// bl 0x82309a60
	ctx.lr = 0x8247B8EC;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B8FC:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x82420fe8
	ctx.lr = 0x8247B90C;
	sub_82420FE8(ctx, base);
	// addi r3,r1,360
	ctx.r3.s64 = ctx.r1.s64 + 360;
	// bl 0x82309a60
	ctx.lr = 0x8247B914;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B924:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,2384
	ctx.r6.s64 = ctx.r1.s64 + 2384;
	// addi r5,r11,-12980
	ctx.r5.s64 = ctx.r11.s64 + -12980;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247B93C;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B94C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,1872
	ctx.r6.s64 = ctx.r1.s64 + 1872;
	// addi r5,r11,-13004
	ctx.r5.s64 = ctx.r11.s64 + -13004;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247B964;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247B974:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11132
	ctx.r4.s64 = ctx.r11.s64 + -11132;
	// bl 0x82419458
	ctx.lr = 0x8247B980;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247bdfc
	if (ctx.cr6.eq) goto loc_8247BDFC;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,1616
	ctx.r4.s64 = ctx.r1.s64 + 1616;
	// bl 0x82419600
	ctx.lr = 0x8247B99C;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247bdd4
	if (ctx.cr6.eq) goto loc_8247BDD4;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,1616
	ctx.r4.s64 = ctx.r1.s64 + 1616;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x823020c0
	ctx.lr = 0x8247B9B4;
	sub_823020C0(ctx, base);
	// mr r15,r3
	ctx.r15.u64 = ctx.r3.u64;
	// cmplwi cr6,r15,0
	ctx.cr6.compare<uint32_t>(ctx.r15.u32, 0, ctx.xer);
	// beq cr6,0x8247bdd4
	if (ctx.cr6.eq) goto loc_8247BDD4;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,1360
	ctx.r4.s64 = ctx.r1.s64 + 1360;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82419600
	ctx.lr = 0x8247B9D4;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247bdac
	if (ctx.cr6.eq) goto loc_8247BDAC;
	// addi r4,r1,1360
	ctx.r4.s64 = ctx.r1.s64 + 1360;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x8245cb88
	ctx.lr = 0x8247B9E8;
	sub_8245CB88(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x8247bdac
	if (ctx.cr6.eq) goto loc_8247BDAC;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// addi r4,r11,-11140
	ctx.r4.s64 = ctx.r11.s64 + -11140;
	// addi r5,r1,132
	ctx.r5.s64 = ctx.r1.s64 + 132;
	// mr r24,r19
	ctx.r24.u64 = ctx.r19.u64;
	// bl 0x8252eed8
	ctx.lr = 0x8247BA14;
	sub_8252EED8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11156
	ctx.r4.s64 = ctx.r11.s64 + -11156;
	// bl 0x82419458
	ctx.lr = 0x8247BA24;
	sub_82419458(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r17,r3
	ctx.r17.u64 = ctx.r3.u64;
	// addi r4,r11,-11176
	ctx.r4.s64 = ctx.r11.s64 + -11176;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82419458
	ctx.lr = 0x8247BA38;
	sub_82419458(ctx, base);
	// mr r16,r3
	ctx.r16.u64 = ctx.r3.u64;
	// bl 0x822e08e0
	ctx.lr = 0x8247BA40;
	sub_822E08E0(ctx, base);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247BA54;
	sub_82302F00(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r18,r11,-28532
	ctx.r18.s64 = ctx.r11.s64 + -28532;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r20,r11,20028
	ctx.r20.s64 = ctx.r11.s64 + 20028;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r23,r11,-29761
	ctx.r23.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r19,r11,-11192
	ctx.r19.s64 = ctx.r11.s64 + -11192;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r22,r11,-11200
	ctx.r22.s64 = ctx.r11.s64 + -11200;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r21,r11,-11212
	ctx.r21.s64 = ctx.r11.s64 + -11212;
loc_8247BA84:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r10,4(r20)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r20.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247bdec
	if (!ctx.cr6.lt) goto loc_8247BDEC;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r20)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r20.u32 + 0);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// lwzx r26,r9,r11
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r11.u32);
	// beq cr6,0x8247bad8
	if (ctx.cr6.eq) goto loc_8247BAD8;
	// lwz r11,40(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247bda0
	if (ctx.cr6.eq) goto loc_8247BDA0;
loc_8247BAB8:
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247bad8
	if (ctx.cr6.eq) goto loc_8247BAD8;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247bab8
	if (!ctx.cr6.eq) goto loc_8247BAB8;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247BAD4;
	sub_82302F00(ctx, base);
	// b 0x8247ba84
	goto loc_8247BA84;
loc_8247BAD8:
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x8247bb0c
	if (ctx.cr6.eq) goto loc_8247BB0C;
loc_8247BAE4:
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// rlwinm r10,r10,0,22,22
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x8247bb04
	if (!ctx.cr6.eq) goto loc_8247BB04;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247bae4
	if (!ctx.cr6.eq) goto loc_8247BAE4;
	// b 0x8247bb0c
	goto loc_8247BB0C;
loc_8247BB04:
	// cmpwi cr6,r17,0
	ctx.cr6.compare<int32_t>(ctx.r17.s32, 0, ctx.xer);
	// beq cr6,0x8247bda0
	if (ctx.cr6.eq) goto loc_8247BDA0;
loc_8247BB0C:
	// cmpwi cr6,r16,0
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 0, ctx.xer);
	// bne cr6,0x8247bb30
	if (!ctx.cr6.eq) goto loc_8247BB30;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247BB28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247bda0
	if (!ctx.cr6.eq) goto loc_8247BDA0;
loc_8247BB30:
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x8247BB3C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247bda0
	if (ctx.cr6.eq) goto loc_8247BDA0;
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bgt cr6,0x8247bc60
	if (ctx.cr6.gt) goto loc_8247BC60;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x8245c320
	ctx.lr = 0x8247BB58;
	sub_8245C320(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247bc60
	if (!ctx.cr6.eq) goto loc_8247BC60;
	// li r31,0
	ctx.r31.s64 = 0;
	// stw r31,424(r1)
	PPC_STORE_U32(ctx.r1.u32 + 424, ctx.r31.u32);
	// stw r31,428(r1)
	PPC_STORE_U32(ctx.r1.u32 + 428, ctx.r31.u32);
	// stw r31,432(r1)
	PPC_STORE_U32(ctx.r1.u32 + 432, ctx.r31.u32);
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247bbbc
	if (!ctx.cr6.gt) goto loc_8247BBBC;
loc_8247BB7C:
	// li r9,1
	ctx.r9.s64 = 1;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// addi r5,r1,424
	ctx.r5.s64 = ctx.r1.s64 + 424;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x8245f418
	ctx.lr = 0x8247BB9C;
	sub_8245F418(ctx, base);
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247bb7c
	if (ctx.cr6.lt) goto loc_8247BB7C;
	// lwz r11,428(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 428);
	// lwz r30,424(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 424);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247bbc0
	if (!ctx.cr6.eq) goto loc_8247BBC0;
loc_8247BBBC:
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
loc_8247BBC0:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// addi r3,r1,568
	ctx.r3.s64 = ctx.r1.s64 + 568;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247bbdc
	if (!ctx.cr6.eq) goto loc_8247BBDC;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247BBD8;
	sub_823099B0(ctx, base);
	// b 0x8247bbe4
	goto loc_8247BBE4;
loc_8247BBDC:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247BBE4;
	sub_8242BA60(ctx, base);
loc_8247BBE4:
	// lwz r11,572(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 572);
	// lwz r31,568(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 568);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247bbf8
	if (!ctx.cr6.eq) goto loc_8247BBF8;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
loc_8247BBF8:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x824645c8
	ctx.lr = 0x8247BC08;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bc1c
	if (ctx.cr6.eq) goto loc_8247BC1C;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247bc20
	goto loc_8247BC20;
loc_8247BC1C:
	// mr r6,r23
	ctx.r6.u64 = ctx.r23.u64;
loc_8247BC20:
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247BC38;
	sub_824211F0(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
	// bl 0x82309a60
	ctx.lr = 0x8247BC44;
	sub_82309A60(ctx, base);
	// addi r3,r1,568
	ctx.r3.s64 = ctx.r1.s64 + 568;
	// bl 0x82309a60
	ctx.lr = 0x8247BC4C;
	sub_82309A60(ctx, base);
	// addi r3,r1,424
	ctx.r3.s64 = ctx.r1.s64 + 424;
	// bl 0x82309a60
	ctx.lr = 0x8247BC54;
	sub_82309A60(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247BC5C;
	sub_82302F00(ctx, base);
	// b 0x8247ba84
	goto loc_8247BA84;
loc_8247BC60:
	// lwz r11,100(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 100);
	// addi r3,r1,632
	ctx.r3.s64 = ctx.r1.s64 + 632;
	// lwz r10,4(r25)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// add r30,r11,r26
	ctx.r30.u64 = ctx.r11.u64 + ctx.r26.u64;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247bc84
	if (!ctx.cr6.eq) goto loc_8247BC84;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247BC80;
	sub_823099B0(ctx, base);
	// b 0x8247bc8c
	goto loc_8247BC8C;
loc_8247BC84:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247BC8C;
	sub_8242BA60(ctx, base);
loc_8247BC8C:
	// lwz r11,636(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 636);
	// lwz r31,632(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 632);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247bca0
	if (!ctx.cr6.eq) goto loc_8247BCA0;
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
loc_8247BCA0:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x824645c8
	ctx.lr = 0x8247BCB0;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bcc4
	if (ctx.cr6.eq) goto loc_8247BCC4;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247bcc8
	goto loc_8247BCC8;
loc_8247BCC4:
	// mr r6,r23
	ctx.r6.u64 = ctx.r23.u64;
loc_8247BCC8:
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247BCDC;
	sub_824211F0(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
	// bl 0x82309a60
	ctx.lr = 0x8247BCE8;
	sub_82309A60(ctx, base);
	// addi r3,r1,632
	ctx.r3.s64 = ctx.r1.s64 + 632;
	// bl 0x82309a60
	ctx.lr = 0x8247BCF0;
	sub_82309A60(ctx, base);
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// mr r28,r25
	ctx.r28.u64 = ctx.r25.u64;
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x8247bd1c
	if (!ctx.cr6.eq) goto loc_8247BD1C;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
	// bl 0x8245c320
	ctx.lr = 0x8247BD10;
	sub_8245C320(ctx, base);
	// lwz r30,0(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r29,4(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r28,128(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 128);
loc_8247BD1C:
	// lwz r27,72(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 72);
	// li r31,0
	ctx.r31.s64 = 0;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x8247bda0
	if (!ctx.cr6.gt) goto loc_8247BDA0;
loc_8247BD2C:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r26
	ctx.r7.u64 = ctx.r26.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// stw r11,408(r1)
	PPC_STORE_U32(ctx.r1.u32 + 408, ctx.r11.u32);
	// addi r4,r1,408
	ctx.r4.s64 = ctx.r1.s64 + 408;
	// stw r11,412(r1)
	PPC_STORE_U32(ctx.r1.u32 + 412, ctx.r11.u32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r11,416(r1)
	PPC_STORE_U32(ctx.r1.u32 + 416, ctx.r11.u32);
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r11,308(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 308);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247BD64;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,412(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 412);
	// lwz r6,408(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 408);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247bd78
	if (!ctx.cr6.eq) goto loc_8247BD78;
	// mr r6,r23
	ctx.r6.u64 = ctx.r23.u64;
loc_8247BD78:
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247BD88;
	sub_824211F0(ctx, base);
	// addi r3,r1,408
	ctx.r3.s64 = ctx.r1.s64 + 408;
	// bl 0x82309a60
	ctx.lr = 0x8247BD90;
	sub_82309A60(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// add r30,r30,r27
	ctx.r30.u64 = ctx.r30.u64 + ctx.r27.u64;
	// cmpw cr6,r31,r29
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r29.s32, ctx.xer);
	// blt cr6,0x8247bd2c
	if (ctx.cr6.lt) goto loc_8247BD2C;
loc_8247BDA0:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247BDA8;
	sub_82302F00(ctx, base);
	// b 0x8247ba84
	goto loc_8247BA84;
loc_8247BDAC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,1360
	ctx.r6.s64 = ctx.r1.s64 + 1360;
	// addi r5,r11,-12980
	ctx.r5.s64 = ctx.r11.s64 + -12980;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247BDC4;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247BDD4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,1616
	ctx.r6.s64 = ctx.r1.s64 + 1616;
	// addi r5,r11,-13004
	ctx.r5.s64 = ctx.r11.s64 + -13004;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247BDEC;
	sub_82421110(ctx, base);
loc_8247BDEC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247BDFC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11224
	ctx.r4.s64 = ctx.r11.s64 + -11224;
	// bl 0x82419458
	ctx.lr = 0x8247BE08;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247bfe8
	if (ctx.cr6.eq) goto loc_8247BFE8;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,256
	ctx.r5.s64 = 256;
	// addi r4,r1,2128
	ctx.r4.s64 = ctx.r1.s64 + 2128;
	// bl 0x82419600
	ctx.lr = 0x8247BE24;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247bfc0
	if (ctx.cr6.eq) goto loc_8247BFC0;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,2128
	ctx.r4.s64 = ctx.r1.s64 + 2128;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x823020c0
	ctx.lr = 0x8247BE3C;
	sub_823020C0(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// beq cr6,0x8247bfc0
	if (ctx.cr6.eq) goto loc_8247BFC0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11176
	ctx.r4.s64 = ctx.r11.s64 + -11176;
	// bl 0x82419458
	ctx.lr = 0x8247BE58;
	sub_82419458(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
	// bl 0x82309e48
	ctx.lr = 0x8247BE68;
	sub_82309E48(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r24,r11,-28532
	ctx.r24.s64 = ctx.r11.s64 + -28532;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r29,r11,20028
	ctx.r29.s64 = ctx.r11.s64 + 20028;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r26,r11,-29761
	ctx.r26.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r27,r11,-11248
	ctx.r27.s64 = ctx.r11.s64 + -11248;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r25,r11,-26176
	ctx.r25.s64 = ctx.r11.s64 + -26176;
loc_8247BE90:
	// lwz r31,164(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247bfd8
	if (!ctx.cr6.lt) goto loc_8247BFD8;
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// bne cr6,0x8247becc
	if (!ctx.cr6.eq) goto loc_8247BECC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247BEC4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247bfb4
	if (!ctx.cr6.eq) goto loc_8247BFB4;
loc_8247BECC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// rlwinm r31,r31,2,0,29
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// lwzx r3,r11,r31
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// bl 0x822e1bd0
	ctx.lr = 0x8247BEE0;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247bfb4
	if (ctx.cr6.eq) goto loc_8247BFB4;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r11,r11,r31
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bf4c
	if (ctx.cr6.eq) goto loc_8247BF4C;
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247bf4c
	if (ctx.cr6.eq) goto loc_8247BF4C;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// ori r21,r21,1
	ctx.r21.u64 = ctx.r21.u64 | 1;
	// addi r3,r1,648
	ctx.r3.s64 = ctx.r1.s64 + 648;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247bf28
	if (!ctx.cr6.eq) goto loc_8247BF28;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247BF24;
	sub_823099B0(ctx, base);
	// b 0x8247bf30
	goto loc_8247BF30;
loc_8247BF28:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247BF30;
	sub_8242BA60(ctx, base);
loc_8247BF30:
	// lwz r11,652(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 652);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bf44
	if (ctx.cr6.eq) goto loc_8247BF44;
	// lwz r30,648(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 648);
	// b 0x8247bf50
	goto loc_8247BF50;
loc_8247BF44:
	// mr r30,r26
	ctx.r30.u64 = ctx.r26.u64;
	// b 0x8247bf50
	goto loc_8247BF50;
loc_8247BF4C:
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
loc_8247BF50:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lwzx r4,r11,r31
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// bl 0x824645c8
	ctx.lr = 0x8247BF64;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bf78
	if (ctx.cr6.eq) goto loc_8247BF78;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247bf7c
	goto loc_8247BF7C;
loc_8247BF78:
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_8247BF7C:
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247BF90;
	sub_824211F0(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// bl 0x82309a60
	ctx.lr = 0x8247BF9C;
	sub_82309A60(ctx, base);
	// clrlwi r11,r21,31
	ctx.r11.u64 = ctx.r21.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247bfb4
	if (ctx.cr6.eq) goto loc_8247BFB4;
	// addi r3,r1,648
	ctx.r3.s64 = ctx.r1.s64 + 648;
	// rlwinm r21,r21,0,0,30
	ctx.r21.u64 = __builtin_rotateleft64(ctx.r21.u32 | (ctx.r21.u64 << 32), 0) & 0xFFFFFFFE;
	// bl 0x82309a60
	ctx.lr = 0x8247BFB4;
	sub_82309A60(ctx, base);
loc_8247BFB4:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82302fa0
	ctx.lr = 0x8247BFBC;
	sub_82302FA0(ctx, base);
	// b 0x8247be90
	goto loc_8247BE90;
loc_8247BFC0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,2128
	ctx.r6.s64 = ctx.r1.s64 + 2128;
	// addi r5,r11,-13004
	ctx.r5.s64 = ctx.r11.s64 + -13004;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247BFD8;
	sub_82421110(ctx, base);
loc_8247BFD8:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247BFE8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11252
	ctx.r4.s64 = ctx.r11.s64 + -11252;
	// bl 0x82419458
	ctx.lr = 0x8247BFF4;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c01c
	if (ctx.cr6.eq) goto loc_8247C01C;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// bl 0x82478130
	ctx.lr = 0x8247C00C;
	sub_82478130(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C01C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11264
	ctx.r4.s64 = ctx.r11.s64 + -11264;
	// bl 0x82419458
	ctx.lr = 0x8247C02C;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c054
	if (ctx.cr6.eq) goto loc_8247C054;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// bl 0x82478130
	ctx.lr = 0x8247C044;
	sub_82478130(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C054:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11284
	ctx.r4.s64 = ctx.r11.s64 + -11284;
	// bl 0x82419458
	ctx.lr = 0x8247C064;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c1dc
	if (ctx.cr6.eq) goto loc_8247C1DC;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x825306b0
	ctx.lr = 0x8247C074;
	sub_825306B0(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r29,r11,20028
	ctx.r29.s64 = ctx.r11.s64 + 20028;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r28,r11,-29761
	ctx.r28.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r26,r11,10004
	ctx.r26.s64 = ctx.r11.s64 + 10004;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r27,r11,-11344
	ctx.r27.s64 = ctx.r11.s64 + -11344;
loc_8247C094:
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247b714
	if (!ctx.cr6.lt) goto loc_8247B714;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r31,r10,r11
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// lwz r3,56(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// bl 0x823faba8
	ctx.lr = 0x8247C0B8;
	sub_823FABA8(ctx, base);
	// ld r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// lwz r30,40(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// rlwinm r9,r10,0,22,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x200;
	// lwz r10,40(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// cmpldi cr6,r9,0
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 0, ctx.xer);
	// lwz r11,56(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// bne cr6,0x8247c1d0
	if (!ctx.cr6.eq) goto loc_8247C1D0;
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x8247c1d0
	if (ctx.cr6.eq) goto loc_8247C1D0;
	// stw r19,376(r1)
	PPC_STORE_U32(ctx.r1.u32 + 376, ctx.r19.u32);
	// stw r19,380(r1)
	PPC_STORE_U32(ctx.r1.u32 + 380, ctx.r19.u32);
	// stw r19,384(r1)
	PPC_STORE_U32(ctx.r1.u32 + 384, ctx.r19.u32);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247c100
	if (!ctx.cr6.eq) goto loc_8247C100;
	// lwz r11,68(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247c1bc
	if (ctx.cr6.eq) goto loc_8247C1BC;
loc_8247C100:
	// lwz r3,56(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// li r5,0
	ctx.r5.s64 = 0;
	// ld r4,64(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 64);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,160(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 160);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247C11C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x8247c15c
	if (ctx.cr6.eq) goto loc_8247C15C;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x824645c8
	ctx.lr = 0x8247C134;
	sub_824645C8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// bl 0x82302d08
	ctx.lr = 0x8247C140;
	sub_82302D08(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247C148;
	sub_82309A60(ctx, base);
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// bl 0x82309a60
	ctx.lr = 0x8247C150;
	sub_82309A60(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x825e0a08
	ctx.lr = 0x8247C158;
	sub_825E0A08(ctx, base);
	// b 0x8247c094
	goto loc_8247C094;
loc_8247C15C:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwz r4,56(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// bl 0x824645c8
	ctx.lr = 0x8247C168;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247c17c
	if (ctx.cr6.eq) goto loc_8247C17C;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247c180
	goto loc_8247C180;
loc_8247C17C:
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
loc_8247C180:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,720
	ctx.r3.s64 = ctx.r1.s64 + 720;
	// bl 0x8242a860
	ctx.lr = 0x8247C18C;
	sub_8242A860(ctx, base);
	// addi r4,r1,720
	ctx.r4.s64 = ctx.r1.s64 + 720;
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// bl 0x82302d08
	ctx.lr = 0x8247C198;
	sub_82302D08(ctx, base);
	// addi r3,r1,720
	ctx.r3.s64 = ctx.r1.s64 + 720;
	// bl 0x82309a60
	ctx.lr = 0x8247C1A0;
	sub_82309A60(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x8247C1A8;
	sub_82309A60(ctx, base);
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// bl 0x82309a60
	ctx.lr = 0x8247C1B0;
	sub_82309A60(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x825e0a08
	ctx.lr = 0x8247C1B8;
	sub_825E0A08(ctx, base);
	// b 0x8247c094
	goto loc_8247C094;
loc_8247C1BC:
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x822e0818
	ctx.lr = 0x8247C1C8;
	sub_822E0818(ctx, base);
	// addi r3,r1,376
	ctx.r3.s64 = ctx.r1.s64 + 376;
	// bl 0x82309a60
	ctx.lr = 0x8247C1D0;
	sub_82309A60(ctx, base);
loc_8247C1D0:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x825e0a08
	ctx.lr = 0x8247C1D8;
	sub_825E0A08(ctx, base);
	// b 0x8247c094
	goto loc_8247C094;
loc_8247C1DC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11360
	ctx.r4.s64 = ctx.r11.s64 + -11360;
	// bl 0x82419458
	ctx.lr = 0x8247C1EC;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247b714
	if (!ctx.cr6.eq) goto loc_8247B714;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11364
	ctx.r4.s64 = ctx.r11.s64 + -11364;
	// bl 0x82419458
	ctx.lr = 0x8247C204;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247e18c
	if (ctx.cr6.eq) goto loc_8247E18C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11372
	ctx.r4.s64 = ctx.r11.s64 + -11372;
	// bl 0x82419458
	ctx.lr = 0x8247C21C;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247e16c
	if (!ctx.cr6.eq) goto loc_8247E16C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11376
	ctx.r4.s64 = ctx.r11.s64 + -11376;
	// bl 0x82419458
	ctx.lr = 0x8247C234;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247e16c
	if (!ctx.cr6.eq) goto loc_8247E16C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11384
	ctx.r4.s64 = ctx.r11.s64 + -11384;
	// bl 0x82419458
	ctx.lr = 0x8247C24C;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c2b0
	if (ctx.cr6.eq) goto loc_8247C2B0;
	// bl 0x822e08e0
	ctx.lr = 0x8247C258;
	sub_822E08E0(ctx, base);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247C26C;
	sub_82302F00(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
	// li r11,1
	ctx.r11.s64 = 1;
	// rldicr r30,r11,59,63
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r11.u64, 59) & 0xFFFFFFFFFFFFFFFF;
loc_8247C27C:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247b714
	if (!ctx.cr6.lt) goto loc_8247B714;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// or r10,r10,r30
	ctx.r10.u64 = ctx.r10.u64 | ctx.r30.u64;
	// std r10,8(r11)
	PPC_STORE_U64(ctx.r11.u32 + 8, ctx.r10.u64);
	// bl 0x82302f00
	ctx.lr = 0x8247C2AC;
	sub_82302F00(ctx, base);
	// b 0x8247c27c
	goto loc_8247C27C;
loc_8247C2B0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11396
	ctx.r4.s64 = ctx.r11.s64 + -11396;
	// bl 0x82419458
	ctx.lr = 0x8247C2C0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c304
	if (ctx.cr6.eq) goto loc_8247C304;
	// bl 0x822e08e0
	ctx.lr = 0x8247C2CC;
	sub_822E08E0(ctx, base);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247C2E0;
	sub_82302F00(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_8247C2E8:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247b714
	if (!ctx.cr6.lt) goto loc_8247B714;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247C300;
	sub_82302F00(ctx, base);
	// b 0x8247c2e8
	goto loc_8247C2E8;
loc_8247C304:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11404
	ctx.r4.s64 = ctx.r11.s64 + -11404;
	// bl 0x82419458
	ctx.lr = 0x8247C314;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c430
	if (ctx.cr6.eq) goto loc_8247C430;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r6,-1
	ctx.r6.s64 = -1;
	// addi r4,r11,-11412
	ctx.r4.s64 = ctx.r11.s64 + -11412;
	// addi r5,r1,132
	ctx.r5.s64 = ctx.r1.s64 + 132;
	// bl 0x824805a8
	ctx.lr = 0x8247C334;
	sub_824805A8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c420
	if (ctx.cr6.eq) goto loc_8247C420;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r5,132(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r7,-1
	ctx.r7.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11420
	ctx.r4.s64 = ctx.r11.s64 + -11420;
	// addi r6,r1,140
	ctx.r6.s64 = ctx.r1.s64 + 140;
	// bl 0x82418df8
	ctx.lr = 0x8247C358;
	sub_82418DF8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c420
	if (ctx.cr6.eq) goto loc_8247C420;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,676
	ctx.r3.s64 = ctx.r1.s64 + 676;
	// addi r29,r11,-29761
	ctx.r29.s64 = ctx.r11.s64 + -29761;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247C374;
	sub_823099B0(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,140(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// addi r11,r11,-6756
	ctx.r11.s64 = ctx.r11.s64 + -6756;
	// addi r4,r1,672
	ctx.r4.s64 = ctx.r1.s64 + 672;
	// stw r11,672(r1)
	PPC_STORE_U32(ctx.r1.u32 + 672, ctx.r11.u32);
	// bl 0x8246beb8
	ctx.lr = 0x8247C390;
	sub_8246BEB8(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// stw r19,328(r1)
	PPC_STORE_U32(ctx.r1.u32 + 328, ctx.r19.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r19,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, ctx.r19.u32);
	// addi r5,r11,-5704
	ctx.r5.s64 = ctx.r11.s64 + -5704;
	// stw r19,336(r1)
	PPC_STORE_U32(ctx.r1.u32 + 336, ctx.r19.u32);
	// addi r4,r1,328
	ctx.r4.s64 = ctx.r1.s64 + 328;
	// addi r3,r1,676
	ctx.r3.s64 = ctx.r1.s64 + 676;
	// bl 0x8242fd50
	ctx.lr = 0x8247C3B4;
	sub_8242FD50(ctx, base);
	// lwz r11,332(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247c404
	if (!ctx.cr6.gt) goto loc_8247C404;
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
loc_8247C3C8:
	// lwz r11,328(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 328);
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247c3e4
	if (ctx.cr6.eq) goto loc_8247C3E4;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x8247c3e8
	goto loc_8247C3E8;
loc_8247C3E4:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
loc_8247C3E8:
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247C3F0;
	sub_82420FE8(ctx, base);
	// lwz r11,332(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r30,r30,12
	ctx.r30.s64 = ctx.r30.s64 + 12;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247c3c8
	if (ctx.cr6.lt) goto loc_8247C3C8;
loc_8247C404:
	// addi r3,r1,328
	ctx.r3.s64 = ctx.r1.s64 + 328;
	// bl 0x825a2b78
	ctx.lr = 0x8247C40C;
	sub_825A2B78(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r3,r1,676
	ctx.r3.s64 = ctx.r1.s64 + 676;
	// addi r11,r11,-8076
	ctx.r11.s64 = ctx.r11.s64 + -8076;
	// stw r11,672(r1)
	PPC_STORE_U32(ctx.r1.u32 + 672, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247C420;
	sub_82309A60(ctx, base);
loc_8247C420:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C430:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11428
	ctx.r4.s64 = ctx.r11.s64 + -11428;
	// bl 0x82419458
	ctx.lr = 0x8247C440;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c4d0
	if (ctx.cr6.eq) goto loc_8247C4D0;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x8242bd10
	ctx.lr = 0x8247C450;
	sub_8242BD10(ctx, base);
	// bl 0x822e08e0
	ctx.lr = 0x8247C454;
	sub_822E08E0(ctx, base);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247C468;
	sub_82302F00(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_8247C470:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r10,148(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247c48c
	if (!ctx.cr6.lt) goto loc_8247C48C;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247C488;
	sub_82302F00(ctx, base);
	// b 0x8247c470
	goto loc_8247C470;
loc_8247C48C:
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// li r9,8192
	ctx.r9.s64 = 8192;
	// addi r10,r11,-13040
	ctx.r10.s64 = ctx.r11.s64 + -13040;
loc_8247C498:
	// lwz r11,0(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247c4b0
	if (ctx.cr6.eq) goto loc_8247C4B0;
loc_8247C4A4:
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247c4a4
	if (!ctx.cr6.eq) goto loc_8247C4A4;
loc_8247C4B0:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247c498
	if (!ctx.cr6.eq) goto loc_8247C498;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C4D0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11440
	ctx.r4.s64 = ctx.r11.s64 + -11440;
	// bl 0x82419458
	ctx.lr = 0x8247C4E0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c6d8
	if (ctx.cr6.eq) goto loc_8247C6D8;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// mr r24,r19
	ctx.r24.u64 = ctx.r19.u64;
	// addi r26,r11,19728
	ctx.r26.s64 = ctx.r11.s64 + 19728;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r29,r19
	ctx.r29.u64 = ctx.r19.u64;
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
	// mr r25,r19
	ctx.r25.u64 = ctx.r19.u64;
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// mr r27,r26
	ctx.r27.u64 = ctx.r26.u64;
	// addi r23,r11,-11468
	ctx.r23.s64 = ctx.r11.s64 + -11468;
loc_8247C514:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247c574
	if (ctx.cr6.eq) goto loc_8247C574;
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
loc_8247C528:
	// lwz r11,20(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247c53c
	if (ctx.cr6.eq) goto loc_8247C53C;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// b 0x8247c528
	goto loc_8247C528;
loc_8247C53C:
	// add r29,r6,r29
	ctx.r29.u64 = ctx.r6.u64 + ctx.r29.u64;
	// cmpw cr6,r6,r31
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r31.s32, ctx.xer);
	// ble cr6,0x8247c550
	if (!ctx.cr6.gt) goto loc_8247C550;
	// mr r25,r30
	ctx.r25.u64 = ctx.r30.u64;
	// cmpw cr6,r6,r31
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r31.s32, ctx.xer);
loc_8247C550:
	// blt cr6,0x8247c558
	if (ctx.cr6.lt) goto loc_8247C558;
	// mr r31,r6
	ctx.r31.u64 = ctx.r6.u64;
loc_8247C558:
	// cmpw cr6,r6,r28
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r28.s32, ctx.xer);
	// bgt cr6,0x8247c564
	if (ctx.cr6.gt) goto loc_8247C564;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
loc_8247C564:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C574;
	sub_824211F0(ctx, base);
loc_8247C574:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r27,r27,4
	ctx.r27.s64 = ctx.r27.s64 + 4;
	// cmplwi cr6,r30,8192
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 8192, ctx.xer);
	// blt cr6,0x8247c514
	if (ctx.cr6.lt) goto loc_8247C514;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// addi r4,r11,-11484
	ctx.r4.s64 = ctx.r11.s64 + -11484;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C598;
	sub_824211F0(ctx, base);
	// extsw r11,r29
	ctx.r11.s64 = ctx.r29.s32;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r11.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// frsp f13,f0
	ctx.f13.f64 = double(float(ctx.f0.f64));
	// lfs f0,1232(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 1232);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// bl 0x82e28000
	ctx.lr = 0x8247C5BC;
	sub_82E28000(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// addi r10,r1,132
	ctx.r10.s64 = ctx.r1.s64 + 132;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-11552
	ctx.r4.s64 = ctx.r11.s64 + -11552;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f0.u32);
	// lwz r6,132(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// bl 0x824211f0
	ctx.lr = 0x8247C5E8;
	sub_824211F0(ctx, base);
	// rlwinm r11,r25,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// lwzx r31,r11,r26
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r26.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247c6c8
	if (ctx.cr6.eq) goto loc_8247C6C8;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r26,r11,-28532
	ctx.r26.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r28,r11,-11576
	ctx.r28.s64 = ctx.r11.s64 + -11576;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r27,r11,-29761
	ctx.r27.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r25,r11,-26176
	ctx.r25.s64 = ctx.r11.s64 + -26176;
loc_8247C61C:
	// cmpwi cr6,r30,30
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 30, ctx.xer);
	// bge cr6,0x8247c6c8
	if (!ctx.cr6.lt) goto loc_8247C6C8;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x824645c8
	ctx.lr = 0x8247C634;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247c648
	if (ctx.cr6.eq) goto loc_8247C648;
	// lwz r29,0(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247c64c
	goto loc_8247C64C;
loc_8247C648:
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
loc_8247C64C:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// addi r3,r1,552
	ctx.r3.s64 = ctx.r1.s64 + 552;
	// bne cr6,0x8247c664
	if (!ctx.cr6.eq) goto loc_8247C664;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247C660;
	sub_823099B0(ctx, base);
	// b 0x8247c684
	goto loc_8247C684;
loc_8247C664:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247c67c
	if (!ctx.cr6.eq) goto loc_8247C67C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247C678;
	sub_823099B0(ctx, base);
	// b 0x8247c684
	goto loc_8247C684;
loc_8247C67C:
	// addi r4,r31,44
	ctx.r4.s64 = ctx.r31.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247C684;
	sub_8242BA60(ctx, base);
loc_8247C684:
	// lwz r11,556(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 556);
	// lwz r5,552(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 552);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247c698
	if (!ctx.cr6.eq) goto loc_8247C698;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
loc_8247C698:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C6A8;
	sub_824211F0(ctx, base);
	// addi r3,r1,552
	ctx.r3.s64 = ctx.r1.s64 + 552;
	// bl 0x82309a60
	ctx.lr = 0x8247C6B0;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247C6B8;
	sub_82309A60(ctx, base);
	// lwz r31,20(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247c61c
	if (!ctx.cr6.eq) goto loc_8247C61C;
loc_8247C6C8:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C6D8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11584
	ctx.r4.s64 = ctx.r11.s64 + -11584;
	// bl 0x82419458
	ctx.lr = 0x8247C6E8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c8e0
	if (ctx.cr6.eq) goto loc_8247C8E0;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// mr r24,r19
	ctx.r24.u64 = ctx.r19.u64;
	// addi r26,r11,-13040
	ctx.r26.s64 = ctx.r11.s64 + -13040;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r29,r19
	ctx.r29.u64 = ctx.r19.u64;
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
	// mr r25,r19
	ctx.r25.u64 = ctx.r19.u64;
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// mr r27,r26
	ctx.r27.u64 = ctx.r26.u64;
	// addi r23,r11,-11468
	ctx.r23.s64 = ctx.r11.s64 + -11468;
loc_8247C71C:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r6,r19
	ctx.r6.u64 = ctx.r19.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247c77c
	if (ctx.cr6.eq) goto loc_8247C77C;
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
loc_8247C730:
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247c744
	if (ctx.cr6.eq) goto loc_8247C744;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// b 0x8247c730
	goto loc_8247C730;
loc_8247C744:
	// add r29,r6,r29
	ctx.r29.u64 = ctx.r6.u64 + ctx.r29.u64;
	// cmpw cr6,r6,r31
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r31.s32, ctx.xer);
	// ble cr6,0x8247c758
	if (!ctx.cr6.gt) goto loc_8247C758;
	// mr r25,r30
	ctx.r25.u64 = ctx.r30.u64;
	// cmpw cr6,r6,r31
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r31.s32, ctx.xer);
loc_8247C758:
	// blt cr6,0x8247c760
	if (ctx.cr6.lt) goto loc_8247C760;
	// mr r31,r6
	ctx.r31.u64 = ctx.r6.u64;
loc_8247C760:
	// cmpw cr6,r6,r28
	ctx.cr6.compare<int32_t>(ctx.r6.s32, ctx.r28.s32, ctx.xer);
	// bgt cr6,0x8247c76c
	if (ctx.cr6.gt) goto loc_8247C76C;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
loc_8247C76C:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C77C;
	sub_824211F0(ctx, base);
loc_8247C77C:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r27,r27,4
	ctx.r27.s64 = ctx.r27.s64 + 4;
	// cmplwi cr6,r30,8192
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 8192, ctx.xer);
	// blt cr6,0x8247c71c
	if (ctx.cr6.lt) goto loc_8247C71C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// addi r4,r11,-11484
	ctx.r4.s64 = ctx.r11.s64 + -11484;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C7A0;
	sub_824211F0(ctx, base);
	// extsw r11,r29
	ctx.r11.s64 = ctx.r29.s32;
	// std r11,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r11.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// frsp f13,f0
	ctx.f13.f64 = double(float(ctx.f0.f64));
	// lfs f0,1232(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 1232);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// bl 0x82e28000
	ctx.lr = 0x8247C7C4;
	sub_82E28000(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// addi r10,r1,132
	ctx.r10.s64 = ctx.r1.s64 + 132;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// addi r4,r11,-11552
	ctx.r4.s64 = ctx.r11.s64 + -11552;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f0.u32);
	// lwz r6,132(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// bl 0x824211f0
	ctx.lr = 0x8247C7F0;
	sub_824211F0(ctx, base);
	// rlwinm r11,r25,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// lwzx r31,r11,r26
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r26.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247c8d0
	if (ctx.cr6.eq) goto loc_8247C8D0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r26,r11,-28532
	ctx.r26.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r28,r11,-11576
	ctx.r28.s64 = ctx.r11.s64 + -11576;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r27,r11,-29761
	ctx.r27.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r25,r11,-26176
	ctx.r25.s64 = ctx.r11.s64 + -26176;
loc_8247C824:
	// cmpwi cr6,r30,30
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 30, ctx.xer);
	// bge cr6,0x8247c8d0
	if (!ctx.cr6.lt) goto loc_8247C8D0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x824645c8
	ctx.lr = 0x8247C83C;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247c850
	if (ctx.cr6.eq) goto loc_8247C850;
	// lwz r29,0(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247c854
	goto loc_8247C854;
loc_8247C850:
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
loc_8247C854:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// addi r3,r1,536
	ctx.r3.s64 = ctx.r1.s64 + 536;
	// bne cr6,0x8247c86c
	if (!ctx.cr6.eq) goto loc_8247C86C;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247C868;
	sub_823099B0(ctx, base);
	// b 0x8247c88c
	goto loc_8247C88C;
loc_8247C86C:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247c884
	if (!ctx.cr6.eq) goto loc_8247C884;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247C880;
	sub_823099B0(ctx, base);
	// b 0x8247c88c
	goto loc_8247C88C;
loc_8247C884:
	// addi r4,r31,44
	ctx.r4.s64 = ctx.r31.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247C88C;
	sub_8242BA60(ctx, base);
loc_8247C88C:
	// lwz r11,540(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 540);
	// lwz r5,536(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 536);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247c8a0
	if (!ctx.cr6.eq) goto loc_8247C8A0;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
loc_8247C8A0:
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247C8B0;
	sub_824211F0(ctx, base);
	// addi r3,r1,536
	ctx.r3.s64 = ctx.r1.s64 + 536;
	// bl 0x82309a60
	ctx.lr = 0x8247C8B8;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247C8C0;
	sub_82309A60(ctx, base);
	// lwz r31,16(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247c824
	if (!ctx.cr6.eq) goto loc_8247C824;
loc_8247C8D0:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C8E0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11592
	ctx.r4.s64 = ctx.r11.s64 + -11592;
	// bl 0x82419458
	ctx.lr = 0x8247C8F0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c918
	if (ctx.cr6.eq) goto loc_8247C918;
	// bl 0x822e08e0
	ctx.lr = 0x8247C8FC;
	sub_822E08E0(ctx, base);
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8246bdc0
	ctx.lr = 0x8247C908;
	sub_8246BDC0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247C918:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11608
	ctx.r4.s64 = ctx.r11.s64 + -11608;
	// bl 0x82419458
	ctx.lr = 0x8247C928;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247cba0
	if (ctx.cr6.eq) goto loc_8247CBA0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-11620
	ctx.r4.s64 = ctx.r11.s64 + -11620;
	// addi r5,r1,140
	ctx.r5.s64 = ctx.r1.s64 + 140;
	// bl 0x82480608
	ctx.lr = 0x8247C948;
	sub_82480608(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247cb90
	if (ctx.cr6.eq) goto loc_8247CB90;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r19,392(r1)
	PPC_STORE_U32(ctx.r1.u32 + 392, ctx.r19.u32);
	// stw r19,396(r1)
	PPC_STORE_U32(ctx.r1.u32 + 396, ctx.r19.u32);
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// addi r28,r11,-11632
	ctx.r28.s64 = ctx.r11.s64 + -11632;
	// stw r19,400(r1)
	PPC_STORE_U32(ctx.r1.u32 + 400, ctx.r19.u32);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r29,r11,-29761
	ctx.r29.s64 = ctx.r11.s64 + -29761;
loc_8247C970:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,912
	ctx.r3.s64 = ctx.r1.s64 + 912;
	// bl 0x824066d0
	ctx.lr = 0x8247C980;
	sub_824066D0(ctx, base);
	// addi r5,r1,736
	ctx.r5.s64 = ctx.r1.s64 + 736;
	// addi r4,r1,912
	ctx.r4.s64 = ctx.r1.s64 + 912;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x82440fc8
	ctx.lr = 0x8247C990;
	sub_82440FC8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247c9ec
	if (ctx.cr6.eq) goto loc_8247C9EC;
	// addi r4,r1,736
	ctx.r4.s64 = ctx.r1.s64 + 736;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x8242ba60
	ctx.lr = 0x8247C9A4;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247c9b8
	if (ctx.cr6.eq) goto loc_8247C9B8;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247c9bc
	goto loc_8247C9BC;
loc_8247C9B8:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
loc_8247C9BC:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8247a848
	ctx.lr = 0x8247C9C8;
	sub_8247A848(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r1,392
	ctx.r4.s64 = ctx.r1.s64 + 392;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x8247C9D8;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247c9e4
	if (ctx.cr6.eq) goto loc_8247C9E4;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
loc_8247C9E4:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247C9EC;
	sub_82309A60(ctx, base);
loc_8247C9EC:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpwi cr6,r30,16
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 16, ctx.xer);
	// blt cr6,0x8247c970
	if (ctx.cr6.lt) goto loc_8247C970;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x824643b8
	ctx.lr = 0x8247CA08;
	sub_824643B8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ca1c
	if (ctx.cr6.eq) goto loc_8247CA1C;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247ca20
	goto loc_8247CA20;
loc_8247CA1C:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
loc_8247CA20:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addi r4,r11,-11652
	ctx.r4.s64 = ctx.r11.s64 + -11652;
	// bl 0x824211f0
	ctx.lr = 0x8247CA30;
	sub_824211F0(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247CA38;
	sub_82309A60(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r5,r1,132
	ctx.r5.s64 = ctx.r1.s64 + 132;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11660
	ctx.r4.s64 = ctx.r11.s64 + -11660;
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// bl 0x824192a0
	ctx.lr = 0x8247CA50;
	sub_824192A0(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// bl 0x822e08e0
	ctx.lr = 0x8247CA58;
	sub_822E08E0(ctx, base);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247CA6C;
	sub_82302F00(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r27,r11,-7232
	ctx.r27.s64 = ctx.r11.s64 + -7232;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r28,r11,20028
	ctx.r28.s64 = ctx.r11.s64 + 20028;
loc_8247CA7C:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247cb88
	if (!ctx.cr6.lt) goto loc_8247CB88;
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r5,140(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwzx r6,r8,r9
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// lwz r10,40(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + 40);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247cac0
	if (ctx.cr6.eq) goto loc_8247CAC0;
loc_8247CAAC:
	// cmplw cr6,r11,r5
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r5.u32, ctx.xer);
	// beq cr6,0x8247cad0
	if (ctx.cr6.eq) goto loc_8247CAD0;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247caac
	if (!ctx.cr6.eq) goto loc_8247CAAC;
loc_8247CAC0:
	// cntlzw r11,r5
	ctx.r11.u64 = ctx.r5.u32 == 0 ? 32 : __builtin_clz(ctx.r5.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
loc_8247CAD0:
	// cmplw cr6,r10,r5
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r5.u32, ctx.xer);
	// bne cr6,0x8247cb00
	if (!ctx.cr6.eq) goto loc_8247CB00;
	// addi r7,r1,392
	ctx.r7.s64 = ctx.r1.s64 + 392;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// addi r3,r1,1072
	ctx.r3.s64 = ctx.r1.s64 + 1072;
	// bl 0x82448360
	ctx.lr = 0x8247CAE8;
	sub_82448360(ctx, base);
	// addi r3,r1,1196
	ctx.r3.s64 = ctx.r1.s64 + 1196;
	// bl 0x82480d20
	ctx.lr = 0x8247CAF0;
	sub_82480D20(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// stw r27,1072(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1072, ctx.r27.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247CAFC;
	sub_82302F00(ctx, base);
	// b 0x8247ca7c
	goto loc_8247CA7C;
loc_8247CB00:
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
	// lwzx r30,r8,r9
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// lwz r31,40(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 40);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
loc_8247CB18:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
	// lwz r29,52(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// bl 0x822e19f0
	ctx.lr = 0x8247CB28;
	sub_822E19F0(ctx, base);
	// cmplw cr6,r29,r3
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
	// lwz r29,52(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x822e19f0
	ctx.lr = 0x8247CB38;
	sub_822E19F0(ctx, base);
	// cmplw cr6,r29,r3
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x8247cb4c
	if (ctx.cr6.eq) goto loc_8247CB4C;
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
	// lwz r31,40(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// b 0x8247cb18
	goto loc_8247CB18;
loc_8247CB4C:
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmplw cr6,r31,r11
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x8247cb7c
	if (ctx.cr6.eq) goto loc_8247CB7C;
	// addi r7,r1,392
	ctx.r7.s64 = ctx.r1.s64 + 392;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// addi r3,r1,1216
	ctx.r3.s64 = ctx.r1.s64 + 1216;
	// bl 0x82448360
	ctx.lr = 0x8247CB70;
	sub_82448360(ctx, base);
	// addi r3,r1,1340
	ctx.r3.s64 = ctx.r1.s64 + 1340;
	// bl 0x82480d20
	ctx.lr = 0x8247CB78;
	sub_82480D20(ctx, base);
	// stw r27,1216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1216, ctx.r27.u32);
loc_8247CB7C:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82302f00
	ctx.lr = 0x8247CB84;
	sub_82302F00(ctx, base);
	// b 0x8247ca7c
	goto loc_8247CA7C;
loc_8247CB88:
	// addi r3,r1,392
	ctx.r3.s64 = ctx.r1.s64 + 392;
	// bl 0x82480d20
	ctx.lr = 0x8247CB90;
	sub_82480D20(ctx, base);
loc_8247CB90:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247CBA0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11668
	ctx.r4.s64 = ctx.r11.s64 + -11668;
	// bl 0x82419458
	ctx.lr = 0x8247CBB0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247cbd0
	if (ctx.cr6.eq) goto loc_8247CBD0;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82407308
	ctx.lr = 0x8247CBC0;
	sub_82407308(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247CBD0:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-27400
	ctx.r4.s64 = ctx.r11.s64 + -27400;
	// bl 0x82419458
	ctx.lr = 0x8247CBE0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d4e8
	if (ctx.cr6.eq) goto loc_8247D4E8;
	// lwz r22,3852(r1)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 3852);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11680
	ctx.r4.s64 = ctx.r11.s64 + -11680;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247CBFC;
	sub_82420FE8(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// addi r14,r11,-29761
	ctx.r14.s64 = ctx.r11.s64 + -29761;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247CC10;
	sub_82420FE8(ctx, base);
	// li r23,0
	ctx.r23.s64 = 0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11688
	ctx.r4.s64 = ctx.r11.s64 + -11688;
	// stw r23,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r23.u32);
	// stw r23,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r23.u32);
	// bl 0x82418bb8
	ctx.lr = 0x8247CC2C;
	sub_82418BB8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r3,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r3.u32);
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r31,r11,-11412
	ctx.r31.s64 = ctx.r11.s64 + -11412;
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r23.u32);
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// stw r23,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r23.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x824805a8
	ctx.lr = 0x8247CC54;
	sub_824805A8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r30,r11,-11140
	ctx.r30.s64 = ctx.r11.s64 + -11140;
	// addi r5,r1,140
	ctx.r5.s64 = ctx.r1.s64 + 140;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x8252eed8
	ctx.lr = 0x8247CC70;
	sub_8252EED8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r29,r11,-11620
	ctx.r29.s64 = ctx.r11.s64 + -11620;
	// addi r5,r1,204
	ctx.r5.s64 = ctx.r1.s64 + 204;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82480608
	ctx.lr = 0x8247CC8C;
	sub_82480608(ctx, base);
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r26,r11,-11696
	ctx.r26.s64 = ctx.r11.s64 + -11696;
	// bne cr6,0x8247ccb4
	if (!ctx.cr6.eq) goto loc_8247CCB4;
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r5,r1,204
	ctx.r5.s64 = ctx.r1.s64 + 204;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82480608
	ctx.lr = 0x8247CCB4;
	sub_82480608(ctx, base);
loc_8247CCB4:
	// li r27,-1
	ctx.r27.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r5,r1,132
	ctx.r5.s64 = ctx.r1.s64 + 132;
	// addi r4,r11,-11704
	ctx.r4.s64 = ctx.r11.s64 + -11704;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r27.u32);
	// bl 0x82419228
	ctx.lr = 0x8247CCD0;
	sub_82419228(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mr r18,r23
	ctx.r18.u64 = ctx.r23.u64;
	// stw r23,216(r1)
	PPC_STORE_U32(ctx.r1.u32 + 216, ctx.r23.u32);
	// mr r16,r23
	ctx.r16.u64 = ctx.r23.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r23,220(r1)
	PPC_STORE_U32(ctx.r1.u32 + 220, ctx.r23.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r23,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r23.u32);
	// stw r23,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r23.u32);
	// mr r15,r23
	ctx.r15.u64 = ctx.r23.u64;
	// stw r23,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r23.u32);
	// mr r17,r23
	ctx.r17.u64 = ctx.r23.u64;
	// stw r23,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r23.u32);
	// addi r28,r11,-11712
	ctx.r28.s64 = ctx.r11.s64 + -11712;
	// beq cr6,0x8247cd3c
	if (ctx.cr6.eq) goto loc_8247CD3C;
	// bl 0x822e1a40
	ctx.lr = 0x8247CD10;
	sub_822E1A40(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplw cr6,r11,r3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x8247cd30
	if (!ctx.cr6.eq) goto loc_8247CD30;
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r5,r1,208
	ctx.r5.s64 = ctx.r1.s64 + 208;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x824805a8
	ctx.lr = 0x8247CD30;
	sub_824805A8(ctx, base);
loc_8247CD30:
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247cd50
	if (!ctx.cr6.eq) goto loc_8247CD50;
loc_8247CD3C:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x824169b0
	ctx.lr = 0x8247CD48;
	sub_824169B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247d0f4
	if (!ctx.cr6.eq) goto loc_8247D0F4;
loc_8247CD50:
	// lwz r11,208(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247cd70
	if (!ctx.cr6.eq) goto loc_8247CD70;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x824169b0
	ctx.lr = 0x8247CD68;
	sub_824169B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247d0f4
	if (!ctx.cr6.eq) goto loc_8247D0F4;
loc_8247CD70:
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247cd90
	if (!ctx.cr6.eq) goto loc_8247CD90;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x824169b0
	ctx.lr = 0x8247CD88;
	sub_824169B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247d0f4
	if (!ctx.cr6.eq) goto loc_8247D0F4;
loc_8247CD90:
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247cdc4
	if (!ctx.cr6.eq) goto loc_8247CDC4;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x824169b0
	ctx.lr = 0x8247CDA8;
	sub_824169B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247d0f4
	if (!ctx.cr6.eq) goto loc_8247D0F4;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x824169b0
	ctx.lr = 0x8247CDBC;
	sub_824169B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247d0f4
	if (!ctx.cr6.eq) goto loc_8247D0F4;
loc_8247CDC4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11720
	ctx.r4.s64 = ctx.r11.s64 + -11720;
	// bl 0x82418bb8
	ctx.lr = 0x8247CDD4;
	sub_82418BB8(ctx, base);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// bl 0x822e08e0
	ctx.lr = 0x8247CDDC;
	sub_822E08E0(ctx, base);
	// stw r3,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r3.u32);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stw r27,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r27.u32);
	// bl 0x82302f00
	ctx.lr = 0x8247CDEC;
	sub_82302F00(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r25,r11,-7232
	ctx.r25.s64 = ctx.r11.s64 + -7232;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r26,r11,20028
	ctx.r26.s64 = ctx.r11.s64 + 20028;
loc_8247CDFC:
	// lwz r31,164(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r11,4(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247d0f4
	if (!ctx.cr6.lt) goto loc_8247D0F4;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x8247ce30
	if (ctx.cr6.eq) goto loc_8247CE30;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// bl 0x822e1bd0
	ctx.lr = 0x8247CE28;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d0e8
	if (ctx.cr6.eq) goto loc_8247D0E8;
loc_8247CE30:
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247ce54
	if (ctx.cr6.eq) goto loc_8247CE54;
	// rlwinm r9,r31,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r9,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r11.u32);
	// lwz r9,40(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + 40);
	// cmplw cr6,r9,r10
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, ctx.xer);
	// bne cr6,0x8247d0e8
	if (!ctx.cr6.eq) goto loc_8247D0E8;
loc_8247CE54:
	// lwz r9,204(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x8247ce94
	if (ctx.cr6.eq) goto loc_8247CE94;
	// rlwinm r10,r31,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// lwz r10,40(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247d0e8
	if (ctx.cr6.eq) goto loc_8247D0E8;
loc_8247CE74:
	// cmplw cr6,r10,r9
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, ctx.xer);
	// beq cr6,0x8247ce94
	if (ctx.cr6.eq) goto loc_8247CE94;
	// lwz r10,40(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x8247ce74
	if (!ctx.cr6.eq) goto loc_8247CE74;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82302f00
	ctx.lr = 0x8247CE90;
	sub_82302F00(ctx, base);
	// b 0x8247cdfc
	goto loc_8247CDFC;
loc_8247CE94:
	// rlwinm r27,r31,2,0,29
	ctx.r27.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r11,r27
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r27.u32);
	// ld r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 8);
	// rlwinm r9,r10,0,22,22
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r9,512
	ctx.cr6.compare<uint64_t>(ctx.r9.u64, 512, ctx.xer);
	// beq cr6,0x8247d0e8
	if (ctx.cr6.eq) goto loc_8247D0E8;
	// cmpwi cr6,r24,0
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 0, ctx.xer);
	// beq cr6,0x8247cec8
	if (ctx.cr6.eq) goto loc_8247CEC8;
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,39,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 39) & 0xFFFFFFFFFFFFFFFF;
	// and r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 & ctx.r12.u64;
	// cmpldi cr6,r10,0
	ctx.cr6.compare<uint64_t>(ctx.r10.u64, 0, ctx.xer);
	// bne cr6,0x8247d0e8
	if (!ctx.cr6.eq) goto loc_8247D0E8;
loc_8247CEC8:
	// lwz r10,208(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247cf0c
	if (ctx.cr6.eq) goto loc_8247CF0C;
	// bl 0x82302730
	ctx.lr = 0x8247CED8;
	sub_82302730(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247cf08
	if (ctx.cr6.eq) goto loc_8247CF08;
	// lwz r10,208(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 208);
loc_8247CEE8:
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247cf08
	if (ctx.cr6.eq) goto loc_8247CF08;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247cee8
	if (!ctx.cr6.eq) goto loc_8247CEE8;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82302f00
	ctx.lr = 0x8247CF04;
	sub_82302F00(ctx, base);
	// b 0x8247cdfc
	goto loc_8247CDFC;
loc_8247CF08:
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
loc_8247CF0C:
	// addi r3,r1,784
	ctx.r3.s64 = ctx.r1.s64 + 784;
	// lwzx r4,r11,r27
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r27.u32);
	// bl 0x82480920
	ctx.lr = 0x8247CF18;
	sub_82480920(ctx, base);
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// lwzx r3,r11,r27
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r27.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247CF30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwzx r10,r11,r27
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r27.u32);
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// lwz r29,52(r10)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// beq cr6,0x8247cf9c
	if (ctx.cr6.eq) goto loc_8247CF9C;
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247cf7c
	if (!ctx.cr6.gt) goto loc_8247CF7C;
loc_8247CF5C:
	// bl 0x822e08e0
	ctx.lr = 0x8247CF60;
	sub_822E08E0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x8247cf7c
	if (ctx.cr6.eq) goto loc_8247CF7C;
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// lwz r31,60(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247cf5c
	if (ctx.cr6.lt) goto loc_8247CF5C;
loc_8247CF7C:
	// bl 0x822e08e0
	ctx.lr = 0x8247CF80;
	sub_822E08E0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// beq cr6,0x8247cf9c
	if (ctx.cr6.eq) goto loc_8247CF9C;
loc_8247CF88:
	// lwz r31,60(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// lwz r29,60(r29)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r29.u32 + 60);
	// bl 0x822e08e0
	ctx.lr = 0x8247CF94;
	sub_822E08E0(ctx, base);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x8247cf88
	if (!ctx.cr6.eq) goto loc_8247CF88;
loc_8247CF9C:
	// lwz r10,220(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// mr r31,r23
	ctx.r31.u64 = ctx.r23.u64;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x8247cfcc
	if (!ctx.cr6.gt) goto loc_8247CFCC;
	// lwz r11,216(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
loc_8247CFB0:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplw cr6,r9,r29
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, ctx.r29.u32, ctx.xer);
	// beq cr6,0x8247cfcc
	if (ctx.cr6.eq) goto loc_8247CFCC;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r11,r11,20
	ctx.r11.s64 = ctx.r11.s64 + 20;
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x8247cfb0
	if (ctx.cr6.lt) goto loc_8247CFB0;
loc_8247CFCC:
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x8247d028
	if (!ctx.cr6.eq) goto loc_8247D028;
	// addi r4,r1,216
	ctx.r4.s64 = ctx.r1.s64 + 216;
	// stw r29,288(r1)
	PPC_STORE_U32(ctx.r1.u32 + 288, ctx.r29.u32);
	// li r3,20
	ctx.r3.s64 = 20;
	// stw r23,292(r1)
	PPC_STORE_U32(ctx.r1.u32 + 292, ctx.r23.u32);
	// stw r23,296(r1)
	PPC_STORE_U32(ctx.r1.u32 + 296, ctx.r23.u32);
	// stw r23,300(r1)
	PPC_STORE_U32(ctx.r1.u32 + 300, ctx.r23.u32);
	// stw r23,304(r1)
	PPC_STORE_U32(ctx.r1.u32 + 304, ctx.r23.u32);
	// bl 0x827d1970
	ctx.lr = 0x8247CFF4;
	sub_827D1970(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247d020
	if (ctx.cr6.eq) goto loc_8247D020;
	// addi r11,r1,288
	ctx.r11.s64 = ctx.r1.s64 + 288;
	// li r9,5
	ctx.r9.s64 = 5;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_8247D00C:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x8247d00c
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_8247D00C;
loc_8247D020:
	// lwz r11,220(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// addi r31,r11,-1
	ctx.r31.s64 = ctx.r11.s64 + -1;
loc_8247D028:
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247d04c
	if (!ctx.cr6.eq) goto loc_8247D04C;
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247d04c
	if (!ctx.cr6.eq) goto loc_8247D04C;
	// lwz r11,204(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 204);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247d080
	if (ctx.cr6.eq) goto loc_8247D080;
loc_8247D04C:
	// addi r4,r1,232
	ctx.r4.s64 = ctx.r1.s64 + 232;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x8260e0b0
	ctx.lr = 0x8247D058;
	sub_8260E0B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247d080
	if (ctx.cr6.eq) goto loc_8247D080;
	// lwz r9,0(r26)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// lwz r11,896(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 896);
	// lwz r10,892(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 892);
	// lwzx r9,r9,r27
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r27.u32);
	// stw r28,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r28.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r11.u32);
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
loc_8247D080:
	// rlwinm r11,r31,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,216(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// addi r18,r18,1
	ctx.r18.s64 = ctx.r18.s64 + 1;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// add r17,r17,r28
	ctx.r17.u64 = ctx.r17.u64 + ctx.r28.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// addi r7,r10,1
	ctx.r7.s64 = ctx.r10.s64 + 1;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// lwz r9,12(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// add r6,r28,r10
	ctx.r6.u64 = ctx.r28.u64 + ctx.r10.u64;
	// stw r7,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r7.u32);
	// lwz r10,892(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 892);
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// stw r10,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r10.u32);
	// lwz r10,896(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 896);
	// stw r6,16(r11)
	PPC_STORE_U32(ctx.r11.u32 + 16, ctx.r6.u32);
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r10,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r10.u32);
	// lwz r11,892(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 892);
	// stw r25,784(r1)
	PPC_STORE_U32(ctx.r1.u32 + 784, ctx.r25.u32);
	// add r16,r11,r16
	ctx.r16.u64 = ctx.r11.u64 + ctx.r16.u64;
	// lwz r11,896(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 896);
	// add r15,r11,r15
	ctx.r15.u64 = ctx.r11.u64 + ctx.r15.u64;
loc_8247D0E8:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82302f00
	ctx.lr = 0x8247D0F0;
	sub_82302F00(ctx, base);
	// b 0x8247cdfc
	goto loc_8247CDFC;
loc_8247D0F4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11732
	ctx.r4.s64 = ctx.r11.s64 + -11732;
	// bl 0x82418bb8
	ctx.lr = 0x8247D104;
	sub_82418BB8(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11744
	ctx.r4.s64 = ctx.r11.s64 + -11744;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,19844
	ctx.r31.s64 = ctx.r11.s64 + 19844;
	// stw r3,-4(r31)
	PPC_STORE_U32(ctx.r31.u32 + -4, ctx.r3.u32);
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// bl 0x82418bb8
	ctx.lr = 0x8247D120;
	sub_82418BB8(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lwz r4,236(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// addi r20,r11,-28532
	ctx.r20.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// addi r25,r11,-4384
	ctx.r25.s64 = ctx.r11.s64 + -4384;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r24,r11,-4372
	ctx.r24.s64 = ctx.r11.s64 + -4372;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r19,r11,-26176
	ctx.r19.s64 = ctx.r11.s64 + -26176;
	// beq cr6,0x8247d344
	if (ctx.cr6.eq) goto loc_8247D344;
	// lwz r3,232(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// bl 0x8252ef38
	ctx.lr = 0x8247D158;
	sub_8252EF38(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// addi r8,r11,-11756
	ctx.r8.s64 = ctx.r11.s64 + -11756;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// addi r5,r11,432
	ctx.r5.s64 = ctx.r11.s64 + 432;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// addi r4,r11,-11780
	ctx.r4.s64 = ctx.r11.s64 + -11780;
	// bl 0x824211f0
	ctx.lr = 0x8247D180;
	sub_824211F0(ctx, base);
	// lwz r11,236(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// mr r27,r23
	ctx.r27.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247d330
	if (!ctx.cr6.gt) goto loc_8247D330;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r28,0
	ctx.r28.s64 = 0;
	// addi r26,r11,-11804
	ctx.r26.s64 = ctx.r11.s64 + -11804;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r23,r11,-4536
	ctx.r23.s64 = ctx.r11.s64 + -4536;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r21,r11,-11812
	ctx.r21.s64 = ctx.r11.s64 + -11812;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r22,r11,-11824
	ctx.r22.s64 = ctx.r11.s64 + -11824;
loc_8247D1B4:
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d2ac
	if (ctx.cr6.eq) goto loc_8247D2AC;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247D1CC;
	sub_823099B0(ctx, base);
	// lwz r11,232(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// addi r3,r1,440
	ctx.r3.s64 = ctx.r1.s64 + 440;
	// lwzx r11,r28,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r11.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247d1ec
	if (!ctx.cr6.eq) goto loc_8247D1EC;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247D1E8;
	sub_823099B0(ctx, base);
	// b 0x8247d20c
	goto loc_8247D20C;
loc_8247D1EC:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247d204
	if (!ctx.cr6.eq) goto loc_8247D204;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247D200;
	sub_823099B0(ctx, base);
	// b 0x8247d20c
	goto loc_8247D20C;
loc_8247D204:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247D20C;
	sub_8242BA60(ctx, base);
loc_8247D20C:
	// lwz r11,444(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 444);
	// lwz r5,440(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 440);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d220
	if (!ctx.cr6.eq) goto loc_8247D220;
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
loc_8247D220:
	// addi r4,r1,176
	ctx.r4.s64 = ctx.r1.s64 + 176;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x8238aad8
	ctx.lr = 0x8247D22C;
	sub_8238AAD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,504
	ctx.r3.s64 = ctx.r1.s64 + 504;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// bl 0x82309bc8
	ctx.lr = 0x8247D23C;
	sub_82309BC8(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82309a60
	ctx.lr = 0x8247D244;
	sub_82309A60(ctx, base);
	// addi r3,r1,440
	ctx.r3.s64 = ctx.r1.s64 + 440;
	// bl 0x82309a60
	ctx.lr = 0x8247D24C;
	sub_82309A60(ctx, base);
	// lwz r11,508(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 508);
	// lwz r5,504(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 504);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d260
	if (!ctx.cr6.eq) goto loc_8247D260;
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
loc_8247D260:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// lwz r3,3852(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 3852);
	// bl 0x824211f0
	ctx.lr = 0x8247D26C;
	sub_824211F0(ctx, base);
	// lwz r11,508(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 508);
	// lwz r5,504(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 504);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d280
	if (!ctx.cr6.eq) goto loc_8247D280;
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
loc_8247D280:
	// lwz r11,232(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r28,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r11.u32);
	// bl 0x823f32f8
	ctx.lr = 0x8247D29C;
	sub_823F32F8(ctx, base);
	// addi r3,r1,504
	ctx.r3.s64 = ctx.r1.s64 + 504;
	// bl 0x82309a60
	ctx.lr = 0x8247D2A4;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247D2AC;
	sub_82309A60(ctx, base);
loc_8247D2AC:
	// lwz r11,232(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// add r31,r28,r11
	ctx.r31.u64 = ctx.r28.u64 + ctx.r11.u64;
	// lwzx r30,r28,r11
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r11.u32);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x824645c8
	ctx.lr = 0x8247D2C8;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d2dc
	if (ctx.cr6.eq) goto loc_8247D2DC;
	// lwz r29,0(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247d2e0
	goto loc_8247D2E0;
loc_8247D2DC:
	// mr r29,r14
	ctx.r29.u64 = ctx.r14.u64;
loc_8247D2E0:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,204(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 204);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247D2F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// srawi r11,r3,10
	ctx.xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3FF) != 0);
	ctx.r11.s64 = ctx.r3.s32 >> 10;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addze r8,r11
	temp.s64 = ctx.r11.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r11.u32;
	ctx.r8.s64 = temp.s64;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// lwz r3,3852(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 3852);
	// bl 0x824211f0
	ctx.lr = 0x8247D314;
	sub_824211F0(ctx, base);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x82309a60
	ctx.lr = 0x8247D31C;
	sub_82309A60(ctx, base);
	// lwz r11,236(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r28,r28,16
	ctx.r28.s64 = ctx.r28.s64 + 16;
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247d1b4
	if (ctx.cr6.lt) goto loc_8247D1B4;
loc_8247D330:
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// lwz r3,3852(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 3852);
	// bl 0x82420fe8
	ctx.lr = 0x8247D33C;
	sub_82420FE8(ctx, base);
	// lwz r22,3852(r1)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r1.u32 + 3852);
	// li r23,0
	ctx.r23.s64 = 0;
loc_8247D344:
	// lwz r4,220(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// beq cr6,0x8247d44c
	if (ctx.cr6.eq) goto loc_8247D44C;
	// lwz r3,216(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// bl 0x8252f290
	ctx.lr = 0x8247D358;
	sub_8252F290(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// addi r9,r11,-11836
	ctx.r9.s64 = ctx.r11.s64 + -11836;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r7,r25
	ctx.r7.u64 = ctx.r25.u64;
	// addi r6,r11,-5760
	ctx.r6.s64 = ctx.r11.s64 + -5760;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// addi r5,r11,13508
	ctx.r5.s64 = ctx.r11.s64 + 13508;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-11868
	ctx.r4.s64 = ctx.r11.s64 + -11868;
	// bl 0x824211f0
	ctx.lr = 0x8247D388;
	sub_824211F0(ctx, base);
	// lwz r11,220(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// mr r29,r23
	ctx.r29.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247d440
	if (!ctx.cr6.gt) goto loc_8247D440;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
	// addi r28,r11,-11900
	ctx.r28.s64 = ctx.r11.s64 + -11900;
loc_8247D3A4:
	// lwz r10,216(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 216);
	// addi r3,r1,456
	ctx.r3.s64 = ctx.r1.s64 + 456;
	// add r31,r30,r10
	ctx.r31.u64 = ctx.r30.u64 + ctx.r10.u64;
	// lwzx r11,r30,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247d3c8
	if (!ctx.cr6.eq) goto loc_8247D3C8;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247D3C4;
	sub_823099B0(ctx, base);
	// b 0x8247d3e8
	goto loc_8247D3E8;
loc_8247D3C8:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247d3e0
	if (!ctx.cr6.eq) goto loc_8247D3E0;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247D3DC;
	sub_823099B0(ctx, base);
	// b 0x8247d3e8
	goto loc_8247D3E8;
loc_8247D3E0:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247D3E8;
	sub_8242BA60(ctx, base);
loc_8247D3E8:
	// lwz r11,460(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 460);
	// lwz r5,456(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 456);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d3fc
	if (!ctx.cr6.eq) goto loc_8247D3FC;
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
loc_8247D3FC:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// rlwinm r9,r11,22,10,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x3FFFFF;
	// rlwinm r8,r10,22,10,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 22) & 0x3FFFFF;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// rlwinm r7,r7,22,10,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 22) & 0x3FFFFF;
	// bl 0x824211f0
	ctx.lr = 0x8247D424;
	sub_824211F0(ctx, base);
	// addi r3,r1,456
	ctx.r3.s64 = ctx.r1.s64 + 456;
	// bl 0x82309a60
	ctx.lr = 0x8247D42C;
	sub_82309A60(ctx, base);
	// lwz r11,220(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 220);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// addi r30,r30,20
	ctx.r30.s64 = ctx.r30.s64 + 20;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247d3a4
	if (ctx.cr6.lt) goto loc_8247D3A4;
loc_8247D440:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247D44C;
	sub_82420FE8(ctx, base);
loc_8247D44C:
	// clrldi r10,r17,32
	ctx.r10.u64 = ctx.r17.u64 & 0xFFFFFFFF;
	// clrldi r9,r15,32
	ctx.r9.u64 = ctx.r15.u64 & 0xFFFFFFFF;
	// clrldi r8,r16,32
	ctx.r8.u64 = ctx.r16.u64 & 0xFFFFFFFF;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r5,r18
	ctx.r5.u64 = ctx.r18.u64;
	// std r10,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r10.u64);
	// lfd f0,160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// std r9,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r9.u64);
	// lfd f13,144(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 144);
	// std r8,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r8.u64);
	// lfd f12,176(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 176);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// addi r4,r11,-11936
	ctx.r4.s64 = ctx.r11.s64 + -11936;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// fcfid f12,f12
	ctx.f12.f64 = double(ctx.f12.s64);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// frsp f11,f0
	ctx.f11.f64 = double(float(ctx.f0.f64));
	// lfd f0,-11944(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11944);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// frsp f12,f12
	ctx.f12.f64 = double(float(ctx.f12.f64));
	// fmul f3,f11,f0
	ctx.f3.f64 = ctx.f11.f64 * ctx.f0.f64;
	// stfd f3,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.f3.u64);
	// fmul f2,f13,f0
	ctx.f2.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f2,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.f2.u64);
	// fmul f1,f12,f0
	ctx.f1.f64 = ctx.f12.f64 * ctx.f0.f64;
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r8,56(r1)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 56);
	// ld r7,48(r1)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r1.u32 + 48);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// bl 0x824211f0
	ctx.lr = 0x8247D4C8;
	sub_824211F0(ctx, base);
	// addi r3,r1,232
	ctx.r3.s64 = ctx.r1.s64 + 232;
	// bl 0x829def90
	ctx.lr = 0x8247D4D0;
	sub_829DEF90(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x829de798
	ctx.lr = 0x8247D4D8;
	sub_829DE798(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D4E8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-11956
	ctx.r4.s64 = ctx.r11.s64 + -11956;
	// bl 0x82419458
	ctx.lr = 0x8247D4F8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d6a8
	if (ctx.cr6.eq) goto loc_8247D6A8;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addi r4,r11,-11968
	ctx.r4.s64 = ctx.r11.s64 + -11968;
	// bl 0x824211f0
	ctx.lr = 0x8247D510;
	sub_824211F0(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// mr r24,r19
	ctx.r24.u64 = ctx.r19.u64;
	// addi r22,r11,20040
	ctx.r22.s64 = ctx.r11.s64 + 20040;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247d698
	if (!ctx.cr6.gt) goto loc_8247D698;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r23,r19
	ctx.r23.u64 = ctx.r19.u64;
	// addi r21,r11,-12048
	ctx.r21.s64 = ctx.r11.s64 + -12048;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r20,r11,-29761
	ctx.r20.s64 = ctx.r11.s64 + -29761;
loc_8247D53C:
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// mr r25,r19
	ctx.r25.u64 = ctx.r19.u64;
	// mr r29,r19
	ctx.r29.u64 = ctx.r19.u64;
	// lwzx r30,r11,r23
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r23.u32);
	// lwz r11,176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 176);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247d5e0
	if (!ctx.cr6.gt) goto loc_8247D5E0;
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
loc_8247D55C:
	// lwz r11,172(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 172);
	// add r4,r31,r11
	ctx.r4.u64 = ctx.r31.u64 + ctx.r11.u64;
	// lwz r11,0(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d57c
	if (!ctx.cr6.eq) goto loc_8247D57C;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d5cc
	if (ctx.cr6.eq) goto loc_8247D5CC;
loc_8247D57C:
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x8242ba60
	ctx.lr = 0x8247D584;
	sub_8242BA60(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d598
	if (ctx.cr6.eq) goto loc_8247D598;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247d59c
	goto loc_8247D59C;
loc_8247D598:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_8247D59C:
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_8247D5A0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247d5a0
	if (!ctx.cr6.eq) goto loc_8247D5A0;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// add r11,r11,r25
	ctx.r11.u64 = ctx.r11.u64 + ctx.r25.u64;
	// addi r25,r11,17
	ctx.r25.s64 = ctx.r11.s64 + 17;
	// bl 0x82309a60
	ctx.lr = 0x8247D5CC;
	sub_82309A60(ctx, base);
loc_8247D5CC:
	// lwz r11,176(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 176);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// addi r31,r31,8
	ctx.r31.s64 = ctx.r31.s64 + 8;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247d55c
	if (ctx.cr6.lt) goto loc_8247D55C;
loc_8247D5E0:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r29,200(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lwz r31,188(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 188);
	// lwz r28,176(r30)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r30.u32 + 176);
	// lwz r27,1384(r30)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1384);
	// lwz r26,140(r30)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r30.u32 + 140);
	// lwz r4,60(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 60);
	// bl 0x824645c8
	ctx.lr = 0x8247D604;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d618
	if (ctx.cr6.eq) goto loc_8247D618;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247d61c
	goto loc_8247D61C;
loc_8247D618:
	// mr r6,r20
	ctx.r6.u64 = ctx.r20.u64;
loc_8247D61C:
	// lwz r11,224(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 224);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d630
	if (ctx.cr6.eq) goto loc_8247D630;
	// lwz r5,220(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 220);
	// b 0x8247d634
	goto loc_8247D634;
loc_8247D630:
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
loc_8247D634:
	// mulli r11,r29,108
	ctx.r11.s64 = ctx.r29.s64 * 108;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r27.u32);
	// rlwinm r11,r11,22,10,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x3FFFFF;
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r26.u32);
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// srawi r9,r25,10
	ctx.xer.ca = (ctx.r25.s32 < 0) & ((ctx.r25.u32 & 0x3FF) != 0);
	ctx.r9.s64 = ctx.r25.s32 >> 10;
	// mr r10,r31
	ctx.r10.u64 = ctx.r31.u64;
	// rlwinm r8,r28,25,10,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 25) & 0x3FFFFF;
	// addze r9,r9
	temp.s64 = ctx.r9.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r9.s64 = temp.s64;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// rlwinm r11,r31,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// rlwinm r11,r11,25,10,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 25) & 0x3FFFFF;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x824211f0
	ctx.lr = 0x8247D67C;
	sub_824211F0(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82309a60
	ctx.lr = 0x8247D684;
	sub_82309A60(ctx, base);
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
	// addi r23,r23,4
	ctx.r23.s64 = ctx.r23.s64 + 4;
	// cmpw cr6,r24,r11
	ctx.cr6.compare<int32_t>(ctx.r24.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247d53c
	if (ctx.cr6.lt) goto loc_8247D53C;
loc_8247D698:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D6A8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12060
	ctx.r4.s64 = ctx.r11.s64 + -12060;
	// bl 0x82419458
	ctx.lr = 0x8247D6B8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247d720
	if (ctx.cr6.eq) goto loc_8247D720;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,128
	ctx.r5.s64 = 128;
	// addi r4,r1,944
	ctx.r4.s64 = ctx.r1.s64 + 944;
	// bl 0x82419600
	ctx.lr = 0x8247D6D4;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d710
	if (ctx.cr6.eq) goto loc_8247D710;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,944
	ctx.r4.s64 = ctx.r1.s64 + 944;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x8252f600
	ctx.lr = 0x8247D6EC;
	sub_8252F600(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247d710
	if (ctx.cr6.eq) goto loc_8247D710;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// bl 0x8246ccc8
	ctx.lr = 0x8247D700;
	sub_8246CCC8(ctx, base);
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,52(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// bl 0x824750d8
	ctx.lr = 0x8247D710;
	sub_824750D8(ctx, base);
loc_8247D710:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D720:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-12072
	ctx.r4.s64 = ctx.r11.s64 + -12072;
	// bl 0x82419458
	ctx.lr = 0x8247D72C;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// beq cr6,0x8247d828
	if (ctx.cr6.eq) goto loc_8247D828;
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r19,312(r1)
	PPC_STORE_U32(ctx.r1.u32 + 312, ctx.r19.u32);
	// addi r4,r1,312
	ctx.r4.s64 = ctx.r1.s64 + 312;
	// stw r19,316(r1)
	PPC_STORE_U32(ctx.r1.u32 + 316, ctx.r19.u32);
	// stw r19,320(r1)
	PPC_STORE_U32(ctx.r1.u32 + 320, ctx.r19.u32);
	// bl 0x8242ae40
	ctx.lr = 0x8247D750;
	sub_8242AE40(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d800
	if (ctx.cr6.eq) goto loc_8247D800;
	// lwz r11,316(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// lwz r4,312(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 312);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247d774
	if (!ctx.cr6.eq) goto loc_8247D774;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
loc_8247D774:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x8252f600
	ctx.lr = 0x8247D780;
	sub_8252F600(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247d7c4
	if (ctx.cr6.eq) goto loc_8247D7C4;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247D798;
	sub_82420FE8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82477818
	ctx.lr = 0x8247D7A0;
	sub_82477818(ctx, base);
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82420fe8
	ctx.lr = 0x8247D7AC;
	sub_82420FE8(ctx, base);
	// addi r3,r1,312
	ctx.r3.s64 = ctx.r1.s64 + 312;
	// bl 0x82309a60
	ctx.lr = 0x8247D7B4;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D7C4:
	// lwz r11,316(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// lwz r5,312(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 312);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247d7d8
	if (!ctx.cr6.eq) goto loc_8247D7D8;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
loc_8247D7D8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addi r4,r11,-12100
	ctx.r4.s64 = ctx.r11.s64 + -12100;
	// bl 0x824211f0
	ctx.lr = 0x8247D7E8;
	sub_824211F0(ctx, base);
	// addi r3,r1,312
	ctx.r3.s64 = ctx.r1.s64 + 312;
	// bl 0x82309a60
	ctx.lr = 0x8247D7F0;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D800:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// addi r4,r11,-12140
	ctx.r4.s64 = ctx.r11.s64 + -12140;
	// bl 0x824211f0
	ctx.lr = 0x8247D810;
	sub_824211F0(ctx, base);
	// addi r3,r1,312
	ctx.r3.s64 = ctx.r1.s64 + 312;
	// bl 0x82309a60
	ctx.lr = 0x8247D818;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247D828:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-12148
	ctx.r4.s64 = ctx.r11.s64 + -12148;
	// bl 0x82419458
	ctx.lr = 0x8247D834;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247dfe8
	if (ctx.cr6.eq) goto loc_8247DFE8;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r6,-1
	ctx.r6.s64 = -1;
	// stw r19,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r19.u32);
	// addi r4,r11,-11412
	ctx.r4.s64 = ctx.r11.s64 + -11412;
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// addi r5,r1,132
	ctx.r5.s64 = ctx.r1.s64 + 132;
	// stw r19,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, ctx.r19.u32);
	// stw r19,252(r1)
	PPC_STORE_U32(ctx.r1.u32 + 252, ctx.r19.u32);
	// stw r19,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, ctx.r19.u32);
	// stw r19,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, ctx.r19.u32);
	// stw r19,268(r1)
	PPC_STORE_U32(ctx.r1.u32 + 268, ctx.r19.u32);
	// stw r19,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, ctx.r19.u32);
	// bl 0x824805a8
	ctx.lr = 0x8247D874;
	sub_824805A8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d8a0
	if (ctx.cr6.eq) goto loc_8247D8A0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r5,132(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// li r7,-1
	ctx.r7.s64 = -1;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-11420
	ctx.r4.s64 = ctx.r11.s64 + -11420;
	// addi r6,r1,136
	ctx.r6.s64 = ctx.r1.s64 + 136;
	// bl 0x82418df8
	ctx.lr = 0x8247D898;
	sub_82418DF8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247d8d4
	if (!ctx.cr6.eq) goto loc_8247D8D4;
loc_8247D8A0:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,128
	ctx.r5.s64 = 128;
	// addi r4,r1,944
	ctx.r4.s64 = ctx.r1.s64 + 944;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82419600
	ctx.lr = 0x8247D8B4;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247d8d4
	if (ctx.cr6.eq) goto loc_8247D8D4;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,944
	ctx.r4.s64 = ctx.r1.s64 + 944;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x8252f600
	ctx.lr = 0x8247D8CC;
	sub_8252F600(ctx, base);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
	// b 0x8247d8d8
	goto loc_8247D8D8;
loc_8247D8D4:
	// lwz r3,136(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
loc_8247D8D8:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247dfb0
	if (ctx.cr6.eq) goto loc_8247DFB0;
	// bl 0x82302730
	ctx.lr = 0x8247D8E4;
	sub_82302730(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247d900
	if (ctx.cr6.eq) goto loc_8247D900;
	// lwz r3,136(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// bl 0x82302730
	ctx.lr = 0x8247D8F4;
	sub_82302730(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82424430
	ctx.lr = 0x8247D8FC;
	sub_82424430(ctx, base);
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
loc_8247D900:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// stw r19,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r19.u32);
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// stw r19,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r19.u32);
	// addi r24,r11,-29761
	ctx.r24.s64 = ctx.r11.s64 + -29761;
	// stw r19,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r19.u32);
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247D920;
	sub_824211F0(ctx, base);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r4,r11,-12164
	ctx.r4.s64 = ctx.r11.s64 + -12164;
	// bl 0x82418c98
	ctx.lr = 0x8247D934;
	sub_82418C98(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247d94c
	if (ctx.cr6.eq) goto loc_8247D94C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r30,r11,-12180
	ctx.r30.s64 = ctx.r11.s64 + -12180;
	// b 0x8247d950
	goto loc_8247D950;
loc_8247D94C:
	// mr r30,r24
	ctx.r30.u64 = ctx.r24.u64;
loc_8247D950:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x824645c8
	ctx.lr = 0x8247D960;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247d974
	if (ctx.cr6.eq) goto loc_8247D974;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247d978
	goto loc_8247D978;
loc_8247D974:
	// mr r6,r24
	ctx.r6.u64 = ctx.r24.u64;
loc_8247D978:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r11,-12220
	ctx.r4.s64 = ctx.r11.s64 + -12220;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247D98C;
	sub_824211F0(ctx, base);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x82309a60
	ctx.lr = 0x8247D994;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247d9e4
	if (ctx.cr6.eq) goto loc_8247D9E4;
	// addi r3,r1,752
	ctx.r3.s64 = ctx.r1.s64 + 752;
	// bl 0x823f2528
	ctx.lr = 0x8247D9A4;
	sub_823F2528(ctx, base);
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// li r11,1
	ctx.r11.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// mr r4,r14
	ctx.r4.u64 = ctx.r14.u64;
	// lwz r9,56(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 56);
	// addi r3,r1,752
	ctx.r3.s64 = ctx.r1.s64 + 752;
	// lwz r5,52(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lwz r8,52(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 52);
	// bl 0x82472110
	ctx.lr = 0x8247D9D0;
	sub_82472110(ctx, base);
	// addi r3,r1,752
	ctx.r3.s64 = ctx.r1.s64 + 752;
	// bl 0x82555e68
	ctx.lr = 0x8247D9D8;
	sub_82555E68(ctx, base);
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247D9E0;
	sub_82309A60(ctx, base);
	// b 0x8247dfc8
	goto loc_8247DFC8;
loc_8247D9E4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// addi r4,r11,-12228
	ctx.r4.s64 = ctx.r11.s64 + -12228;
	// bl 0x82418c98
	ctx.lr = 0x8247D9F8;
	sub_82418C98(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247da08
	if (ctx.cr6.eq) goto loc_8247DA08;
	// addi r4,r1,248
	ctx.r4.s64 = ctx.r1.s64 + 248;
	// b 0x8247da28
	goto loc_8247DA28;
loc_8247DA08:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r3,128(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// addi r4,r11,-12236
	ctx.r4.s64 = ctx.r11.s64 + -12236;
	// bl 0x82418c98
	ctx.lr = 0x8247DA1C;
	sub_82418C98(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247da3c
	if (ctx.cr6.eq) goto loc_8247DA3C;
	// addi r4,r1,264
	ctx.r4.s64 = ctx.r1.s64 + 264;
loc_8247DA28:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r11,16868
	ctx.r5.s64 = ctx.r11.s64 + 16868;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x8242fd50
	ctx.lr = 0x8247DA3C;
	sub_8242FD50(ctx, base);
loc_8247DA3C:
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,52(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x8245c740
	ctx.lr = 0x8247DA4C;
	sub_8245C740(ctx, base);
	// lwz r25,164(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x8247dfa4
	if (ctx.cr6.eq) goto loc_8247DFA4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r20,r11,-28532
	ctx.r20.s64 = ctx.r11.s64 + -28532;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r19,r11,-12244
	ctx.r19.s64 = ctx.r11.s64 + -12244;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r23,r11,-12256
	ctx.r23.s64 = ctx.r11.s64 + -12256;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r22,r11,-12268
	ctx.r22.s64 = ctx.r11.s64 + -12268;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r18,r11,-26176
	ctx.r18.s64 = ctx.r11.s64 + -26176;
loc_8247DA80:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309200
	ctx.lr = 0x8247DA8C;
	sub_82309200(ctx, base);
	// lwz r11,252(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247dbec
	if (ctx.cr6.eq) goto loc_8247DBEC;
	// li r28,0
	ctx.r28.s64 = 0;
	// ble cr6,0x8247dd44
	if (!ctx.cr6.gt) goto loc_8247DD44;
	// addi r29,r25,84
	ctx.r29.s64 = ctx.r25.s64 + 84;
	// li r30,0
	ctx.r30.s64 = 0;
loc_8247DAA8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247dac0
	if (!ctx.cr6.eq) goto loc_8247DAC0;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247daf0
	if (ctx.cr6.eq) goto loc_8247DAF0;
loc_8247DAC0:
	// lwz r11,248(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// ori r21,r21,2
	ctx.r21.u64 = ctx.r21.u64 | 2;
	// add r31,r11,r30
	ctx.r31.u64 = ctx.r11.u64 + ctx.r30.u64;
	// bl 0x8242ba60
	ctx.lr = 0x8247DAD8;
	sub_8242BA60(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82302c38
	ctx.lr = 0x8247DAE4;
	sub_82302C38(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bne cr6,0x8247daf4
	if (!ctx.cr6.eq) goto loc_8247DAF4;
loc_8247DAF0:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8247DAF4:
	// rlwinm r10,r21,0,30,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r21.u32 | (ctx.r21.u64 << 32), 0) & 0x2;
	// clrlwi r31,r11,24
	ctx.r31.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247db10
	if (ctx.cr6.eq) goto loc_8247DB10;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// rlwinm r21,r21,0,31,29
	ctx.r21.u64 = __builtin_rotateleft64(ctx.r21.u32 | (ctx.r21.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x8247DB10;
	sub_82309A60(ctx, base);
loc_8247DB10:
	// clrlwi r11,r31,24
	ctx.r11.u64 = ctx.r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247dbdc
	if (!ctx.cr6.eq) goto loc_8247DBDC;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r11,276(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 276);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247DB30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247db48
	if (!ctx.cr6.eq) goto loc_8247DB48;
	// addi r3,r1,488
	ctx.r3.s64 = ctx.r1.s64 + 488;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DB44;
	sub_823099B0(ctx, base);
	// b 0x8247db70
	goto loc_8247DB70;
loc_8247DB48:
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247db64
	if (!ctx.cr6.eq) goto loc_8247DB64;
	// addi r3,r1,488
	ctx.r3.s64 = ctx.r1.s64 + 488;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DB60;
	sub_823099B0(ctx, base);
	// b 0x8247db70
	goto loc_8247DB70;
loc_8247DB64:
	// addi r4,r3,44
	ctx.r4.s64 = ctx.r3.s64 + 44;
	// addi r3,r1,488
	ctx.r3.s64 = ctx.r1.s64 + 488;
	// bl 0x8242ba60
	ctx.lr = 0x8247DB70;
	sub_8242BA60(ctx, base);
loc_8247DB70:
	// lwz r11,492(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 492);
	// lwz r4,488(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 488);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247db84
	if (!ctx.cr6.eq) goto loc_8247DB84;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_8247DB84:
	// lwz r11,248(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 248);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247dba0
	if (ctx.cr6.eq) goto loc_8247DBA0;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x8247dba4
	goto loc_8247DBA4;
loc_8247DBA0:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247DBA4:
	// bl 0x82e28c50
	ctx.lr = 0x8247DBA8;
	sub_82E28C50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,488
	ctx.r3.s64 = ctx.r1.s64 + 488;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r31,r11,27,31,31
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// bl 0x82309a60
	ctx.lr = 0x8247DBBC;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x8247dbdc
	if (!ctx.cr6.eq) goto loc_8247DBDC;
	// lwz r11,252(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r30,r30,12
	ctx.r30.s64 = ctx.r30.s64 + 12;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247daa8
	if (ctx.cr6.lt) goto loc_8247DAA8;
	// b 0x8247dd44
	goto loc_8247DD44;
loc_8247DBDC:
	// lwz r11,252(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247df88
	if (ctx.cr6.lt) goto loc_8247DF88;
	// b 0x8247dd44
	goto loc_8247DD44;
loc_8247DBEC:
	// lwz r11,268(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247dd44
	if (ctx.cr6.eq) goto loc_8247DD44;
	// li r28,0
	ctx.r28.s64 = 0;
	// ble cr6,0x8247dd38
	if (!ctx.cr6.gt) goto loc_8247DD38;
	// addi r29,r25,84
	ctx.r29.s64 = ctx.r25.s64 + 84;
	// li r30,0
	ctx.r30.s64 = 0;
loc_8247DC08:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247dc20
	if (!ctx.cr6.eq) goto loc_8247DC20;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247dc50
	if (ctx.cr6.eq) goto loc_8247DC50;
loc_8247DC20:
	// lwz r11,264(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// ori r21,r21,4
	ctx.r21.u64 = ctx.r21.u64 | 4;
	// add r31,r11,r30
	ctx.r31.u64 = ctx.r11.u64 + ctx.r30.u64;
	// bl 0x8242ba60
	ctx.lr = 0x8247DC38;
	sub_8242BA60(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82302c38
	ctx.lr = 0x8247DC44;
	sub_82302C38(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bne cr6,0x8247dc54
	if (!ctx.cr6.eq) goto loc_8247DC54;
loc_8247DC50:
	// li r11,0
	ctx.r11.s64 = 0;
loc_8247DC54:
	// rlwinm r10,r21,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r21.u32 | (ctx.r21.u64 << 32), 0) & 0x4;
	// clrlwi r31,r11,24
	ctx.r31.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247dc70
	if (ctx.cr6.eq) goto loc_8247DC70;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// rlwinm r21,r21,0,30,28
	ctx.r21.u64 = __builtin_rotateleft64(ctx.r21.u32 | (ctx.r21.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// bl 0x82309a60
	ctx.lr = 0x8247DC70;
	sub_82309A60(ctx, base);
loc_8247DC70:
	// clrlwi r11,r31,24
	ctx.r11.u64 = ctx.r31.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247dd38
	if (!ctx.cr6.eq) goto loc_8247DD38;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r11,276(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 276);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247DC90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247dca8
	if (!ctx.cr6.eq) goto loc_8247DCA8;
	// addi r3,r1,520
	ctx.r3.s64 = ctx.r1.s64 + 520;
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DCA4;
	sub_823099B0(ctx, base);
	// b 0x8247dcd0
	goto loc_8247DCD0;
loc_8247DCA8:
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247dcc4
	if (!ctx.cr6.eq) goto loc_8247DCC4;
	// addi r3,r1,520
	ctx.r3.s64 = ctx.r1.s64 + 520;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DCC0;
	sub_823099B0(ctx, base);
	// b 0x8247dcd0
	goto loc_8247DCD0;
loc_8247DCC4:
	// addi r4,r3,44
	ctx.r4.s64 = ctx.r3.s64 + 44;
	// addi r3,r1,520
	ctx.r3.s64 = ctx.r1.s64 + 520;
	// bl 0x8242ba60
	ctx.lr = 0x8247DCD0;
	sub_8242BA60(ctx, base);
loc_8247DCD0:
	// lwz r11,524(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 524);
	// lwz r4,520(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 520);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247dce4
	if (!ctx.cr6.eq) goto loc_8247DCE4;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_8247DCE4:
	// lwz r11,264(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247dd00
	if (ctx.cr6.eq) goto loc_8247DD00;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x8247dd04
	goto loc_8247DD04;
loc_8247DD00:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247DD04:
	// bl 0x82e28c50
	ctx.lr = 0x8247DD08;
	sub_82E28C50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,520
	ctx.r3.s64 = ctx.r1.s64 + 520;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r31,r11,27,31,31
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// bl 0x82309a60
	ctx.lr = 0x8247DD1C;
	sub_82309A60(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x8247dd38
	if (!ctx.cr6.eq) goto loc_8247DD38;
	// lwz r11,268(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r30,r30,12
	ctx.r30.s64 = ctx.r30.s64 + 12;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247dc08
	if (ctx.cr6.lt) goto loc_8247DC08;
loc_8247DD38:
	// lwz r11,268(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// beq cr6,0x8247df88
	if (ctx.cr6.eq) goto loc_8247DF88;
loc_8247DD44:
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// ble cr6,0x8247de04
	if (!ctx.cr6.gt) goto loc_8247DE04;
	// li r31,0
	ctx.r31.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247df88
	if (!ctx.cr6.gt) goto loc_8247DF88;
loc_8247DD5C:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309200
	ctx.lr = 0x8247DD68;
	sub_82309200(ctx, base);
	// lwz r8,136(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// li r9,1
	ctx.r9.s64 = 1;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// mr r6,r8
	ctx.r6.u64 = ctx.r8.u64;
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x8245f418
	ctx.lr = 0x8247DD88;
	sub_8245F418(ctx, base);
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r30,192(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247dd9c
	if (!ctx.cr6.eq) goto loc_8247DD9C;
	// mr r30,r24
	ctx.r30.u64 = ctx.r24.u64;
loc_8247DD9C:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// addi r3,r1,616
	ctx.r3.s64 = ctx.r1.s64 + 616;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247ddb8
	if (!ctx.cr6.eq) goto loc_8247DDB8;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DDB4;
	sub_823099B0(ctx, base);
	// b 0x8247ddc0
	goto loc_8247DDC0;
loc_8247DDB8:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247DDC0;
	sub_8242BA60(ctx, base);
loc_8247DDC0:
	// lwz r11,620(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 620);
	// lwz r5,616(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 616);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ddd4
	if (!ctx.cr6.eq) goto loc_8247DDD4;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
loc_8247DDD4:
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247DDE8;
	sub_824211F0(ctx, base);
	// addi r3,r1,616
	ctx.r3.s64 = ctx.r1.s64 + 616;
	// bl 0x82309a60
	ctx.lr = 0x8247DDF0;
	sub_82309A60(ctx, base);
	// lwz r11,68(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 68);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247dd5c
	if (ctx.cr6.lt) goto loc_8247DD5C;
	// b 0x8247df88
	goto loc_8247DF88;
loc_8247DE04:
	// bl 0x8230a238
	ctx.lr = 0x8247DE08;
	sub_8230A238(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x8247DE14;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// beq cr6,0x8247df08
	if (ctx.cr6.eq) goto loc_8247DF08;
	// bl 0x8245c320
	ctx.lr = 0x8247DE24;
	sub_8245C320(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,100(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 100);
	// lwz r9,128(r27)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r27.u32 + 128);
	// add r29,r11,r10
	ctx.r29.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r26,72(r9)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r9.u32 + 72);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247df88
	if (!ctx.cr6.gt) goto loc_8247DF88;
	// li r30,0
	ctx.r30.s64 = 0;
loc_8247DE50:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309200
	ctx.lr = 0x8247DE5C;
	sub_82309200(ctx, base);
	// lwz r3,128(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 128);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r8,1
	ctx.r8.s64 = 1;
	// lwz r7,136(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// add r6,r11,r30
	ctx.r6.u64 = ctx.r11.u64 + ctx.r30.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// lwz r11,308(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 308);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247DE88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r28,192(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247de9c
	if (!ctx.cr6.eq) goto loc_8247DE9C;
	// mr r28,r24
	ctx.r28.u64 = ctx.r24.u64;
loc_8247DE9C:
	// lwz r11,4(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// addi r3,r1,584
	ctx.r3.s64 = ctx.r1.s64 + 584;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247deb8
	if (!ctx.cr6.eq) goto loc_8247DEB8;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DEB4;
	sub_823099B0(ctx, base);
	// b 0x8247dec0
	goto loc_8247DEC0;
loc_8247DEB8:
	// addi r4,r27,44
	ctx.r4.s64 = ctx.r27.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247DEC0;
	sub_8242BA60(ctx, base);
loc_8247DEC0:
	// lwz r11,588(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 588);
	// lwz r5,584(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 584);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ded4
	if (!ctx.cr6.eq) goto loc_8247DED4;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
loc_8247DED4:
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247DEE8;
	sub_824211F0(ctx, base);
	// addi r3,r1,584
	ctx.r3.s64 = ctx.r1.s64 + 584;
	// bl 0x82309a60
	ctx.lr = 0x8247DEF0;
	sub_82309A60(ctx, base);
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// add r30,r26,r30
	ctx.r30.u64 = ctx.r26.u64 + ctx.r30.u64;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x8247de50
	if (ctx.cr6.lt) goto loc_8247DE50;
	// b 0x8247df88
	goto loc_8247DF88;
loc_8247DF08:
	// lwz r8,136(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// mr r7,r8
	ctx.r7.u64 = ctx.r8.u64;
	// mr r6,r8
	ctx.r6.u64 = ctx.r8.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8245f418
	ctx.lr = 0x8247DF24;
	sub_8245F418(ctx, base);
	// lwz r11,196(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// lwz r31,192(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247df38
	if (!ctx.cr6.eq) goto loc_8247DF38;
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
loc_8247DF38:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// addi r3,r1,600
	ctx.r3.s64 = ctx.r1.s64 + 600;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247df54
	if (!ctx.cr6.eq) goto loc_8247DF54;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247DF50;
	sub_823099B0(ctx, base);
	// b 0x8247df5c
	goto loc_8247DF5C;
loc_8247DF54:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247DF5C;
	sub_8242BA60(ctx, base);
loc_8247DF5C:
	// lwz r11,604(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 604);
	// lwz r5,600(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 600);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247df70
	if (!ctx.cr6.eq) goto loc_8247DF70;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
loc_8247DF70:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247DF80;
	sub_824211F0(ctx, base);
	// addi r3,r1,600
	ctx.r3.s64 = ctx.r1.s64 + 600;
	// bl 0x82309a60
	ctx.lr = 0x8247DF88;
	sub_82309A60(ctx, base);
loc_8247DF88:
	// lwz r11,64(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 64);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// stw r11,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r11.u32);
	// bl 0x8245c128
	ctx.lr = 0x8247DF98;
	sub_8245C128(ctx, base);
	// lwz r25,164(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x8247da80
	if (!ctx.cr6.eq) goto loc_8247DA80;
loc_8247DFA4:
	// addi r3,r1,192
	ctx.r3.s64 = ctx.r1.s64 + 192;
	// bl 0x82309a60
	ctx.lr = 0x8247DFAC;
	sub_82309A60(ctx, base);
	// b 0x8247dfc8
	goto loc_8247DFC8;
loc_8247DFB0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// addi r5,r11,-12304
	ctx.r5.s64 = ctx.r11.s64 + -12304;
	// li r4,768
	ctx.r4.s64 = 768;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247DFC8;
	sub_82421110(ctx, base);
loc_8247DFC8:
	// addi r3,r1,264
	ctx.r3.s64 = ctx.r1.s64 + 264;
	// bl 0x825a2b78
	ctx.lr = 0x8247DFD0;
	sub_825A2B78(ctx, base);
	// addi r3,r1,248
	ctx.r3.s64 = ctx.r1.s64 + 248;
	// bl 0x825a2b78
	ctx.lr = 0x8247DFD8;
	sub_825A2B78(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247DFE8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12308
	ctx.r4.s64 = ctx.r11.s64 + -12308;
	// bl 0x82419458
	ctx.lr = 0x8247DFF8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e664
	if (ctx.cr6.eq) goto loc_8247E664;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r4,r1,2640
	ctx.r4.s64 = ctx.r1.s64 + 2640;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82419600
	ctx.lr = 0x8247E014;
	sub_82419600(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e148
	if (ctx.cr6.eq) goto loc_8247E148;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,2640
	ctx.r4.s64 = ctx.r1.s64 + 2640;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82302910
	ctx.lr = 0x8247E02C;
	sub_82302910(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247e124
	if (ctx.cr6.eq) goto loc_8247E124;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lwz r10,132(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 132);
	// addi r5,r1,2640
	ctx.r5.s64 = ctx.r1.s64 + 2640;
	// lwz r7,128(r30)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r30.u32 + 128);
	// addi r4,r11,-12360
	ctx.r4.s64 = ctx.r11.s64 + -12360;
	// lwz r11,136(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 136);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lwz r28,-4(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + -4);
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247E068;
	sub_824211F0(ctx, base);
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// ble cr6,0x8247e654
	if (!ctx.cr6.gt) goto loc_8247E654;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r29,r19
	ctx.r29.u64 = ctx.r19.u64;
	// addi r27,r11,-12372
	ctx.r27.s64 = ctx.r11.s64 + -12372;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r26,r11,-29761
	ctx.r26.s64 = ctx.r11.s64 + -29761;
loc_8247E088:
	// lwz r11,120(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 120);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247e104
	if (!ctx.cr6.lt) goto loc_8247E104;
	// lwz r11,116(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 116);
	// lwzx r10,r11,r29
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r29.u32);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247e104
	if (ctx.cr6.eq) goto loc_8247E104;
	// rotlwi r4,r10,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// li r12,1
	ctx.r12.s64 = 1;
	// rldicr r12,r12,42,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 42) & 0xFFFFFFFFFFFFFFFF;
	// ld r11,8(r4)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r4.u32 + 8);
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247e104
	if (!ctx.cr6.eq) goto loc_8247E104;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x8247e104
	if (ctx.cr6.eq) goto loc_8247E104;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x824645c8
	ctx.lr = 0x8247E0D4;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e0e8
	if (ctx.cr6.eq) goto loc_8247E0E8;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247e0ec
	goto loc_8247E0EC;
loc_8247E0E8:
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
loc_8247E0EC:
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x824211f0
	ctx.lr = 0x8247E0FC;
	sub_824211F0(ctx, base);
	// addi r3,r1,288
	ctx.r3.s64 = ctx.r1.s64 + 288;
	// bl 0x82309a60
	ctx.lr = 0x8247E104;
	sub_82309A60(ctx, base);
loc_8247E104:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpw cr6,r31,r28
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r28.s32, ctx.xer);
	// blt cr6,0x8247e088
	if (ctx.cr6.lt) goto loc_8247E088;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E124:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r6,r1,2640
	ctx.r6.s64 = ctx.r1.s64 + 2640;
	// addi r5,r11,-12412
	ctx.r5.s64 = ctx.r11.s64 + -12412;
	// li r4,768
	ctx.r4.s64 = 768;
	// bl 0x82421110
	ctx.lr = 0x8247E138;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E148:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r4,768
	ctx.r4.s64 = 768;
	// addi r5,r11,-12444
	ctx.r5.s64 = ctx.r11.s64 + -12444;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247E15C;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E16C:
	// li r3,1
	ctx.r3.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// rldicr r3,r3,58,63
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r3.u64, 58) & 0xFFFFFFFFFFFFFFFF;
	// bl 0x82470b18
	ctx.lr = 0x8247E17C;
	sub_82470B18(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E18C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-12460
	ctx.r4.s64 = ctx.r11.s64 + -12460;
	// bl 0x82419458
	ctx.lr = 0x8247E198;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247e4cc
	if (!ctx.cr6.eq) goto loc_8247E4CC;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12476
	ctx.r4.s64 = ctx.r11.s64 + -12476;
	// bl 0x82419458
	ctx.lr = 0x8247E1B0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247e4cc
	if (!ctx.cr6.eq) goto loc_8247E4CC;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12488
	ctx.r4.s64 = ctx.r11.s64 + -12488;
	// bl 0x82419458
	ctx.lr = 0x8247E1C8;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e2f0
	if (ctx.cr6.eq) goto loc_8247E2F0;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,704
	ctx.r3.s64 = ctx.r1.s64 + 704;
	// bl 0x8242b048
	ctx.lr = 0x8247E1E0;
	sub_8242B048(ctx, base);
	// lwz r11,708(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 708);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e1f4
	if (ctx.cr6.eq) goto loc_8247E1F4;
	// lwz r4,704(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 704);
	// b 0x8247e1fc
	goto loc_8247E1FC;
loc_8247E1F4:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_8247E1FC:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,344
	ctx.r3.s64 = ctx.r1.s64 + 344;
	// bl 0x8243b750
	ctx.lr = 0x8247E20C;
	sub_8243B750(ctx, base);
	// lwz r11,344(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 344);
	// cmpwi cr6,r11,363
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 363, ctx.xer);
	// bne cr6,0x8247e28c
	if (!ctx.cr6.eq) goto loc_8247E28C;
	// lwz r10,348(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x8247e2a0
	if (!ctx.cr6.eq) goto loc_8247E2A0;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// addi r8,r11,5924
	ctx.r8.s64 = ctx.r11.s64 + 5924;
	// lwz r11,4(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x8247e2d8
	if (!ctx.cr6.gt) goto loc_8247E2D8;
	// mr r9,r11
	ctx.r9.u64 = ctx.r11.u64;
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r10,r19
	ctx.r10.u64 = ctx.r19.u64;
	// rldicr r7,r11,44,63
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r11.u64, 44) & 0xFFFFFFFFFFFFFFFF;
loc_8247E248:
	// lwz r11,0(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lwzx r11,r11,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247e264
	if (ctx.cr6.eq) goto loc_8247E264;
	// ld r6,4(r11)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4);
	// or r6,r6,r7
	ctx.r6.u64 = ctx.r6.u64 | ctx.r7.u64;
	// std r6,4(r11)
	PPC_STORE_U64(ctx.r11.u32 + 4, ctx.r6.u64);
loc_8247E264:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247e248
	if (!ctx.cr6.eq) goto loc_8247E248;
	// addi r3,r1,704
	ctx.r3.s64 = ctx.r1.s64 + 704;
	// bl 0x82309a60
	ctx.lr = 0x8247E27C;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E28C:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247e2a0
	if (!ctx.cr6.eq) goto loc_8247E2A0;
	// lwz r10,348(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247e2d8
	if (ctx.cr6.eq) goto loc_8247E2D8;
loc_8247E2A0:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// li r12,1
	ctx.r12.s64 = 1;
	// addi r4,r1,344
	ctx.r4.s64 = ctx.r1.s64 + 344;
	// rldicr r12,r12,44,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 44) & 0xFFFFFFFFFFFFFFFF;
	// lwz r11,5924(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5924);
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// ld r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4);
	// or r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 | ctx.r12.u64;
	// std r10,4(r11)
	PPC_STORE_U64(ctx.r11.u32 + 4, ctx.r10.u64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,8356(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8356);
	// addi r3,r11,188
	ctx.r3.s64 = ctx.r11.s64 + 188;
	// bl 0x82530500
	ctx.lr = 0x8247E2D8;
	sub_82530500(ctx, base);
loc_8247E2D8:
	// addi r3,r1,704
	ctx.r3.s64 = ctx.r1.s64 + 704;
	// bl 0x82309a60
	ctx.lr = 0x8247E2E0;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E2F0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12500
	ctx.r4.s64 = ctx.r11.s64 + -12500;
	// bl 0x82419458
	ctx.lr = 0x8247E300;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e490
	if (ctx.cr6.eq) goto loc_8247E490;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,688
	ctx.r3.s64 = ctx.r1.s64 + 688;
	// bl 0x8242b048
	ctx.lr = 0x8247E318;
	sub_8242B048(ctx, base);
	// lwz r11,692(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 692);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e32c
	if (ctx.cr6.eq) goto loc_8247E32C;
	// lwz r4,688(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 688);
	// b 0x8247e334
	goto loc_8247E334;
loc_8247E32C:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_8247E334:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,352
	ctx.r3.s64 = ctx.r1.s64 + 352;
	// bl 0x8243b750
	ctx.lr = 0x8247E344;
	sub_8243B750(ctx, base);
	// lwz r11,352(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 352);
	// cmpwi cr6,r11,363
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 363, ctx.xer);
	// bne cr6,0x8247e42c
	if (!ctx.cr6.eq) goto loc_8247E42C;
	// lwz r10,356(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x8247e440
	if (!ctx.cr6.eq) goto loc_8247E440;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// addi r8,r11,5924
	ctx.r8.s64 = ctx.r11.s64 + 5924;
	// lwz r10,4(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x8247e3ac
	if (!ctx.cr6.gt) goto loc_8247E3AC;
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
loc_8247E378:
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + 0);
	// lwzx r10,r10,r11
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x8247e39c
	if (ctx.cr6.eq) goto loc_8247E39C;
	// li r12,-2
	ctx.r12.s64 = -2;
	// ld r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + 4);
	// rldicr r12,r12,44,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 44) & 0xFFFFFFFFFFFFFFFF;
	// and r7,r7,r12
	ctx.r7.u64 = ctx.r7.u64 & ctx.r12.u64;
	// std r7,4(r10)
	PPC_STORE_U64(ctx.r10.u32 + 4, ctx.r7.u64);
loc_8247E39C:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247e378
	if (!ctx.cr6.eq) goto loc_8247E378;
loc_8247E3AC:
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,8356(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8356);
	// addi r31,r11,188
	ctx.r31.s64 = ctx.r11.s64 + 188;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// stw r19,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r19.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e478
	if (ctx.cr6.eq) goto loc_8247E478;
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// stw r19,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r19.u32);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247e478
	if (ctx.cr6.eq) goto loc_8247E478;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247e3f0
	if (!ctx.cr6.eq) goto loc_8247E3F0;
	// bl 0x82545cc0
	ctx.lr = 0x8247E3EC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_8247E3F0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247E410;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// addi r3,r1,688
	ctx.r3.s64 = ctx.r1.s64 + 688;
	// bl 0x82309a60
	ctx.lr = 0x8247E41C;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E42C:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247e440
	if (!ctx.cr6.eq) goto loc_8247E440;
	// lwz r10,356(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247e478
	if (ctx.cr6.eq) goto loc_8247E478;
loc_8247E440:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// li r12,-2
	ctx.r12.s64 = -2;
	// addi r4,r1,352
	ctx.r4.s64 = ctx.r1.s64 + 352;
	// rldicr r12,r12,44,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 44) & 0xFFFFFFFFFFFFFFFF;
	// lwz r11,5924(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5924);
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// ld r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4);
	// and r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 & ctx.r12.u64;
	// std r10,4(r11)
	PPC_STORE_U64(ctx.r11.u32 + 4, ctx.r10.u64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,8356(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8356);
	// addi r3,r11,188
	ctx.r3.s64 = ctx.r11.s64 + 188;
	// bl 0x82480c88
	ctx.lr = 0x8247E478;
	sub_82480C88(ctx, base);
loc_8247E478:
	// addi r3,r1,688
	ctx.r3.s64 = ctx.r1.s64 + 688;
	// bl 0x82309a60
	ctx.lr = 0x8247E480;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E490:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12516
	ctx.r4.s64 = ctx.r11.s64 + -12516;
	// bl 0x82419458
	ctx.lr = 0x8247E4A0;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e664
	if (ctx.cr6.eq) goto loc_8247E664;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r4,814
	ctx.r4.s64 = 814;
	// addi r5,r11,-12648
	ctx.r5.s64 = ctx.r11.s64 + -12648;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x82421110
	ctx.lr = 0x8247E4BC;
	sub_82421110(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E4CC:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-26184
	ctx.r4.s64 = ctx.r11.s64 + -26184;
	// bl 0x82419458
	ctx.lr = 0x8247E4DC;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e554
	if (ctx.cr6.eq) goto loc_8247E554;
	// lis r30,-31971
	ctx.r30.s64 = -2095251456;
	// lwz r31,1324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247e504
	if (ctx.cr6.eq) goto loc_8247E504;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82413130
	ctx.lr = 0x8247E4FC;
	sub_82413130(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82545ee8
	ctx.lr = 0x8247E504;
	sub_82545EE8(ctx, base);
loc_8247E504:
	// lis r10,-31971
	ctx.r10.s64 = -2095251456;
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// li r3,20
	ctx.r3.s64 = 20;
	// stw r11,1332(r10)
	PPC_STORE_U32(ctx.r10.u32 + 1332, ctx.r11.u32);
	// bl 0x82545e80
	ctx.lr = 0x8247E518;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247e53c
	if (ctx.cr6.eq) goto loc_8247E53C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8244eef0
	ctx.lr = 0x8247E528;
	sub_8244EEF0(ctx, base);
	// stw r3,1324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1324, ctx.r3.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E53C:
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,1324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1324, ctx.r11.u32);
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E554:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12660
	ctx.r4.s64 = ctx.r11.s64 + -12660;
	// bl 0x82419458
	ctx.lr = 0x8247E564;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e5c4
	if (ctx.cr6.eq) goto loc_8247E5C4;
	// lis r30,-31971
	ctx.r30.s64 = -2095251456;
	// lwz r31,1324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247e58c
	if (ctx.cr6.eq) goto loc_8247E58C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82413130
	ctx.lr = 0x8247E584;
	sub_82413130(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82545ee8
	ctx.lr = 0x8247E58C;
	sub_82545EE8(ctx, base);
loc_8247E58C:
	// lis r10,-31971
	ctx.r10.s64 = -2095251456;
	// li r11,1
	ctx.r11.s64 = 1;
	// li r3,20
	ctx.r3.s64 = 20;
	// stw r11,1332(r10)
	PPC_STORE_U32(ctx.r10.u32 + 1332, ctx.r11.u32);
	// bl 0x82545e80
	ctx.lr = 0x8247E5A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247e53c
	if (ctx.cr6.eq) goto loc_8247E53C;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8244eef0
	ctx.lr = 0x8247E5B0;
	sub_8244EEF0(ctx, base);
	// stw r3,1324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1324, ctx.r3.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E5C4:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12668
	ctx.r4.s64 = ctx.r11.s64 + -12668;
	// bl 0x82419458
	ctx.lr = 0x8247E5D4;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e624
	if (ctx.cr6.eq) goto loc_8247E624;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lwz r3,1324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247e614
	if (ctx.cr6.eq) goto loc_8247E614;
	// bl 0x824131b0
	ctx.lr = 0x8247E5F0;
	sub_824131B0(ctx, base);
	// lwz r30,1324(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1324);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247e60c
	if (ctx.cr6.eq) goto loc_8247E60C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82413130
	ctx.lr = 0x8247E604;
	sub_82413130(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82545ee8
	ctx.lr = 0x8247E60C;
	sub_82545EE8(ctx, base);
loc_8247E60C:
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// stw r11,1324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1324, ctx.r11.u32);
loc_8247E614:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E624:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,-12676
	ctx.r4.s64 = ctx.r11.s64 + -12676;
	// bl 0x82419458
	ctx.lr = 0x8247E634;
	sub_82419458(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e664
	if (ctx.cr6.eq) goto loc_8247E664;
	// lis r11,-31971
	ctx.r11.s64 = -2095251456;
	// lwz r3,1324(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247e654
	if (ctx.cr6.eq) goto loc_8247E654;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8244b5d0
	ctx.lr = 0x8247E654;
	sub_8244B5D0(ctx, base);
loc_8247E654:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_8247E664:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,3824
	ctx.r1.s64 = ctx.r1.s64 + 3824;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247E678"))) PPC_WEAK_FUNC(sub_8247E678);
PPC_FUNC_IMPL(__imp__sub_8247E678) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e3c
	ctx.lr = 0x8247E680;
	__savegprlr_17(ctx, base);
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// li r19,0
	ctx.r19.s64 = 0;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// mr r17,r5
	ctx.r17.u64 = ctx.r5.u64;
	// mr r22,r6
	ctx.r22.u64 = ctx.r6.u64;
	// mr r20,r7
	ctx.r20.u64 = ctx.r7.u64;
	// mr r18,r19
	ctx.r18.u64 = ctx.r19.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// addi r27,r11,20040
	ctx.r27.s64 = ctx.r11.s64 + 20040;
	// beq cr6,0x8247e6f0
	if (ctx.cr6.eq) goto loc_8247E6F0;
	// lwz r8,4(r27)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// mr r9,r19
	ctx.r9.u64 = ctx.r19.u64;
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// ble cr6,0x8247e6f0
	if (!ctx.cr6.gt) goto loc_8247E6F0;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
loc_8247E6C4:
	// cmplwi cr6,r18,0
	ctx.cr6.compare<uint32_t>(ctx.r18.u32, 0, ctx.xer);
	// bne cr6,0x8247e6f0
	if (!ctx.cr6.eq) goto loc_8247E6F0;
	// lwz r11,0(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r7,60(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplw cr6,r7,r25
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, ctx.r25.u32, ctx.xer);
	// bne cr6,0x8247e6e0
	if (!ctx.cr6.eq) goto loc_8247E6E0;
	// mr r18,r11
	ctx.r18.u64 = ctx.r11.u64;
loc_8247E6E0:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r9,r8
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, ctx.xer);
	// blt cr6,0x8247e6c4
	if (ctx.cr6.lt) goto loc_8247E6C4;
loc_8247E6F0:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// stw r19,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r19.u32);
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r19.u32);
	// cmplwi cr6,r18,0
	ctx.cr6.compare<uint32_t>(ctx.r18.u32, 0, ctx.xer);
	// addi r21,r11,-28532
	ctx.r21.s64 = ctx.r11.s64 + -28532;
	// stw r19,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r19.u32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r23,r11,-28548
	ctx.r23.s64 = ctx.r11.s64 + -28548;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r24,r11,-29761
	ctx.r24.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x8247e72c
	if (ctx.cr6.eq) goto loc_8247E72C;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x822e0818
	ctx.lr = 0x8247E728;
	sub_822E0818(ctx, base);
	// b 0x8247ea34
	goto loc_8247EA34;
loc_8247E72C:
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// bne cr6,0x8247e880
	if (!ctx.cr6.eq) goto loc_8247E880;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x8247e750
	if (!ctx.cr6.eq) goto loc_8247E750;
loc_8247E73C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247E744;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e8c
	__restgprlr_17(ctx, base);
	return;
loc_8247E750:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247e76c
	if (!ctx.cr6.eq) goto loc_8247E76C;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247E768;
	sub_823099B0(ctx, base);
	// b 0x8247e774
	goto loc_8247E774;
loc_8247E76C:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247E774;
	sub_8242BA60(ctx, base);
loc_8247E774:
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247e788
	if (!ctx.cr6.eq) goto loc_8247E788;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_8247E788:
	// lis r11,-31972
	ctx.r11.s64 = -2095316992;
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
	// lwz r3,31952(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31952);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247E7B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// cntlzw r31,r11
	ctx.r31.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247E7C0;
	sub_82309A60(ctx, base);
	// rlwinm r11,r31,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ea34
	if (ctx.cr6.eq) goto loc_8247EA34;
	// rlwinm r11,r17,0,26,26
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r17.u32 | (ctx.r17.u64 << 32), 0) & 0x20;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247e7fc
	if (ctx.cr6.eq) goto loc_8247E7FC;
	// bl 0x822e19f0
	ctx.lr = 0x8247E7DC;
	sub_822E19F0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x8247E7E8;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e7fc
	if (ctx.cr6.eq) goto loc_8247E7FC;
	// lwz r11,72(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 72);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247e73c
	if (!ctx.cr6.eq) goto loc_8247E73C;
loc_8247E7FC:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247e818
	if (!ctx.cr6.eq) goto loc_8247E818;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247E814;
	sub_823099B0(ctx, base);
	// b 0x8247e820
	goto loc_8247E820;
loc_8247E818:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247E820;
	sub_8242BA60(ctx, base);
loc_8247E820:
	// lwz r11,164(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r31,160(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247e834
	if (!ctx.cr6.eq) goto loc_8247E834;
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
loc_8247E834:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-10840
	ctx.r4.s64 = ctx.r11.s64 + -10840;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82431548
	ctx.lr = 0x8247E84C;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e860
	if (ctx.cr6.eq) goto loc_8247E860;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247e864
	goto loc_8247E864;
loc_8247E860:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247E864:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418a18
	ctx.lr = 0x8247E86C;
	sub_82418A18(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247E874;
	sub_82309A60(ctx, base);
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82309a60
	ctx.lr = 0x8247E87C;
	sub_82309A60(ctx, base);
	// b 0x8247ea34
	goto loc_8247EA34;
loc_8247E880:
	// lis r11,-31972
	ctx.r11.s64 = -2095316992;
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
	// lwz r3,31952(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 31952);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247E8AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247e73c
	if (ctx.cr6.eq) goto loc_8247E73C;
	// li r5,256
	ctx.r5.s64 = 256;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// addi r31,r1,176
	ctx.r31.s64 = ctx.r1.s64 + 176;
	// bl 0x82406620
	ctx.lr = 0x8247E8C8;
	sub_82406620(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r30,r11,5272
	ctx.r30.s64 = ctx.r11.s64 + 5272;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r29,r11,5268
	ctx.r29.s64 = ctx.r11.s64 + 5268;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r28,r11,192
	ctx.r28.s64 = ctx.r11.s64 + 192;
loc_8247E8E0:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E8EC;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// beq cr6,0x8247e908
	if (ctx.cr6.eq) goto loc_8247E908;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E900;
	sub_82E29E88(ctx, base);
	// addi r31,r3,1
	ctx.r31.s64 = ctx.r3.s64 + 1;
	// b 0x8247e8e0
	goto loc_8247E8E0;
loc_8247E908:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E910;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// beq cr6,0x8247e92c
	if (ctx.cr6.eq) goto loc_8247E92C;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E924;
	sub_82E29E88(ctx, base);
	// addi r31,r3,1
	ctx.r31.s64 = ctx.r3.s64 + 1;
	// b 0x8247e8e0
	goto loc_8247E8E0;
loc_8247E92C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E934;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// beq cr6,0x8247e950
	if (ctx.cr6.eq) goto loc_8247E950;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E948;
	sub_82E29E88(ctx, base);
	// addi r31,r3,1
	ctx.r31.s64 = ctx.r3.s64 + 1;
	// b 0x8247e8e0
	goto loc_8247E8E0;
loc_8247E950:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-27240
	ctx.r30.s64 = ctx.r11.s64 + -27240;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E960;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247e978
	if (ctx.cr6.eq) goto loc_8247E978;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e29e88
	ctx.lr = 0x8247E974;
	sub_82E29E88(ctx, base);
	// stb r19,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, ctx.r19.u8);
loc_8247E978:
	// rlwinm r5,r17,16,31,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r17.u32 | (ctx.r17.u64 << 32), 16) & 0x1;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8247a848
	ctx.lr = 0x8247E988;
	sub_8247A848(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x8247ea24
	if (!ctx.cr6.eq) goto loc_8247EA24;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247e9dc
	if (!ctx.cr6.eq) goto loc_8247E9DC;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-10860
	ctx.r4.s64 = ctx.r11.s64 + -10860;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82431548
	ctx.lr = 0x8247E9B4;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247e9c8
	if (ctx.cr6.eq) goto loc_8247E9C8;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247e9cc
	goto loc_8247E9CC;
loc_8247E9C8:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247E9CC:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82418a18
	ctx.lr = 0x8247E9D4;
	sub_82418A18(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247E9DC;
	sub_82309A60(ctx, base);
loc_8247E9DC:
	// lwz r8,4(r27)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// mr r25,r31
	ctx.r25.u64 = ctx.r31.u64;
	// mr r9,r19
	ctx.r9.u64 = ctx.r19.u64;
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// ble cr6,0x8247ea34
	if (!ctx.cr6.gt) goto loc_8247EA34;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
loc_8247E9F4:
	// cmplwi cr6,r18,0
	ctx.cr6.compare<uint32_t>(ctx.r18.u32, 0, ctx.xer);
	// bne cr6,0x8247ea34
	if (!ctx.cr6.eq) goto loc_8247EA34;
	// lwz r11,0(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r7,60(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplw cr6,r7,r31
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, ctx.r31.u32, ctx.xer);
	// bne cr6,0x8247ea10
	if (!ctx.cr6.eq) goto loc_8247EA10;
	// mr r18,r11
	ctx.r18.u64 = ctx.r11.u64;
loc_8247EA10:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpw cr6,r9,r8
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, ctx.xer);
	// blt cr6,0x8247e9f4
	if (ctx.cr6.lt) goto loc_8247E9F4;
	// b 0x8247ea34
	goto loc_8247EA34;
loc_8247EA24:
	// cmplw cr6,r25,r31
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, ctx.r31.u32, ctx.xer);
	// beq cr6,0x8247ea34
	if (ctx.cr6.eq) goto loc_8247EA34;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82465a58
	ctx.lr = 0x8247EA34;
	sub_82465A58(ctx, base);
loc_8247EA34:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// addi r30,r11,-26176
	ctx.r30.s64 = ctx.r11.s64 + -26176;
	// beq cr6,0x8247eaf8
	if (ctx.cr6.eq) goto loc_8247EAF8;
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// lwz r11,268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 268);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247EA5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247eaf8
	if (!ctx.cr6.eq) goto loc_8247EAF8;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bne cr6,0x8247ea7c
	if (!ctx.cr6.eq) goto loc_8247EA7C;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247EA78;
	sub_823099B0(ctx, base);
	// b 0x8247ea9c
	goto loc_8247EA9C;
loc_8247EA7C:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247ea94
	if (!ctx.cr6.eq) goto loc_8247EA94;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247EA90;
	sub_823099B0(ctx, base);
	// b 0x8247ea9c
	goto loc_8247EA9C;
loc_8247EA94:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247EA9C;
	sub_8242BA60(ctx, base);
loc_8247EA9C:
	// lwz r11,116(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// lwz r31,112(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247eab0
	if (!ctx.cr6.eq) goto loc_8247EAB0;
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
loc_8247EAB0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-10868
	ctx.r4.s64 = ctx.r11.s64 + -10868;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82431548
	ctx.lr = 0x8247EAC8;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247eadc
	if (ctx.cr6.eq) goto loc_8247EADC;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247eae0
	goto loc_8247EAE0;
loc_8247EADC:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247EAE0:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418a18
	ctx.lr = 0x8247EAE8;
	sub_82418A18(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247EAF0;
	sub_82309A60(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247EAF8;
	sub_82309A60(ctx, base);
loc_8247EAF8:
	// cmplwi cr6,r18,0
	ctx.cr6.compare<uint32_t>(ctx.r18.u32, 0, ctx.xer);
	// bne cr6,0x8247eb24
	if (!ctx.cr6.eq) goto loc_8247EB24;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247eb14
	if (!ctx.cr6.eq) goto loc_8247EB14;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
loc_8247EB14:
	// mr r5,r17
	ctx.r5.u64 = ctx.r17.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824515f8
	ctx.lr = 0x8247EB20;
	sub_824515F8(ctx, base);
	// mr r18,r3
	ctx.r18.u64 = ctx.r3.u64;
loc_8247EB24:
	// cmplwi cr6,r20,0
	ctx.cr6.compare<uint32_t>(ctx.r20.u32, 0, ctx.xer);
	// beq cr6,0x8247ec04
	if (ctx.cr6.eq) goto loc_8247EC04;
	// lwz r7,132(r18)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r18.u32 + 132);
	// lwz r11,12(r20)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r20.u32 + 12);
	// lwz r10,8(r20)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r20.u32 + 8);
	// lwz r6,128(r18)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r18.u32 + 128);
	// xor r11,r7,r11
	ctx.r11.u64 = ctx.r7.u64 ^ ctx.r11.u64;
	// lwz r9,4(r20)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r20.u32 + 4);
	// lwz r5,124(r18)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r18.u32 + 124);
	// xor r10,r6,r10
	ctx.r10.u64 = ctx.r6.u64 ^ ctx.r10.u64;
	// lwz r8,0(r20)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r20.u32 + 0);
	// lwz r7,120(r18)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r18.u32 + 120);
	// or r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 | ctx.r10.u64;
	// xor r9,r5,r9
	ctx.r9.u64 = ctx.r5.u64 ^ ctx.r9.u64;
	// xor r10,r7,r8
	ctx.r10.u64 = ctx.r7.u64 ^ ctx.r8.u64;
	// or r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 | ctx.r9.u64;
	// or r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 | ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ec04
	if (ctx.cr6.eq) goto loc_8247EC04;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bne cr6,0x8247eb88
	if (!ctx.cr6.eq) goto loc_8247EB88;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247EB84;
	sub_823099B0(ctx, base);
	// b 0x8247eba8
	goto loc_8247EBA8;
loc_8247EB88:
	// lwz r11,4(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x8247eba0
	if (!ctx.cr6.eq) goto loc_8247EBA0;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247EB9C;
	sub_823099B0(ctx, base);
	// b 0x8247eba8
	goto loc_8247EBA8;
loc_8247EBA0:
	// addi r4,r25,44
	ctx.r4.s64 = ctx.r25.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247EBA8;
	sub_8242BA60(ctx, base);
loc_8247EBA8:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// lwz r31,128(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ebbc
	if (!ctx.cr6.eq) goto loc_8247EBBC;
	// mr r31,r24
	ctx.r31.u64 = ctx.r24.u64;
loc_8247EBBC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-10884
	ctx.r4.s64 = ctx.r11.s64 + -10884;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82431548
	ctx.lr = 0x8247EBD4;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ebe8
	if (ctx.cr6.eq) goto loc_8247EBE8;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247ebec
	goto loc_8247EBEC;
loc_8247EBE8:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_8247EBEC:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418a18
	ctx.lr = 0x8247EBF4;
	sub_82418A18(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247EBFC;
	sub_82309A60(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x8247EC04;
	sub_82309A60(ctx, base);
loc_8247EC04:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r19.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247ec64
	if (ctx.cr6.eq) goto loc_8247EC64;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r19,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r19.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ec64
	if (ctx.cr6.eq) goto loc_8247EC64;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247ec40
	if (!ctx.cr6.eq) goto loc_8247EC40;
	// bl 0x82545cc0
	ctx.lr = 0x8247EC3C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_8247EC40:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247EC60;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
loc_8247EC64:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416660
	ctx.lr = 0x8247EC80;
	sub_82416660(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ecb8
	if (ctx.cr6.eq) goto loc_8247ECB8;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247eca4
	if (!ctx.cr6.eq) goto loc_8247ECA4;
	// bl 0x82545cc0
	ctx.lr = 0x8247ECA0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_8247ECA4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247ECB8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_8247ECB8:
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// b 0x82e28e8c
	__restgprlr_17(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247ECC8"))) PPC_WEAK_FUNC(sub_8247ECC8);
PPC_FUNC_IMPL(__imp__sub_8247ECC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x8247ECD0;
	__savegprlr_27(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	ctx.r31.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// addi r27,r11,-28548
	ctx.r27.s64 = ctx.r11.s64 + -28548;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// lis r30,-31971
	ctx.r30.s64 = -2095251456;
	// stw r28,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r28.u32);
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r31.u32);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// beq cr6,0x8247ed0c
	if (ctx.cr6.eq) goto loc_8247ED0C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x822e0818
	ctx.lr = 0x8247ED08;
	sub_822E0818(ctx, base);
	// b 0x8247ed68
	goto loc_8247ED68;
loc_8247ED0C:
	// lwz r5,1296(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1296);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// bne cr6,0x8247ed38
	if (!ctx.cr6.eq) goto loc_8247ED38;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82437288
	ctx.lr = 0x8247ED2C;
	sub_82437288(ctx, base);
	// stw r3,1296(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247ED34;
	sub_82408430(ctx, base);
	// lwz r5,1296(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1296);
loc_8247ED38:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// ld r6,0(r29)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r29.u32 + 0);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8245efe8
	ctx.lr = 0x8247ED48;
	sub_8245EFE8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8242ba60
	ctx.lr = 0x8247ED54;
	sub_8242BA60(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82302d08
	ctx.lr = 0x8247ED60;
	sub_82302D08(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247ED68;
	sub_82309A60(ctx, base);
loc_8247ED68:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,196
	ctx.r3.s64 = ctx.r1.s64 + 196;
	// bl 0x8247aa08
	ctx.lr = 0x8247ED80;
	sub_8247AA08(ctx, base);
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r3,96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r29,r11,-29761
	ctx.r29.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247ed9c
	if (!ctx.cr6.eq) goto loc_8247ED9C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_8247ED9C:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x82e28c50
	ctx.lr = 0x8247EDA8;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247edf4
	if (ctx.cr6.eq) goto loc_8247EDF4;
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247edc0
	if (ctx.cr6.eq) goto loc_8247EDC0;
	// lwz r29,96(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
loc_8247EDC0:
	// lwz r3,1296(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1296);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x8247ede0
	if (!ctx.cr6.eq) goto loc_8247EDE0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82437288
	ctx.lr = 0x8247EDD4;
	sub_82437288(ctx, base);
	// stw r3,1296(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x8247EDDC;
	sub_82408430(ctx, base);
	// lwz r3,1296(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1296);
loc_8247EDE0:
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r4,196(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 196);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247EDF0;
	sub_824656C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_8247EDF4:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247EDFC;
	sub_82309A60(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247EE08"))) PPC_WEAK_FUNC(sub_8247EE08);
PPC_FUNC_IMPL(__imp__sub_8247EE08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8247EE10;
	__savegprlr_28(ctx, base);
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, ctx.f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lbz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ee98
	if (ctx.cr6.eq) goto loc_8247EE98;
	// lis r28,-31970
	ctx.r28.s64 = -2095185920;
	// lwz r11,19736(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 19736);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// stw r11,19736(r28)
	PPC_STORE_U32(ctx.r28.u32 + 19736, ctx.r11.u32);
	// bne cr6,0x8247ee54
	if (!ctx.cr6.eq) goto loc_8247EE54;
	// bl 0x82451a50
	ctx.lr = 0x8247EE54;
	sub_82451A50(ctx, base);
loc_8247EE54:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x8247EE5C;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lis r29,-31973
	ctx.r29.s64 = -2095382528;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// ori r5,r30,8
	ctx.r5.u64 = ctx.r30.u64 | 8;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// fmul f31,f13,f0
	ctx.f31.f64 = ctx.f13.f64 * ctx.f0.f64;
	// bl 0x8247e678
	ctx.lr = 0x8247EE88;
	sub_8247E678(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247eea8
	if (!ctx.cr6.eq) goto loc_8247EEA8;
	// bl 0x82470e60
	ctx.lr = 0x8247EE98;
	sub_82470E60(ctx, base);
loc_8247EE98:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_8247EEA8:
	// rlwinm r30,r30,0,27,27
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247eec0
	if (!ctx.cr6.eq) goto loc_8247EEC0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8244eff0
	ctx.lr = 0x8247EEC0;
	sub_8244EFF0(ctx, base);
loc_8247EEC0:
	// lwz r31,60(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// bl 0x82470e60
	ctx.lr = 0x8247EEC8;
	sub_82470E60(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247ef0c
	if (ctx.cr6.eq) goto loc_8247EF0C;
	// lwz r11,19736(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 19736);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247ef04
	if (!ctx.cr6.eq) goto loc_8247EF04;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247ef04
	if (!ctx.cr6.eq) goto loc_8247EF04;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x8247EEEC;
	sub_82B061D8(ctx, base);
	// lfd f13,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// fmsub f0,f13,f0,f31
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f31.f64;
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// stfs f0,88(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 88, temp.u32);
loc_8247EF04:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82465a58
	ctx.lr = 0x8247EF0C;
	sub_82465A58(ctx, base);
loc_8247EF0C:
	// bl 0x82a186e0
	ctx.lr = 0x8247EF10;
	sub_82A186E0(ctx, base);
	// bl 0x82a30c80
	ctx.lr = 0x8247EF14;
	sub_82A30C80(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823fac98
	ctx.lr = 0x8247EF1C;
	sub_823FAC98(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247EF28"))) PPC_WEAK_FUNC(sub_8247EF28);
PPC_FUNC_IMPL(__imp__sub_8247EF28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8247EF30;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r12,1024
	ctx.r12.s64 = 67108864;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// ori r12,r12,128
	ctx.r12.u64 = ctx.r12.u64 | 128;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r11,21656
	ctx.r10.s64 = ctx.r11.s64 + 21656;
	// rldicr r12,r12,32,31
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 32) & 0xFFFFFFFF00000000;
	// li r11,0
	ctx.r11.s64 = 0;
	// ori r12,r12,16384
	ctx.r12.u64 = ctx.r12.u64 | 16384;
	// li r9,-1
	ctx.r9.s64 = -1;
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// or r8,r8,r12
	ctx.r8.u64 = ctx.r8.u64 | ctx.r12.u64;
	// stw r11,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r11.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r11.u32);
	// stw r10,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r9.u32);
	// std r8,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r8.u64);
	// stw r11,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r11.u32);
	// stw r11,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r11.u32);
	// stw r11,56(r31)
	PPC_STORE_U32(ctx.r31.u32 + 56, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// stw r5,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r5.u32);
	// stw r6,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r6.u32);
	// stw r7,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r7.u32);
	// lwz r10,19752(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19752);
	// stw r10,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r10.u32);
	// stw r31,19752(r11)
	PPC_STORE_U32(ctx.r11.u32 + 19752, ctx.r31.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r11,19728(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19728);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247eff4
	if (ctx.cr6.eq) goto loc_8247EFF4;
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r29,52(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// lwz r11,19848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19848);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247efe4
	if (!ctx.cr6.eq) goto loc_8247EFE4;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82462518
	ctx.lr = 0x8247EFD8;
	sub_82462518(ctx, base);
	// stw r3,19848(r30)
	PPC_STORE_U32(ctx.r30.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x8247EFE0;
	sub_8245F220(ctx, base);
	// lwz r11,19848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19848);
loc_8247EFE4:
	// cmplw cr6,r29,r11
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r11.u32, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bne cr6,0x8247eff8
	if (!ctx.cr6.eq) goto loc_8247EFF8;
	// bl 0x8247b450
	ctx.lr = 0x8247EFF4;
	sub_8247B450(ctx, base);
loc_8247EFF4:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_8247EFF8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247F000"))) PPC_WEAK_FUNC(sub_8247F000);
PPC_FUNC_IMPL(__imp__sub_8247F000) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e44
	ctx.lr = 0x8247F008;
	__savegprlr_19(ctx, base);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r5
	ctx.r21.u64 = ctx.r5.u64;
	// stw r4,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, ctx.r4.u32);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// mr r20,r6
	ctx.r20.u64 = ctx.r6.u64;
	// mr r19,r7
	ctx.r19.u64 = ctx.r7.u64;
	// mr r31,r9
	ctx.r31.u64 = ctx.r9.u64;
	// bl 0x823099b0
	ctx.lr = 0x8247F030;
	sub_823099B0(ctx, base);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,332
	ctx.r3.s64 = ctx.r1.s64 + 332;
	// bl 0x8247aa08
	ctx.lr = 0x8247F048;
	sub_8247AA08(ctx, base);
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r25,r11,-29761
	ctx.r25.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247f064
	if (!ctx.cr6.eq) goto loc_8247F064;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F064:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x8247F074;
	sub_8243B750(ctx, base);
	// lwz r30,332(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247f4dc
	if (ctx.cr6.eq) goto loc_8247F4DC;
	// li r23,0
	ctx.r23.s64 = 0;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x8247f0e0
	if (ctx.cr6.eq) goto loc_8247F0E0;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30052(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30052);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f0e0
	if (ctx.cr6.eq) goto loc_8247F0E0;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30036(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30036);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f0b4
	if (ctx.cr6.eq) goto loc_8247F0B4;
	// mr r8,r23
	ctx.r8.u64 = ctx.r23.u64;
	// b 0x8247f0bc
	goto loc_8247F0BC;
loc_8247F0B4:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_8247F0BC:
	// li r7,0
	ctx.r7.s64 = 0;
	// ld r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8245ea70
	ctx.lr = 0x8247F0D4;
	sub_8245EA70(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8247f4ac
	if (!ctx.cr6.eq) goto loc_8247F4AC;
loc_8247F0E0:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r23,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r23.u32);
	// stw r23,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r23.u32);
	// stw r23,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r23.u32);
	// lwz r11,11464(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247f138
	if (ctx.cr6.eq) goto loc_8247F138;
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,140(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 140);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f138
	if (ctx.cr6.eq) goto loc_8247F138;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82677218
	ctx.lr = 0x8247F124;
	sub_82677218(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82302d08
	ctx.lr = 0x8247F130;
	sub_82302D08(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247F138;
	sub_82309A60(ctx, base);
loc_8247F138:
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// lwz r11,8332(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247f4d4
	if (ctx.cr6.eq) goto loc_8247F4D4;
	// lis r24,-31970
	ctx.r24.s64 = -2095185920;
	// lbz r11,20148(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + 20148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247f4d4
	if (!ctx.cr6.eq) goto loc_8247F4D4;
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f16c
	if (!ctx.cr6.eq) goto loc_8247F16C;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F16C:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r4,r11,6184
	ctx.r4.s64 = ctx.r11.s64 + 6184;
	// bl 0x82e29e88
	ctx.lr = 0x8247F178;
	sub_82E29E88(ctx, base);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247f1a4
	if (ctx.cr6.eq) goto loc_8247F1A4;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// bne cr6,0x8247f198
	if (!ctx.cr6.eq) goto loc_8247F198;
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_8247F198:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f4d4
	if (ctx.cr6.eq) goto loc_8247F4D4;
loc_8247F1A4:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bne cr6,0x8247f1b4
	if (!ctx.cr6.eq) goto loc_8247F1B4;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F1B4:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r4,r11,21180
	ctx.r4.s64 = ctx.r11.s64 + 21180;
	// bl 0x82e29e88
	ctx.lr = 0x8247F1C0;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247f1e8
	if (ctx.cr6.eq) goto loc_8247F1E8;
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// bne cr6,0x8247f1dc
	if (!ctx.cr6.eq) goto loc_8247F1DC;
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_8247F1DC:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f4d4
	if (ctx.cr6.eq) goto loc_8247F4D4;
loc_8247F1E8:
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_8247F1EC:
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f218
	if (ctx.cr6.eq) goto loc_8247F218;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247f1ec
	if (!ctx.cr6.eq) goto loc_8247F1EC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x8247F214;
	sub_823099B0(ctx, base);
	// b 0x8247f240
	goto loc_8247F240;
loc_8247F218:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247f238
	if (!ctx.cr6.eq) goto loc_8247F238;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x8247F234;
	sub_823099B0(ctx, base);
	// b 0x8247f240
	goto loc_8247F240;
loc_8247F238:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247F240;
	sub_8242BA60(ctx, base);
loc_8247F240:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f254
	if (!ctx.cr6.eq) goto loc_8247F254;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F254:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-10780
	ctx.r4.s64 = ctx.r11.s64 + -10780;
	// bl 0x82416ad8
	ctx.lr = 0x8247F260;
	sub_82416AD8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247f4cc
	if (ctx.cr6.eq) goto loc_8247F4CC;
	// lwz r3,8332(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8332);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r7,r11,24872
	ctx.r7.s64 = ctx.r11.s64 + 24872;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r4,r11,-10808
	ctx.r4.s64 = ctx.r11.s64 + -10808;
	// lwz r11,32(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247F294;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247f4cc
	if (ctx.cr6.eq) goto loc_8247F4CC;
	// mr r28,r23
	ctx.r28.u64 = ctx.r23.u64;
	// stw r29,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r29.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r29,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r29.u32);
	// stw r23,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r23.u32);
	// lis r27,-31972
	ctx.r27.s64 = -2095316992;
	// addi r26,r11,-10824
	ctx.r26.s64 = ctx.r11.s64 + -10824;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
loc_8247F2C0:
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// blt cr6,0x8247f4c0
	if (ctx.cr6.lt) goto loc_8247F4C0;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247f4c0
	if (!ctx.cr6.lt) goto loc_8247F4C0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mulli r31,r28,28
	ctx.r31.s64 = ctx.r28.s64 * 28;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f2f4
	if (ctx.cr6.eq) goto loc_8247F2F4;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// b 0x8247f2f8
	goto loc_8247F2F8;
loc_8247F2F4:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F2F8:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82e28c50
	ctx.lr = 0x8247F300;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247f3d0
	if (!ctx.cr6.eq) goto loc_8247F3D0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// addi r31,r11,16
	ctx.r31.s64 = ctx.r11.s64 + 16;
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f328
	if (ctx.cr6.eq) goto loc_8247F328;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x8247f32c
	goto loc_8247F32C;
loc_8247F328:
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F32C:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f340
	if (!ctx.cr6.eq) goto loc_8247F340;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F340:
	// bl 0x82e28c50
	ctx.lr = 0x8247F344;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247f3d0
	if (!ctx.cr6.eq) goto loc_8247F3D0;
	// stw r23,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r23.u32);
	// stw r23,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r23.u32);
	// stw r23,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r23.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f36c
	if (ctx.cr6.eq) goto loc_8247F36C;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x8247f370
	goto loc_8247F370;
loc_8247F36C:
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F370:
	// lwz r3,31952(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 31952);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,136
	ctx.r6.s64 = ctx.r1.s64 + 136;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247F394;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247f3c8
	if (ctx.cr6.eq) goto loc_8247F3C8;
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f3b0
	if (!ctx.cr6.eq) goto loc_8247F3B0;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F3B0:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8247ee08
	ctx.lr = 0x8247F3BC;
	sub_8247EE08(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247f3d8
	if (!ctx.cr6.eq) goto loc_8247F3D8;
loc_8247F3C8:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x8247F3D0;
	sub_82309A60(ctx, base);
loc_8247F3D0:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// b 0x8247f2c0
	goto loc_8247F2C0;
loc_8247F3D8:
	// ld r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
	// ori r11,r11,16384
	ctx.r11.u64 = ctx.r11.u64 | 16384;
	// std r11,8(r30)
	PPC_STORE_U64(ctx.r30.u32 + 8, ctx.r11.u64);
	// bl 0x82309e48
	ctx.lr = 0x8247F3F0;
	sub_82309E48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_8247F3F8:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247f458
	if (!ctx.cr6.lt) goto loc_8247F458;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// lwz r11,40(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247f44c
	if (ctx.cr6.eq) goto loc_8247F44C;
loc_8247F420:
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x8247f440
	if (ctx.cr6.eq) goto loc_8247F440;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247f420
	if (!ctx.cr6.eq) goto loc_8247F420;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302fa0
	ctx.lr = 0x8247F43C;
	sub_82302FA0(ctx, base);
	// b 0x8247f3f8
	goto loc_8247F3F8;
loc_8247F440:
	// ld r11,8(r10)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 8);
	// ori r11,r11,16384
	ctx.r11.u64 = ctx.r11.u64 | 16384;
	// std r11,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r11.u64);
loc_8247F44C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302fa0
	ctx.lr = 0x8247F454;
	sub_82302FA0(ctx, base);
	// b 0x8247f3f8
	goto loc_8247F3F8;
loc_8247F458:
	// li r11,1
	ctx.r11.s64 = 1;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r8,0
	ctx.r8.s64 = 0;
	// mr r7,r19
	ctx.r7.u64 = ctx.r19.u64;
	// mr r6,r20
	ctx.r6.u64 = ctx.r20.u64;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// stb r11,20148(r24)
	PPC_STORE_U8(ctx.r24.u32 + 20148, ctx.r11.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8247f000
	ctx.lr = 0x8247F480;
	sub_8247F000(ctx, base);
	// mr r11,r23
	ctx.r11.u64 = ctx.r23.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stb r11,20148(r24)
	PPC_STORE_U8(ctx.r24.u32 + 20148, ctx.r11.u8);
	// bl 0x82309a60
	ctx.lr = 0x8247F494;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x823fed60
	ctx.lr = 0x8247F49C;
	sub_823FED60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247F4A4;
	sub_82309A60(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x8247F4AC;
	sub_82309A60(ctx, base);
loc_8247F4AC:
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x8247F4B4;
	sub_82309A60(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28e94
	__restgprlr_19(ctx, base);
	return;
loc_8247F4C0:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
	// bl 0x823fed60
	ctx.lr = 0x8247F4CC;
	sub_823FED60(ctx, base);
loc_8247F4CC:
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247F4D4;
	sub_82309A60(ctx, base);
loc_8247F4D4:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x8247F4DC;
	sub_82309A60(ctx, base);
loc_8247F4DC:
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x8247F4E4;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28e94
	__restgprlr_19(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247F4F0"))) PPC_WEAK_FUNC(sub_8247F4F0);
PPC_FUNC_IMPL(__imp__sub_8247F4F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e48
	ctx.lr = 0x8247F4F8;
	__savegprlr_20(ctx, base);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// li r21,0
	ctx.r21.s64 = 0;
	// mr r23,r4
	ctx.r23.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r22,r6
	ctx.r22.u64 = ctx.r6.u64;
	// mr r28,r7
	ctx.r28.u64 = ctx.r7.u64;
	// mr r30,r21
	ctx.r30.u64 = ctx.r21.u64;
	// mr r31,r20
	ctx.r31.u64 = ctx.r20.u64;
loc_8247F51C:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247f54c
	if (ctx.cr6.eq) goto loc_8247F54C;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247F538;
	sub_824656C0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r31,40(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247f51c
	if (ctx.cr6.eq) goto loc_8247F51C;
	// b 0x8247fa44
	goto loc_8247FA44;
loc_8247F54C:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247fa44
	if (!ctx.cr6.eq) goto loc_8247FA44;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x824656c0
	ctx.lr = 0x8247F568;
	sub_824656C0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247fa44
	if (!ctx.cr6.eq) goto loc_8247FA44;
	// li r4,46
	ctx.r4.s64 = 46;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82e2b538
	ctx.lr = 0x8247F580;
	sub_82E2B538(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247fa3c
	if (ctx.cr6.eq) goto loc_8247FA3C;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x8247f5ac
	if (ctx.cr6.eq) goto loc_8247F5AC;
	// addi r6,r3,1
	ctx.r6.s64 = ctx.r3.s64 + 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x8247f4f0
	ctx.lr = 0x8247F5A8;
	sub_8247F4F0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_8247F5AC:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247fa44
	if (!ctx.cr6.eq) goto loc_8247FA44;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r21.u32);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x823099b0
	ctx.lr = 0x8247F5C4;
	sub_823099B0(ctx, base);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8247aa08
	ctx.lr = 0x8247F5DC;
	sub_8247AA08(ctx, base);
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lwz r4,152(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r25,r11,-29761
	ctx.r25.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247f5f8
	if (!ctx.cr6.eq) goto loc_8247F5F8;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F5F8:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x8247F608;
	sub_8243B750(ctx, base);
	// lwz r31,80(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x8247fad0
	if (ctx.cr6.eq) goto loc_8247FAD0;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30052(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30052);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f668
	if (ctx.cr6.eq) goto loc_8247F668;
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r11,30036(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 30036);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f63c
	if (ctx.cr6.eq) goto loc_8247F63C;
	// mr r8,r21
	ctx.r8.u64 = ctx.r21.u64;
	// b 0x8247f644
	goto loc_8247F644;
loc_8247F63C:
	// li r8,1
	ctx.r8.s64 = 1;
	// rldicr r8,r8,42,63
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u64, 42) & 0xFFFFFFFFFFFFFFFF;
loc_8247F644:
	// li r7,0
	ctx.r7.s64 = 0;
	// ld r5,96(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8245ea70
	ctx.lr = 0x8247F65C;
	sub_8245EA70(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247fa34
	if (!ctx.cr6.eq) goto loc_8247FA34;
loc_8247F668:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r21,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r21.u32);
	// stw r21,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r21.u32);
	// stw r21,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r21.u32);
	// lwz r11,11464(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247f6c0
	if (ctx.cr6.eq) goto loc_8247F6C0;
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,140(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 140);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f6c0
	if (ctx.cr6.eq) goto loc_8247F6C0;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82677218
	ctx.lr = 0x8247F6AC;
	sub_82677218(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82302d08
	ctx.lr = 0x8247F6B8;
	sub_82302D08(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247F6C0;
	sub_82309A60(ctx, base);
loc_8247F6C0:
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// lwz r11,8332(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8332);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247fac8
	if (ctx.cr6.eq) goto loc_8247FAC8;
	// lis r24,-31970
	ctx.r24.s64 = -2095185920;
	// lbz r11,20148(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + 20148);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fac8
	if (!ctx.cr6.eq) goto loc_8247FAC8;
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f6f4
	if (!ctx.cr6.eq) goto loc_8247F6F4;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F6F4:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r4,r11,6184
	ctx.r4.s64 = ctx.r11.s64 + 6184;
	// bl 0x82e29e88
	ctx.lr = 0x8247F700;
	sub_82E29E88(ctx, base);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r10,104(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247f72c
	if (ctx.cr6.eq) goto loc_8247F72C;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// bne cr6,0x8247f720
	if (!ctx.cr6.eq) goto loc_8247F720;
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_8247F720:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247fac8
	if (ctx.cr6.eq) goto loc_8247FAC8;
loc_8247F72C:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bne cr6,0x8247f73c
	if (!ctx.cr6.eq) goto loc_8247F73C;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F73C:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r4,r11,21180
	ctx.r4.s64 = ctx.r11.s64 + 21180;
	// bl 0x82e29e88
	ctx.lr = 0x8247F748;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247f770
	if (ctx.cr6.eq) goto loc_8247F770;
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// bne cr6,0x8247f764
	if (!ctx.cr6.eq) goto loc_8247F764;
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_8247F764:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247fac8
	if (ctx.cr6.eq) goto loc_8247FAC8;
loc_8247F770:
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
loc_8247F774:
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f7a0
	if (ctx.cr6.eq) goto loc_8247F7A0;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247f774
	if (!ctx.cr6.eq) goto loc_8247F774;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x8247F79C;
	sub_823099B0(ctx, base);
	// b 0x8247f7c8
	goto loc_8247F7C8;
loc_8247F7A0:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8247f7c0
	if (!ctx.cr6.eq) goto loc_8247F7C0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x8247F7BC;
	sub_823099B0(ctx, base);
	// b 0x8247f7c8
	goto loc_8247F7C8;
loc_8247F7C0:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8247F7C8;
	sub_8242BA60(ctx, base);
loc_8247F7C8:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f7dc
	if (!ctx.cr6.eq) goto loc_8247F7DC;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F7DC:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r4,r11,-10780
	ctx.r4.s64 = ctx.r11.s64 + -10780;
	// bl 0x82416ad8
	ctx.lr = 0x8247F7E8;
	sub_82416AD8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8247fac0
	if (ctx.cr6.eq) goto loc_8247FAC0;
	// lwz r3,8332(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8332);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r7,r11,24872
	ctx.r7.s64 = ctx.r11.s64 + 24872;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r4,r11,-10808
	ctx.r4.s64 = ctx.r11.s64 + -10808;
	// lwz r11,32(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247F81C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247fac0
	if (ctx.cr6.eq) goto loc_8247FAC0;
	// mr r28,r21
	ctx.r28.u64 = ctx.r21.u64;
	// stw r29,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r29.u32);
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// stw r29,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r29.u32);
	// stw r21,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r21.u32);
	// lis r27,-31972
	ctx.r27.s64 = -2095316992;
	// addi r26,r11,-10824
	ctx.r26.s64 = ctx.r11.s64 + -10824;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
loc_8247F848:
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// blt cr6,0x8247fab4
	if (ctx.cr6.lt) goto loc_8247FAB4;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x8247fab4
	if (!ctx.cr6.lt) goto loc_8247FAB4;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mulli r31,r28,28
	ctx.r31.s64 = ctx.r28.s64 * 28;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247f87c
	if (ctx.cr6.eq) goto loc_8247F87C;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// b 0x8247f880
	goto loc_8247F880;
loc_8247F87C:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F880:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82e28c50
	ctx.lr = 0x8247F888;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247f958
	if (!ctx.cr6.eq) goto loc_8247F958;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// addi r31,r11,16
	ctx.r31.s64 = ctx.r11.s64 + 16;
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f8b0
	if (ctx.cr6.eq) goto loc_8247F8B0;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x8247f8b4
	goto loc_8247F8B4;
loc_8247F8B0:
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F8B4:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r3,120(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f8c8
	if (!ctx.cr6.eq) goto loc_8247F8C8;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_8247F8C8:
	// bl 0x82e28c50
	ctx.lr = 0x8247F8CC;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247f958
	if (!ctx.cr6.eq) goto loc_8247F958;
	// stw r21,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r21.u32);
	// stw r21,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r21.u32);
	// stw r21,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r21.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247f8f4
	if (ctx.cr6.eq) goto loc_8247F8F4;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// b 0x8247f8f8
	goto loc_8247F8F8;
loc_8247F8F4:
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F8F8:
	// lwz r3,31952(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 31952);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r1,136
	ctx.r6.s64 = ctx.r1.s64 + 136;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x8247F91C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x8247f950
	if (ctx.cr6.eq) goto loc_8247F950;
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247f938
	if (!ctx.cr6.eq) goto loc_8247F938;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
loc_8247F938:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x8247ee08
	ctx.lr = 0x8247F944;
	sub_8247EE08(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x8247f960
	if (!ctx.cr6.eq) goto loc_8247F960;
loc_8247F950:
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x8247F958;
	sub_82309A60(ctx, base);
loc_8247F958:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// b 0x8247f848
	goto loc_8247F848;
loc_8247F960:
	// ld r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
	// ori r11,r11,16384
	ctx.r11.u64 = ctx.r11.u64 | 16384;
	// std r11,8(r30)
	PPC_STORE_U64(ctx.r30.u32 + 8, ctx.r11.u64);
	// bl 0x82309e48
	ctx.lr = 0x8247F978;
	sub_82309E48(ctx, base);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// addi r31,r11,20028
	ctx.r31.s64 = ctx.r11.s64 + 20028;
loc_8247F980:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x8247f9e0
	if (!ctx.cr6.lt) goto loc_8247F9E0;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r10.u32);
	// lwz r11,40(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247f9d4
	if (ctx.cr6.eq) goto loc_8247F9D4;
loc_8247F9A8:
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x8247f9c8
	if (ctx.cr6.eq) goto loc_8247F9C8;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247f9a8
	if (!ctx.cr6.eq) goto loc_8247F9A8;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302fa0
	ctx.lr = 0x8247F9C4;
	sub_82302FA0(ctx, base);
	// b 0x8247f980
	goto loc_8247F980;
loc_8247F9C8:
	// ld r11,8(r10)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r10.u32 + 8);
	// ori r11,r11,16384
	ctx.r11.u64 = ctx.r11.u64 | 16384;
	// std r11,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r11.u64);
loc_8247F9D4:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302fa0
	ctx.lr = 0x8247F9DC;
	sub_82302FA0(ctx, base);
	// b 0x8247f980
	goto loc_8247F980;
loc_8247F9E0:
	// li r11,1
	ctx.r11.s64 = 1;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16386
	ctx.r7.s64 = 16386;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// stb r11,20148(r24)
	PPC_STORE_U8(ctx.r24.u32 + 20148, ctx.r11.u8);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8247f000
	ctx.lr = 0x8247FA08;
	sub_8247F000(ctx, base);
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stb r11,20148(r24)
	PPC_STORE_U8(ctx.r24.u32 + 20148, ctx.r11.u8);
	// bl 0x82309a60
	ctx.lr = 0x8247FA1C;
	sub_82309A60(ctx, base);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x823fed60
	ctx.lr = 0x8247FA24;
	sub_823FED60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247FA2C;
	sub_82309A60(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x8247FA34;
	sub_82309A60(ctx, base);
loc_8247FA34:
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x8247FA3C;
	sub_82309A60(ctx, base);
loc_8247FA3C:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247faa8
	if (ctx.cr6.eq) goto loc_8247FAA8;
loc_8247FA44:
	// li r12,1
	ctx.r12.s64 = 1;
	// ld r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// rldicr r12,r12,34,63
	ctx.r12.u64 = __builtin_rotateleft64(ctx.r12.u64, 34) & 0xFFFFFFFFFFFFFFFF;
	// and r11,r11,r12
	ctx.r11.u64 = ctx.r11.u64 & ctx.r12.u64;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247faa8
	if (!ctx.cr6.eq) goto loc_8247FAA8;
	// cmplwi cr6,r20,0
	ctx.cr6.compare<uint32_t>(ctx.r20.u32, 0, ctx.xer);
	// beq cr6,0x8247faa8
	if (ctx.cr6.eq) goto loc_8247FAA8;
	// mr r9,r30
	ctx.r9.u64 = ctx.r30.u64;
loc_8247FA68:
	// lwz r11,40(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247fa80
	if (ctx.cr6.eq) goto loc_8247FA80;
	// mr r9,r11
	ctx.r9.u64 = ctx.r11.u64;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x8247fa68
	if (!ctx.cr6.eq) goto loc_8247FA68;
loc_8247FA80:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_8247FA84:
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x8247fa9c
	if (ctx.cr6.eq) goto loc_8247FA9C;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fa84
	if (!ctx.cr6.eq) goto loc_8247FA84;
loc_8247FA9C:
	// cmplw cr6,r9,r11
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, ctx.r11.u32, ctx.xer);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bne cr6,0x8247faac
	if (!ctx.cr6.eq) goto loc_8247FAAC;
loc_8247FAA8:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_8247FAAC:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_8247FAB4:
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// stw r28,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r28.u32);
	// bl 0x823fed60
	ctx.lr = 0x8247FAC0;
	sub_823FED60(ctx, base);
loc_8247FAC0:
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x8247FAC8;
	sub_82309A60(ctx, base);
loc_8247FAC8:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x8247FAD0;
	sub_82309A60(ctx, base);
loc_8247FAD0:
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x8247FAD8;
	sub_82309A60(ctx, base);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247FAE8"))) PPC_WEAK_FUNC(sub_8247FAE8);
PPC_FUNC_IMPL(__imp__sub_8247FAE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x8247FAF0;
	__savegprlr_24(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,1260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// mr r26,r8
	ctx.r26.u64 = ctx.r8.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// addi r24,r11,-28548
	ctx.r24.s64 = ctx.r11.s64 + -28548;
	// bne cr6,0x8247fb38
	if (!ctx.cr6.eq) goto loc_8247FB38;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8243aa40
	ctx.lr = 0x8247FB2C;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x8247FB34;
	sub_824455B8(ctx, base);
	// lwz r3,1260(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_8247FB38:
	// li r9,1
	ctx.r9.s64 = 1;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// ori r7,r27,8
	ctx.r7.u64 = ctx.r27.u64 | 8;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x8247f000
	ctx.lr = 0x8247FB54;
	sub_8247F000(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x8247fc24
	if (ctx.cr6.eq) goto loc_8247FC24;
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_8247FB64:
	// cmplw cr6,r11,r25
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r25.u32, ctx.xer);
	// beq cr6,0x8247fc24
	if (ctx.cr6.eq) goto loc_8247FC24;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fb64
	if (!ctx.cr6.eq) goto loc_8247FB64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x824645c8
	ctx.lr = 0x8247FB88;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x8247fba4
	if (ctx.cr6.eq) goto loc_8247FBA4;
	// lwz r28,0(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247fba8
	goto loc_8247FBA8;
loc_8247FBA4:
	// mr r28,r30
	ctx.r28.u64 = ctx.r30.u64;
loc_8247FBA8:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x824645c8
	ctx.lr = 0x8247FBB8;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247fbcc
	if (ctx.cr6.eq) goto loc_8247FBCC;
	// lwz r31,0(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247fbd0
	goto loc_8247FBD0;
loc_8247FBCC:
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_8247FBD0:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r11,-10768
	ctx.r4.s64 = ctx.r11.s64 + -10768;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82431548
	ctx.lr = 0x8247FBE8;
	sub_82431548(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8247fbfc
	if (ctx.cr6.eq) goto loc_8247FBFC;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x8247fc00
	goto loc_8247FC00;
loc_8247FBFC:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_8247FC00:
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82418a18
	ctx.lr = 0x8247FC0C;
	sub_82418A18(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247FC14;
	sub_82309A60(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247FC1C;
	sub_82309A60(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x8247FC24;
	sub_82309A60(ctx, base);
loc_8247FC24:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247FC30"))) PPC_WEAK_FUNC(sub_8247FC30);
PPC_FUNC_IMPL(__imp__sub_8247FC30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x8247FC38;
	__savegprlr_25(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r29,0
	ctx.r29.s64 = 0;
	// mr r31,r7
	ctx.r31.u64 = ctx.r7.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r29.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r26,r6
	ctx.r26.u64 = ctx.r6.u64;
	// mr r25,r8
	ctx.r25.u64 = ctx.r8.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r29.u32);
	// bl 0x82468ce0
	ctx.lr = 0x8247FC70;
	sub_82468CE0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// beq cr6,0x8247fd9c
	if (ctx.cr6.eq) goto loc_8247FD9C;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r28,r11,-29761
	ctx.r28.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x8247fc98
	if (!ctx.cr6.eq) goto loc_8247FC98;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_8247FC98:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x82e28c50
	ctx.lr = 0x8247FCA4;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247fcc4
	if (!ctx.cr6.eq) goto loc_8247FCC4;
	// stw r29,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r29.u32);
loc_8247FCB0:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247FCB8;
	sub_82309A60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_8247FCC4:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247fd00
	if (ctx.cr6.eq) goto loc_8247FD00;
loc_8247FCD0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,32
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 32, ctx.xer);
	// beq cr6,0x8247fcec
	if (ctx.cr6.eq) goto loc_8247FCEC;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// bne cr6,0x8247fd00
	if (!ctx.cr6.eq) goto loc_8247FD00;
loc_8247FCEC:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fcd0
	if (!ctx.cr6.eq) goto loc_8247FCD0;
loc_8247FD00:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r10,39
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 39, ctx.xer);
	// bne cr6,0x8247fde8
	if (!ctx.cr6.eq) goto loc_8247FDE8;
	// addi r3,r11,1
	ctx.r3.s64 = ctx.r11.s64 + 1;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// bl 0x82468ce0
	ctx.lr = 0x8247FD30;
	sub_82468CE0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// beq cr6,0x8247fd94
	if (ctx.cr6.eq) goto loc_8247FD94;
	// addi r11,r3,1
	ctx.r11.s64 = ctx.r3.s64 + 1;
	// lbz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r10,39
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 39, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bne cr6,0x8247fd94
	if (!ctx.cr6.eq) goto loc_8247FD94;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247fd64
	if (!ctx.cr6.eq) goto loc_8247FD64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
loc_8247FD64:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bl 0x823020c0
	ctx.lr = 0x8247FD70;
	sub_823020C0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x8247fd94
	if (ctx.cr6.eq) goto loc_8247FD94;
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
loc_8247FD80:
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x8247fdb0
	if (ctx.cr6.eq) goto loc_8247FDB0;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fd80
	if (!ctx.cr6.eq) goto loc_8247FD80;
loc_8247FD94:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x8247FD9C;
	sub_82309A60(ctx, base);
loc_8247FD9C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x8247FDA4;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_8247FDB0:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247fdc4
	if (!ctx.cr6.eq) goto loc_8247FDC4;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
loc_8247FDC4:
	// rlwinm r7,r26,28,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 28) & 0x1;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8247f4f0
	ctx.lr = 0x8247FDD4;
	sub_8247F4F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247FDE4;
	sub_82309A60(ctx, base);
	// b 0x8247fe14
	goto loc_8247FE14;
loc_8247FDE8:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8247fdfc
	if (!ctx.cr6.eq) goto loc_8247FDFC;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
loc_8247FDFC:
	// rlwinm r7,r26,28,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 28) & 0x1;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8247f4f0
	ctx.lr = 0x8247FE10;
	sub_8247F4F0(ctx, base);
	// stw r3,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r3.u32);
loc_8247FE14:
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247fd9c
	if (ctx.cr6.eq) goto loc_8247FD9C;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247fe40
	if (ctx.cr6.eq) goto loc_8247FE40;
loc_8247FE2C:
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// beq cr6,0x8247fcb0
	if (ctx.cr6.eq) goto loc_8247FCB0;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247fe2c
	if (!ctx.cr6.eq) goto loc_8247FE2C;
loc_8247FE40:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r29,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r29.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247FE4C;
	sub_82309A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247FE58"))) PPC_WEAK_FUNC(sub_8247FE58);
PPC_FUNC_IMPL(__imp__sub_8247FE58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x8247FE60;
	__savegprlr_26(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// bl 0x82468f58
	ctx.lr = 0x8247FE84;
	sub_82468F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8247fe94
	if (!ctx.cr6.eq) goto loc_8247FE94;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
loc_8247FE94:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r26,128(r31)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r31.u32 + 128);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r29.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r31,r1,80
	ctx.r31.s64 = ctx.r1.s64 + 80;
	// bl 0x824645c8
	ctx.lr = 0x8247FEB0;
	sub_824645C8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// mr r8,r28
	ctx.r8.u64 = ctx.r28.u64;
	// bl 0x8247fc30
	ctx.lr = 0x8247FEC8;
	sub_8247FC30(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// cntlzw r31,r11
	ctx.r31.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x8247FED8;
	sub_82309A60(ctx, base);
	// rlwinm r11,r31,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 27) & 0x1;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247feec
	if (!ctx.cr6.eq) goto loc_8247FEEC;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8247FEEC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247FEF8"))) PPC_WEAK_FUNC(sub_8247FEF8);
PPC_FUNC_IMPL(__imp__sub_8247FEF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x8247FF00;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// bl 0x8247fe58
	ctx.lr = 0x8247FF10;
	sub_8247FE58(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x8247ff64
	if (ctx.cr6.eq) goto loc_8247FF64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ff38
	if (ctx.cr6.eq) goto loc_8247FF38;
	// lwz r29,52(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x822e1a40
	ctx.lr = 0x8247FF30;
	sub_822E1A40(ctx, base);
	// cmplw cr6,r29,r3
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r3.u32, ctx.xer);
	// bne cr6,0x8247ff5c
	if (!ctx.cr6.eq) goto loc_8247FF5C;
loc_8247FF38:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8247ff5c
	if (ctx.cr6.eq) goto loc_8247FF5C;
	// lwz r10,132(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 132);
loc_8247FF48:
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// beq cr6,0x8247ff64
	if (ctx.cr6.eq) goto loc_8247FF64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x8247ff48
	if (!ctx.cr6.eq) goto loc_8247FF48;
loc_8247FF5C:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
loc_8247FF64:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8247FF70"))) PPC_WEAK_FUNC(sub_8247FF70);
PPC_FUNC_IMPL(__imp__sub_8247FF70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x8247FF78;
	__savegprlr_25(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r6
	ctx.r31.u64 = ctx.r6.u64;
	// mr r29,r8
	ctx.r29.u64 = ctx.r8.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r30,r7
	ctx.r30.u64 = ctx.r7.u64;
	// bl 0x82468f58
	ctx.lr = 0x8247FFA0;
	sub_82468F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82480028
	if (ctx.cr6.eq) goto loc_82480028;
	// mr r27,r30
	ctx.r27.u64 = ctx.r30.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x8247ffd0
	if (ctx.cr6.eq) goto loc_8247FFD0;
loc_8247FFB4:
	// ld r11,8(r27)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r27.u32 + 8);
	// rlwinm r11,r11,0,22,22
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x200;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// bne cr6,0x8247fff4
	if (!ctx.cr6.eq) goto loc_8247FFF4;
	// lwz r27,40(r27)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x8247ffb4
	if (!ctx.cr6.eq) goto loc_8247FFB4;
loc_8247FFD0:
	// mr r8,r29
	ctx.r8.u64 = ctx.r29.u64;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8247fe58
	ctx.lr = 0x8247FFEC;
	sub_8247FE58(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_8247FFF4:
	// li r30,0
	ctx.r30.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r30.u32);
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// stw r30,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r30.u32);
	// bl 0x82468ce0
	ctx.lr = 0x82480014;
	sub_82468CE0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82480034
	if (!ctx.cr6.eq) goto loc_82480034;
loc_82480020:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82309a60
	ctx.lr = 0x82480028;
	sub_82309A60(ctx, base);
loc_82480028:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82480034:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r29,r11,-29761
	ctx.r29.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82480050
	if (!ctx.cr6.eq) goto loc_82480050;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82480050:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x82e28c50
	ctx.lr = 0x8248005C;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x8248007c
	if (!ctx.cr6.eq) goto loc_8248007C;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r30,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r30.u32);
	// bl 0x82309a60
	ctx.lr = 0x82480070;
	sub_82309A60(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_8248007C:
	// lwz r31,52(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 52);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824800dc
	if (ctx.cr6.eq) goto loc_824800DC;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x8248009c
	if (!ctx.cr6.eq) goto loc_8248009C;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
loc_8248009C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x824800AC;
	sub_8243B750(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,316
	ctx.r3.s64 = ctx.r31.s64 + 316;
	// bl 0x82632270
	ctx.lr = 0x824800B8;
	sub_82632270(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x824800dc
	if (ctx.cr6.eq) goto loc_824800DC;
	// lwz r4,128(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 128);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x822e1bd0
	ctx.lr = 0x824800D0;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824800dc
	if (ctx.cr6.eq) goto loc_824800DC;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
loc_824800DC:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// stw r30,0(r25)
	PPC_STORE_U32(ctx.r25.u32 + 0, ctx.r30.u32);
	// beq cr6,0x82480020
	if (ctx.cr6.eq) goto loc_82480020;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82309a60
	ctx.lr = 0x824800F0;
	sub_82309A60(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480100"))) PPC_WEAK_FUNC(sub_82480100);
PPC_FUNC_IMPL(__imp__sub_82480100) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82480108;
	__savegprlr_23(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// mr r24,r8
	ctx.r24.u64 = ctx.r8.u64;
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r26,r7
	ctx.r26.u64 = ctx.r7.u64;
	// bl 0x82468f58
	ctx.lr = 0x82480130;
	sub_82468F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x824801d0
	if (ctx.cr6.eq) goto loc_824801D0;
	// lis r30,-31970
	ctx.r30.s64 = -2095185920;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// stw r25,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r25.u32);
	// lwz r31,19848(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19848);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x8248016c
	if (!ctx.cr6.eq) goto loc_8248016C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82462518
	ctx.lr = 0x82480160;
	sub_82462518(ctx, base);
	// stw r3,19848(r30)
	PPC_STORE_U32(ctx.r30.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x82480168;
	sub_8245F220(ctx, base);
	// lwz r31,19848(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 19848);
loc_8248016C:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r30,r1,80
	ctx.r30.s64 = ctx.r1.s64 + 80;
	// addi r23,r1,84
	ctx.r23.s64 = ctx.r1.s64 + 84;
	// bl 0x824645c8
	ctx.lr = 0x82480184;
	sub_824645C8(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// bl 0x8247fc30
	ctx.lr = 0x8248019C;
	sub_8247FC30(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// cntlzw r31,r11
	ctx.r31.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// bl 0x82309a60
	ctx.lr = 0x824801AC;
	sub_82309A60(ctx, base);
	// rlwinm r11,r31,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 27) & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824801dc
	if (ctx.cr6.eq) goto loc_824801DC;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// bne cr6,0x824801d0
	if (!ctx.cr6.eq) goto loc_824801D0;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
loc_824801D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_824801DC:
	// lwz r31,80(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82480200
	if (!ctx.cr6.eq) goto loc_82480200;
	// li r11,0
	ctx.r11.s64 = 0;
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_82480200:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,128(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 128);
	// bl 0x82468378
	ctx.lr = 0x8248020C;
	sub_82468378(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824802dc
	if (!ctx.cr6.eq) goto loc_824802DC;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x824802d0
	if (ctx.cr6.eq) goto loc_824802D0;
	// lwz r11,128(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 128);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480240
	if (!ctx.cr6.eq) goto loc_82480240;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-26176
	ctx.r4.s64 = ctx.r11.s64 + -26176;
	// bl 0x823099b0
	ctx.lr = 0x8248023C;
	sub_823099B0(ctx, base);
	// b 0x82480264
	goto loc_82480264;
loc_82480240:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8248025c
	if (!ctx.cr6.eq) goto loc_8248025C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r4,r11,-28532
	ctx.r4.s64 = ctx.r11.s64 + -28532;
	// bl 0x823099b0
	ctx.lr = 0x82480258;
	sub_823099B0(ctx, base);
	// b 0x82480264
	goto loc_82480264;
loc_8248025C:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82480264;
	sub_8242BA60(ctx, base);
loc_82480264:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r31,88(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82480280
	if (!ctx.cr6.eq) goto loc_82480280;
	// mr r31,r30
	ctx.r31.u64 = ctx.r30.u64;
loc_82480280:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x824645c8
	ctx.lr = 0x82480290;
	sub_824645C8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824802a4
	if (ctx.cr6.eq) goto loc_824802A4;
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x824802a8
	goto loc_824802A8;
loc_824802A4:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
loc_824802A8:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// mr r7,r25
	ctx.r7.u64 = ctx.r25.u64;
	// addi r4,r11,-10744
	ctx.r4.s64 = ctx.r11.s64 + -10744;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x824211f0
	ctx.lr = 0x824802C0;
	sub_824211F0(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x824802C8;
	sub_82309A60(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82309a60
	ctx.lr = 0x824802D0;
	sub_82309A60(ctx, base);
loc_824802D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_824802DC:
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r31,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r31.u32);
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824802F0"))) PPC_WEAK_FUNC(sub_824802F0);
PPC_FUNC_IMPL(__imp__sub_824802F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,21604
	ctx.r11.s64 = ctx.r11.s64 + 21604;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82480324
	if (ctx.cr6.eq) goto loc_82480324;
	// bl 0x82545ee8
	ctx.lr = 0x82480320;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82480324:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480338"))) PPC_WEAK_FUNC(sub_82480338);
PPC_FUNC_IMPL(__imp__sub_82480338) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,21632
	ctx.r11.s64 = ctx.r11.s64 + 21632;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x8248036c
	if (ctx.cr6.eq) goto loc_8248036C;
	// bl 0x82545ee8
	ctx.lr = 0x82480368;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_8248036C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480380"))) PPC_WEAK_FUNC(sub_82480380);
PPC_FUNC_IMPL(__imp__sub_82480380) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// std r4,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r4.u64);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// std r5,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r5.u64);
	// mr r30,r7
	ctx.r30.u64 = ctx.r7.u64;
	// std r6,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, ctx.r6.u64);
	// bl 0x82413400
	ctx.lr = 0x824803AC;
	sub_82413400(ctx, base);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,140(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// lwz r8,148(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// lwz r7,152(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// lwz r6,156(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r9,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r9.u32);
	// stw r8,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r8.u32);
	// stw r7,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r7.u32);
	// stw r6,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r6.u32);
	// stw r30,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r30.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r11.u32);
	// stw r10,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r10.u32);
	// stw r11,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480410"))) PPC_WEAK_FUNC(sub_82480410);
PPC_FUNC_IMPL(__imp__sub_82480410) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82480418;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824804c0
	if (ctx.cr6.eq) goto loc_824804C0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// addi r29,r11,-28548
	ctx.r29.s64 = ctx.r11.s64 + -28548;
loc_82480438:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8248048c
	if (ctx.cr6.eq) goto loc_8248048C;
loc_82480444:
	// lwz r4,1244(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82480464
	if (!ctx.cr6.eq) goto loc_82480464;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8243a758
	ctx.lr = 0x82480458;
	sub_8243A758(ctx, base);
	// stw r3,1244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1244, ctx.r3.u32);
	// bl 0x82407960
	ctx.lr = 0x82480460;
	sub_82407960(ctx, base);
	// lwz r4,1244(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1244);
loc_82480464:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x822e1bd0
	ctx.lr = 0x8248046C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x824804c0
	if (!ctx.cr6.eq) goto loc_824804C0;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480444
	if (!ctx.cr6.eq) goto loc_82480444;
loc_8248048C:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,284(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824804A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x824804b4
	if (ctx.cr6.eq) goto loc_824804B4;
	// lwz r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_824804B4:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480438
	if (!ctx.cr6.eq) goto loc_82480438;
loc_824804C0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824804C8"))) PPC_WEAK_FUNC(sub_824804C8);
PPC_FUNC_IMPL(__imp__sub_824804C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// bl 0x82545fb0
	ctx.lr = 0x824804E4;
	sub_82545FB0(ctx, base);
	// lis r10,16383
	ctx.r10.s64 = 1073676288;
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// ori r10,r10,65535
	ctx.r10.u64 = ctx.r10.u64 | 65535;
	// rlwinm r3,r11,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplw cr6,r11,r10
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r10.u32, ctx.xer);
	// ble cr6,0x82480500
	if (!ctx.cr6.gt) goto loc_82480500;
	// li r3,-1
	ctx.r3.s64 = -1;
loc_82480500:
	// bl 0x82545f48
	ctx.lr = 0x82480504;
	sub_82545F48(ctx, base);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r3,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r3.u32);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x8248053c
	if (!ctx.cr6.gt) goto loc_8248053C;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,-1
	ctx.r9.s64 = -1;
loc_82480520:
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stwx r9,r10,r8
	PPC_STORE_U32(ctx.r10.u32 + ctx.r8.u32, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpw cr6,r11,r8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r8.s32, ctx.xer);
	// blt cr6,0x82480520
	if (ctx.cr6.lt) goto loc_82480520;
loc_8248053C:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// li r11,0
	ctx.r11.s64 = 0;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x82480594
	if (!ctx.cr6.gt) goto loc_82480594;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82480550:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// lwz r6,4(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// and r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 & ctx.r6.u64;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r8,r7
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r7.u32);
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// stwx r11,r8,r9
	PPC_STORE_U32(ctx.r8.u32 + ctx.r9.u32, ctx.r11.u32);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// blt cr6,0x82480550
	if (ctx.cr6.lt) goto loc_82480550;
loc_82480594:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824805A8"))) PPC_WEAK_FUNC(sub_824805A8);
PPC_FUNC_IMPL(__imp__sub_824805A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x824805B0;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r27,r6
	ctx.r27.u64 = ctx.r6.u64;
	// lwz r5,1260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// bne cr6,0x824805ec
	if (!ctx.cr6.eq) goto loc_824805EC;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8243aa40
	ctx.lr = 0x824805E0;
	sub_8243AA40(ctx, base);
	// stw r3,1260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1260, ctx.r3.u32);
	// bl 0x824455b8
	ctx.lr = 0x824805E8;
	sub_824455B8(ctx, base);
	// lwz r5,1260(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1260);
loc_824805EC:
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82418df8
	ctx.lr = 0x82480600;
	sub_82418DF8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480608"))) PPC_WEAK_FUNC(sub_82480608);
PPC_FUNC_IMPL(__imp__sub_82480608) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82480610;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r27,r6
	ctx.r27.u64 = ctx.r6.u64;
	// lwz r5,1296(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// bne cr6,0x8248064c
	if (!ctx.cr6.eq) goto loc_8248064C;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82437288
	ctx.lr = 0x82480640;
	sub_82437288(ctx, base);
	// stw r3,1296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1296, ctx.r3.u32);
	// bl 0x82408430
	ctx.lr = 0x82480648;
	sub_82408430(ctx, base);
	// lwz r5,1296(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1296);
loc_8248064C:
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82418df8
	ctx.lr = 0x82480660;
	sub_82418DF8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480668"))) PPC_WEAK_FUNC(sub_82480668);
PPC_FUNC_IMPL(__imp__sub_82480668) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x824806c4
	if (ctx.cr6.eq) goto loc_824806C4;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// lwz r4,1248(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1248);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x824806b0
	if (!ctx.cr6.eq) goto loc_824806B0;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x8243a818
	ctx.lr = 0x824806A4;
	sub_8243A818(ctx, base);
	// stw r3,1248(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1248, ctx.r3.u32);
	// bl 0x8243bb48
	ctx.lr = 0x824806AC;
	sub_8243BB48(ctx, base);
	// lwz r4,1248(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1248);
loc_824806B0:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x824806B8;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bne cr6,0x824806c8
	if (!ctx.cr6.eq) goto loc_824806C8;
loc_824806C4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_824806C8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824806E0"))) PPC_WEAK_FUNC(sub_824806E0);
PPC_FUNC_IMPL(__imp__sub_824806E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824806E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82480790
	if (ctx.cr6.eq) goto loc_82480790;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// addi r29,r11,-28548
	ctx.r29.s64 = ctx.r11.s64 + -28548;
loc_82480708:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x8248075c
	if (ctx.cr6.eq) goto loc_8248075C;
loc_82480714:
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1264);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82480734
	if (!ctx.cr6.eq) goto loc_82480734;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82436d58
	ctx.lr = 0x82480728;
	sub_82436D58(ctx, base);
	// stw r3,1264(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1264, ctx.r3.u32);
	// bl 0x82446a80
	ctx.lr = 0x82480730;
	sub_82446A80(ctx, base);
	// lwz r4,1264(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1264);
loc_82480734:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x822e1bd0
	ctx.lr = 0x8248073C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82480790
	if (!ctx.cr6.eq) goto loc_82480790;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480714
	if (!ctx.cr6.eq) goto loc_82480714;
loc_8248075C:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,284(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82480770;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x82480784
	if (ctx.cr6.eq) goto loc_82480784;
	// lwz r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_82480784:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480708
	if (!ctx.cr6.eq) goto loc_82480708;
loc_82480790:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480798"))) PPC_WEAK_FUNC(sub_82480798);
PPC_FUNC_IMPL(__imp__sub_82480798) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824807A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82480848
	if (ctx.cr6.eq) goto loc_82480848;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// addi r29,r11,-28548
	ctx.r29.s64 = ctx.r11.s64 + -28548;
loc_824807C0:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82480814
	if (ctx.cr6.eq) goto loc_82480814;
loc_824807CC:
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1284);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x824807ec
	if (!ctx.cr6.eq) goto loc_824807EC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82437070
	ctx.lr = 0x824807E0;
	sub_82437070(ctx, base);
	// stw r3,1284(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1284, ctx.r3.u32);
	// bl 0x82447038
	ctx.lr = 0x824807E8;
	sub_82447038(ctx, base);
	// lwz r4,1284(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1284);
loc_824807EC:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x822e1bd0
	ctx.lr = 0x824807F4;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82480848
	if (!ctx.cr6.eq) goto loc_82480848;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824807cc
	if (!ctx.cr6.eq) goto loc_824807CC;
loc_82480814:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,284(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82480828;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x8248083c
	if (ctx.cr6.eq) goto loc_8248083C;
	// lwz r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_8248083C:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x824807c0
	if (!ctx.cr6.eq) goto loc_824807C0;
loc_82480848:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480850"))) PPC_WEAK_FUNC(sub_82480850);
PPC_FUNC_IMPL(__imp__sub_82480850) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82480858;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82480900
	if (ctx.cr6.eq) goto loc_82480900;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r31,-31971
	ctx.r31.s64 = -2095251456;
	// addi r29,r11,-28548
	ctx.r29.s64 = ctx.r11.s64 + -28548;
loc_82480878:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x824808cc
	if (ctx.cr6.eq) goto loc_824808CC;
loc_82480884:
	// lwz r4,1268(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1268);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x824808a4
	if (!ctx.cr6.eq) goto loc_824808A4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82436e10
	ctx.lr = 0x82480898;
	sub_82436E10(ctx, base);
	// stw r3,1268(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1268, ctx.r3.u32);
	// bl 0x82446ba8
	ctx.lr = 0x824808A0;
	sub_82446BA8(ctx, base);
	// lwz r4,1268(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1268);
loc_824808A4:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x822e1bd0
	ctx.lr = 0x824808AC;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82480900
	if (!ctx.cr6.eq) goto loc_82480900;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480884
	if (!ctx.cr6.eq) goto loc_82480884;
loc_824808CC:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,284(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824808E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
	// beq cr6,0x824808f4
	if (ctx.cr6.eq) goto loc_824808F4;
	// lwz r11,76(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 76);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_824808F4:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82480878
	if (!ctx.cr6.eq) goto loc_82480878;
loc_82480900:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480908"))) PPC_WEAK_FUNC(sub_82480908);
PPC_FUNC_IMPL(__imp__sub_82480908) {
	PPC_FUNC_PROLOGUE();
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r11,r11,21656
	ctx.r11.s64 = ctx.r11.s64 + 21656;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480920"))) PPC_WEAK_FUNC(sub_82480920);
PPC_FUNC_IMPL(__imp__sub_82480920) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r11,-7232
	ctx.r10.s64 = ctx.r11.s64 + -7232;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// addi r9,r11,21968
	ctx.r9.s64 = ctx.r11.s64 + 21968;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
	// lis r10,-31976
	ctx.r10.s64 = -2095579136;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r8,-13436(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13436);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r8,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r8.u32);
	// lis r8,-31976
	ctx.r8.s64 = -2095579136;
	// lwz r8,-13440(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -13440);
	// stw r8,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r8.u32);
	// lis r8,-31976
	ctx.r8.s64 = -2095579136;
	// lwz r8,-13428(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -13428);
	// stw r11,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r11.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r11.u32);
	// stw r11,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r11.u32);
	// stw r11,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r11.u32);
	// stw r8,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r8.u32);
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r11,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r11.u32);
	// stw r11,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r11.u32);
	// stw r11,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r11.u32);
	// stw r11,56(r31)
	PPC_STORE_U32(ctx.r31.u32 + 56, ctx.r11.u32);
	// stw r11,60(r31)
	PPC_STORE_U32(ctx.r31.u32 + 60, ctx.r11.u32);
	// stw r11,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r11.u32);
	// stw r11,68(r31)
	PPC_STORE_U32(ctx.r31.u32 + 68, ctx.r11.u32);
	// stw r11,72(r31)
	PPC_STORE_U32(ctx.r31.u32 + 72, ctx.r11.u32);
	// stw r11,76(r31)
	PPC_STORE_U32(ctx.r31.u32 + 76, ctx.r11.u32);
	// stw r11,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r11.u32);
	// stw r11,88(r31)
	PPC_STORE_U32(ctx.r31.u32 + 88, ctx.r11.u32);
	// stw r11,100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 100, ctx.r11.u32);
	// stw r11,104(r31)
	PPC_STORE_U32(ctx.r31.u32 + 104, ctx.r11.u32);
	// stw r11,108(r31)
	PPC_STORE_U32(ctx.r31.u32 + 108, ctx.r11.u32);
	// stw r11,112(r31)
	PPC_STORE_U32(ctx.r31.u32 + 112, ctx.r11.u32);
	// stw r10,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r10.u32);
	// stw r10,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r10.u32);
	// stw r10,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r10.u32);
	// stw r10,80(r31)
	PPC_STORE_U32(ctx.r31.u32 + 80, ctx.r10.u32);
	// stw r8,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r8.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r9.u32);
	// stw r10,92(r31)
	PPC_STORE_U32(ctx.r31.u32 + 92, ctx.r10.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x824809F8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480A10"))) PPC_WEAK_FUNC(sub_82480A10);
PPC_FUNC_IMPL(__imp__sub_82480A10) {
	PPC_FUNC_PROLOGUE();
	// lwz r10,108(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 108);
	// lwz r11,112(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 112);
	// add r10,r4,r10
	ctx.r10.u64 = ctx.r4.u64 + ctx.r10.u64;
	// add r11,r5,r11
	ctx.r11.u64 = ctx.r5.u64 + ctx.r11.u64;
	// stw r10,108(r3)
	PPC_STORE_U32(ctx.r3.u32 + 108, ctx.r10.u32);
	// stw r11,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480A30"))) PPC_WEAK_FUNC(sub_82480A30);
PPC_FUNC_IMPL(__imp__sub_82480A30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82480A38;
	__savegprlr_27(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// lwz r31,28(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 28);
	// lwz r30,28(r28)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + 28);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82480b8c
	if (ctx.cr6.eq) goto loc_82480B8C;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82480b8c
	if (ctx.cr6.eq) goto loc_82480B8C;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r27,r11,-28532
	ctx.r27.s64 = ctx.r11.s64 + -28532;
	// beq cr6,0x82480a78
	if (ctx.cr6.eq) goto loc_82480A78;
	// addi r3,r30,44
	ctx.r3.s64 = ctx.r30.s64 + 44;
	// b 0x82480a8c
	goto loc_82480A8C;
loc_82480A78:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82480A8C;
	sub_8243B750(ctx, base);
loc_82480A8C:
	// ld r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// beq cr6,0x82480aa8
	if (ctx.cr6.eq) goto loc_82480AA8;
	// addi r3,r31,44
	ctx.r3.s64 = ctx.r31.s64 + 44;
	// b 0x82480abc
	goto loc_82480ABC;
loc_82480AA8:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82480ABC;
	sub_8243B750(ctx, base);
loc_82480ABC:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82480b18
	if (!ctx.cr6.eq) goto loc_82480B18;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82480b18
	if (!ctx.cr6.eq) goto loc_82480B18;
	// lwz r11,32(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 32);
	// lwz r7,32(r29)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// mulli r9,r11,108
	ctx.r9.s64 = ctx.r11.s64 * 108;
	// lwz r10,196(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 196);
	// lwz r8,196(r30)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r30.u32 + 196);
	// mulli r11,r7,108
	ctx.r11.s64 = ctx.r7.s64 * 108;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// lwz r10,36(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 36);
	// subf r3,r10,r11
	ctx.r3.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82480B18:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82480b2c
	if (ctx.cr6.eq) goto loc_82480B2C;
	// addi r3,r31,44
	ctx.r3.s64 = ctx.r31.s64 + 44;
	// b 0x82480b40
	goto loc_82480B40;
loc_82480B2C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82480B40;
	sub_8243B750(ctx, base);
loc_82480B40:
	// ld r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// beq cr6,0x82480b5c
	if (ctx.cr6.eq) goto loc_82480B5C;
	// addi r3,r30,44
	ctx.r3.s64 = ctx.r30.s64 + 44;
	// b 0x82480b70
	goto loc_82480B70;
loc_82480B5C:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82480B70;
	sub_8243B750(ctx, base);
loc_82480B70:
	// ld r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// subf r3,r10,r11
	ctx.r3.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82480B8C:
	// cmplw cr6,r31,r30
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r30.u32, ctx.xer);
	// bne cr6,0x82480ba0
	if (!ctx.cr6.eq) goto loc_82480BA0;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82480BA0:
	// subfic r11,r31,0
	ctx.xer.ca = ctx.r31.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r31.s64;
	// subfe r11,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r11.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFFE;
	// addi r3,r11,1
	ctx.r3.s64 = ctx.r11.s64 + 1;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480BB8"))) PPC_WEAK_FUNC(sub_82480BB8);
PPC_FUNC_IMPL(__imp__sub_82480BB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// addi r11,r11,21936
	ctx.r11.s64 = ctx.r11.s64 + 21936;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82480bf0
	if (ctx.cr6.eq) goto loc_82480BF0;
	// bl 0x82b07040
	ctx.lr = 0x82480BF0;
	sub_82B07040(ctx, base);
loc_82480BF0:
	// lis r11,-32231
	ctx.r11.s64 = -2112290816;
	// clrlwi r10,r30,31
	ctx.r10.u64 = ctx.r30.u32 & 0x1;
	// addi r11,r11,-28120
	ctx.r11.s64 = ctx.r11.s64 + -28120;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82480c14
	if (ctx.cr6.eq) goto loc_82480C14;
	// bl 0x82545ee8
	ctx.lr = 0x82480C10;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82480C14:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480C30"))) PPC_WEAK_FUNC(sub_82480C30);
PPC_FUNC_IMPL(__imp__sub_82480C30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,16
	ctx.r7.s64 = 16;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r4,r11,-1
	ctx.r4.s64 = ctx.r11.s64 + -1;
	// add r11,r10,r9
	ctx.r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r31,-4(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + -4);
	// bl 0x82416660
	ctx.lr = 0x82480C6C;
	sub_82416660(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480C88"))) PPC_WEAK_FUNC(sub_82480C88);
PPC_FUNC_IMPL(__imp__sub_82480C88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82480C90;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r27,4(r30)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// ble cr6,0x82480d10
	if (!ctx.cr6.gt) goto loc_82480D10;
	// li r31,0
	ctx.r31.s64 = 0;
loc_82480CB0:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpw cr6,r9,r10
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82480cfc
	if (!ctx.cr6.eq) goto loc_82480CFC;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82480cfc
	if (!ctx.cr6.eq) goto loc_82480CFC;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82416660
	ctx.lr = 0x82480CF4;
	sub_82416660(ctx, base);
	// addi r29,r29,-1
	ctx.r29.s64 = ctx.r29.s64 + -1;
	// addi r31,r31,-8
	ctx.r31.s64 = ctx.r31.s64 + -8;
loc_82480CFC:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// addi r31,r31,8
	ctx.r31.s64 = ctx.r31.s64 + 8;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82480cb0
	if (ctx.cr6.lt) goto loc_82480CB0;
loc_82480D10:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// subf r3,r11,r27
	ctx.r3.s64 = ctx.r27.s64 - ctx.r11.s64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480D20"))) PPC_WEAK_FUNC(sub_82480D20);
PPC_FUNC_IMPL(__imp__sub_82480D20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82480D28;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x82416660
	ctx.lr = 0x82480D48;
	sub_82416660(ctx, base);
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82480d80
	if (ctx.cr6.eq) goto loc_82480D80;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82480d6c
	if (!ctx.cr6.eq) goto loc_82480D6C;
	// bl 0x82545cc0
	ctx.lr = 0x82480D68;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82480D6C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82480D80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82480D80:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480D98"))) PPC_WEAK_FUNC(sub_82480D98);
PPC_FUNC_IMPL(__imp__sub_82480D98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// stw r4,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r4.u32);
	// beq cr6,0x82480dc0
	if (ctx.cr6.eq) goto loc_82480DC0;
	// lwz r11,76(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 76);
	// b 0x82480dc4
	goto loc_82480DC4;
loc_82480DC0:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82480DC4:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// bl 0x82480410
	ctx.lr = 0x82480DD0;
	sub_82480410(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82480DE8"))) PPC_WEAK_FUNC(sub_82480DE8);
PPC_FUNC_IMPL(__imp__sub_82480DE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82480DF0;
	__savegprlr_26(ctx, base);
	// stwu r1,-416(r1)
	ea = -416 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,2
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 2, ctx.xer);
	// blt cr6,0x82480fc8
	if (ctx.cr6.lt) goto loc_82480FC8;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// li r5,248
	ctx.r5.s64 = 248;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r11,r10,-4
	ctx.r11.s64 = ctx.r10.s64 + -4;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// bl 0x82e29500
	ctx.lr = 0x82480E24;
	sub_82E29500(ctx, base);
	// addi r26,r1,96
	ctx.r26.s64 = ctx.r1.s64 + 96;
loc_82480E28:
	// ld r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r26.u32 + 0);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lwz r31,80(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r28,84(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subf r11,r31,r28
	ctx.r11.s64 = ctx.r28.s64 - ctx.r31.s64;
	// srawi r11,r11,2
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x3) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 2;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 8, ctx.xer);
	// ble cr6,0x82480f5c
	if (!ctx.cr6.gt) goto loc_82480F5C;
loc_82480E4C:
	// srawi r11,r11,1
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x1) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 1;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
	// addze r11,r11
	temp.s64 = ctx.r11.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r11.u32;
	ctx.r11.s64 = temp.s64;
	// addi r30,r28,4
	ctx.r30.s64 = ctx.r28.s64 + 4;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r10,r11,r31
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// stwx r9,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r9.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
loc_82480E70:
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmplw cr6,r29,r28
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r28.u32, ctx.xer);
	// bgt cr6,0x82480e90
	if (ctx.cr6.gt) goto loc_82480E90;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x82480a30
	ctx.lr = 0x82480E88;
	sub_82480A30(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x82480e70
	if (!ctx.cr6.gt) goto loc_82480E70;
loc_82480E90:
	// addi r30,r30,-4
	ctx.r30.s64 = ctx.r30.s64 + -4;
	// cmplw cr6,r30,r31
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r31.u32, ctx.xer);
	// ble cr6,0x82480eb0
	if (!ctx.cr6.gt) goto loc_82480EB0;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x82480a30
	ctx.lr = 0x82480EA8;
	sub_82480A30(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bge cr6,0x82480e90
	if (!ctx.cr6.lt) goto loc_82480E90;
loc_82480EB0:
	// cmplw cr6,r29,r30
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r30.u32, ctx.xer);
	// bgt cr6,0x82480ecc
	if (ctx.cr6.gt) goto loc_82480ECC;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// b 0x82480e70
	goto loc_82480E70;
loc_82480ECC:
	// subf r10,r31,r30
	ctx.r10.s64 = ctx.r30.s64 - ctx.r31.s64;
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// subf r8,r29,r28
	ctx.r8.s64 = ctx.r28.s64 - ctx.r29.s64;
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// rlwinm r8,r8,0,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFC;
	// rlwinm r10,r10,0,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFC;
	// stw r9,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r9.u32);
	// cmpw cr6,r10,r8
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, ctx.xer);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// blt cr6,0x82480f24
	if (ctx.cr6.lt) goto loc_82480F24;
	// addi r11,r31,4
	ctx.r11.s64 = ctx.r31.s64 + 4;
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// bge cr6,0x82480f14
	if (!ctx.cr6.lt) goto loc_82480F14;
	// addi r11,r30,-4
	ctx.r11.s64 = ctx.r30.s64 + -4;
	// stw r31,0(r26)
	PPC_STORE_U32(ctx.r26.u32 + 0, ctx.r31.u32);
	// stw r11,4(r26)
	PPC_STORE_U32(ctx.r26.u32 + 4, ctx.r11.u32);
	// addi r26,r26,8
	ctx.r26.s64 = ctx.r26.s64 + 8;
loc_82480F14:
	// cmplw cr6,r28,r29
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r29.u32, ctx.xer);
	// ble cr6,0x82480fb8
	if (!ctx.cr6.gt) goto loc_82480FB8;
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
	// b 0x82480f48
	goto loc_82480F48;
loc_82480F24:
	// cmplw cr6,r28,r29
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r29.u32, ctx.xer);
	// ble cr6,0x82480f38
	if (!ctx.cr6.gt) goto loc_82480F38;
	// stw r29,0(r26)
	PPC_STORE_U32(ctx.r26.u32 + 0, ctx.r29.u32);
	// stw r28,4(r26)
	PPC_STORE_U32(ctx.r26.u32 + 4, ctx.r28.u32);
	// addi r26,r26,8
	ctx.r26.s64 = ctx.r26.s64 + 8;
loc_82480F38:
	// addi r11,r31,4
	ctx.r11.s64 = ctx.r31.s64 + 4;
	// cmplw cr6,r11,r30
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, ctx.r30.u32, ctx.xer);
	// bge cr6,0x82480fb8
	if (!ctx.cr6.lt) goto loc_82480FB8;
	// addi r28,r30,-4
	ctx.r28.s64 = ctx.r30.s64 + -4;
loc_82480F48:
	// subf r11,r31,r28
	ctx.r11.s64 = ctx.r28.s64 - ctx.r31.s64;
	// srawi r11,r11,2
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x3) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 2;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 8, ctx.xer);
	// bgt cr6,0x82480e4c
	if (ctx.cr6.gt) goto loc_82480E4C;
loc_82480F5C:
	// cmplw cr6,r28,r31
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r31.u32, ctx.xer);
	// ble cr6,0x82480fb8
	if (!ctx.cr6.gt) goto loc_82480FB8;
	// addi r27,r31,4
	ctx.r27.s64 = ctx.r31.s64 + 4;
loc_82480F68:
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
	// cmplw cr6,r30,r28
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r28.u32, ctx.xer);
	// bgt cr6,0x82480f9c
	if (ctx.cr6.gt) goto loc_82480F9C;
loc_82480F78:
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x82480a30
	ctx.lr = 0x82480F84;
	sub_82480A30(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x82480f90
	if (!ctx.cr6.gt) goto loc_82480F90;
	// mr r29,r30
	ctx.r29.u64 = ctx.r30.u64;
loc_82480F90:
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmplw cr6,r30,r28
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r28.u32, ctx.xer);
	// ble cr6,0x82480f78
	if (!ctx.cr6.gt) goto loc_82480F78;
loc_82480F9C:
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
	// addi r28,r28,-4
	ctx.r28.s64 = ctx.r28.s64 + -4;
	// cmplw cr6,r28,r31
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r31.u32, ctx.xer);
	// bgt cr6,0x82480f68
	if (ctx.cr6.gt) goto loc_82480F68;
loc_82480FB8:
	// addi r26,r26,-8
	ctx.r26.s64 = ctx.r26.s64 + -8;
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// cmplw cr6,r26,r11
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, ctx.r11.u32, ctx.xer);
	// bge cr6,0x82480e28
	if (!ctx.cr6.lt) goto loc_82480E28;
loc_82480FC8:
	// addi r1,r1,416
	ctx.r1.s64 = ctx.r1.s64 + 416;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82480FD0"))) PPC_WEAK_FUNC(sub_82480FD0);
PPC_FUNC_IMPL(__imp__sub_82480FD0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82480FD8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,344(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 344);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82480FF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82481044
	if (ctx.cr6.eq) goto loc_82481044;
	// lis r31,-31970
	ctx.r31.s64 = -2095185920;
	// lwz r30,19848(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82481024
	if (!ctx.cr6.eq) goto loc_82481024;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r3,r11,-28548
	ctx.r3.s64 = ctx.r11.s64 + -28548;
	// bl 0x82462518
	ctx.lr = 0x82481018;
	sub_82462518(ctx, base);
	// stw r3,19848(r31)
	PPC_STORE_U32(ctx.r31.u32 + 19848, ctx.r3.u32);
	// bl 0x8245f220
	ctx.lr = 0x82481020;
	sub_8245F220(ctx, base);
	// lwz r30,19848(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 19848);
loc_82481024:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,276(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 276);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82481038;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplw cr6,r3,r30
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, ctx.r30.u32, ctx.xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x82481048
	if (!ctx.cr6.eq) goto loc_82481048;
loc_82481044:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82481048:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82481050"))) PPC_WEAK_FUNC(sub_82481050);
PPC_FUNC_IMPL(__imp__sub_82481050) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// addi r11,r11,5312
	ctx.r11.s64 = ctx.r11.s64 + 5312;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// beq cr6,0x82481070
	if (ctx.cr6.eq) goto loc_82481070;
	// lwz r9,52(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 52);
	// b 0x82481074
	goto loc_82481074;
loc_82481070:
	// mr r9,r11
	ctx.r9.u64 = ctx.r11.u64;
loc_82481074:
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// stw r4,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r4.u32);
	// li r9,-1
	ctx.r9.s64 = -1;
	// addi r10,r10,22204
	ctx.r10.s64 = ctx.r10.s64 + 22204;
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r11.u32);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lwz r10,52(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 52);
	// std r9,36(r3)
	PPC_STORE_U64(ctx.r3.u32 + 36, ctx.r9.u64);
	// stw r10,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, ctx.r10.u32);
	// stw r11,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r11.u32);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r11.u32);
	// stw r11,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824810B8"))) PPC_WEAK_FUNC(sub_824810B8);
PPC_FUNC_IMPL(__imp__sub_824810B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x824810C0;
	__savegprlr_28(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// li r28,0
	ctx.r28.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r11,19840(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19840);
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82481158
	if (ctx.cr6.eq) goto loc_82481158;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// li r28,3
	ctx.r28.s64 = 3;
	// bl 0x824643b8
	ctx.lr = 0x824810F4;
	sub_824643B8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x82481110
	if (ctx.cr6.eq) goto loc_82481110;
	// lwz r30,0(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82481114
	goto loc_82481114;
loc_82481110:
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
loc_82481114:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x824643b8
	ctx.lr = 0x82481124;
	sub_824643B8(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82481144
	if (ctx.cr6.eq) goto loc_82481144;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// bl 0x82e28c50
	ctx.lr = 0x8248113C;
	sub_82E28C50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82481164
	goto loc_82481164;
loc_82481144:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82e28c50
	ctx.lr = 0x82481150;
	sub_82E28C50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82481164
	goto loc_82481164;
loc_82481158:
	// lwz r11,8(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8);
	// subf r31,r10,r11
	ctx.r31.s64 = ctx.r11.s64 - ctx.r10.s64;
loc_82481164:
	// rlwinm r11,r28,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x8248117c
	if (ctx.cr6.eq) goto loc_8248117C;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// rlwinm r28,r28,0,31,29
	ctx.r28.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x8248117C;
	sub_82309A60(ctx, base);
loc_8248117C:
	// clrlwi r11,r28,31
	ctx.r11.u64 = ctx.r28.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82481190
	if (ctx.cr6.eq) goto loc_82481190;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82481190;
	sub_82309A60(ctx, base);
loc_82481190:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824811A0"))) PPC_WEAK_FUNC(sub_824811A0);
PPC_FUNC_IMPL(__imp__sub_824811A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x824811A8;
	__savegprlr_26(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// li r26,0
	ctx.r26.s64 = 0;
	// addi r11,r11,19844
	ctx.r11.s64 = ctx.r11.s64 + 19844;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + -4);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82481298
	if (ctx.cr6.eq) goto loc_82481298;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lwz r11,0(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// li r26,3
	ctx.r26.s64 = 3;
	// addi r30,r10,-26176
	ctx.r30.s64 = ctx.r10.s64 + -26176;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r29,r10,-28532
	ctx.r29.s64 = ctx.r10.s64 + -28532;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bne cr6,0x824811fc
	if (!ctx.cr6.eq) goto loc_824811FC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x823099b0
	ctx.lr = 0x824811F8;
	sub_823099B0(ctx, base);
	// b 0x8248121c
	goto loc_8248121C;
loc_824811FC:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x82481214
	if (!ctx.cr6.eq) goto loc_82481214;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x82481210;
	sub_823099B0(ctx, base);
	// b 0x8248121c
	goto loc_8248121C;
loc_82481214:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x8248121C;
	sub_8242BA60(ctx, base);
loc_8248121C:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r28,104(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82481238
	if (!ctx.cr6.eq) goto loc_82481238;
	// mr r28,r31
	ctx.r28.u64 = ctx.r31.u64;
loc_82481238:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82481254
	if (!ctx.cr6.eq) goto loc_82481254;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x823099b0
	ctx.lr = 0x82481250;
	sub_823099B0(ctx, base);
	// b 0x82481274
	goto loc_82481274;
loc_82481254:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x8248126c
	if (!ctx.cr6.eq) goto loc_8248126C;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x82481268;
	sub_823099B0(ctx, base);
	// b 0x82481274
	goto loc_82481274;
loc_8248126C:
	// addi r4,r11,44
	ctx.r4.s64 = ctx.r11.s64 + 44;
	// bl 0x8242ba60
	ctx.lr = 0x82481274;
	sub_8242BA60(ctx, base);
loc_82481274:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82481288
	if (!ctx.cr6.eq) goto loc_82481288;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82481288:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x82e28c50
	ctx.lr = 0x82481290;
	sub_82E28C50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x824812bc
	goto loc_824812BC;
loc_82481298:
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824812b0
	if (ctx.cr6.eq) goto loc_824812B0;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// b 0x824812b8
	goto loc_824812B8;
loc_824812B0:
	// lwz r11,12(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// lwz r10,12(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 12);
loc_824812B8:
	// subf r31,r10,r11
	ctx.r31.s64 = ctx.r11.s64 - ctx.r10.s64;
loc_824812BC:
	// rlwinm r11,r26,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824812d4
	if (ctx.cr6.eq) goto loc_824812D4;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// rlwinm r26,r26,0,31,29
	ctx.r26.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x824812D4;
	sub_82309A60(ctx, base);
loc_824812D4:
	// clrlwi r11,r26,31
	ctx.r11.u64 = ctx.r26.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x824812e8
	if (ctx.cr6.eq) goto loc_824812E8;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x824812E8;
	sub_82309A60(ctx, base);
loc_824812E8:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824812F8"))) PPC_WEAK_FUNC(sub_824812F8);
PPC_FUNC_IMPL(__imp__sub_824812F8) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r10,r11,-7232
	ctx.r10.s64 = ctx.r11.s64 + -7232;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// addi r9,r11,22424
	ctx.r9.s64 = ctx.r11.s64 + 22424;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lis r10,-31976
	ctx.r10.s64 = -2095579136;
	// lwz r8,-13436(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13436);
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// lis r8,-31976
	ctx.r8.s64 = -2095579136;
	// lwz r8,-13440(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -13440);
	// stw r8,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r8.u32);
	// lis r8,-31976
	ctx.r8.s64 = -2095579136;
	// lwz r8,-13428(r8)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r8.u32 + -13428);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r11.u32);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r11.u32);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r11.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, ctx.r11.u32);
	// stw r8,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r8.u32);
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r11.u32);
	// stw r11,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r11.u32);
	// stw r10,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, ctx.r10.u32);
	// stw r10,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r10.u32);
	// stw r10,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r10.u32);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r11.u32);
	// stw r11,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r11.u32);
	// stw r11,60(r3)
	PPC_STORE_U32(ctx.r3.u32 + 60, ctx.r11.u32);
	// stw r11,64(r3)
	PPC_STORE_U32(ctx.r3.u32 + 64, ctx.r11.u32);
	// stw r11,68(r3)
	PPC_STORE_U32(ctx.r3.u32 + 68, ctx.r11.u32);
	// stw r11,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r11.u32);
	// stw r11,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, ctx.r11.u32);
	// stw r10,80(r3)
	PPC_STORE_U32(ctx.r3.u32 + 80, ctx.r10.u32);
	// stw r11,84(r3)
	PPC_STORE_U32(ctx.r3.u32 + 84, ctx.r11.u32);
	// stw r11,92(r3)
	PPC_STORE_U32(ctx.r3.u32 + 92, ctx.r11.u32);
	// stw r8,96(r3)
	PPC_STORE_U32(ctx.r3.u32 + 96, ctx.r8.u32);
	// stw r11,100(r3)
	PPC_STORE_U32(ctx.r3.u32 + 100, ctx.r11.u32);
	// stw r11,104(r3)
	PPC_STORE_U32(ctx.r3.u32 + 104, ctx.r11.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r11,108(r3)
	PPC_STORE_U32(ctx.r3.u32 + 108, ctx.r11.u32);
	// stw r11,112(r3)
	PPC_STORE_U32(ctx.r3.u32 + 112, ctx.r11.u32);
	// stw r11,116(r3)
	PPC_STORE_U32(ctx.r3.u32 + 116, ctx.r11.u32);
	// stw r11,120(r3)
	PPC_STORE_U32(ctx.r3.u32 + 120, ctx.r11.u32);
	// stw r10,88(r3)
	PPC_STORE_U32(ctx.r3.u32 + 88, ctx.r10.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824813B0"))) PPC_WEAK_FUNC(sub_824813B0);
PPC_FUNC_IMPL(__imp__sub_824813B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,61
	ctx.r9.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22572
	ctx.r4.s64 = ctx.r10.s64 + 22572;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824813FC;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,11
	ctx.r10.s64 = 11;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,65
	ctx.r11.s64 = 65;
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,19
	ctx.r11.s64 = 19;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,124
	ctx.r11.s64 = 124;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// li r11,203
	ctx.r11.s64 = 203;
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// li r11,169
	ctx.r11.s64 = 169;
	// stb r10,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r10.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,22
	ctx.r11.s64 = 22;
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r11.u8);
	// li r11,12
	ctx.r11.s64 = 12;
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r11,57
	ctx.r11.s64 = 57;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,177
	ctx.r11.s64 = 177;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82481548;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82481568"))) PPC_WEAK_FUNC(sub_82481568);
PPC_FUNC_IMPL(__imp__sub_82481568) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,61
	ctx.r9.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22588
	ctx.r4.s64 = ctx.r10.s64 + 22588;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824815B4;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,11
	ctx.r10.s64 = 11;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,66
	ctx.r11.s64 = 66;
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,204
	ctx.r11.s64 = 204;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,170
	ctx.r11.s64 = 170;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,22
	ctx.r11.s64 = 22;
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r11.u8);
	// li r11,55
	ctx.r11.s64 = 55;
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r10,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r10.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r11,57
	ctx.r11.s64 = 57;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,180
	ctx.r11.s64 = 180;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824816F8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82481718"))) PPC_WEAK_FUNC(sub_82481718);
PPC_FUNC_IMPL(__imp__sub_82481718) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,61
	ctx.r9.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22612
	ctx.r4.s64 = ctx.r10.s64 + 22612;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82481764;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,11
	ctx.r9.s64 = 11;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,178
	ctx.r10.s64 = 178;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,67
	ctx.r11.s64 = 67;
	// stb r9,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r9.u8);
	// li r9,83
	ctx.r9.s64 = 83;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,19
	ctx.r11.s64 = 19;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// li r11,207
	ctx.r11.s64 = 207;
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// li r11,217
	ctx.r11.s64 = 217;
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,30
	ctx.r11.s64 = 30;
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r9,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r9.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r11.u8);
	// li r11,45
	ctx.r11.s64 = 45;
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r11,57
	ctx.r11.s64 = 57;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r10,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r10.u8);
	// bl 0x82b06418
	ctx.lr = 0x824818AC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824818D0"))) PPC_WEAK_FUNC(sub_824818D0);
PPC_FUNC_IMPL(__imp__sub_824818D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824818D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22632
	ctx.r4.s64 = ctx.r10.s64 + 22632;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82481914;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,36
	ctx.r10.s64 = 36;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,68
	ctx.r11.s64 = 68;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,5
	ctx.r9.s64 = 5;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824819F4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82481A08"))) PPC_WEAK_FUNC(sub_82481A08);
PPC_FUNC_IMPL(__imp__sub_82481A08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,61
	ctx.r9.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22644
	ctx.r4.s64 = ctx.r10.s64 + 22644;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82481A54;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,11
	ctx.r10.s64 = 11;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,206
	ctx.r11.s64 = 206;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,218
	ctx.r11.s64 = 218;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,30
	ctx.r11.s64 = 30;
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r10,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r10.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r11,57
	ctx.r11.s64 = 57;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,181
	ctx.r11.s64 = 181;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82481B98;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82481BB8"))) PPC_WEAK_FUNC(sub_82481BB8);
PPC_FUNC_IMPL(__imp__sub_82481BB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82481BC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22664
	ctx.r4.s64 = ctx.r10.s64 + 22664;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82481BFC;
	sub_822E0818(ctx, base);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,38
	ctx.r9.s64 = 38;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,36
	ctx.r10.s64 = 36;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,28
	ctx.r9.s64 = 28;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82481CDC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82481CF0"))) PPC_WEAK_FUNC(sub_82481CF0);
PPC_FUNC_IMPL(__imp__sub_82481CF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82481CF8;
	__savegprlr_29(ctx, base);
	// stwu r1,-400(r1)
	ea = -400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,280
	ctx.r9.s64 = 280;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22680
	ctx.r4.s64 = ctx.r10.s64 + 22680;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82481D34;
	sub_822E0818(ctx, base);
	// li r10,129
	ctx.r10.s64 = 129;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,7
	ctx.r8.s64 = 7;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r9,57
	ctx.r9.s64 = 57;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// li r10,115
	ctx.r10.s64 = 115;
	// stb r8,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r8.u8);
	// li r8,8
	ctx.r8.s64 = 8;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,2
	ctx.r10.s64 = 2;
	// stb r8,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r8.u8);
	// li r8,9
	ctx.r8.s64 = 9;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r10,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r10.u8);
	// li r10,202
	ctx.r10.s64 = 202;
	// stb r8,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r8.u8);
	// li r8,10
	ctx.r8.s64 = 10;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// li r10,244
	ctx.r10.s64 = 244;
	// stb r8,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r8.u8);
	// li r8,11
	ctx.r8.s64 = 11;
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r10,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r10.u8);
	// li r10,60
	ctx.r10.s64 = 60;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r10,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r10.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r31.u8);
	// stb r8,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r8.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r11,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r11.u8);
	// li r11,21
	ctx.r11.s64 = 21;
	// li r8,12
	ctx.r8.s64 = 12;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r11.u8);
	// li r11,22
	ctx.r11.s64 = 22;
	// stb r8,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r8.u8);
	// li r8,13
	ctx.r8.s64 = 13;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r11.u8);
	// li r11,24
	ctx.r11.s64 = 24;
	// stb r8,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r8.u8);
	// li r8,14
	ctx.r8.s64 = 14;
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r11,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r11.u8);
	// li r11,26
	ctx.r11.s64 = 26;
	// stb r8,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r8.u8);
	// li r8,15
	ctx.r8.s64 = 15;
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r11,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r11.u8);
	// li r11,27
	ctx.r11.s64 = 27;
	// stb r8,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r8.u8);
	// li r8,17
	ctx.r8.s64 = 17;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r11,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r11.u8);
	// li r11,30
	ctx.r11.s64 = 30;
	// stb r8,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r8.u8);
	// li r8,18
	ctx.r8.s64 = 18;
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r11,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r11.u8);
	// li r11,31
	ctx.r11.s64 = 31;
	// stb r8,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r8.u8);
	// li r8,19
	ctx.r8.s64 = 19;
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r8,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r8.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r31,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r31.u8);
	// stb r11,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r11.u8);
	// li r8,37
	ctx.r8.s64 = 37;
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// li r11,33
	ctx.r11.s64 = 33;
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r31,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r31.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r8,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r8.u8);
	// li r8,38
	ctx.r8.s64 = 38;
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r11.u8);
	// li r11,34
	ctx.r11.s64 = 34;
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// stb r8,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r8.u8);
	// li r8,39
	ctx.r8.s64 = 39;
	// stb r11,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r11.u8);
	// li r11,35
	ctx.r11.s64 = 35;
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r8,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r8.u8);
	// li r8,40
	ctx.r8.s64 = 40;
	// stb r11,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r8,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r8.u8);
	// li r8,41
	ctx.r8.s64 = 41;
	// stb r11,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r11.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r8,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r8.u8);
	// li r8,42
	ctx.r8.s64 = 42;
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r31,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r31.u8);
	// stb r8,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r8.u8);
	// li r8,43
	ctx.r8.s64 = 43;
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r8,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r8.u8);
	// li r8,48
	ctx.r8.s64 = 48;
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r8,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r8.u8);
	// li r8,49
	ctx.r8.s64 = 49;
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r31,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r31.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r31,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r31.u8);
	// stb r8,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r8.u8);
	// li r8,50
	ctx.r8.s64 = 50;
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r31.u8);
	// stb r8,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r8.u8);
	// li r8,51
	ctx.r8.s64 = 51;
	// stb r31,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r31.u8);
	// stb r31,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r31.u8);
	// stb r31,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r31.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r8,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r8.u8);
	// li r8,52
	ctx.r8.s64 = 52;
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r31,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r31.u8);
	// stb r31,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r31.u8);
	// stb r31,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r31.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// stb r8,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r8.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r10,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r10.u8);
	// li r10,61
	ctx.r10.s64 = 61;
	// li r8,53
	ctx.r8.s64 = 53;
	// stb r9,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r9.u8);
	// li r9,58
	ctx.r9.s64 = 58;
	// stb r31,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r31.u8);
	// stb r31,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// li r5,280
	ctx.r5.s64 = 280;
	// stb r10,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r10.u8);
	// li r10,64
	ctx.r10.s64 = 64;
	// stb r8,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r8.u8);
	// li r8,54
	ctx.r8.s64 = 54;
	// stb r9,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r9.u8);
	// li r9,59
	ctx.r9.s64 = 59;
	// stb r31,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r10,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r10.u8);
	// li r10,65
	ctx.r10.s64 = 65;
	// stb r8,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r8.u8);
	// li r8,55
	ctx.r8.s64 = 55;
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r31,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r31.u8);
	// stb r10,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r10.u8);
	// li r10,63
	ctx.r10.s64 = 63;
	// stb r8,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r8.u8);
	// stb r31,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r31.u8);
	// stb r31,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r31.u8);
	// stb r31,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r31.u8);
	// stb r10,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r10.u8);
	// li r10,66
	ctx.r10.s64 = 66;
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// stb r31,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r31.u8);
	// stb r31,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r31.u8);
	// stb r31,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r31.u8);
	// stb r10,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r10.u8);
	// li r10,67
	ctx.r10.s64 = 67;
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// stb r31,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r31.u8);
	// stb r9,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r9.u8);
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// stb r10,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r10.u8);
	// li r10,68
	ctx.r10.s64 = 68;
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// stb r31,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r31.u8);
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// stb r10,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r10.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r31.u8);
	// stb r31,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r31.u8);
	// stb r31,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r31.u8);
	// stb r31,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r31.u8);
	// stb r10,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r10.u8);
	// li r10,70
	ctx.r10.s64 = 70;
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r31,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r31.u8);
	// stb r31,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r31.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r31,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r31.u8);
	// stb r31,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r31,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r31.u8);
	// stb r31,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r31.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r31,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r31.u8);
	// stb r31,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r31.u8);
	// stb r31,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r31.u8);
	// stb r31,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r31.u8);
	// stb r31,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r31.u8);
	// stb r31,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r31.u8);
	// stb r31,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r31.u8);
	// stb r31,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r31.u8);
	// stb r10,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r10.u8);
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// li r10,71
	ctx.r10.s64 = 71;
	// stb r11,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r31,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r31.u8);
	// stb r31,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r31.u8);
	// stb r10,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r10.u8);
	// li r10,72
	ctx.r10.s64 = 72;
	// stb r31,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r31.u8);
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// stb r31,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r31.u8);
	// stb r31,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r31.u8);
	// stb r10,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r10.u8);
	// li r10,73
	ctx.r10.s64 = 73;
	// stb r31,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r31.u8);
	// stb r31,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r31.u8);
	// stb r31,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r31.u8);
	// stb r31,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r31.u8);
	// stb r10,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r10.u8);
	// li r10,74
	ctx.r10.s64 = 74;
	// stb r31,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r31.u8);
	// stb r31,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r31.u8);
	// stb r31,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r31.u8);
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r10,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r10.u8);
	// li r10,75
	ctx.r10.s64 = 75;
	// stb r31,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r31.u8);
	// stb r31,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r31.u8);
	// stb r31,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r31.u8);
	// stb r11,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r11.u8);
	// stb r10,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r31,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r31.u8);
	// stb r31,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r31.u8);
	// stb r31,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r31.u8);
	// stb r31,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r31.u8);
	// stb r10,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r10.u8);
	// bl 0x82b06418
	ctx.lr = 0x824822AC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,400
	ctx.r1.s64 = ctx.r1.s64 + 400;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824822C0"))) PPC_WEAK_FUNC(sub_824822C0);
PPC_FUNC_IMPL(__imp__sub_824822C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824822C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r31,r29,8
	ctx.r31.s64 = ctx.r29.s64 + 8;
	// addi r30,r29,20
	ctx.r30.s64 = ctx.r29.s64 + 20;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// addi r4,r10,24664
	ctx.r4.s64 = ctx.r10.s64 + 24664;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r11.u32);
	// bl 0x8243b750
	ctx.lr = 0x82482314;
	sub_8243B750(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,24620
	ctx.r4.s64 = ctx.r11.s64 + 24620;
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stw r9,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82482334;
	sub_822E0818(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482340;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248235c
	if (ctx.cr6.eq) goto loc_8248235C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24596
	ctx.r4.s64 = ctx.r11.s64 + 24596;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248235C;
	sub_8243B750(ctx, base);
loc_8248235C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482368;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482384
	if (ctx.cr6.eq) goto loc_82482384;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24572
	ctx.r4.s64 = ctx.r11.s64 + 24572;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482384;
	sub_8243B750(ctx, base);
loc_82482384:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482390;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824823ac
	if (ctx.cr6.eq) goto loc_824823AC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24548
	ctx.r4.s64 = ctx.r11.s64 + 24548;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824823AC;
	sub_8243B750(ctx, base);
loc_824823AC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824823B8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824823d4
	if (ctx.cr6.eq) goto loc_824823D4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24524
	ctx.r4.s64 = ctx.r11.s64 + 24524;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824823D4;
	sub_8243B750(ctx, base);
loc_824823D4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824823E0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824823fc
	if (ctx.cr6.eq) goto loc_824823FC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24500
	ctx.r4.s64 = ctx.r11.s64 + 24500;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824823FC;
	sub_8243B750(ctx, base);
loc_824823FC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482408;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482424
	if (ctx.cr6.eq) goto loc_82482424;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24476
	ctx.r4.s64 = ctx.r11.s64 + 24476;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482424;
	sub_8243B750(ctx, base);
loc_82482424:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482430;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248244c
	if (ctx.cr6.eq) goto loc_8248244C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24448
	ctx.r4.s64 = ctx.r11.s64 + 24448;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248244C;
	sub_8243B750(ctx, base);
loc_8248244C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482458;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482474
	if (ctx.cr6.eq) goto loc_82482474;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24416
	ctx.r4.s64 = ctx.r11.s64 + 24416;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482474;
	sub_8243B750(ctx, base);
loc_82482474:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482480;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248249c
	if (ctx.cr6.eq) goto loc_8248249C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24388
	ctx.r4.s64 = ctx.r11.s64 + 24388;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248249C;
	sub_8243B750(ctx, base);
loc_8248249C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824824A8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824824c4
	if (ctx.cr6.eq) goto loc_824824C4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24360
	ctx.r4.s64 = ctx.r11.s64 + 24360;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824824C4;
	sub_8243B750(ctx, base);
loc_824824C4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824824D0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824824ec
	if (ctx.cr6.eq) goto loc_824824EC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24328
	ctx.r4.s64 = ctx.r11.s64 + 24328;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824824EC;
	sub_8243B750(ctx, base);
loc_824824EC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824824F8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482514
	if (ctx.cr6.eq) goto loc_82482514;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24296
	ctx.r4.s64 = ctx.r11.s64 + 24296;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482514;
	sub_8243B750(ctx, base);
loc_82482514:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482520;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248253c
	if (ctx.cr6.eq) goto loc_8248253C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24264
	ctx.r4.s64 = ctx.r11.s64 + 24264;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248253C;
	sub_8243B750(ctx, base);
loc_8248253C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482548;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482564
	if (ctx.cr6.eq) goto loc_82482564;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24232
	ctx.r4.s64 = ctx.r11.s64 + 24232;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482564;
	sub_8243B750(ctx, base);
loc_82482564:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482570;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248258c
	if (ctx.cr6.eq) goto loc_8248258C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24204
	ctx.r4.s64 = ctx.r11.s64 + 24204;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248258C;
	sub_8243B750(ctx, base);
loc_8248258C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482598;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824825b4
	if (ctx.cr6.eq) goto loc_824825B4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24164
	ctx.r4.s64 = ctx.r11.s64 + 24164;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824825B4;
	sub_8243B750(ctx, base);
loc_824825B4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824825C0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824825dc
	if (ctx.cr6.eq) goto loc_824825DC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24128
	ctx.r4.s64 = ctx.r11.s64 + 24128;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824825DC;
	sub_8243B750(ctx, base);
loc_824825DC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824825E8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482604
	if (ctx.cr6.eq) goto loc_82482604;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24100
	ctx.r4.s64 = ctx.r11.s64 + 24100;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482604;
	sub_8243B750(ctx, base);
loc_82482604:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482610;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248262c
	if (ctx.cr6.eq) goto loc_8248262C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24068
	ctx.r4.s64 = ctx.r11.s64 + 24068;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248262C;
	sub_8243B750(ctx, base);
loc_8248262C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482638;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482654
	if (ctx.cr6.eq) goto loc_82482654;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24040
	ctx.r4.s64 = ctx.r11.s64 + 24040;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482654;
	sub_8243B750(ctx, base);
loc_82482654:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482660;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248267c
	if (ctx.cr6.eq) goto loc_8248267C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,24012
	ctx.r4.s64 = ctx.r11.s64 + 24012;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248267C;
	sub_8243B750(ctx, base);
loc_8248267C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482688;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824826a4
	if (ctx.cr6.eq) goto loc_824826A4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23980
	ctx.r4.s64 = ctx.r11.s64 + 23980;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824826A4;
	sub_8243B750(ctx, base);
loc_824826A4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824826B0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824826cc
	if (ctx.cr6.eq) goto loc_824826CC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23952
	ctx.r4.s64 = ctx.r11.s64 + 23952;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824826CC;
	sub_8243B750(ctx, base);
loc_824826CC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824826D8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824826f4
	if (ctx.cr6.eq) goto loc_824826F4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23928
	ctx.r4.s64 = ctx.r11.s64 + 23928;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824826F4;
	sub_8243B750(ctx, base);
loc_824826F4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482700;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248271c
	if (ctx.cr6.eq) goto loc_8248271C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23900
	ctx.r4.s64 = ctx.r11.s64 + 23900;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248271C;
	sub_8243B750(ctx, base);
loc_8248271C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482728;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482744
	if (ctx.cr6.eq) goto loc_82482744;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23876
	ctx.r4.s64 = ctx.r11.s64 + 23876;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482744;
	sub_8243B750(ctx, base);
loc_82482744:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482750;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248276c
	if (ctx.cr6.eq) goto loc_8248276C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23848
	ctx.r4.s64 = ctx.r11.s64 + 23848;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248276C;
	sub_8243B750(ctx, base);
loc_8248276C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482778;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482794
	if (ctx.cr6.eq) goto loc_82482794;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23820
	ctx.r4.s64 = ctx.r11.s64 + 23820;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482794;
	sub_8243B750(ctx, base);
loc_82482794:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824827A0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824827bc
	if (ctx.cr6.eq) goto loc_824827BC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23792
	ctx.r4.s64 = ctx.r11.s64 + 23792;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824827BC;
	sub_8243B750(ctx, base);
loc_824827BC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824827C8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824827e4
	if (ctx.cr6.eq) goto loc_824827E4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23760
	ctx.r4.s64 = ctx.r11.s64 + 23760;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824827E4;
	sub_8243B750(ctx, base);
loc_824827E4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824827F0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248280c
	if (ctx.cr6.eq) goto loc_8248280C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23728
	ctx.r4.s64 = ctx.r11.s64 + 23728;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248280C;
	sub_8243B750(ctx, base);
loc_8248280C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482818;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482834
	if (ctx.cr6.eq) goto loc_82482834;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23704
	ctx.r4.s64 = ctx.r11.s64 + 23704;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482834;
	sub_8243B750(ctx, base);
loc_82482834:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482840;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248285c
	if (ctx.cr6.eq) goto loc_8248285C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23664
	ctx.r4.s64 = ctx.r11.s64 + 23664;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248285C;
	sub_8243B750(ctx, base);
loc_8248285C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482868;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482884
	if (ctx.cr6.eq) goto loc_82482884;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23628
	ctx.r4.s64 = ctx.r11.s64 + 23628;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482884;
	sub_8243B750(ctx, base);
loc_82482884:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482890;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824828ac
	if (ctx.cr6.eq) goto loc_824828AC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23588
	ctx.r4.s64 = ctx.r11.s64 + 23588;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824828AC;
	sub_8243B750(ctx, base);
loc_824828AC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824828B8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824828d4
	if (ctx.cr6.eq) goto loc_824828D4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23540
	ctx.r4.s64 = ctx.r11.s64 + 23540;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824828D4;
	sub_8243B750(ctx, base);
loc_824828D4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824828E0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824828fc
	if (ctx.cr6.eq) goto loc_824828FC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23496
	ctx.r4.s64 = ctx.r11.s64 + 23496;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824828FC;
	sub_8243B750(ctx, base);
loc_824828FC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482908;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482924
	if (ctx.cr6.eq) goto loc_82482924;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23456
	ctx.r4.s64 = ctx.r11.s64 + 23456;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482924;
	sub_8243B750(ctx, base);
loc_82482924:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482930;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248294c
	if (ctx.cr6.eq) goto loc_8248294C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23420
	ctx.r4.s64 = ctx.r11.s64 + 23420;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248294C;
	sub_8243B750(ctx, base);
loc_8248294C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482958;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482974
	if (ctx.cr6.eq) goto loc_82482974;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23392
	ctx.r4.s64 = ctx.r11.s64 + 23392;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482974;
	sub_8243B750(ctx, base);
loc_82482974:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482980;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248299c
	if (ctx.cr6.eq) goto loc_8248299C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23356
	ctx.r4.s64 = ctx.r11.s64 + 23356;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248299C;
	sub_8243B750(ctx, base);
loc_8248299C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824829A8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824829c4
	if (ctx.cr6.eq) goto loc_824829C4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23324
	ctx.r4.s64 = ctx.r11.s64 + 23324;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824829C4;
	sub_8243B750(ctx, base);
loc_824829C4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824829D0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x824829ec
	if (ctx.cr6.eq) goto loc_824829EC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23284
	ctx.r4.s64 = ctx.r11.s64 + 23284;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x824829EC;
	sub_8243B750(ctx, base);
loc_824829EC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x824829F8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482a14
	if (ctx.cr6.eq) goto loc_82482A14;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23252
	ctx.r4.s64 = ctx.r11.s64 + 23252;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482A14;
	sub_8243B750(ctx, base);
loc_82482A14:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482A20;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482a3c
	if (ctx.cr6.eq) goto loc_82482A3C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23224
	ctx.r4.s64 = ctx.r11.s64 + 23224;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482A3C;
	sub_8243B750(ctx, base);
loc_82482A3C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482A48;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482a64
	if (ctx.cr6.eq) goto loc_82482A64;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23192
	ctx.r4.s64 = ctx.r11.s64 + 23192;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482A64;
	sub_8243B750(ctx, base);
loc_82482A64:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482A70;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482a8c
	if (ctx.cr6.eq) goto loc_82482A8C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23168
	ctx.r4.s64 = ctx.r11.s64 + 23168;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482A8C;
	sub_8243B750(ctx, base);
loc_82482A8C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482A98;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482ab4
	if (ctx.cr6.eq) goto loc_82482AB4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23136
	ctx.r4.s64 = ctx.r11.s64 + 23136;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482AB4;
	sub_8243B750(ctx, base);
loc_82482AB4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482AC0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482adc
	if (ctx.cr6.eq) goto loc_82482ADC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23096
	ctx.r4.s64 = ctx.r11.s64 + 23096;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482ADC;
	sub_8243B750(ctx, base);
loc_82482ADC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482AE8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482b04
	if (ctx.cr6.eq) goto loc_82482B04;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23064
	ctx.r4.s64 = ctx.r11.s64 + 23064;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482B04;
	sub_8243B750(ctx, base);
loc_82482B04:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482B10;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482b2c
	if (ctx.cr6.eq) goto loc_82482B2C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,23028
	ctx.r4.s64 = ctx.r11.s64 + 23028;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482B2C;
	sub_8243B750(ctx, base);
loc_82482B2C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482B38;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482b54
	if (ctx.cr6.eq) goto loc_82482B54;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22988
	ctx.r4.s64 = ctx.r11.s64 + 22988;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482B54;
	sub_8243B750(ctx, base);
loc_82482B54:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482B60;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482b7c
	if (ctx.cr6.eq) goto loc_82482B7C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22952
	ctx.r4.s64 = ctx.r11.s64 + 22952;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482B7C;
	sub_8243B750(ctx, base);
loc_82482B7C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482B88;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482ba4
	if (ctx.cr6.eq) goto loc_82482BA4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22912
	ctx.r4.s64 = ctx.r11.s64 + 22912;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482BA4;
	sub_8243B750(ctx, base);
loc_82482BA4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482BB0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482bcc
	if (ctx.cr6.eq) goto loc_82482BCC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22876
	ctx.r4.s64 = ctx.r11.s64 + 22876;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482BCC;
	sub_8243B750(ctx, base);
loc_82482BCC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482BD8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482bf4
	if (ctx.cr6.eq) goto loc_82482BF4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22852
	ctx.r4.s64 = ctx.r11.s64 + 22852;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482BF4;
	sub_8243B750(ctx, base);
loc_82482BF4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482C00;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482c1c
	if (ctx.cr6.eq) goto loc_82482C1C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22828
	ctx.r4.s64 = ctx.r11.s64 + 22828;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482C1C;
	sub_8243B750(ctx, base);
loc_82482C1C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482C28;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482c44
	if (ctx.cr6.eq) goto loc_82482C44;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22800
	ctx.r4.s64 = ctx.r11.s64 + 22800;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482C44;
	sub_8243B750(ctx, base);
loc_82482C44:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482C50;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482c6c
	if (ctx.cr6.eq) goto loc_82482C6C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22764
	ctx.r4.s64 = ctx.r11.s64 + 22764;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482C6C;
	sub_8243B750(ctx, base);
loc_82482C6C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482C78;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482c94
	if (ctx.cr6.eq) goto loc_82482C94;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22732
	ctx.r4.s64 = ctx.r11.s64 + 22732;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482C94;
	sub_8243B750(ctx, base);
loc_82482C94:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x82482CA0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82482cbc
	if (ctx.cr6.eq) goto loc_82482CBC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,22712
	ctx.r4.s64 = ctx.r11.s64 + 22712;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x82482CBC;
	sub_8243B750(ctx, base);
loc_82482CBC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82482CC8"))) PPC_WEAK_FUNC(sub_82482CC8);
PPC_FUNC_IMPL(__imp__sub_82482CC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82482CD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24684
	ctx.r4.s64 = ctx.r10.s64 + 24684;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82482D0C;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,118
	ctx.r11.s64 = 118;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,6
	ctx.r11.s64 = 6;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82482E00;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82482E10"))) PPC_WEAK_FUNC(sub_82482E10);
PPC_FUNC_IMPL(__imp__sub_82482E10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82482E18;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24704
	ctx.r4.s64 = ctx.r10.s64 + 24704;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82482E54;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,119
	ctx.r11.s64 = 119;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,6
	ctx.r11.s64 = 6;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82482F48;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82482F58"))) PPC_WEAK_FUNC(sub_82482F58);
PPC_FUNC_IMPL(__imp__sub_82482F58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82482F60;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24728
	ctx.r4.s64 = ctx.r10.s64 + 24728;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82482F9C;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,120
	ctx.r11.s64 = 120;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,6
	ctx.r11.s64 = 6;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483090;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824830A0"))) PPC_WEAK_FUNC(sub_824830A0);
PPC_FUNC_IMPL(__imp__sub_824830A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824830A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24748
	ctx.r4.s64 = ctx.r10.s64 + 24748;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824830E4;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,121
	ctx.r11.s64 = 121;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,6
	ctx.r11.s64 = 6;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824831D8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824831E8"))) PPC_WEAK_FUNC(sub_824831E8);
PPC_FUNC_IMPL(__imp__sub_824831E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824831F0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24748
	ctx.r4.s64 = ctx.r10.s64 + 24748;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248322C;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,122
	ctx.r11.s64 = 122;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,137
	ctx.r11.s64 = 137;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483320;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483330"))) PPC_WEAK_FUNC(sub_82483330);
PPC_FUNC_IMPL(__imp__sub_82483330) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483338;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24728
	ctx.r4.s64 = ctx.r10.s64 + 24728;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483374;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,138
	ctx.r8.s64 = 138;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,7
	ctx.r9.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,246
	ctx.r10.s64 = 246;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,123
	ctx.r11.s64 = 123;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,136
	ctx.r11.s64 = 136;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r8,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r8.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248346C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483480"))) PPC_WEAK_FUNC(sub_82483480);
PPC_FUNC_IMPL(__imp__sub_82483480) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483488;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24704
	ctx.r4.s64 = ctx.r10.s64 + 24704;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824834C4;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,139
	ctx.r8.s64 = 139;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,7
	ctx.r9.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,246
	ctx.r10.s64 = 246;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,124
	ctx.r11.s64 = 124;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r8,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r8.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824835BC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824835D0"))) PPC_WEAK_FUNC(sub_824835D0);
PPC_FUNC_IMPL(__imp__sub_824835D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824835D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24684
	ctx.r4.s64 = ctx.r10.s64 + 24684;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483614;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,140
	ctx.r8.s64 = 140;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,7
	ctx.r9.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,246
	ctx.r10.s64 = 246;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,125
	ctx.r11.s64 = 125;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r8,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r8.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248370C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483720"))) PPC_WEAK_FUNC(sub_82483720);
PPC_FUNC_IMPL(__imp__sub_82483720) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483728;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24772
	ctx.r4.s64 = ctx.r10.s64 + 24772;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483764;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,141
	ctx.r9.s64 = 141;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483850;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483860"))) PPC_WEAK_FUNC(sub_82483860);
PPC_FUNC_IMPL(__imp__sub_82483860) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483868;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24812
	ctx.r4.s64 = ctx.r10.s64 + 24812;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824838A4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,142
	ctx.r9.s64 = 142;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483990;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824839A0"))) PPC_WEAK_FUNC(sub_824839A0);
PPC_FUNC_IMPL(__imp__sub_824839A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824839A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24844
	ctx.r4.s64 = ctx.r10.s64 + 24844;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824839E4;
	sub_822E0818(ctx, base);
	// li r8,32
	ctx.r8.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r8,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r8.u8);
	// li r8,143
	ctx.r8.s64 = 143;
	// stb r9,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r9.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r8,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r8.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483ACC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483AE0"))) PPC_WEAK_FUNC(sub_82483AE0);
PPC_FUNC_IMPL(__imp__sub_82483AE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483AE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24880
	ctx.r4.s64 = ctx.r10.s64 + 24880;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483B24;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,144
	ctx.r9.s64 = 144;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,129
	ctx.r11.s64 = 129;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483C10;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483C20"))) PPC_WEAK_FUNC(sub_82483C20);
PPC_FUNC_IMPL(__imp__sub_82483C20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483C28;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24908
	ctx.r4.s64 = ctx.r10.s64 + 24908;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483C64;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,145
	ctx.r9.s64 = 145;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,130
	ctx.r11.s64 = 130;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483D50;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483D60"))) PPC_WEAK_FUNC(sub_82483D60);
PPC_FUNC_IMPL(__imp__sub_82483D60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483D68;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24944
	ctx.r4.s64 = ctx.r10.s64 + 24944;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483DA4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,146
	ctx.r9.s64 = 146;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,131
	ctx.r11.s64 = 131;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483E90;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483EA0"))) PPC_WEAK_FUNC(sub_82483EA0);
PPC_FUNC_IMPL(__imp__sub_82483EA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483EA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,24972
	ctx.r4.s64 = ctx.r10.s64 + 24972;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82483EE4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,147
	ctx.r9.s64 = 147;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,132
	ctx.r11.s64 = 132;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82483FD0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82483FE0"))) PPC_WEAK_FUNC(sub_82483FE0);
PPC_FUNC_IMPL(__imp__sub_82483FE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82483FE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25008
	ctx.r4.s64 = ctx.r10.s64 + 25008;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484024;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,148
	ctx.r9.s64 = 148;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,133
	ctx.r11.s64 = 133;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484110;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484120"))) PPC_WEAK_FUNC(sub_82484120);
PPC_FUNC_IMPL(__imp__sub_82484120) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484128;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25036
	ctx.r4.s64 = ctx.r10.s64 + 25036;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484164;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,149
	ctx.r9.s64 = 149;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484250;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484260"))) PPC_WEAK_FUNC(sub_82484260);
PPC_FUNC_IMPL(__imp__sub_82484260) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484268;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25072
	ctx.r4.s64 = ctx.r10.s64 + 25072;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824842A4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,150
	ctx.r9.s64 = 150;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484390;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824843A0"))) PPC_WEAK_FUNC(sub_824843A0);
PPC_FUNC_IMPL(__imp__sub_824843A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824843A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25100
	ctx.r4.s64 = ctx.r10.s64 + 25100;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824843E4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,151
	ctx.r9.s64 = 151;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,136
	ctx.r11.s64 = 136;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824844D0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824844E0"))) PPC_WEAK_FUNC(sub_824844E0);
PPC_FUNC_IMPL(__imp__sub_824844E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824844E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25136
	ctx.r4.s64 = ctx.r10.s64 + 25136;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484524;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,152
	ctx.r9.s64 = 152;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,137
	ctx.r11.s64 = 137;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484610;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484620"))) PPC_WEAK_FUNC(sub_82484620);
PPC_FUNC_IMPL(__imp__sub_82484620) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484628;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25168
	ctx.r4.s64 = ctx.r10.s64 + 25168;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484664;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,153
	ctx.r9.s64 = 153;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,138
	ctx.r11.s64 = 138;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484750;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484760"))) PPC_WEAK_FUNC(sub_82484760);
PPC_FUNC_IMPL(__imp__sub_82484760) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484768;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25204
	ctx.r4.s64 = ctx.r10.s64 + 25204;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824847A4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,154
	ctx.r9.s64 = 154;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,139
	ctx.r11.s64 = 139;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484890;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824848A0"))) PPC_WEAK_FUNC(sub_824848A0);
PPC_FUNC_IMPL(__imp__sub_824848A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824848A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25236
	ctx.r4.s64 = ctx.r10.s64 + 25236;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824848E4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,155
	ctx.r9.s64 = 155;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,140
	ctx.r11.s64 = 140;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824849D0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824849E0"))) PPC_WEAK_FUNC(sub_824849E0);
PPC_FUNC_IMPL(__imp__sub_824849E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824849E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25272
	ctx.r4.s64 = ctx.r10.s64 + 25272;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484A24;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,156
	ctx.r9.s64 = 156;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,141
	ctx.r11.s64 = 141;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484B10;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484B20"))) PPC_WEAK_FUNC(sub_82484B20);
PPC_FUNC_IMPL(__imp__sub_82484B20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484B28;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25304
	ctx.r4.s64 = ctx.r10.s64 + 25304;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484B64;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,157
	ctx.r9.s64 = 157;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,142
	ctx.r11.s64 = 142;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484C50;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484C60"))) PPC_WEAK_FUNC(sub_82484C60);
PPC_FUNC_IMPL(__imp__sub_82484C60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484C68;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25340
	ctx.r4.s64 = ctx.r10.s64 + 25340;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484CA4;
	sub_822E0818(ctx, base);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,158
	ctx.r9.s64 = 158;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,143
	ctx.r11.s64 = 143;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484D90;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484DA0"))) PPC_WEAK_FUNC(sub_82484DA0);
PPC_FUNC_IMPL(__imp__sub_82484DA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484DA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25372
	ctx.r4.s64 = ctx.r10.s64 + 25372;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484DE4;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,144
	ctx.r11.s64 = 144;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82484EC0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82484ED0"))) PPC_WEAK_FUNC(sub_82484ED0);
PPC_FUNC_IMPL(__imp__sub_82484ED0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82484ED8;
	__savegprlr_29(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,66
	ctx.r9.s64 = 66;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25384
	ctx.r4.s64 = ctx.r10.s64 + 25384;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82484F14;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,6
	ctx.r9.s64 = 6;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,159
	ctx.r10.s64 = 159;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r8,7
	ctx.r8.s64 = 7;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r7,42
	ctx.r7.s64 = 42;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,145
	ctx.r11.s64 = 145;
	// stb r9,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r9.u8);
	// stb r9,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r9.u8);
	// li r9,107
	ctx.r9.s64 = 107;
	// stb r10,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r10.u8);
	// li r10,160
	ctx.r10.s64 = 160;
	// stb r8,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r8.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r9,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r9.u8);
	// li r9,41
	ctx.r9.s64 = 41;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,161
	ctx.r11.s64 = 161;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// li r11,11
	ctx.r11.s64 = 11;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r10,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r10.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r7,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r7.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r8,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r8.u8);
	// stb r9,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r9.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r10,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r10.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// li r5,66
	ctx.r5.s64 = 66;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// li r11,9
	ctx.r11.s64 = 9;
	// stb r11,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r11.u8);
	// li r11,216
	ctx.r11.s64 = 216;
	// stb r11,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82485078;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82485088"))) PPC_WEAK_FUNC(sub_82485088);
PPC_FUNC_IMPL(__imp__sub_82485088) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82485090;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25372
	ctx.r4.s64 = ctx.r10.s64 + 25372;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824850CC;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,146
	ctx.r11.s64 = 146;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824851A8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824851B8"))) PPC_WEAK_FUNC(sub_824851B8);
PPC_FUNC_IMPL(__imp__sub_824851B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824851C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,66
	ctx.r9.s64 = 66;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25408
	ctx.r4.s64 = ctx.r10.s64 + 25408;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824851FC;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,161
	ctx.r8.s64 = 161;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r7,7
	ctx.r7.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,6
	ctx.r10.s64 = 6;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r9,162
	ctx.r9.s64 = 162;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,147
	ctx.r11.s64 = 147;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r6,43
	ctx.r6.s64 = 43;
	// stb r8,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r8.u8);
	// li r8,41
	ctx.r8.s64 = 41;
	// stb r7,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r7.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,192
	ctx.r11.s64 = 192;
	// stb r10,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r10.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// li r11,11
	ctx.r11.s64 = 11;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r9,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r9.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r6,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r6.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r10,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r10.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r7,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r7.u8);
	// stb r8,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r8.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r9,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r9.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r5,66
	ctx.r5.s64 = 66;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r10.u8);
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// li r11,62
	ctx.r11.s64 = 62;
	// stb r11,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82485358;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82485368"))) PPC_WEAK_FUNC(sub_82485368);
PPC_FUNC_IMPL(__imp__sub_82485368) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82485370;
	__savegprlr_29(ctx, base);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,139
	ctx.r9.s64 = 139;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25432
	ctx.r4.s64 = ctx.r10.s64 + 25432;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824853AC;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r6,6
	ctx.r6.s64 = 6;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,32
	ctx.r10.s64 = 32;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r7,163
	ctx.r7.s64 = 163;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r8,128
	ctx.r8.s64 = 128;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,148
	ctx.r11.s64 = 148;
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r6,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r6.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,202
	ctx.r11.s64 = 202;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r7,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r7.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r8,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r8.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r9,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r9.u8);
	// stb r11,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r11.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r11,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r11.u8);
	// li r5,139
	ctx.r5.s64 = 139;
	// stb r11,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r11.u8);
	// li r11,190
	ctx.r11.s64 = 190;
	// stb r7,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r7.u8);
	// li r7,9
	ctx.r7.s64 = 9;
	// stb r8,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r8.u8);
	// li r8,178
	ctx.r8.s64 = 178;
	// stb r6,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r6.u8);
	// li r6,62
	ctx.r6.s64 = 62;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r11,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r11.u8);
	// li r11,7
	ctx.r11.s64 = 7;
	// stb r7,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r7.u8);
	// li r7,216
	ctx.r7.s64 = 216;
	// stb r8,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r8.u8);
	// li r8,246
	ctx.r8.s64 = 246;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r11,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r11.u8);
	// stb r11,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r11.u8);
	// li r11,215
	ctx.r11.s64 = 215;
	// stb r7,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r7.u8);
	// li r7,161
	ctx.r7.s64 = 161;
	// stb r9,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r9.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r11,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r11.u8);
	// li r11,11
	ctx.r11.s64 = 11;
	// stb r7,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r7.u8);
	// li r7,8
	ctx.r7.s64 = 8;
	// stb r6,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r6.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r11,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r11.u8);
	// li r11,172
	ctx.r11.s64 = 172;
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r10,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r10.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r10,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r10.u8);
	// stb r7,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r7.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r8,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r8.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r9,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r9.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r11,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r11.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r31,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r31.u8);
	// li r11,165
	ctx.r11.s64 = 165;
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r10,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r10.u8);
	// stb r11,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82485644;
	sub_82B06418(ctx, base);
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82485658"))) PPC_WEAK_FUNC(sub_82485658);
PPC_FUNC_IMPL(__imp__sub_82485658) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82485660;
	__savegprlr_14(ctx, base);
	// ld r12,-4096(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6832(r1)
	ea = -6832 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r10,r10,-29388
	ctx.r10.s64 = ctx.r10.s64 + -29388;
	// li r8,6583
	ctx.r8.s64 = 6583;
	// stw r11,6852(r1)
	PPC_STORE_U32(ctx.r1.u32 + 6852, ctx.r11.u32);
	// lis r9,-32250
	ctx.r9.s64 = -2113536000;
	// addi r4,r9,25460
	ctx.r4.s64 = ctx.r9.s64 + 25460;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r8,16(r11)
	PPC_STORE_U32(ctx.r11.u32 + 16, ctx.r8.u32);
	// bl 0x822e0818
	ctx.lr = 0x824856A4;
	sub_822E0818(ctx, base);
	// li r11,149
	ctx.r11.s64 = 149;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r28,108
	ctx.r28.s64 = 108;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r24,10
	ctx.r24.s64 = 10;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r27,100
	ctx.r27.s64 = 100;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r7,105
	ctx.r7.s64 = 105;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,24
	ctx.r11.s64 = 24;
	// li r8,97
	ctx.r8.s64 = 97;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r18,12
	ctx.r18.s64 = 12;
	// stb r24,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r24.u8);
	// li r22,159
	ctx.r22.s64 = 159;
	// stb r27,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r27.u8);
	// li r10,82
	ctx.r10.s64 = 82;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// li r29,99
	ctx.r29.s64 = 99;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// li r30,104
	ctx.r30.s64 = 104;
	// stb r18,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r18.u8);
	// li r3,114
	ctx.r3.s64 = 114;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// li r4,68
	ctx.r4.s64 = 68;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,75
	ctx.r11.s64 = 75;
	// stb r24,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r24.u8);
	// li r9,116
	ctx.r9.s64 = 116;
	// stb r22,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r22.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r7,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r7.u8);
	// stb r28,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r28.u8);
	// stb r28,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r28.u8);
	// stb r11,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r11.u8);
	// stb r10,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r10.u8);
	// stb r7,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r7.u8);
	// stb r29,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r29.u8);
	// stb r30,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r30.u8);
	// stb r8,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r8.u8);
	// stb r3,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r3.u8);
	// stb r27,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r27.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r4,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r4.u8);
	// stb r8,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r8.u8);
	// stb r28,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r28.u8);
	// li r25,15
	ctx.r25.s64 = 15;
	// stb r4,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r4.u8);
	// li r10,101
	ctx.r10.s64 = 101;
	// stb r9,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r9.u8);
	// li r5,110
	ctx.r5.s64 = 110;
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// li r6,111
	ctx.r6.s64 = 111;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r26,1
	ctx.r26.s64 = 1;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r25,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r25.u8);
	// li r4,115
	ctx.r4.s64 = 115;
	// li r19,109
	ctx.r19.s64 = 109;
	// stb r18,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r18.u8);
	// li r17,11
	ctx.r17.s64 = 11;
	// stb r5,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r5.u8);
	// li r25,98
	ctx.r25.s64 = 98;
	// stb r6,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r6.u8);
	// li r16,119
	ctx.r16.s64 = 119;
	// stb r10,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r10.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r24,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r24.u8);
	// stb r22,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r22.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r26,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r26.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r26,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r26.u8);
	// stb r17,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r17.u8);
	// stb r8,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r8.u8);
	// stb r28,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r28.u8);
	// stb r9,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r9.u8);
	// stb r6,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r6.u8);
	// stb r5,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r5.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// stb r7,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r7.u8);
	// stb r4,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r4.u8);
	// stb r11,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r11.u8);
	// stb r9,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r9.u8);
	// stb r30,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r30.u8);
	// stb r10,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r10.u8);
	// stb r11,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r11.u8);
	// stb r19,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r19.u8);
	// stb r8,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r8.u8);
	// stb r4,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r4.u8);
	// stb r9,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r9.u8);
	// stb r10,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r10.u8);
	// stb r3,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r3.u8);
	// stb r19,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r19.u8);
	// stb r7,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r7.u8);
	// stb r5,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r5.u8);
	// stb r27,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r27.u8);
	// stb r11,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r11.u8);
	// stb r25,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r25.u8);
	// stb r10,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r10.u8);
	// stb r30,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r30.u8);
	// stb r7,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r7.u8);
	// stb r5,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r5.u8);
	// stb r27,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r27.u8);
	// stb r11,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r11.u8);
	// stb r9,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r9.u8);
	// stb r30,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r30.u8);
	// stb r10,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r10.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r11.u8);
	// stb r16,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r16.u8);
	// stb r30,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r30.u8);
	// stb r6,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r6.u8);
	// li r25,83
	ctx.r25.s64 = 83;
	// std r17,6664(r1)
	PPC_STORE_U64(ctx.r1.u32 + 6664, ctx.r17.u64);
	// li r15,112
	ctx.r15.s64 = 112;
	// stb r28,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r28.u8);
	// li r23,121
	ctx.r23.s64 = 121;
	// stb r10,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r10.u8);
	// li r20,103
	ctx.r20.s64 = 103;
	// stb r11,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r11.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r29,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r29.u8);
	// stb r25,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r25.u8);
	// li r25,117
	ctx.r25.s64 = 117;
	// li r21,102
	ctx.r21.s64 = 102;
	// stb r6,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r6.u8);
	// li r17,67
	ctx.r17.s64 = 67;
	// stb r5,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r5.u8);
	// stb r4,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r4.u8);
	// stb r15,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r15.u8);
	// stb r7,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r7.u8);
	// stb r3,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r3.u8);
	// stb r8,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r8.u8);
	// stb r29,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r29.u8);
	// stb r23,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r23.u8);
	// stb r14,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r14.u8);
	// stb r11,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r11.u8);
	// stb r11,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r11.u8);
	// stb r10,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r10.u8);
	// stb r28,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r28.u8);
	// stb r28,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r28.u8);
	// stb r7,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r7.u8);
	// stb r5,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r5.u8);
	// stb r20,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r20.u8);
	// stb r11,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r11.u8);
	// stb r6,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r6.u8);
	// stb r25,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r25.u8);
	// stb r9,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r9.u8);
	// stb r11,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r11.u8);
	// stb r9,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r9.u8);
	// stb r3,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r3.u8);
	// stb r6,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r6.u8);
	// stb r6,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r6.u8);
	// stb r15,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r15.u8);
	// stb r11,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r11.u8);
	// stb r15,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r15.u8);
	// stb r6,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r6.u8);
	// stb r4,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r4.u8);
	// stb r7,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r7.u8);
	// stb r9,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r9.u8);
	// stb r7,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r7.u8);
	// stb r6,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r6.u8);
	// stb r5,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r5.u8);
	// stb r4,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r4.u8);
	// stb r11,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r11.u8);
	// stb r8,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r8.u8);
	// stb r5,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r5.u8);
	// stb r27,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r27.u8);
	// stb r11,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r11.u8);
	// stb r21,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r21.u8);
	// stb r3,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r3.u8);
	// stb r8,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r8.u8);
	// stb r19,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r19.u8);
	// stb r7,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r7.u8);
	// stb r5,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r5.u8);
	// stb r20,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r20.u8);
	// stb r11,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r11.u8);
	// stb r23,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r23.u8);
	// stb r6,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r6.u8);
	// stb r25,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r25.u8);
	// stb r11,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r11.u8);
	// stb r7,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r7.u8);
	// stb r5,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r5.u8);
	// stb r11,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r11.u8);
	// stb r17,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r17.u8);
	// stb r30,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r30.u8);
	// stb r7,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r7.u8);
	// stb r5,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r5.u8);
	// stb r8,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r8.u8);
	// stb r11,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r11.u8);
	// stb r16,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r16.u8);
	// stb r8,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r8.u8);
	// stb r4,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r4.u8);
	// li r17,87
	ctx.r17.s64 = 87;
	// stb r11,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r11.u8);
	// stb r8,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r8.u8);
	// stb r28,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r28.u8);
	// stb r28,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r28.u8);
	// stb r11,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r11.u8);
	// stb r17,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r17.u8);
	// li r17,77
	ctx.r17.s64 = 77;
	// stb r15,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r15.u8);
	// stb r8,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r8.u8);
	// stb r3,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r3.u8);
	// stb r9,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r9.u8);
	// stb r11,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r11.u8);
	// stb r6,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r6.u8);
	// stb r21,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r21.u8);
	// stb r11,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r11.u8);
	// stb r30,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r30.u8);
	// stb r7,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r7.u8);
	// stb r4,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r4.u8);
	// stb r11,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r11.u8);
	// stb r20,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r20.u8);
	// stb r3,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r3.u8);
	// stb r8,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r8.u8);
	// stb r5,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r5.u8);
	// stb r27,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r27.u8);
	// stb r11,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r11.u8);
	// stb r4,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r4.u8);
	// stb r29,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r29.u8);
	// stb r30,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r30.u8);
	// stb r10,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r10.u8);
	// stb r19,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r19.u8);
	// stb r10,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r10.u8);
	// stb r14,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r14.u8);
	// stb r11,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r11.u8);
	// stb r11,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r11.u8);
	// stb r7,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r7.u8);
	// stb r9,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r9.u8);
	// stb r30,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r30.u8);
	// stb r11,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r11.u8);
	// stb r17,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r17.u8);
	// stb r25,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r25.u8);
	// stb r3,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r3.u8);
	// stb r3,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r3.u8);
	// stb r8,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r8.u8);
	// stb r23,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r23.u8);
	// stb r11,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r11.u8);
	// stb r21,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r21.u8);
	// stb r3,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r3.u8);
	// stb r10,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r10.u8);
	// stb r10,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r10.u8);
	// stb r27,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r27.u8);
	// stb r11,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r11.u8);
	// stb r21,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r21.u8);
	// stb r3,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r3.u8);
	// stb r6,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r6.u8);
	// stb r19,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r19.u8);
	// stb r11,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r11.u8);
	// stb r9,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r9.u8);
	// stb r30,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r30.u8);
	// stb r10,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r10.u8);
	// stb r11,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r11.u8);
	// stb r8,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r8.u8);
	// stb r7,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r7.u8);
	// stb r3,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r3.u8);
	// stb r15,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r15.u8);
	// stb r6,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r6.u8);
	// stb r3,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r3.u8);
	// stb r9,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r9.u8);
	// stb r11,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r11.u8);
	// stb r8,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r8.u8);
	// stb r5,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r5.u8);
	// stb r27,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r27.u8);
	// stb r11,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r11.u8);
	// stb r9,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r9.u8);
	// stb r30,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r30.u8);
	// stb r10,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r10.u8);
	// stb r11,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r11.u8);
	// stb r30,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r30.u8);
	// stb r25,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r25.u8);
	// stb r3,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r3.u8);
	// stb r3,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r3.u8);
	// li r17,44
	ctx.r17.s64 = 44;
	// stb r7,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r7.u8);
	// stb r29,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r29.u8);
	// stb r8,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r8.u8);
	// stb r5,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r5.u8);
	// stb r10,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r10.u8);
	// stb r17,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r11,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r11.u8);
	// stb r20,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r20.u8);
	// stb r6,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r6.u8);
	// stb r5,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r5.u8);
	// stb r17,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r17.u8);
	// li r17,83
	ctx.r17.s64 = 83;
	// stb r10,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r10.u8);
	// stb r11,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r11.u8);
	// stb r7,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r7.u8);
	// stb r9,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r9.u8);
	// stb r17,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r17.u8);
	// stb r17,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r17.u8);
	// li r17,67
	ctx.r17.s64 = 67;
	// stb r4,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r4.u8);
	// stb r11,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r11.u8);
	// stb r9,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r9.u8);
	// stb r7,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r7.u8);
	// stb r17,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r17.u8);
	// stb r17,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r17.u8);
	// li r17,107
	ctx.r17.s64 = 107;
	// stb r19,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r19.u8);
	// stb r10,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r10.u8);
	// stb r11,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r11.u8);
	// stb r9,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r9.u8);
	// stb r17,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r17.u8);
	// li r17,70
	ctx.r17.s64 = 70;
	// stb r6,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r6.u8);
	// stb r11,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r11.u8);
	// stb r30,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r30.u8);
	// stb r10,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r10.u8);
	// stb r8,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r8.u8);
	// stb r27,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r27.u8);
	// stb r11,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r11.u8);
	// stb r9,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r9.u8);
	// stb r6,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r6.u8);
	// stb r11,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r11.u8);
	// stb r11,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r11.u8);
	// stb r7,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r7.u8);
	// stb r9,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r9.u8);
	// stb r23,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r23.u8);
	// stb r11,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r11.u8);
	// stb r8,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r8.u8);
	// stb r5,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r5.u8);
	// stb r27,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r27.u8);
	// stb r11,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r11.u8);
	// stb r9,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r9.u8);
	// stb r6,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r6.u8);
	// stb r11,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r11.u8);
	// stb r9,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r9.u8);
	// stb r8,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r8.u8);
	// stb r10,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r10.u8);
	// stb r11,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r11.u8);
	// stb r30,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r30.u8);
	// stb r7,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r7.u8);
	// stb r19,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r19.u8);
	// stb r11,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r11.u8);
	// stb r27,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r27.u8);
	// stb r6,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r6.u8);
	// stb r16,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r16.u8);
	// stb r5,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r5.u8);
	// stb r14,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r14.u8);
	// stb r11,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r11.u8);
	// stb r11,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r11.u8);
	// stb r17,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r17.u8);
	// stb r6,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r6.u8);
	// stb r3,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r3.u8);
	// stb r11,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r11.u8);
	// stb r20,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r20.u8);
	// stb r6,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r6.u8);
	// stb r6,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r6.u8);
	// stb r27,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r27.u8);
	// stb r14,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r14.u8);
	// stb r14,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r14.u8);
	// li r17,36
	ctx.r17.s64 = 36;
	// stb r14,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r14.u8);
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r31,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r31.u8);
	// stb r31,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r31.u8);
	// stb r18,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r18.u8);
	// stb r17,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r17.u8);
	// li r17,68
	ctx.r17.s64 = 68;
	// stb r21,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r21.u8);
	// stb r31,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r31.u8);
	// stb r31,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r31.u8);
	// stb r31,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r31.u8);
	// stb r17,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r17.u8);
	// li r17,98
	ctx.r17.s64 = 98;
	// stb r31,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r31.u8);
	// stb r31,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r31.u8);
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r24,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r24.u8);
	// stb r17,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r22,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r22.u8);
	// stb r31,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r31.u8);
	// stb r31,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r31.u8);
	// stb r31,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r31.u8);
	// stb r31,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r31.u8);
	// stb r31,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r31.u8);
	// stb r31,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r31.u8);
	// stb r31,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r31.u8);
	// stb r31,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r31.u8);
	// stb r31,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r31.u8);
	// stb r31,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r31.u8);
	// stb r31,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r31.u8);
	// stb r31,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r31.u8);
	// stb r31,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r31.u8);
	// stb r31,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r31.u8);
	// stb r11,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r11.u8);
	// stb r7,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r7.u8);
	// stb r4,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r4.u8);
	// stb r8,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r8.u8);
	// stb r28,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r28.u8);
	// stb r10,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r10.u8);
	// stb r11,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r11.u8);
	// stb r9,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r9.u8);
	// stb r30,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r30.u8);
	// stb r10,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r10.u8);
	// stb r11,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r11.u8);
	// stb r28,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r28.u8);
	// stb r7,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r7.u8);
	// stb r21,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r21.u8);
	// stb r9,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r9.u8);
	// stb r17,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r17.u8);
	// stb r4,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r4.u8);
	// stb r11,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r11.u8);
	// stb r15,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r15.u8);
	// stb r6,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r6.u8);
	// stb r16,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r16.u8);
	// stb r10,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r10.u8);
	// stb r3,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r3.u8);
	// stb r11,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r11.u8);
	// stb r4,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r4.u8);
	// stb r6,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r6.u8);
	// stb r25,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r25.u8);
	// stb r3,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r3.u8);
	// stb r29,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r29.u8);
	// stb r10,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r10.u8);
	// stb r31,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r31.u8);
	// stb r31,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r31.u8);
	// stb r31,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r31.u8);
	// stb r18,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r18.u8);
	// stb r20,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r20.u8);
	// stb r31,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r31.u8);
	// stb r31,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r31.u8);
	// stb r31,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r31.u8);
	// stb r31,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r31.u8);
	// stb r31,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r31.u8);
	// stb r31,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r31.u8);
	// stb r24,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r24.u8);
	// stb r22,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r22.u8);
	// stb r31,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r31.u8);
	// stb r31,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r31.u8);
	// stb r31,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r31.u8);
	// li r16,232
	ctx.r16.s64 = 232;
	// stb r31,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r31.u8);
	// li r17,84
	ctx.r17.s64 = 84;
	// stb r31,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r31.u8);
	// stb r31,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r31.u8);
	// stb r31,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r31.u8);
	// stb r31,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r31.u8);
	// stb r16,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r16.u8);
	// li r16,228
	ctx.r16.s64 = 228;
	// stb r17,549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 549, ctx.r17.u8);
	// li r17,44
	ctx.r17.s64 = 44;
	// stb r31,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r31.u8);
	// stb r31,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r31.u8);
	// stb r31,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r31.u8);
	// stb r16,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r16.u8);
	// li r16,68
	ctx.r16.s64 = 68;
	// stb r31,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r31.u8);
	// stb r31,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r31.u8);
	// stb r31,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r31.u8);
	// stb r8,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r8.u8);
	// stb r16,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r16.u8);
	// li r16,118
	ctx.r16.s64 = 118;
	// stb r28,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r28.u8);
	// stb r9,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r9.u8);
	// stb r6,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r6.u8);
	// stb r5,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r5.u8);
	// stb r11,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r11.u8);
	// stb r7,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r7.u8);
	// stb r4,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r4.u8);
	// stb r11,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r11.u8);
	// stb r30,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r30.u8);
	// stb r10,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r10.u8);
	// stb r8,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r8.u8);
	// stb r27,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r27.u8);
	// stb r7,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r7.u8);
	// stb r5,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r5.u8);
	// stb r20,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r20.u8);
	// stb r11,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r11.u8);
	// stb r21,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r21.u8);
	// stb r6,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r6.u8);
	// stb r3,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r3.u8);
	// stb r11,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r11.u8);
	// stb r9,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r9.u8);
	// stb r30,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r30.u8);
	// stb r10,539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 539, ctx.r10.u8);
	// stb r11,540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 540, ctx.r11.u8);
	// stb r16,541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 541, ctx.r16.u8);
	// stb r8,542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 542, ctx.r8.u8);
	// stb r25,543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 543, ctx.r25.u8);
	// stb r28,544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 544, ctx.r28.u8);
	// stb r9,545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 545, ctx.r9.u8);
	// stb r14,546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 546, ctx.r14.u8);
	// stb r11,547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 547, ctx.r11.u8);
	// stb r11,548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 548, ctx.r11.u8);
	// stb r6,550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 550, ctx.r6.u8);
	// stb r11,551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 551, ctx.r11.u8);
	// stb r29,552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 552, ctx.r29.u8);
	// stb r8,553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 553, ctx.r8.u8);
	// stb r9,554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 554, ctx.r9.u8);
	// stb r29,555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 555, ctx.r29.u8);
	// stb r30,556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 556, ctx.r30.u8);
	// stb r11,557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 557, ctx.r11.u8);
	// stb r25,558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 558, ctx.r25.u8);
	// stb r15,559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 559, ctx.r15.u8);
	// stb r11,560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 560, ctx.r11.u8);
	// stb r6,561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 561, ctx.r6.u8);
	// stb r5,562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 562, ctx.r5.u8);
	// stb r11,563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 563, ctx.r11.u8);
	// stb r28,564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 564, ctx.r28.u8);
	// stb r6,565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 565, ctx.r6.u8);
	// stb r4,566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 566, ctx.r4.u8);
	// stb r9,567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 567, ctx.r9.u8);
	// stb r11,568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 568, ctx.r11.u8);
	// stb r9,569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 569, ctx.r9.u8);
	// stb r7,570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 570, ctx.r7.u8);
	// stb r19,571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 571, ctx.r19.u8);
	// stb r10,572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 572, ctx.r10.u8);
	// stb r17,573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 573, ctx.r17.u8);
	// stb r11,574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 574, ctx.r11.u8);
	// stb r23,575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 575, ctx.r23.u8);
	// stb r6,576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 576, ctx.r6.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r25,577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 577, ctx.r25.u8);
	// stb r28,579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 579, ctx.r28.u8);
	// stb r28,580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 580, ctx.r28.u8);
	// stb r11,581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 581, ctx.r11.u8);
	// stb r5,582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 582, ctx.r5.u8);
	// stb r17,578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 578, ctx.r17.u8);
	// li r17,107
	ctx.r17.s64 = 107;
	// stb r10,583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 583, ctx.r10.u8);
	// stb r10,584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 584, ctx.r10.u8);
	// stb r27,585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 585, ctx.r27.u8);
	// stb r11,586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 586, ctx.r11.u8);
	// stb r17,592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 592, ctx.r17.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r9,587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 587, ctx.r9.u8);
	// stb r6,588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 588, ctx.r6.u8);
	// stb r11,589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 589, ctx.r11.u8);
	// stb r19,590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 590, ctx.r19.u8);
	// stb r17,600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 600, ctx.r17.u8);
	// li r17,83
	ctx.r17.s64 = 83;
	// stb r8,591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 591, ctx.r8.u8);
	// stb r10,593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 593, ctx.r10.u8);
	// stb r11,594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 594, ctx.r11.u8);
	// stb r23,595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 595, ctx.r23.u8);
	// stb r17,612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 612, ctx.r17.u8);
	// stb r17,613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 613, ctx.r17.u8);
	// li r17,67
	ctx.r17.s64 = 67;
	// stb r6,596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 596, ctx.r6.u8);
	// stb r25,597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 597, ctx.r25.u8);
	// stb r3,598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 598, ctx.r3.u8);
	// stb r11,599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 599, ctx.r11.u8);
	// stb r17,614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 614, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r8,601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 601, ctx.r8.u8);
	// stb r23,602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 602, ctx.r23.u8);
	// stb r11,603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 603, ctx.r11.u8);
	// stb r9,604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 604, ctx.r9.u8);
	// stb r17,615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 615, ctx.r17.u8);
	// li r17,77
	ctx.r17.s64 = 77;
	// stb r30,605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 605, ctx.r30.u8);
	// stb r3,606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 606, ctx.r3.u8);
	// stb r6,607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 607, ctx.r6.u8);
	// stb r25,608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 608, ctx.r25.u8);
	// stb r17,640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 640, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r20,609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 609, ctx.r20.u8);
	// stb r30,610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 610, ctx.r30.u8);
	// stb r11,611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 611, ctx.r11.u8);
	// stb r4,616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 616, ctx.r4.u8);
	// stb r11,617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 617, ctx.r11.u8);
	// stb r28,618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 618, ctx.r28.u8);
	// stb r10,619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 619, ctx.r10.u8);
	// stb r4,620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 620, ctx.r4.u8);
	// stb r4,621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 621, ctx.r4.u8);
	// stb r11,622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 622, ctx.r11.u8);
	// stb r9,623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 623, ctx.r9.u8);
	// stb r3,624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 624, ctx.r3.u8);
	// stb r8,625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 625, ctx.r8.u8);
	// stb r16,626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 626, ctx.r16.u8);
	// stb r10,627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 627, ctx.r10.u8);
	// stb r28,628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 628, ctx.r28.u8);
	// stb r28,629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 629, ctx.r28.u8);
	// stb r10,630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 630, ctx.r10.u8);
	// stb r27,631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 631, ctx.r27.u8);
	// stb r11,632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 632, ctx.r11.u8);
	// stb r15,633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 633, ctx.r15.u8);
	// stb r8,634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 634, ctx.r8.u8);
	// stb r9,635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 635, ctx.r9.u8);
	// stb r30,636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 636, ctx.r30.u8);
	// stb r14,637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 637, ctx.r14.u8);
	// stb r11,638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 638, ctx.r11.u8);
	// stb r11,639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 639, ctx.r11.u8);
	// stb r25,641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 641, ctx.r25.u8);
	// stb r3,642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 642, ctx.r3.u8);
	// stb r3,643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 643, ctx.r3.u8);
	// stb r8,644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 644, ctx.r8.u8);
	// stb r23,645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 645, ctx.r23.u8);
	// stb r17,646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 646, ctx.r17.u8);
	// stb r4,647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 647, ctx.r4.u8);
	// stb r11,648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 648, ctx.r11.u8);
	// stb r4,649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 649, ctx.r4.u8);
	// li r17,113
	ctx.r17.s64 = 113;
	// stb r30,650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 650, ctx.r30.u8);
	// stb r6,651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 651, ctx.r6.u8);
	// stb r3,652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 652, ctx.r3.u8);
	// stb r9,653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 653, ctx.r9.u8);
	// stb r29,654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 654, ctx.r29.u8);
	// stb r17,660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 660, ctx.r17.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r25,655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 655, ctx.r25.u8);
	// stb r9,656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 656, ctx.r9.u8);
	// stb r11,657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 657, ctx.r11.u8);
	// stb r3,658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 658, ctx.r3.u8);
	// stb r17,686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 686, ctx.r17.u8);
	// li r17,67
	ctx.r17.s64 = 67;
	// stb r10,659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 659, ctx.r10.u8);
	// stb r25,661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 661, ctx.r25.u8);
	// stb r7,662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 662, ctx.r7.u8);
	// stb r3,663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 663, ctx.r3.u8);
	// stb r10,664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 664, ctx.r10.u8);
	// stb r4,665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 665, ctx.r4.u8);
	// stb r11,666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 666, ctx.r11.u8);
	// stb r9,667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 667, ctx.r9.u8);
	// stb r30,668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 668, ctx.r30.u8);
	// stb r8,669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 669, ctx.r8.u8);
	// stb r9,670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 670, ctx.r9.u8);
	// stb r11,671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 671, ctx.r11.u8);
	// stb r23,672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 672, ctx.r23.u8);
	// stb r6,673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 673, ctx.r6.u8);
	// stb r25,674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 674, ctx.r25.u8);
	// stb r11,675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 675, ctx.r11.u8);
	// stb r29,676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 676, ctx.r29.u8);
	// stb r25,677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 677, ctx.r25.u8);
	// stb r9,678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 678, ctx.r9.u8);
	// stb r11,679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 679, ctx.r11.u8);
	// stb r9,680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 680, ctx.r9.u8);
	// stb r30,681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 681, ctx.r30.u8);
	// stb r10,682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 682, ctx.r10.u8);
	// stb r11,683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 683, ctx.r11.u8);
	// stb r15,684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 684, ctx.r15.u8);
	// stb r6,685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 685, ctx.r6.u8);
	// stb r10,687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 687, ctx.r10.u8);
	// stb r3,688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 688, ctx.r3.u8);
	// stb r11,689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 689, ctx.r11.u8);
	// stb r9,690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 690, ctx.r9.u8);
	// stb r6,691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 691, ctx.r6.u8);
	// stb r11,692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 692, ctx.r11.u8);
	// stb r8,693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 693, ctx.r8.u8);
	// stb r29,694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 694, ctx.r29.u8);
	// stb r29,695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 695, ctx.r29.u8);
	// stb r10,696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 696, ctx.r10.u8);
	// stb r4,697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 697, ctx.r4.u8);
	// stb r4,698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 698, ctx.r4.u8);
	// stb r11,699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 699, ctx.r11.u8);
	// stb r8,700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 700, ctx.r8.u8);
	// stb r11,701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 701, ctx.r11.u8);
	// stb r28,702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 702, ctx.r28.u8);
	// stb r7,703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 703, ctx.r7.u8);
	// stb r21,704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 704, ctx.r21.u8);
	// stb r9,705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 705, ctx.r9.u8);
	// stb r11,706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 706, ctx.r11.u8);
	// stb r4,707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 707, ctx.r4.u8);
	// stb r30,708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 708, ctx.r30.u8);
	// stb r8,709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 709, ctx.r8.u8);
	// stb r21,710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 710, ctx.r21.u8);
	// stb r9,711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 711, ctx.r9.u8);
	// stb r11,712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 712, ctx.r11.u8);
	// stb r7,713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 713, ctx.r7.u8);
	// stb r5,714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 714, ctx.r5.u8);
	// stb r11,715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 715, ctx.r11.u8);
	// stb r9,716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 716, ctx.r9.u8);
	// stb r30,717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 717, ctx.r30.u8);
	// stb r10,718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 718, ctx.r10.u8);
	// stb r11,719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 719, ctx.r11.u8);
	// stb r17,720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 720, ctx.r17.u8);
	// stb r10,721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 721, ctx.r10.u8);
	// stb r5,722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 722, ctx.r5.u8);
	// stb r9,723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 723, ctx.r9.u8);
	// stb r3,724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 724, ctx.r3.u8);
	// stb r8,725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 725, ctx.r8.u8);
	// stb r28,726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 726, ctx.r28.u8);
	// stb r11,727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 727, ctx.r11.u8);
	// stb r14,741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 741, ctx.r14.u8);
	// li r14,52
	ctx.r14.s64 = 52;
	// li r17,70
	ctx.r17.s64 = 70;
	// stb r8,729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 729, ctx.r8.u8);
	// stb r29,730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 730, ctx.r29.u8);
	// stb r7,731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 731, ctx.r7.u8);
	// stb r28,732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 732, ctx.r28.u8);
	// stb r14,762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 762, ctx.r14.u8);
	// li r14,48
	ctx.r14.s64 = 48;
	// stb r17,728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 728, ctx.r17.u8);
	// li r17,82
	ctx.r17.s64 = 82;
	// stb r7,733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 733, ctx.r7.u8);
	// stb r9,734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 734, ctx.r9.u8);
	// stb r23,735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 735, ctx.r23.u8);
	// stb r14,770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 770, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r11,736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 736, ctx.r11.u8);
	// stb r17,737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 737, ctx.r17.u8);
	// stb r6,738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 738, ctx.r6.u8);
	// stb r6,739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 739, ctx.r6.u8);
	// stb r14,771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 771, ctx.r14.u8);
	// li r14,73
	ctx.r14.s64 = 73;
	// stb r19,740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 740, ctx.r19.u8);
	// stb r31,742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 742, ctx.r31.u8);
	// stb r31,743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 743, ctx.r31.u8);
	// stb r31,744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 744, ctx.r31.u8);
	// stb r14,782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 782, ctx.r14.u8);
	// li r14,38
	ctx.r14.s64 = 38;
	// stb r18,745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 745, ctx.r18.u8);
	// stb r30,746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 746, ctx.r30.u8);
	// stb r31,747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 747, ctx.r31.u8);
	// stb r31,748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 748, ctx.r31.u8);
	// stb r14,795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 795, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r31,749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 749, ctx.r31.u8);
	// stb r31,750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 750, ctx.r31.u8);
	// stb r31,751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 751, ctx.r31.u8);
	// stb r31,752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 752, ctx.r31.u8);
	// stb r24,753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 753, ctx.r24.u8);
	// stb r22,754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 754, ctx.r22.u8);
	// stb r31,755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 755, ctx.r31.u8);
	// stb r31,756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 756, ctx.r31.u8);
	// stb r31,757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 757, ctx.r31.u8);
	// stb r31,758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 758, ctx.r31.u8);
	// stb r31,759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 759, ctx.r31.u8);
	// stb r31,760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 760, ctx.r31.u8);
	// stb r31,761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 761, ctx.r31.u8);
	// stb r31,763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 763, ctx.r31.u8);
	// stb r31,764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 764, ctx.r31.u8);
	// stb r31,765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 765, ctx.r31.u8);
	// stb r31,766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 766, ctx.r31.u8);
	// stb r31,767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 767, ctx.r31.u8);
	// stb r31,768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 768, ctx.r31.u8);
	// stb r31,769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 769, ctx.r31.u8);
	// stb r29,772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 772, ctx.r29.u8);
	// stb r29,773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 773, ctx.r29.u8);
	// stb r10,774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 774, ctx.r10.u8);
	// stb r4,775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 775, ctx.r4.u8);
	// stb r4,776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 776, ctx.r4.u8);
	// stb r11,777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 777, ctx.r11.u8);
	// stb r9,778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 778, ctx.r9.u8);
	// stb r30,779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 779, ctx.r30.u8);
	// stb r10,780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 780, ctx.r10.u8);
	// stb r11,781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 781, ctx.r11.u8);
	// stb r5,783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 783, ctx.r5.u8);
	// stb r9,784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 784, ctx.r9.u8);
	// stb r10,785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 785, ctx.r10.u8);
	// stb r28,786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 786, ctx.r28.u8);
	// stb r28,787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 787, ctx.r28.u8);
	// stb r7,788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 788, ctx.r7.u8);
	// stb r20,789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 789, ctx.r20.u8);
	// stb r10,790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 790, ctx.r10.u8);
	// stb r5,791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 791, ctx.r5.u8);
	// stb r29,792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 792, ctx.r29.u8);
	// stb r10,793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 793, ctx.r10.u8);
	// stb r11,794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 794, ctx.r11.u8);
	// stb r11,796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 796, ctx.r11.u8);
	// stb r14,797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 797, ctx.r14.u8);
	// stb r8,798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 798, ctx.r8.u8);
	// stb r29,799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 799, ctx.r29.u8);
	// stb r9,800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 800, ctx.r9.u8);
	// li r14,72
	ctx.r14.s64 = 72;
	// stb r7,801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 801, ctx.r7.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r29,802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 802, ctx.r29.u8);
	// stb r8,803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 803, ctx.r8.u8);
	// stb r28,804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 804, ctx.r28.u8);
	// stb r11,805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 805, ctx.r11.u8);
	// stb r14,806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 806, ctx.r14.u8);
	// li r14,113
	ctx.r14.s64 = 113;
	// stb r10,807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 807, ctx.r10.u8);
	// stb r8,808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 808, ctx.r8.u8);
	// stb r27,809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 809, ctx.r27.u8);
	// stb r25,811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 811, ctx.r25.u8);
	// stb r14,810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 810, ctx.r14.u8);
	// li r14,180
	ctx.r14.s64 = 180;
	// stb r8,812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 812, ctx.r8.u8);
	// stb r3,813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 813, ctx.r3.u8);
	// stb r9,814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 814, ctx.r9.u8);
	// stb r10,815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 815, ctx.r10.u8);
	// stb r14,838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 838, ctx.r14.u8);
	// li r14,176
	ctx.r14.s64 = 176;
	// stb r3,816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 816, ctx.r3.u8);
	// stb r4,817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 817, ctx.r4.u8);
	// stb r31,818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 818, ctx.r31.u8);
	// stb r31,819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 819, ctx.r31.u8);
	// stb r14,846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 846, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r31,820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 820, ctx.r31.u8);
	// stb r18,821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 821, ctx.r18.u8);
	// stb r7,822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 822, ctx.r7.u8);
	// stb r31,823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 823, ctx.r31.u8);
	// stb r31,824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 824, ctx.r31.u8);
	// stb r31,825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 825, ctx.r31.u8);
	// stb r31,826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 826, ctx.r31.u8);
	// stb r31,827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 827, ctx.r31.u8);
	// stb r31,828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 828, ctx.r31.u8);
	// stb r24,829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 829, ctx.r24.u8);
	// stb r22,830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 830, ctx.r22.u8);
	// stb r31,831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 831, ctx.r31.u8);
	// stb r31,832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 832, ctx.r31.u8);
	// stb r31,833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 833, ctx.r31.u8);
	// stb r31,834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 834, ctx.r31.u8);
	// stb r31,835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 835, ctx.r31.u8);
	// stb r31,836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 836, ctx.r31.u8);
	// stb r31,837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 837, ctx.r31.u8);
	// stb r31,839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 839, ctx.r31.u8);
	// stb r31,840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 840, ctx.r31.u8);
	// stb r31,841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 841, ctx.r31.u8);
	// stb r31,842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 842, ctx.r31.u8);
	// stb r31,843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 843, ctx.r31.u8);
	// stb r31,844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 844, ctx.r31.u8);
	// stb r31,845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 845, ctx.r31.u8);
	// stb r14,847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 847, ctx.r14.u8);
	// stb r30,848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 848, ctx.r30.u8);
	// stb r10,849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 849, ctx.r10.u8);
	// stb r11,850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 850, ctx.r11.u8);
	// stb r28,851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 851, ctx.r28.u8);
	// stb r7,852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 852, ctx.r7.u8);
	// stb r21,853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 853, ctx.r21.u8);
	// stb r9,854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 854, ctx.r9.u8);
	// stb r11,855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 855, ctx.r11.u8);
	// stb r4,856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 856, ctx.r4.u8);
	// stb r30,857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 857, ctx.r30.u8);
	// stb r8,858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 858, ctx.r8.u8);
	// stb r21,859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 859, ctx.r21.u8);
	// stb r9,860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 860, ctx.r9.u8);
	// stb r11,861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 861, ctx.r11.u8);
	// stb r4,862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 862, ctx.r4.u8);
	// stb r30,863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 863, ctx.r30.u8);
	// stb r6,864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 864, ctx.r6.u8);
	// stb r25,865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 865, ctx.r25.u8);
	// stb r28,866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 866, ctx.r28.u8);
	// stb r27,867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 867, ctx.r27.u8);
	// stb r11,868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 868, ctx.r11.u8);
	// stb r8,869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 869, ctx.r8.u8);
	// stb r28,870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 870, ctx.r28.u8);
	// stb r28,871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 871, ctx.r28.u8);
	// stb r6,872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 872, ctx.r6.u8);
	// stb r17,873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 873, ctx.r17.u8);
	// stb r11,874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 874, ctx.r11.u8);
	// stb r23,875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 875, ctx.r23.u8);
	// li r17,73
	ctx.r17.s64 = 73;
	// stb r6,876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 876, ctx.r6.u8);
	// stb r25,877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 877, ctx.r25.u8);
	// stb r11,878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 878, ctx.r11.u8);
	// stb r9,879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 879, ctx.r9.u8);
	// stb r6,880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 880, ctx.r6.u8);
	// stb r17,924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 924, ctx.r17.u8);
	// li r17,38
	ctx.r17.s64 = 38;
	// stb r11,881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 881, ctx.r11.u8);
	// stb r8,882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 882, ctx.r8.u8);
	// stb r29,883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 883, ctx.r29.u8);
	// stb r29,884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 884, ctx.r29.u8);
	// stb r17,937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 937, ctx.r17.u8);
	// li r17,72
	ctx.r17.s64 = 72;
	// stb r10,885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 885, ctx.r10.u8);
	// stb r4,886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 886, ctx.r4.u8);
	// stb r4,887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 887, ctx.r4.u8);
	// stb r11,888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 888, ctx.r11.u8);
	// stb r17,948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 948, ctx.r17.u8);
	// li r17,113
	ctx.r17.s64 = 113;
	// stb r8,889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 889, ctx.r8.u8);
	// stb r11,890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 890, ctx.r11.u8);
	// stb r4,891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 891, ctx.r4.u8);
	// stb r19,892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 892, ctx.r19.u8);
	// stb r8,893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 893, ctx.r8.u8);
	// stb r28,894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 894, ctx.r28.u8);
	// stb r28,895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 895, ctx.r28.u8);
	// stb r11,896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 896, ctx.r11.u8);
	// stb r3,897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 897, ctx.r3.u8);
	// stb r10,898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 898, ctx.r10.u8);
	// stb r29,899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 899, ctx.r29.u8);
	// stb r10,900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 900, ctx.r10.u8);
	// stb r4,901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 901, ctx.r4.u8);
	// stb r4,902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 902, ctx.r4.u8);
	// stb r10,903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 903, ctx.r10.u8);
	// stb r27,904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 904, ctx.r27.u8);
	// stb r11,905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 905, ctx.r11.u8);
	// stb r8,906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 906, ctx.r8.u8);
	// stb r3,907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 907, ctx.r3.u8);
	// stb r10,908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 908, ctx.r10.u8);
	// stb r8,909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 909, ctx.r8.u8);
	// stb r11,910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 910, ctx.r11.u8);
	// stb r21,911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 911, ctx.r21.u8);
	// stb r3,912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 912, ctx.r3.u8);
	// stb r7,913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 913, ctx.r7.u8);
	// stb r5,914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 914, ctx.r5.u8);
	// stb r20,915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 915, ctx.r20.u8);
	// stb r7,916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 916, ctx.r7.u8);
	// stb r5,917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 917, ctx.r5.u8);
	// stb r20,918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 918, ctx.r20.u8);
	// stb r11,919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 919, ctx.r11.u8);
	// stb r9,920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 920, ctx.r9.u8);
	// stb r30,921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 921, ctx.r30.u8);
	// stb r10,922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 922, ctx.r10.u8);
	// stb r11,923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 923, ctx.r11.u8);
	// stb r5,925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 925, ctx.r5.u8);
	// stb r9,926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 926, ctx.r9.u8);
	// stb r10,927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 927, ctx.r10.u8);
	// stb r28,928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 928, ctx.r28.u8);
	// stb r28,929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 929, ctx.r28.u8);
	// stb r7,930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 930, ctx.r7.u8);
	// stb r20,931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 931, ctx.r20.u8);
	// stb r10,932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 932, ctx.r10.u8);
	// stb r5,933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 933, ctx.r5.u8);
	// stb r29,934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 934, ctx.r29.u8);
	// stb r10,935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 935, ctx.r10.u8);
	// stb r11,936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 936, ctx.r11.u8);
	// stb r11,938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 938, ctx.r11.u8);
	// stb r14,939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 939, ctx.r14.u8);
	// stb r8,940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 940, ctx.r8.u8);
	// stb r29,941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 941, ctx.r29.u8);
	// stb r9,942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 942, ctx.r9.u8);
	// stb r7,943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 943, ctx.r7.u8);
	// stb r29,944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 944, ctx.r29.u8);
	// stb r8,945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 945, ctx.r8.u8);
	// stb r28,946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 946, ctx.r28.u8);
	// stb r11,947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 947, ctx.r11.u8);
	// stb r10,949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 949, ctx.r10.u8);
	// stb r8,950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 950, ctx.r8.u8);
	// stb r27,951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 951, ctx.r27.u8);
	// stb r17,952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 952, ctx.r17.u8);
	// stb r14,963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 963, ctx.r14.u8);
	// li r14,44
	ctx.r14.s64 = 44;
	// li r17,46
	ctx.r17.s64 = 46;
	// stb r25,953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 953, ctx.r25.u8);
	// stb r8,954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 954, ctx.r8.u8);
	// stb r3,955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 955, ctx.r3.u8);
	// stb r9,956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 956, ctx.r9.u8);
	// stb r14,988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 988, ctx.r14.u8);
	// li r14,39
	ctx.r14.s64 = 39;
	// stb r10,957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 957, ctx.r10.u8);
	// stb r3,958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 958, ctx.r3.u8);
	// stb r4,959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 959, ctx.r4.u8);
	// stb r17,960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 960, ctx.r17.u8);
	// stb r14,992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 992, ctx.r14.u8);
	// li r14,119
	ctx.r14.s64 = 119;
	// stb r11,961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 961, ctx.r11.u8);
	// stb r11,962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 962, ctx.r11.u8);
	// stb r30,964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 964, ctx.r30.u8);
	// stb r10,965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 965, ctx.r10.u8);
	// stb r14,1015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1015, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r3,966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 966, ctx.r3.u8);
	// stb r10,967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 967, ctx.r10.u8);
	// stb r11,968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 968, ctx.r11.u8);
	// stb r7,969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 969, ctx.r7.u8);
	// stb r14,1021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1021, ctx.r14.u8);
	// li r14,106
	ctx.r14.s64 = 106;
	// stb r4,970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 970, ctx.r4.u8);
	// stb r11,971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 971, ctx.r11.u8);
	// stb r5,972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 972, ctx.r5.u8);
	// stb r6,973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 973, ctx.r6.u8);
	// stb r11,974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 974, ctx.r11.u8);
	// stb r27,975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 975, ctx.r27.u8);
	// stb r7,976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 976, ctx.r7.u8);
	// stb r3,977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 977, ctx.r3.u8);
	// stb r10,978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 978, ctx.r10.u8);
	// stb r29,979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 979, ctx.r29.u8);
	// stb r9,980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 980, ctx.r9.u8);
	// stb r11,981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 981, ctx.r11.u8);
	// stb r8,982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 982, ctx.r8.u8);
	// stb r29,983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 983, ctx.r29.u8);
	// stb r29,984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 984, ctx.r29.u8);
	// stb r10,985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 985, ctx.r10.u8);
	// stb r4,986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 986, ctx.r4.u8);
	// stb r4,987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 987, ctx.r4.u8);
	// stb r11,989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 989, ctx.r11.u8);
	// stb r7,990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 990, ctx.r7.u8);
	// stb r9,991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 991, ctx.r9.u8);
	// stb r4,993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 993, ctx.r4.u8);
	// stb r11,994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 994, ctx.r11.u8);
	// stb r25,995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 995, ctx.r25.u8);
	// stb r15,996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 996, ctx.r15.u8);
	// stb r11,997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 997, ctx.r11.u8);
	// stb r9,998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 998, ctx.r9.u8);
	// stb r6,999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 999, ctx.r6.u8);
	// stb r11,1000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1000, ctx.r11.u8);
	// stb r23,1001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1001, ctx.r23.u8);
	// stb r6,1002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1002, ctx.r6.u8);
	// stb r25,1003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1003, ctx.r25.u8);
	// stb r11,1004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1004, ctx.r11.u8);
	// stb r9,1005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1005, ctx.r9.u8);
	// stb r6,1006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1006, ctx.r6.u8);
	// stb r11,1007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1007, ctx.r11.u8);
	// stb r21,1008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1008, ctx.r21.u8);
	// stb r7,1009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1009, ctx.r7.u8);
	// stb r5,1010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1010, ctx.r5.u8);
	// stb r27,1011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1011, ctx.r27.u8);
	// stb r11,1012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1012, ctx.r11.u8);
	// stb r8,1013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1013, ctx.r8.u8);
	// stb r11,1014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1014, ctx.r11.u8);
	// stb r8,1016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1016, ctx.r8.u8);
	// stb r23,1017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1017, ctx.r23.u8);
	// stb r11,1018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1018, ctx.r11.u8);
	// stb r7,1019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1019, ctx.r7.u8);
	// stb r5,1020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1020, ctx.r5.u8);
	// stb r31,1022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1022, ctx.r31.u8);
	// stb r31,1023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1023, ctx.r31.u8);
	// stb r31,1024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1024, ctx.r31.u8);
	// stb r18,1025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1025, ctx.r18.u8);
	// stb r14,1026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1026, ctx.r14.u8);
	// stb r31,1027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1027, ctx.r31.u8);
	// li r14,50
	ctx.r14.s64 = 50;
	// stb r31,1028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1028, ctx.r31.u8);
	// stb r31,1029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1029, ctx.r31.u8);
	// stb r31,1030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1030, ctx.r31.u8);
	// stb r31,1031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1031, ctx.r31.u8);
	// stb r31,1032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1032, ctx.r31.u8);
	// stb r14,1042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1042, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r24,1033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1033, ctx.r24.u8);
	// stb r22,1034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1034, ctx.r22.u8);
	// stb r31,1035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1035, ctx.r31.u8);
	// stb r31,1036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1036, ctx.r31.u8);
	// stb r14,1050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1050, ctx.r14.u8);
	// li r14,72
	ctx.r14.s64 = 72;
	// stb r31,1037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1037, ctx.r31.u8);
	// stb r31,1038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1038, ctx.r31.u8);
	// stb r31,1039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1039, ctx.r31.u8);
	// stb r31,1040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1040, ctx.r31.u8);
	// stb r14,1051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1051, ctx.r14.u8);
	// li r14,107
	ctx.r14.s64 = 107;
	// stb r31,1041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1041, ctx.r31.u8);
	// stb r31,1043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1043, ctx.r31.u8);
	// stb r31,1044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1044, ctx.r31.u8);
	// stb r31,1045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1045, ctx.r31.u8);
	// stb r31,1046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1046, ctx.r31.u8);
	// stb r31,1047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1047, ctx.r31.u8);
	// stb r31,1048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1048, ctx.r31.u8);
	// stb r31,1049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1049, ctx.r31.u8);
	// stb r8,1052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1052, ctx.r8.u8);
	// stb r29,1053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1053, ctx.r29.u8);
	// stb r14,1054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1054, ctx.r14.u8);
	// stb r11,1055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1055, ctx.r11.u8);
	// stb r9,1056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1056, ctx.r9.u8);
	// stb r30,1057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1057, ctx.r30.u8);
	// stb r10,1058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1058, ctx.r10.u8);
	// stb r11,1059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1059, ctx.r11.u8);
	// stb r4,1060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1060, ctx.r4.u8);
	// stb r10,1061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1061, ctx.r10.u8);
	// stb r29,1062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1062, ctx.r29.u8);
	// stb r25,1063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1063, ctx.r25.u8);
	// stb r3,1064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1064, ctx.r3.u8);
	// stb r7,1065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1065, ctx.r7.u8);
	// stb r9,1066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1066, ctx.r9.u8);
	// stb r23,1067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1067, ctx.r23.u8);
	// stb r11,1068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1068, ctx.r11.u8);
	// stb r27,1069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1069, ctx.r27.u8);
	// stb r10,1070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1070, ctx.r10.u8);
	// stb r16,1071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1071, ctx.r16.u8);
	// stb r7,1072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1072, ctx.r7.u8);
	// stb r29,1073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1073, ctx.r29.u8);
	// stb r10,1074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1074, ctx.r10.u8);
	// stb r4,1075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1075, ctx.r4.u8);
	// stb r11,1076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1076, ctx.r11.u8);
	// stb r9,1077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1077, ctx.r9.u8);
	// stb r6,1078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1078, ctx.r6.u8);
	// stb r11,1079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1079, ctx.r11.u8);
	// stb r8,1080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1080, ctx.r8.u8);
	// stb r29,1081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1081, ctx.r29.u8);
	// stb r29,1082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1082, ctx.r29.u8);
	// stb r10,1083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1083, ctx.r10.u8);
	// stb r4,1084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1084, ctx.r4.u8);
	// stb r4,1085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1085, ctx.r4.u8);
	// stb r11,1086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1086, ctx.r11.u8);
	// stb r9,1087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1087, ctx.r9.u8);
	// stb r30,1088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1088, ctx.r30.u8);
	// stb r10,1089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1089, ctx.r10.u8);
	// stb r11,1090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1090, ctx.r11.u8);
	// stb r16,1091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1091, ctx.r16.u8);
	// stb r8,1092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1092, ctx.r8.u8);
	// stb r25,1093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1093, ctx.r25.u8);
	// stb r28,1094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1094, ctx.r28.u8);
	// stb r9,1095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1095, ctx.r9.u8);
	// stb r31,1096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1096, ctx.r31.u8);
	// stb r31,1097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1097, ctx.r31.u8);
	// stb r31,1098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1098, ctx.r31.u8);
	// stb r18,1099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1099, ctx.r18.u8);
	// stb r14,1100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1100, ctx.r14.u8);
	// stb r31,1101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1101, ctx.r31.u8);
	// stb r31,1102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1102, ctx.r31.u8);
	// stb r31,1103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1103, ctx.r31.u8);
	// stb r31,1104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1104, ctx.r31.u8);
	// li r14,207
	ctx.r14.s64 = 207;
	// stb r31,1105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1105, ctx.r31.u8);
	// stb r31,1106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1106, ctx.r31.u8);
	// stb r24,1107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1107, ctx.r24.u8);
	// stb r22,1108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1108, ctx.r22.u8);
	// stb r31,1109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1109, ctx.r31.u8);
	// stb r14,1116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1116, ctx.r14.u8);
	// li r14,203
	ctx.r14.s64 = 203;
	// stb r31,1110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1110, ctx.r31.u8);
	// stb r31,1111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1111, ctx.r31.u8);
	// stb r31,1112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1112, ctx.r31.u8);
	// stb r31,1113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1113, ctx.r31.u8);
	// stb r14,1124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1124, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r31,1114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1114, ctx.r31.u8);
	// stb r31,1115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1115, ctx.r31.u8);
	// stb r31,1117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1117, ctx.r31.u8);
	// stb r31,1118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1118, ctx.r31.u8);
	// stb r14,1125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1125, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// stb r31,1119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1119, ctx.r31.u8);
	// stb r31,1120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1120, ctx.r31.u8);
	// stb r31,1121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1121, ctx.r31.u8);
	// stb r31,1122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1122, ctx.r31.u8);
	// stb r14,1148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1148, ctx.r14.u8);
	// li r14,76
	ctx.r14.s64 = 76;
	// stb r31,1123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1123, ctx.r31.u8);
	// stb r30,1126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1126, ctx.r30.u8);
	// stb r10,1127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1127, ctx.r10.u8);
	// stb r11,1128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1128, ctx.r11.u8);
	// stb r14,1153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1153, ctx.r14.u8);
	// li r14,51
	ctx.r14.s64 = 51;
	// stb r16,1129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1129, ctx.r16.u8);
	// stb r8,1130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1130, ctx.r8.u8);
	// stb r25,1131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1131, ctx.r25.u8);
	// stb r28,1132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1132, ctx.r28.u8);
	// stb r14,1159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1159, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r9,1133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1133, ctx.r9.u8);
	// stb r11,1134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1134, ctx.r11.u8);
	// stb r7,1135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1135, ctx.r7.u8);
	// stb r4,1136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1136, ctx.r4.u8);
	// stb r11,1137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1137, ctx.r11.u8);
	// stb r15,1138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1138, ctx.r15.u8);
	// stb r3,1139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1139, ctx.r3.u8);
	// stb r6,1140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1140, ctx.r6.u8);
	// stb r9,1141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1141, ctx.r9.u8);
	// stb r10,1142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1142, ctx.r10.u8);
	// stb r29,1143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1143, ctx.r29.u8);
	// stb r9,1144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1144, ctx.r9.u8);
	// stb r10,1145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1145, ctx.r10.u8);
	// stb r27,1146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1146, ctx.r27.u8);
	// stb r11,1147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1147, ctx.r11.u8);
	// stb r23,1149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1149, ctx.r23.u8);
	// stb r11,1150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1150, ctx.r11.u8);
	// stb r8,1151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1151, ctx.r8.u8);
	// stb r11,1152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1152, ctx.r11.u8);
	// stb r10,1154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1154, ctx.r10.u8);
	// stb r16,1155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1155, ctx.r16.u8);
	// stb r10,1156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1156, ctx.r10.u8);
	// stb r28,1157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1157, ctx.r28.u8);
	// stb r11,1158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1158, ctx.r11.u8);
	// stb r11,1160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1160, ctx.r11.u8);
	// stb r4,1161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1161, ctx.r4.u8);
	// stb r10,1162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1162, ctx.r10.u8);
	// stb r29,1163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1163, ctx.r29.u8);
	// stb r25,1164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1164, ctx.r25.u8);
	// stb r3,1165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1165, ctx.r3.u8);
	// stb r7,1166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1166, ctx.r7.u8);
	// stb r9,1167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1167, ctx.r9.u8);
	// stb r23,1168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1168, ctx.r23.u8);
	// stb r11,1169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1169, ctx.r11.u8);
	// stb r4,1170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1170, ctx.r4.u8);
	// stb r23,1171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1171, ctx.r23.u8);
	// stb r4,1172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1172, ctx.r4.u8);
	// stb r9,1173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1173, ctx.r9.u8);
	// stb r10,1174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1174, ctx.r10.u8);
	// stb r19,1175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1175, ctx.r19.u8);
	// stb r14,1176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1176, ctx.r14.u8);
	// stb r11,1177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1177, ctx.r11.u8);
	// stb r11,1178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1178, ctx.r11.u8);
	// li r17,72
	ctx.r17.s64 = 72;
	// stb r10,1180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1180, ctx.r10.u8);
	// stb r28,1181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1181, ctx.r28.u8);
	// stb r15,1182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1182, ctx.r15.u8);
	// stb r11,1183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1183, ctx.r11.u8);
	// stb r25,1185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1185, ctx.r25.u8);
	// stb r17,1179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1179, ctx.r17.u8);
	// li r17,77
	ctx.r17.s64 = 77;
	// stb r3,1186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1186, ctx.r3.u8);
	// stb r3,1187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1187, ctx.r3.u8);
	// stb r8,1188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1188, ctx.r8.u8);
	// stb r23,1189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1189, ctx.r23.u8);
	// stb r17,1184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1184, ctx.r17.u8);
	// li r17,107
	ctx.r17.s64 = 107;
	// stb r11,1190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1190, ctx.r11.u8);
	// stb r30,1191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1191, ctx.r30.u8);
	// stb r8,1192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1192, ctx.r8.u8);
	// stb r29,1193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1193, ctx.r29.u8);
	// stb r17,1194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1194, ctx.r17.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r11,1195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1195, ctx.r11.u8);
	// stb r9,1196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1196, ctx.r9.u8);
	// stb r30,1197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1197, ctx.r30.u8);
	// stb r10,1198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1198, ctx.r10.u8);
	// stb r17,1204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1204, ctx.r17.u8);
	// li r17,89
	ctx.r17.s64 = 89;
	// stb r11,1199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1199, ctx.r11.u8);
	// stb r4,1200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1200, ctx.r4.u8);
	// stb r6,1201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1201, ctx.r6.u8);
	// stb r21,1202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1202, ctx.r21.u8);
	// stb r17,1244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1244, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r9,1203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1203, ctx.r9.u8);
	// stb r8,1205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1205, ctx.r8.u8);
	// stb r3,1206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1206, ctx.r3.u8);
	// stb r10,1207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1207, ctx.r10.u8);
	// stb r11,1208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1208, ctx.r11.u8);
	// stb r9,1209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1209, ctx.r9.u8);
	// stb r6,1210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1210, ctx.r6.u8);
	// stb r11,1211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1211, ctx.r11.u8);
	// stb r6,1212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1212, ctx.r6.u8);
	// stb r16,1213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1213, ctx.r16.u8);
	// stb r10,1214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1214, ctx.r10.u8);
	// stb r3,1215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1215, ctx.r3.u8);
	// stb r3,1216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1216, ctx.r3.u8);
	// stb r7,1217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1217, ctx.r7.u8);
	// stb r27,1218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1218, ctx.r27.u8);
	// stb r10,1219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1219, ctx.r10.u8);
	// stb r11,1220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1220, ctx.r11.u8);
	// stb r9,1221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1221, ctx.r9.u8);
	// stb r30,1222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1222, ctx.r30.u8);
	// stb r10,1223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1223, ctx.r10.u8);
	// stb r11,1224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1224, ctx.r11.u8);
	// stb r4,1225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1225, ctx.r4.u8);
	// stb r10,1226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1226, ctx.r10.u8);
	// stb r29,1227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1227, ctx.r29.u8);
	// stb r25,1228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1228, ctx.r25.u8);
	// stb r3,1229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1229, ctx.r3.u8);
	// stb r7,1230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1230, ctx.r7.u8);
	// stb r9,1231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1231, ctx.r9.u8);
	// stb r23,1232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1232, ctx.r23.u8);
	// stb r11,1233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1233, ctx.r11.u8);
	// stb r27,1234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1234, ctx.r27.u8);
	// stb r10,1235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1235, ctx.r10.u8);
	// stb r16,1236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1236, ctx.r16.u8);
	// stb r7,1237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1237, ctx.r7.u8);
	// stb r29,1238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1238, ctx.r29.u8);
	// stb r10,1239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1239, ctx.r10.u8);
	// stb r4,1240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1240, ctx.r4.u8);
	// stb r14,1241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1241, ctx.r14.u8);
	// stb r11,1242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1242, ctx.r11.u8);
	// stb r11,1243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1243, ctx.r11.u8);
	// stb r6,1245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1245, ctx.r6.u8);
	// stb r25,1246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1246, ctx.r25.u8);
	// stb r17,1247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1247, ctx.r17.u8);
	// stb r28,1248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1248, ctx.r28.u8);
	// stb r28,1249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1249, ctx.r28.u8);
	// stb r11,1250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1250, ctx.r11.u8);
	// stb r21,1251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1251, ctx.r21.u8);
	// stb r7,1252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1252, ctx.r7.u8);
	// stb r5,1253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1253, ctx.r5.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r27,1254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1254, ctx.r27.u8);
	// stb r11,1255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1255, ctx.r11.u8);
	// stb r9,1256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1256, ctx.r9.u8);
	// stb r30,1257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1257, ctx.r30.u8);
	// stb r10,1258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1258, ctx.r10.u8);
	// stb r17,1264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1264, ctx.r17.u8);
	// li r17,84
	ctx.r17.s64 = 84;
	// stb r11,1259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1259, ctx.r11.u8);
	// stb r4,1260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1260, ctx.r4.u8);
	// stb r6,1261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1261, ctx.r6.u8);
	// stb r21,1262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1262, ctx.r21.u8);
	// stb r17,1305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1305, ctx.r17.u8);
	// li r17,72
	ctx.r17.s64 = 72;
	// stb r9,1263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1263, ctx.r9.u8);
	// stb r8,1265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1265, ctx.r8.u8);
	// stb r3,1266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1266, ctx.r3.u8);
	// stb r10,1267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1267, ctx.r10.u8);
	// stb r17,1314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1314, ctx.r17.u8);
	// li r17,113
	ctx.r17.s64 = 113;
	// stb r11,1268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1268, ctx.r11.u8);
	// stb r7,1269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1269, ctx.r7.u8);
	// stb r5,1270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1270, ctx.r5.u8);
	// stb r11,1271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1271, ctx.r11.u8);
	// stb r9,1272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1272, ctx.r9.u8);
	// stb r30,1273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1273, ctx.r30.u8);
	// stb r3,1274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1274, ctx.r3.u8);
	// stb r10,1275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1275, ctx.r10.u8);
	// stb r10,1276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1276, ctx.r10.u8);
	// stb r11,1277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1277, ctx.r11.u8);
	// stb r27,1278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1278, ctx.r27.u8);
	// stb r7,1279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1279, ctx.r7.u8);
	// stb r21,1280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1280, ctx.r21.u8);
	// stb r21,1281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1281, ctx.r21.u8);
	// stb r10,1282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1282, ctx.r10.u8);
	// stb r3,1283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1283, ctx.r3.u8);
	// stb r10,1284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1284, ctx.r10.u8);
	// stb r5,1285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1285, ctx.r5.u8);
	// stb r9,1286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1286, ctx.r9.u8);
	// stb r11,1287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1287, ctx.r11.u8);
	// stb r28,1288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1288, ctx.r28.u8);
	// stb r6,1289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1289, ctx.r6.u8);
	// stb r29,1290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1290, ctx.r29.u8);
	// stb r8,1291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1291, ctx.r8.u8);
	// stb r9,1292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1292, ctx.r9.u8);
	// stb r7,1293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1293, ctx.r7.u8);
	// stb r6,1294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1294, ctx.r6.u8);
	// stb r5,1295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1295, ctx.r5.u8);
	// stb r4,1296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1296, ctx.r4.u8);
	// stb r11,1297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1297, ctx.r11.u8);
	// stb r7,1298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1298, ctx.r7.u8);
	// stb r5,1299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1299, ctx.r5.u8);
	// stb r11,1300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1300, ctx.r11.u8);
	// stb r9,1301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1301, ctx.r9.u8);
	// stb r30,1302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1302, ctx.r30.u8);
	// stb r10,1303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1303, ctx.r10.u8);
	// stb r11,1304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1304, ctx.r11.u8);
	// stb r8,1306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1306, ctx.r8.u8);
	// stb r29,1307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1307, ctx.r29.u8);
	// stb r9,1308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1308, ctx.r9.u8);
	// stb r7,1309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1309, ctx.r7.u8);
	// stb r29,1310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1310, ctx.r29.u8);
	// stb r8,1311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1311, ctx.r8.u8);
	// stb r28,1312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1312, ctx.r28.u8);
	// stb r11,1313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1313, ctx.r11.u8);
	// stb r10,1315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1315, ctx.r10.u8);
	// stb r8,1316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1316, ctx.r8.u8);
	// stb r27,1317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1317, ctx.r27.u8);
	// stb r17,1318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1318, ctx.r17.u8);
	// stb r25,1319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1319, ctx.r25.u8);
	// stb r8,1320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1320, ctx.r8.u8);
	// stb r3,1321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1321, ctx.r3.u8);
	// stb r9,1322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1322, ctx.r9.u8);
	// stb r10,1323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1323, ctx.r10.u8);
	// stb r3,1324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1324, ctx.r3.u8);
	// stb r4,1325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1325, ctx.r4.u8);
	// stb r14,1326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1326, ctx.r14.u8);
	// stb r31,1327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1327, ctx.r31.u8);
	// stb r31,1328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1328, ctx.r31.u8);
	// stb r31,1329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1329, ctx.r31.u8);
	// stb r18,1330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1330, ctx.r18.u8);
	// li r14,90
	ctx.r14.s64 = 90;
	// stb r31,1332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1332, ctx.r31.u8);
	// stb r31,1333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1333, ctx.r31.u8);
	// stb r31,1334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1334, ctx.r31.u8);
	// stb r31,1335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1335, ctx.r31.u8);
	// stb r31,1336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1336, ctx.r31.u8);
	// stb r14,1331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1331, ctx.r14.u8);
	// li r14,40
	ctx.r14.s64 = 40;
	// stb r31,1337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1337, ctx.r31.u8);
	// stb r24,1338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1338, ctx.r24.u8);
	// stb r22,1339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1339, ctx.r22.u8);
	// stb r31,1340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1340, ctx.r31.u8);
	// stb r14,1347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1347, ctx.r14.u8);
	// li r14,36
	ctx.r14.s64 = 36;
	// stb r31,1341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1341, ctx.r31.u8);
	// stb r31,1342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1342, ctx.r31.u8);
	// stb r31,1343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1343, ctx.r31.u8);
	// stb r31,1344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1344, ctx.r31.u8);
	// stb r14,1355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1355, ctx.r14.u8);
	// li r14,83
	ctx.r14.s64 = 83;
	// stb r31,1345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1345, ctx.r31.u8);
	// stb r31,1346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1346, ctx.r31.u8);
	// stb r31,1348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1348, ctx.r31.u8);
	// stb r31,1349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1349, ctx.r31.u8);
	// stb r14,1356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1356, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// stb r31,1350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1350, ctx.r31.u8);
	// stb r31,1351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1351, ctx.r31.u8);
	// stb r31,1352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1352, ctx.r31.u8);
	// stb r31,1353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1353, ctx.r31.u8);
	// stb r14,1358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1358, ctx.r14.u8);
	// li r14,77
	ctx.r14.s64 = 77;
	// stb r31,1354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1354, ctx.r31.u8);
	// stb r8,1357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1357, ctx.r8.u8);
	// stb r6,1359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1359, ctx.r6.u8);
	// stb r9,1360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1360, ctx.r9.u8);
	// stb r14,1369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1369, ctx.r14.u8);
	// li r14,39
	ctx.r14.s64 = 39;
	// stb r8,1361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1361, ctx.r8.u8);
	// stb r20,1362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1362, ctx.r20.u8);
	// stb r10,1363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1363, ctx.r10.u8);
	// stb r11,1364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1364, ctx.r11.u8);
	// stb r14,1376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1376, ctx.r14.u8);
	// li r14,67
	ctx.r14.s64 = 67;
	// stb r9,1365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1365, ctx.r9.u8);
	// stb r30,1366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1366, ctx.r30.u8);
	// stb r10,1367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1367, ctx.r10.u8);
	// stb r11,1368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1368, ctx.r11.u8);
	// stb r14,1379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1379, ctx.r14.u8);
	// li r14,80
	ctx.r14.s64 = 80;
	// stb r7,1370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1370, ctx.r7.u8);
	// stb r28,1371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1371, ctx.r28.u8);
	// stb r7,1372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1372, ctx.r7.u8);
	// stb r9,1373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1373, ctx.r9.u8);
	// stb r14,1387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1387, ctx.r14.u8);
	// li r14,91
	ctx.r14.s64 = 91;
	// stb r7,1374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1374, ctx.r7.u8);
	// stb r8,1375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1375, ctx.r8.u8);
	// stb r4,1377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1377, ctx.r4.u8);
	// stb r11,1378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1378, ctx.r11.u8);
	// stb r6,1380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1380, ctx.r6.u8);
	// stb r19,1381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1381, ctx.r19.u8);
	// stb r19,1382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1382, ctx.r19.u8);
	// stb r8,1383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1383, ctx.r8.u8);
	// stb r5,1384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1384, ctx.r5.u8);
	// stb r27,1385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1385, ctx.r27.u8);
	// stb r11,1386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1386, ctx.r11.u8);
	// stb r6,1388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1388, ctx.r6.u8);
	// stb r4,1389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1389, ctx.r4.u8);
	// stb r9,1390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1390, ctx.r9.u8);
	// stb r31,1391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1391, ctx.r31.u8);
	// stb r31,1392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1392, ctx.r31.u8);
	// stb r31,1393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1393, ctx.r31.u8);
	// stb r18,1394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1394, ctx.r18.u8);
	// stb r14,1395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1395, ctx.r14.u8);
	// stb r31,1396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1396, ctx.r31.u8);
	// stb r31,1397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1397, ctx.r31.u8);
	// stb r31,1398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1398, ctx.r31.u8);
	// stb r31,1399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1399, ctx.r31.u8);
	// stb r31,1400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1400, ctx.r31.u8);
	// stb r31,1401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1401, ctx.r31.u8);
	// li r14,187
	ctx.r14.s64 = 187;
	// stb r24,1402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1402, ctx.r24.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r22,1403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1403, ctx.r22.u8);
	// stb r31,1404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1404, ctx.r31.u8);
	// stb r31,1405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1405, ctx.r31.u8);
	// stb r31,1406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1406, ctx.r31.u8);
	// stb r14,1411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1411, ctx.r14.u8);
	// li r14,183
	ctx.r14.s64 = 183;
	// stb r31,1407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1407, ctx.r31.u8);
	// stb r31,1408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1408, ctx.r31.u8);
	// stb r31,1409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1409, ctx.r31.u8);
	// stb r31,1410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1410, ctx.r31.u8);
	// stb r14,1419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1419, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r31,1412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1412, ctx.r31.u8);
	// stb r31,1413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1413, ctx.r31.u8);
	// stb r31,1414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1414, ctx.r31.u8);
	// stb r31,1415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1415, ctx.r31.u8);
	// stb r14,1420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1420, ctx.r14.u8);
	// li r14,119
	ctx.r14.s64 = 119;
	// stb r31,1416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1416, ctx.r31.u8);
	// stb r31,1417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1417, ctx.r31.u8);
	// stb r31,1418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1418, ctx.r31.u8);
	// stb r11,1421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1421, ctx.r11.u8);
	// stb r14,1433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1433, ctx.r14.u8);
	// li r14,107
	ctx.r14.s64 = 107;
	// stb r19,1422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1422, ctx.r19.u8);
	// stb r7,1423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1423, ctx.r7.u8);
	// stb r28,1424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1424, ctx.r28.u8);
	// stb r7,1425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1425, ctx.r7.u8);
	// stb r9,1426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1426, ctx.r9.u8);
	// stb r7,1427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1427, ctx.r7.u8);
	// stb r8,1428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1428, ctx.r8.u8);
	// stb r11,1429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1429, ctx.r11.u8);
	// stb r7,1430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1430, ctx.r7.u8);
	// stb r4,1431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1431, ctx.r4.u8);
	// stb r11,1432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1432, ctx.r11.u8);
	// stb r6,1434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1434, ctx.r6.u8);
	// stb r3,1435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1435, ctx.r3.u8);
	// stb r14,1436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1436, ctx.r14.u8);
	// stb r7,1437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1437, ctx.r7.u8);
	// stb r5,1438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1438, ctx.r5.u8);
	// stb r20,1439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1439, ctx.r20.u8);
	// stb r11,1440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1440, ctx.r11.u8);
	// stb r30,1441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1441, ctx.r30.u8);
	// stb r8,1442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1442, ctx.r8.u8);
	// stb r5,1443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1443, ctx.r5.u8);
	// stb r27,1444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1444, ctx.r27.u8);
	// stb r11,1445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1445, ctx.r11.u8);
	// stb r7,1446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1446, ctx.r7.u8);
	// stb r5,1447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1447, ctx.r5.u8);
	// stb r11,1448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1448, ctx.r11.u8);
	// stb r30,1449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1449, ctx.r30.u8);
	// stb r8,1450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1450, ctx.r8.u8);
	// stb r5,1451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1451, ctx.r5.u8);
	// stb r27,1452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1452, ctx.r27.u8);
	// stb r11,1453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1453, ctx.r11.u8);
	// stb r17,1454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1454, ctx.r17.u8);
	// stb r7,1455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1455, ctx.r7.u8);
	// stb r9,1456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1456, ctx.r9.u8);
	// stb r30,1457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1457, ctx.r30.u8);
	// stb r11,1458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1458, ctx.r11.u8);
	// stb r29,1459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1459, ctx.r29.u8);
	// stb r6,1460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1460, ctx.r6.u8);
	// stb r3,1461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1461, ctx.r3.u8);
	// stb r3,1462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1462, ctx.r3.u8);
	// stb r25,1463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1463, ctx.r25.u8);
	// stb r15,1464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1464, ctx.r15.u8);
	// stb r9,1465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1465, ctx.r9.u8);
	// stb r11,1466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1466, ctx.r11.u8);
	// stb r15,1467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1467, ctx.r15.u8);
	// stb r6,1468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1468, ctx.r6.u8);
	// stb r28,1469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1469, ctx.r28.u8);
	// stb r7,1470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1470, ctx.r7.u8);
	// stb r9,1471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1471, ctx.r9.u8);
	// stb r7,1472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1472, ctx.r7.u8);
	// stb r29,1473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1473, ctx.r29.u8);
	// stb r7,1474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1474, ctx.r7.u8);
	// stb r8,1475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1475, ctx.r8.u8);
	// stb r5,1476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1476, ctx.r5.u8);
	// li r17,44
	ctx.r17.s64 = 44;
	// stb r14,1513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1513, ctx.r14.u8);
	// li r14,39
	ctx.r14.s64 = 39;
	// stb r4,1477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1477, ctx.r4.u8);
	// stb r11,1478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1478, ctx.r11.u8);
	// stb r9,1479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1479, ctx.r9.u8);
	// stb r6,1480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1480, ctx.r6.u8);
	// stb r17,1497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1497, ctx.r17.u8);
	// li r17,85
	ctx.r17.s64 = 85;
	// stb r14,1519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1519, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r11,1481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1481, ctx.r11.u8);
	// stb r3,1482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1482, ctx.r3.u8);
	// stb r7,1483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1483, ctx.r7.u8);
	// stb r17,1512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1512, ctx.r17.u8);
	// li r17,89
	ctx.r17.s64 = 89;
	// stb r20,1484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1484, ctx.r20.u8);
	// stb r11,1485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1485, ctx.r11.u8);
	// stb r8,1486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1486, ctx.r8.u8);
	// stb r5,1487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1487, ctx.r5.u8);
	// stb r17,1534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1534, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r11,1488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1488, ctx.r11.u8);
	// stb r10,1489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1489, ctx.r10.u8);
	// stb r28,1490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1490, ctx.r28.u8);
	// stb r10,1491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1491, ctx.r10.u8);
	// stb r29,1492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1492, ctx.r29.u8);
	// stb r9,1493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1493, ctx.r9.u8);
	// stb r7,1494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1494, ctx.r7.u8);
	// stb r6,1495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1495, ctx.r6.u8);
	// stb r5,1496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1496, ctx.r5.u8);
	// stb r11,1498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1498, ctx.r11.u8);
	// stb r29,1499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1499, ctx.r29.u8);
	// stb r6,1500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1500, ctx.r6.u8);
	// stb r19,1501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1501, ctx.r19.u8);
	// stb r15,1502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1502, ctx.r15.u8);
	// stb r3,1503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1503, ctx.r3.u8);
	// stb r6,1504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1504, ctx.r6.u8);
	// stb r19,1505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1505, ctx.r19.u8);
	// stb r7,1506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1506, ctx.r7.u8);
	// stb r4,1507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1507, ctx.r4.u8);
	// stb r7,1508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1508, ctx.r7.u8);
	// stb r5,1509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1509, ctx.r5.u8);
	// stb r20,1510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1510, ctx.r20.u8);
	// stb r11,1511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1511, ctx.r11.u8);
	// stb r3,1514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1514, ctx.r3.u8);
	// stb r8,1515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1515, ctx.r8.u8);
	// stb r7,1516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1516, ctx.r7.u8);
	// stb r5,1517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1517, ctx.r5.u8);
	// stb r10,1518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1518, ctx.r10.u8);
	// stb r4,1520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1520, ctx.r4.u8);
	// stb r11,1521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1521, ctx.r11.u8);
	// stb r27,1522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1522, ctx.r27.u8);
	// stb r10,1523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1523, ctx.r10.u8);
	// stb r19,1524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1524, ctx.r19.u8);
	// stb r6,1525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1525, ctx.r6.u8);
	// stb r29,1526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1526, ctx.r29.u8);
	// stb r3,1527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1527, ctx.r3.u8);
	// stb r8,1528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1528, ctx.r8.u8);
	// stb r29,1529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1529, ctx.r29.u8);
	// stb r23,1530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1530, ctx.r23.u8);
	// stb r14,1531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1531, ctx.r14.u8);
	// stb r11,1532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1532, ctx.r11.u8);
	// stb r11,1533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1533, ctx.r11.u8);
	// stb r6,1535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1535, ctx.r6.u8);
	// stb r25,1536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1536, ctx.r25.u8);
	// stb r17,1537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1537, ctx.r17.u8);
	// stb r28,1538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1538, ctx.r28.u8);
	// stb r28,1539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1539, ctx.r28.u8);
	// stb r11,1540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1540, ctx.r11.u8);
	// stb r5,1541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1541, ctx.r5.u8);
	// stb r10,1542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1542, ctx.r10.u8);
	// stb r10,1543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1543, ctx.r10.u8);
	// stb r27,1544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1544, ctx.r27.u8);
	// stb r11,1545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1545, ctx.r11.u8);
	// stb r9,1546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1546, ctx.r9.u8);
	// stb r6,1547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1547, ctx.r6.u8);
	// stb r11,1548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1548, ctx.r11.u8);
	// stb r21,1549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1549, ctx.r21.u8);
	// stb r7,1550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1550, ctx.r7.u8);
	// stb r5,1551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1551, ctx.r5.u8);
	// stb r14,1601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1601, ctx.r14.u8);
	// li r14,94
	ctx.r14.s64 = 94;
	// li r17,98
	ctx.r17.s64 = 98;
	// stb r27,1552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1552, ctx.r27.u8);
	// stb r11,1553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1553, ctx.r11.u8);
	// stb r9,1554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1554, ctx.r9.u8);
	// stb r30,1555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1555, ctx.r30.u8);
	// stb r14,1606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1606, ctx.r14.u8);
	// li r14,57
	ctx.r14.s64 = 57;
	// stb r10,1556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1556, ctx.r10.u8);
	// stb r7,1557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1557, ctx.r7.u8);
	// stb r3,1558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1558, ctx.r3.u8);
	// stb r11,1559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1559, ctx.r11.u8);
	// stb r29,1560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1560, ctx.r29.u8);
	// stb r6,1561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1561, ctx.r6.u8);
	// stb r19,1562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1562, ctx.r19.u8);
	// stb r19,1563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1563, ctx.r19.u8);
	// stb r8,1564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1564, ctx.r8.u8);
	// stb r5,1565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1565, ctx.r5.u8);
	// stb r27,1566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1566, ctx.r27.u8);
	// stb r11,1567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1567, ctx.r11.u8);
	// stb r15,1568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1568, ctx.r15.u8);
	// stb r6,1569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1569, ctx.r6.u8);
	// stb r4,1570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1570, ctx.r4.u8);
	// stb r9,1571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1571, ctx.r9.u8);
	// stb r11,1572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1572, ctx.r11.u8);
	// stb r8,1573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1573, ctx.r8.u8);
	// stb r5,1574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1574, ctx.r5.u8);
	// stb r27,1575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1575, ctx.r27.u8);
	// stb r11,1576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1576, ctx.r11.u8);
	// stb r4,1577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1577, ctx.r4.u8);
	// stb r8,1578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1578, ctx.r8.u8);
	// stb r17,1579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1579, ctx.r17.u8);
	// stb r6,1580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1580, ctx.r6.u8);
	// stb r9,1581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1581, ctx.r9.u8);
	// stb r8,1582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1582, ctx.r8.u8);
	// stb r20,1583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1583, ctx.r20.u8);
	// stb r10,1584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1584, ctx.r10.u8);
	// stb r11,1585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1585, ctx.r11.u8);
	// stb r9,1586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1586, ctx.r9.u8);
	// stb r30,1587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1587, ctx.r30.u8);
	// stb r10,1588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1588, ctx.r10.u8);
	// stb r7,1589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1589, ctx.r7.u8);
	// stb r3,1590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1590, ctx.r3.u8);
	// stb r11,1591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1591, ctx.r11.u8);
	// stb r6,1592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1592, ctx.r6.u8);
	// stb r15,1593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1593, ctx.r15.u8);
	// stb r10,1594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1594, ctx.r10.u8);
	// stb r3,1595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1595, ctx.r3.u8);
	// stb r8,1596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1596, ctx.r8.u8);
	// stb r9,1597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1597, ctx.r9.u8);
	// stb r7,1598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1598, ctx.r7.u8);
	// stb r6,1599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1599, ctx.r6.u8);
	// stb r5,1600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1600, ctx.r5.u8);
	// stb r31,1602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1602, ctx.r31.u8);
	// stb r31,1603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1603, ctx.r31.u8);
	// stb r31,1604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1604, ctx.r31.u8);
	// stb r18,1605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1605, ctx.r18.u8);
	// stb r31,1607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1607, ctx.r31.u8);
	// stb r31,1608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1608, ctx.r31.u8);
	// stb r31,1609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1609, ctx.r31.u8);
	// stb r31,1610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1610, ctx.r31.u8);
	// stb r31,1611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1611, ctx.r31.u8);
	// stb r31,1612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1612, ctx.r31.u8);
	// stb r24,1613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1613, ctx.r24.u8);
	// stb r22,1614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1614, ctx.r22.u8);
	// stb r31,1615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1615, ctx.r31.u8);
	// stb r31,1616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1616, ctx.r31.u8);
	// stb r31,1617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1617, ctx.r31.u8);
	// stb r31,1618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1618, ctx.r31.u8);
	// stb r31,1619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1619, ctx.r31.u8);
	// stb r31,1620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1620, ctx.r31.u8);
	// stb r31,1621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1621, ctx.r31.u8);
	// stb r14,1622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1622, ctx.r14.u8);
	// stb r31,1623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1623, ctx.r31.u8);
	// stb r31,1624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1624, ctx.r31.u8);
	// stb r31,1625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1625, ctx.r31.u8);
	// stb r31,1626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1626, ctx.r31.u8);
	// stb r31,1627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1627, ctx.r31.u8);
	// stb r31,1628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1628, ctx.r31.u8);
	// stb r31,1629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1629, ctx.r31.u8);
	// li r14,53
	ctx.r14.s64 = 53;
	// stb r3,1632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1632, ctx.r3.u8);
	// stb r8,1633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1633, ctx.r8.u8);
	// stb r16,1634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1634, ctx.r16.u8);
	// stb r10,1635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1635, ctx.r10.u8);
	// stb r28,1636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1636, ctx.r28.u8);
	// stb r14,1630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1630, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r11,1637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1637, ctx.r11.u8);
	// stb r9,1638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1638, ctx.r9.u8);
	// stb r30,1639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1639, ctx.r30.u8);
	// stb r3,1640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1640, ctx.r3.u8);
	// stb r14,1631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1631, ctx.r14.u8);
	// li r14,77
	ctx.r14.s64 = 77;
	// stb r6,1641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1641, ctx.r6.u8);
	// stb r25,1642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1642, ctx.r25.u8);
	// stb r20,1643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1643, ctx.r20.u8);
	// stb r30,1644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1644, ctx.r30.u8);
	// stb r14,1663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1663, ctx.r14.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r11,1645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1645, ctx.r11.u8);
	// stb r9,1646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1646, ctx.r9.u8);
	// stb r30,1647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1647, ctx.r30.u8);
	// stb r10,1648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1648, ctx.r10.u8);
	// stb r14,1675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1675, ctx.r14.u8);
	// li r14,95
	ctx.r14.s64 = 95;
	// stb r11,1649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1649, ctx.r11.u8);
	// stb r16,1650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1650, ctx.r16.u8);
	// stb r10,1651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1651, ctx.r10.u8);
	// stb r5,1652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1652, ctx.r5.u8);
	// stb r14,1687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1687, ctx.r14.u8);
	// li r14,147
	ctx.r14.s64 = 147;
	// stb r9,1653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1653, ctx.r9.u8);
	// stb r4,1654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1654, ctx.r4.u8);
	// stb r11,1655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1655, ctx.r11.u8);
	// stb r9,1656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1656, ctx.r9.u8);
	// stb r6,1657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1657, ctx.r6.u8);
	// stb r11,1658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1658, ctx.r11.u8);
	// stb r9,1659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1659, ctx.r9.u8);
	// stb r30,1660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1660, ctx.r30.u8);
	// stb r10,1661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1661, ctx.r10.u8);
	// stb r11,1662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1662, ctx.r11.u8);
	// stb r8,1664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1664, ctx.r8.u8);
	// stb r7,1665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1665, ctx.r7.u8);
	// stb r5,1666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1666, ctx.r5.u8);
	// stb r9,1667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1667, ctx.r9.u8);
	// stb r10,1668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1668, ctx.r10.u8);
	// stb r5,1669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1669, ctx.r5.u8);
	// stb r8,1670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1670, ctx.r8.u8);
	// stb r5,1671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1671, ctx.r5.u8);
	// stb r29,1672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1672, ctx.r29.u8);
	// stb r10,1673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1673, ctx.r10.u8);
	// stb r11,1674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1674, ctx.r11.u8);
	// stb r8,1676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1676, ctx.r8.u8);
	// stb r29,1677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1677, ctx.r29.u8);
	// stb r7,1678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1678, ctx.r7.u8);
	// stb r28,1679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1679, ctx.r28.u8);
	// stb r7,1680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1680, ctx.r7.u8);
	// stb r9,1681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1681, ctx.r9.u8);
	// stb r23,1682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1682, ctx.r23.u8);
	// stb r31,1683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1683, ctx.r31.u8);
	// stb r31,1684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1684, ctx.r31.u8);
	// stb r31,1685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1685, ctx.r31.u8);
	// stb r18,1686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1686, ctx.r18.u8);
	// stb r31,1688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1688, ctx.r31.u8);
	// stb r31,1689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1689, ctx.r31.u8);
	// stb r31,1690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1690, ctx.r31.u8);
	// stb r31,1691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1691, ctx.r31.u8);
	// stb r31,1692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1692, ctx.r31.u8);
	// stb r31,1693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1693, ctx.r31.u8);
	// stb r24,1694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1694, ctx.r24.u8);
	// stb r22,1695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1695, ctx.r22.u8);
	// stb r31,1696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1696, ctx.r31.u8);
	// stb r31,1697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1697, ctx.r31.u8);
	// stb r31,1698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1698, ctx.r31.u8);
	// stb r31,1699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1699, ctx.r31.u8);
	// stb r31,1700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1700, ctx.r31.u8);
	// stb r31,1701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1701, ctx.r31.u8);
	// stb r31,1702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1702, ctx.r31.u8);
	// stb r14,1703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1703, ctx.r14.u8);
	// stb r31,1704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1704, ctx.r31.u8);
	// li r14,143
	ctx.r14.s64 = 143;
	// stb r31,1705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1705, ctx.r31.u8);
	// li r17,44
	ctx.r17.s64 = 44;
	// stb r31,1706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1706, ctx.r31.u8);
	// stb r31,1707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1707, ctx.r31.u8);
	// stb r31,1708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1708, ctx.r31.u8);
	// stb r31,1709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1709, ctx.r31.u8);
	// stb r14,1711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1711, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r17,1774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1774, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r31,1710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1710, ctx.r31.u8);
	// stb r3,1713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1713, ctx.r3.u8);
	// stb r8,1714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1714, ctx.r8.u8);
	// stb r14,1712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1712, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// stb r16,1715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1715, ctx.r16.u8);
	// stb r10,1716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1716, ctx.r10.u8);
	// stb r28,1717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1717, ctx.r28.u8);
	// stb r28,1718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1718, ctx.r28.u8);
	// stb r14,1744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1744, ctx.r14.u8);
	// li r14,119
	ctx.r14.s64 = 119;
	// stb r7,1719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1719, ctx.r7.u8);
	// stb r5,1720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1720, ctx.r5.u8);
	// stb r20,1721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1721, ctx.r20.u8);
	// stb r11,1722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1722, ctx.r11.u8);
	// stb r9,1723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1723, ctx.r9.u8);
	// stb r30,1724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1724, ctx.r30.u8);
	// stb r3,1725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1725, ctx.r3.u8);
	// stb r6,1726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1726, ctx.r6.u8);
	// stb r25,1727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1727, ctx.r25.u8);
	// stb r20,1728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1728, ctx.r20.u8);
	// stb r30,1729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1729, ctx.r30.u8);
	// stb r11,1730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1730, ctx.r11.u8);
	// stb r9,1731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1731, ctx.r9.u8);
	// stb r30,1732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1732, ctx.r30.u8);
	// stb r10,1733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1733, ctx.r10.u8);
	// stb r11,1734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1734, ctx.r11.u8);
	// stb r29,1735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1735, ctx.r29.u8);
	// stb r28,1736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1736, ctx.r28.u8);
	// stb r6,1737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1737, ctx.r6.u8);
	// stb r4,1738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1738, ctx.r4.u8);
	// stb r10,1739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1739, ctx.r10.u8);
	// stb r27,1740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1740, ctx.r27.u8);
	// stb r11,1741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1741, ctx.r11.u8);
	// stb r4,1742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1742, ctx.r4.u8);
	// stb r25,1743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1743, ctx.r25.u8);
	// stb r14,1745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1745, ctx.r14.u8);
	// stb r8,1746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1746, ctx.r8.u8);
	// stb r23,1747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1747, ctx.r23.u8);
	// stb r11,1748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1748, ctx.r11.u8);
	// stb r4,1749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1749, ctx.r4.u8);
	// stb r23,1750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1750, ctx.r23.u8);
	// stb r4,1751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1751, ctx.r4.u8);
	// stb r9,1752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1752, ctx.r9.u8);
	// stb r10,1753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1753, ctx.r10.u8);
	// stb r19,1754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1754, ctx.r19.u8);
	// stb r11,1755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1755, ctx.r11.u8);
	// stb r9,1756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1756, ctx.r9.u8);
	// stb r6,1757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1757, ctx.r6.u8);
	// stb r11,1758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1758, ctx.r11.u8);
	// stb r8,1759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1759, ctx.r8.u8);
	// stb r16,1760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1760, ctx.r16.u8);
	// stb r6,1761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1761, ctx.r6.u8);
	// stb r7,1762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1762, ctx.r7.u8);
	// stb r27,1763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1763, ctx.r27.u8);
	// stb r11,1764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1764, ctx.r11.u8);
	// stb r27,1765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1765, ctx.r27.u8);
	// stb r10,1766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1766, ctx.r10.u8);
	// stb r9,1767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1767, ctx.r9.u8);
	// stb r10,1768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1768, ctx.r10.u8);
	// stb r29,1769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1769, ctx.r29.u8);
	// stb r9,1770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1770, ctx.r9.u8);
	// stb r7,1771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1771, ctx.r7.u8);
	// stb r6,1772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1772, ctx.r6.u8);
	// stb r5,1773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1773, ctx.r5.u8);
	// stb r11,1775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1775, ctx.r11.u8);
	// stb r23,1776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1776, ctx.r23.u8);
	// stb r6,1777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1777, ctx.r6.u8);
	// stb r25,1778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1778, ctx.r25.u8);
	// stb r17,1779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1779, ctx.r17.u8);
	// stb r14,1812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1812, ctx.r14.u8);
	// li r14,77
	ctx.r14.s64 = 77;
	// stb r28,1780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1780, ctx.r28.u8);
	// stb r28,1781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1781, ctx.r28.u8);
	// stb r11,1782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1782, ctx.r11.u8);
	// stb r5,1783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1783, ctx.r5.u8);
	// stb r14,1833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1833, ctx.r14.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r10,1784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1784, ctx.r10.u8);
	// stb r10,1785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1785, ctx.r10.u8);
	// stb r27,1786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1786, ctx.r27.u8);
	// stb r11,1787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1787, ctx.r11.u8);
	// stb r14,1845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1845, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r9,1788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1788, ctx.r9.u8);
	// stb r6,1789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1789, ctx.r6.u8);
	// stb r11,1790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1790, ctx.r11.u8);
	// stb r28,1791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1791, ctx.r28.u8);
	// stb r6,1792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1792, ctx.r6.u8);
	// stb r29,1793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1793, ctx.r29.u8);
	// stb r8,1794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1794, ctx.r8.u8);
	// stb r9,1795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1795, ctx.r9.u8);
	// stb r10,1796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1796, ctx.r10.u8);
	// stb r11,1797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1797, ctx.r11.u8);
	// stb r9,1798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1798, ctx.r9.u8);
	// stb r30,1799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1799, ctx.r30.u8);
	// stb r10,1800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1800, ctx.r10.u8);
	// stb r11,1801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1801, ctx.r11.u8);
	// stb r16,1802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1802, ctx.r16.u8);
	// stb r10,1803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1803, ctx.r10.u8);
	// stb r5,1804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1804, ctx.r5.u8);
	// stb r9,1805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1805, ctx.r9.u8);
	// stb r11,1806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1806, ctx.r11.u8);
	// stb r9,1807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1807, ctx.r9.u8);
	// stb r30,1808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1808, ctx.r30.u8);
	// stb r8,1809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1809, ctx.r8.u8);
	// stb r9,1810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1810, ctx.r9.u8);
	// stb r11,1811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1811, ctx.r11.u8);
	// stb r7,1813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1813, ctx.r7.u8);
	// stb r28,1814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1814, ctx.r28.u8);
	// stb r28,1815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1815, ctx.r28.u8);
	// stb r11,1816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1816, ctx.r11.u8);
	// stb r28,1817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1817, ctx.r28.u8);
	// stb r10,1818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1818, ctx.r10.u8);
	// stb r8,1819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1819, ctx.r8.u8);
	// stb r27,1820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1820, ctx.r27.u8);
	// stb r11,1821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1821, ctx.r11.u8);
	// stb r23,1822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1822, ctx.r23.u8);
	// stb r6,1823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1823, ctx.r6.u8);
	// stb r25,1824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1824, ctx.r25.u8);
	// stb r11,1825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1825, ctx.r11.u8);
	// stb r9,1826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1826, ctx.r9.u8);
	// stb r6,1827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1827, ctx.r6.u8);
	// stb r11,1828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1828, ctx.r11.u8);
	// stb r9,1829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1829, ctx.r9.u8);
	// stb r30,1830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1830, ctx.r30.u8);
	// stb r10,1831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1831, ctx.r10.u8);
	// stb r11,1832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1832, ctx.r11.u8);
	// stb r8,1834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1834, ctx.r8.u8);
	// stb r7,1835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1835, ctx.r7.u8);
	// stb r5,1836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1836, ctx.r5.u8);
	// stb r9,1837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1837, ctx.r9.u8);
	// stb r10,1838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1838, ctx.r10.u8);
	// stb r5,1839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1839, ctx.r5.u8);
	// stb r8,1840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1840, ctx.r8.u8);
	// stb r5,1841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1841, ctx.r5.u8);
	// stb r29,1842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1842, ctx.r29.u8);
	// stb r10,1843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1843, ctx.r10.u8);
	// stb r11,1844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1844, ctx.r11.u8);
	// stb r8,1846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1846, ctx.r8.u8);
	// stb r29,1847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1847, ctx.r29.u8);
	// stb r7,1848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1848, ctx.r7.u8);
	// stb r28,1849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1849, ctx.r28.u8);
	// stb r7,1850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1850, ctx.r7.u8);
	// stb r9,1851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1851, ctx.r9.u8);
	// stb r23,1852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1852, ctx.r23.u8);
	// stb r14,1853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1853, ctx.r14.u8);
	// stb r31,1854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1854, ctx.r31.u8);
	// stb r31,1855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1855, ctx.r31.u8);
	// stb r31,1856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1856, ctx.r31.u8);
	// stb r18,1857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1857, ctx.r18.u8);
	// li r14,96
	ctx.r14.s64 = 96;
	// stb r31,1859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1859, ctx.r31.u8);
	// stb r31,1860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1860, ctx.r31.u8);
	// stb r31,1861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1861, ctx.r31.u8);
	// stb r31,1862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1862, ctx.r31.u8);
	// stb r31,1863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1863, ctx.r31.u8);
	// stb r14,1858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1858, ctx.r14.u8);
	// li r14,28
	ctx.r14.s64 = 28;
	// stb r31,1864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1864, ctx.r31.u8);
	// stb r24,1865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1865, ctx.r24.u8);
	// stb r22,1866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1866, ctx.r22.u8);
	// stb r31,1867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1867, ctx.r31.u8);
	// stb r14,1882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1882, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r31,1868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1868, ctx.r31.u8);
	// stb r31,1869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1869, ctx.r31.u8);
	// stb r31,1870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1870, ctx.r31.u8);
	// stb r31,1871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1871, ctx.r31.u8);
	// stb r14,1883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1883, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// stb r31,1872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1872, ctx.r31.u8);
	// stb r31,1873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1873, ctx.r31.u8);
	// stb r11,1874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1874, ctx.r11.u8);
	// stb r31,1875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1875, ctx.r31.u8);
	// stb r14,1895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1895, ctx.r14.u8);
	// li r14,195
	ctx.r14.s64 = 195;
	// stb r31,1876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1876, ctx.r31.u8);
	// stb r31,1877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1877, ctx.r31.u8);
	// stb r31,1878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1878, ctx.r31.u8);
	// stb r31,1879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1879, ctx.r31.u8);
	// stb r31,1880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1880, ctx.r31.u8);
	// stb r31,1881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1881, ctx.r31.u8);
	// stb r29,1884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1884, ctx.r29.u8);
	// stb r29,1885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1885, ctx.r29.u8);
	// stb r10,1886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1886, ctx.r10.u8);
	// stb r4,1887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1887, ctx.r4.u8);
	// stb r4,1888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1888, ctx.r4.u8);
	// stb r11,1889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1889, ctx.r11.u8);
	// stb r9,1890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1890, ctx.r9.u8);
	// stb r30,1891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1891, ctx.r30.u8);
	// stb r10,1892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1892, ctx.r10.u8);
	// stb r11,1893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1893, ctx.r11.u8);
	// stb r8,1894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1894, ctx.r8.u8);
	// stb r8,1896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1896, ctx.r8.u8);
	// stb r5,1897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1897, ctx.r5.u8);
	// stb r27,1898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1898, ctx.r27.u8);
	// stb r6,1899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1899, ctx.r6.u8);
	// stb r5,1900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1900, ctx.r5.u8);
	// stb r10,1901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1901, ctx.r10.u8);
	// stb r27,1902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1902, ctx.r27.u8);
	// stb r11,1903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1903, ctx.r11.u8);
	// stb r9,1904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1904, ctx.r9.u8);
	// stb r25,1905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1905, ctx.r25.u8);
	// stb r5,1906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1906, ctx.r5.u8);
	// stb r5,1907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1907, ctx.r5.u8);
	// stb r10,1908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1908, ctx.r10.u8);
	// stb r28,1909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1909, ctx.r28.u8);
	// stb r31,1910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1910, ctx.r31.u8);
	// stb r31,1911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1911, ctx.r31.u8);
	// stb r31,1912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1912, ctx.r31.u8);
	// stb r18,1913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1913, ctx.r18.u8);
	// stb r8,1914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1914, ctx.r8.u8);
	// stb r31,1915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1915, ctx.r31.u8);
	// stb r31,1916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1916, ctx.r31.u8);
	// stb r31,1917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1917, ctx.r31.u8);
	// stb r31,1918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1918, ctx.r31.u8);
	// stb r31,1919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1919, ctx.r31.u8);
	// stb r31,1920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1920, ctx.r31.u8);
	// stb r24,1921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1921, ctx.r24.u8);
	// stb r22,1922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1922, ctx.r22.u8);
	// stb r31,1923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1923, ctx.r31.u8);
	// stb r31,1924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1924, ctx.r31.u8);
	// stb r31,1925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1925, ctx.r31.u8);
	// stb r31,1926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1926, ctx.r31.u8);
	// stb r31,1927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1927, ctx.r31.u8);
	// stb r31,1928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1928, ctx.r31.u8);
	// stb r31,1929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1929, ctx.r31.u8);
	// stb r14,1930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1930, ctx.r14.u8);
	// stb r31,1931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1931, ctx.r31.u8);
	// stb r31,1932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1932, ctx.r31.u8);
	// stb r31,1933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1933, ctx.r31.u8);
	// li r14,191
	ctx.r14.s64 = 191;
	// stb r31,1934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1934, ctx.r31.u8);
	// stb r31,1935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1935, ctx.r31.u8);
	// stb r31,1936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1936, ctx.r31.u8);
	// stb r31,1937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1937, ctx.r31.u8);
	// stb r11,1940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1940, ctx.r11.u8);
	// stb r14,1938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1938, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r21,1941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1941, ctx.r21.u8);
	// stb r8,1942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1942, ctx.r8.u8);
	// stb r7,1943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1943, ctx.r7.u8);
	// stb r5,1944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1944, ctx.r5.u8);
	// stb r14,1939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1939, ctx.r14.u8);
	// li r14,106
	ctx.r14.s64 = 106;
	// stb r9,1945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1945, ctx.r9.u8);
	// stb r11,1946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1946, ctx.r11.u8);
	// stb r4,1947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1947, ctx.r4.u8);
	// stb r7,1948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1948, ctx.r7.u8);
	// stb r14,1991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1991, ctx.r14.u8);
	// li r14,77
	ctx.r14.s64 = 77;
	// stb r20,1949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1949, ctx.r20.u8);
	// stb r5,1950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1950, ctx.r5.u8);
	// stb r8,1951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1951, ctx.r8.u8);
	// stb r28,1952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1952, ctx.r28.u8);
	// stb r11,1953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1953, ctx.r11.u8);
	// stb r7,1954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1954, ctx.r7.u8);
	// stb r5,1955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1955, ctx.r5.u8);
	// stb r27,1956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1956, ctx.r27.u8);
	// stb r7,1957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1957, ctx.r7.u8);
	// stb r29,1958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1958, ctx.r29.u8);
	// stb r8,1959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1959, ctx.r8.u8);
	// stb r9,1960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1960, ctx.r9.u8);
	// stb r10,1961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1961, ctx.r10.u8);
	// stb r4,1962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1962, ctx.r4.u8);
	// stb r11,1963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1963, ctx.r11.u8);
	// stb r9,1964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1964, ctx.r9.u8);
	// stb r30,1965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1965, ctx.r30.u8);
	// stb r8,1966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1966, ctx.r8.u8);
	// stb r9,1967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1967, ctx.r9.u8);
	// stb r11,1968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1968, ctx.r11.u8);
	// stb r9,1969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1969, ctx.r9.u8);
	// stb r30,1970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1970, ctx.r30.u8);
	// stb r10,1971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1971, ctx.r10.u8);
	// stb r11,1972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1972, ctx.r11.u8);
	// stb r29,1973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1973, ctx.r29.u8);
	// stb r6,1974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1974, ctx.r6.u8);
	// stb r19,1975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1975, ctx.r19.u8);
	// stb r19,1976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1976, ctx.r19.u8);
	// stb r8,1977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1977, ctx.r8.u8);
	// stb r5,1978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1978, ctx.r5.u8);
	// stb r27,1979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1979, ctx.r27.u8);
	// stb r11,1980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1980, ctx.r11.u8);
	// stb r15,1981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1981, ctx.r15.u8);
	// stb r6,1982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1982, ctx.r6.u8);
	// stb r4,1983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1983, ctx.r4.u8);
	// stb r9,1984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1984, ctx.r9.u8);
	// stb r11,1985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1985, ctx.r11.u8);
	// stb r7,1986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1986, ctx.r7.u8);
	// stb r4,1987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1987, ctx.r4.u8);
	// stb r11,1988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1988, ctx.r11.u8);
	// stb r8,1989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1989, ctx.r8.u8);
	// stb r27,1990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1990, ctx.r27.u8);
	// stb r8,1992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1992, ctx.r8.u8);
	// stb r29,1993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1993, ctx.r29.u8);
	// stb r10,1994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1994, ctx.r10.u8);
	// stb r5,1995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1995, ctx.r5.u8);
	// stb r9,1996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1996, ctx.r9.u8);
	// stb r11,1997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1997, ctx.r11.u8);
	// stb r9,1998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1998, ctx.r9.u8);
	// stb r6,1999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1999, ctx.r6.u8);
	// stb r11,2000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2000, ctx.r11.u8);
	// stb r9,2001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2001, ctx.r9.u8);
	// stb r30,2002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2002, ctx.r30.u8);
	// stb r10,2003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2003, ctx.r10.u8);
	// stb r11,2004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2004, ctx.r11.u8);
	// stb r14,2005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2005, ctx.r14.u8);
	// stb r8,2006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2006, ctx.r8.u8);
	// stb r7,2007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2007, ctx.r7.u8);
	// stb r5,2008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2008, ctx.r5.u8);
	// stb r9,2009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2009, ctx.r9.u8);
	// stb r10,2010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2010, ctx.r10.u8);
	// li r17,77
	ctx.r17.s64 = 77;
	// stb r5,2011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2011, ctx.r5.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r8,2012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2012, ctx.r8.u8);
	// stb r5,2013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2013, ctx.r5.u8);
	// stb r29,2014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2014, ctx.r29.u8);
	// stb r10,2015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2015, ctx.r10.u8);
	// stb r17,2028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2028, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r14,2017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2017, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r11,2016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2016, ctx.r11.u8);
	// stb r8,2018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2018, ctx.r8.u8);
	// stb r29,2019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2019, ctx.r29.u8);
	// stb r17,2040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2040, ctx.r17.u8);
	// li r17,89
	ctx.r17.s64 = 89;
	// stb r7,2020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2020, ctx.r7.u8);
	// stb r28,2021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2021, ctx.r28.u8);
	// stb r7,2022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2022, ctx.r7.u8);
	// stb r9,2023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2023, ctx.r9.u8);
	// stb r17,2073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2073, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r23,2024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2024, ctx.r23.u8);
	// stb r14,2025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2025, ctx.r14.u8);
	// stb r11,2026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2026, ctx.r11.u8);
	// stb r11,2027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2027, ctx.r11.u8);
	// stb r25,2029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2029, ctx.r25.u8);
	// stb r3,2030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2030, ctx.r3.u8);
	// stb r3,2031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2031, ctx.r3.u8);
	// stb r8,2032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2032, ctx.r8.u8);
	// stb r23,2033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2033, ctx.r23.u8);
	// stb r11,2034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2034, ctx.r11.u8);
	// stb r27,2035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2035, ctx.r27.u8);
	// stb r6,2036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2036, ctx.r6.u8);
	// stb r10,2037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2037, ctx.r10.u8);
	// stb r4,2038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2038, ctx.r4.u8);
	// stb r5,2039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2039, ctx.r5.u8);
	// stb r9,2041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2041, ctx.r9.u8);
	// stb r11,2042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2042, ctx.r11.u8);
	// stb r30,2043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2043, ctx.r30.u8);
	// stb r8,2044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2044, ctx.r8.u8);
	// stb r16,2045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2045, ctx.r16.u8);
	// stb r10,2046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2046, ctx.r10.u8);
	// stb r11,2047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2047, ctx.r11.u8);
	// stb r8,2048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2048, ctx.r8.u8);
	// stb r5,2049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2049, ctx.r5.u8);
	// stb r23,2050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2050, ctx.r23.u8);
	// stb r9,2051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2051, ctx.r9.u8);
	// stb r30,2052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2052, ctx.r30.u8);
	// stb r7,2053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2053, ctx.r7.u8);
	// stb r5,2054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2054, ctx.r5.u8);
	// stb r20,2055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2055, ctx.r20.u8);
	// stb r11,2056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2056, ctx.r11.u8);
	// stb r19,2057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2057, ctx.r19.u8);
	// stb r6,2058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2058, ctx.r6.u8);
	// stb r3,2059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2059, ctx.r3.u8);
	// stb r10,2060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2060, ctx.r10.u8);
	// stb r11,2061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2061, ctx.r11.u8);
	// stb r4,2062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2062, ctx.r4.u8);
	// stb r15,2063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2063, ctx.r15.u8);
	// stb r10,2064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2064, ctx.r10.u8);
	// stb r29,2065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2065, ctx.r29.u8);
	// stb r7,2066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2066, ctx.r7.u8);
	// stb r21,2067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2067, ctx.r21.u8);
	// stb r7,2068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2068, ctx.r7.u8);
	// stb r29,2069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2069, ctx.r29.u8);
	// stb r14,2070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2070, ctx.r14.u8);
	// stb r11,2071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2071, ctx.r11.u8);
	// stb r11,2072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2072, ctx.r11.u8);
	// stb r6,2074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2074, ctx.r6.u8);
	// stb r25,2075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2075, ctx.r25.u8);
	// stb r17,2076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2076, ctx.r17.u8);
	// stb r28,2077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2077, ctx.r28.u8);
	// stb r28,2078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2078, ctx.r28.u8);
	// stb r11,2079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2079, ctx.r11.u8);
	// stb r5,2080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2080, ctx.r5.u8);
	// stb r10,2081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2081, ctx.r10.u8);
	// stb r10,2082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2082, ctx.r10.u8);
	// stb r27,2083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2083, ctx.r27.u8);
	// stb r11,2084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2084, ctx.r11.u8);
	// stb r9,2085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2085, ctx.r9.u8);
	// stb r14,2128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2128, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r6,2086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2086, ctx.r6.u8);
	// stb r11,2087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2087, ctx.r11.u8);
	// stb r28,2088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2088, ctx.r28.u8);
	// stb r6,2089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2089, ctx.r6.u8);
	// stb r14,2133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2133, ctx.r14.u8);
	// li r14,36
	ctx.r14.s64 = 36;
	// stb r29,2090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2090, ctx.r29.u8);
	// stb r8,2091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2091, ctx.r8.u8);
	// stb r9,2092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2092, ctx.r9.u8);
	// stb r10,2093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2093, ctx.r10.u8);
	// stb r14,2149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2149, ctx.r14.u8);
	// li r14,66
	ctx.r14.s64 = 66;
	// stb r11,2094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2094, ctx.r11.u8);
	// stb r9,2095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2095, ctx.r9.u8);
	// stb r30,2096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2096, ctx.r30.u8);
	// stb r10,2097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2097, ctx.r10.u8);
	// stb r11,2098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2098, ctx.r11.u8);
	// stb r9,2099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2099, ctx.r9.u8);
	// stb r25,2100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2100, ctx.r25.u8);
	// stb r5,2101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2101, ctx.r5.u8);
	// stb r5,2102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2102, ctx.r5.u8);
	// stb r10,2103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2103, ctx.r10.u8);
	// stb r28,2104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2104, ctx.r28.u8);
	// stb r11,2105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2105, ctx.r11.u8);
	// stb r8,2106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2106, ctx.r8.u8);
	// stb r5,2107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2107, ctx.r5.u8);
	// stb r27,2108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2108, ctx.r27.u8);
	// stb r11,2109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2109, ctx.r11.u8);
	// stb r21,2110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2110, ctx.r21.u8);
	// stb r7,2111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2111, ctx.r7.u8);
	// stb r5,2112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2112, ctx.r5.u8);
	// stb r27,2113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2113, ctx.r27.u8);
	// stb r11,2114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2114, ctx.r11.u8);
	// stb r8,2115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2115, ctx.r8.u8);
	// stb r11,2116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2116, ctx.r11.u8);
	// stb r17,2117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2117, ctx.r17.u8);
	// stb r8,2118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2118, ctx.r8.u8);
	// stb r23,2119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2119, ctx.r23.u8);
	// stb r11,2120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2120, ctx.r11.u8);
	// stb r9,2121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2121, ctx.r9.u8);
	// stb r30,2122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2122, ctx.r30.u8);
	// stb r3,2123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2123, ctx.r3.u8);
	// stb r6,2124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2124, ctx.r6.u8);
	// stb r25,2125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2125, ctx.r25.u8);
	// stb r20,2126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2126, ctx.r20.u8);
	// stb r30,2127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2127, ctx.r30.u8);
	// stb r31,2129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2129, ctx.r31.u8);
	// stb r31,2130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2130, ctx.r31.u8);
	// stb r31,2131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2131, ctx.r31.u8);
	// stb r18,2132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2132, ctx.r18.u8);
	// stb r31,2134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2134, ctx.r31.u8);
	// stb r31,2135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2135, ctx.r31.u8);
	// stb r31,2136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2136, ctx.r31.u8);
	// stb r31,2137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2137, ctx.r31.u8);
	// stb r31,2138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2138, ctx.r31.u8);
	// stb r31,2139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2139, ctx.r31.u8);
	// stb r24,2140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2140, ctx.r24.u8);
	// stb r22,2141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2141, ctx.r22.u8);
	// stb r31,2142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2142, ctx.r31.u8);
	// stb r31,2143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2143, ctx.r31.u8);
	// stb r31,2144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2144, ctx.r31.u8);
	// stb r31,2145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2145, ctx.r31.u8);
	// stb r31,2146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2146, ctx.r31.u8);
	// stb r31,2147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2147, ctx.r31.u8);
	// stb r31,2148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2148, ctx.r31.u8);
	// stb r31,2150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2150, ctx.r31.u8);
	// stb r31,2151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2151, ctx.r31.u8);
	// stb r31,2152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2152, ctx.r31.u8);
	// stb r31,2153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2153, ctx.r31.u8);
	// stb r31,2154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2154, ctx.r31.u8);
	// stb r31,2155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2155, ctx.r31.u8);
	// stb r31,2156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2156, ctx.r31.u8);
	// stb r11,2157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2157, ctx.r11.u8);
	// stb r14,2158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2158, ctx.r14.u8);
	// stb r3,2159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2159, ctx.r3.u8);
	// stb r7,2160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2160, ctx.r7.u8);
	// stb r5,2161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2161, ctx.r5.u8);
	// stb r20,2162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2162, ctx.r20.u8);
	// li r14,78
	ctx.r14.s64 = 78;
	// stb r11,2163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2163, ctx.r11.u8);
	// stb r23,2165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2165, ctx.r23.u8);
	// stb r20,2166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2166, ctx.r20.u8);
	// stb r10,2167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2167, ctx.r10.u8);
	// stb r28,2168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2168, ctx.r28.u8);
	// stb r14,2164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2164, ctx.r14.u8);
	// li r14,77
	ctx.r14.s64 = 77;
	// stb r11,2169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2169, ctx.r11.u8);
	// stb r8,2171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2171, ctx.r8.u8);
	// stb r4,2172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2172, ctx.r4.u8);
	// stb r9,2173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2173, ctx.r9.u8);
	// stb r14,2170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2170, ctx.r14.u8);
	// li r14,171
	ctx.r14.s64 = 171;
	// stb r10,2174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2174, ctx.r10.u8);
	// stb r3,2175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2175, ctx.r3.u8);
	// stb r4,2176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2176, ctx.r4.u8);
	// stb r6,2177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2177, ctx.r6.u8);
	// stb r14,2209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2209, ctx.r14.u8);
	// li r14,167
	ctx.r14.s64 = 167;
	// stb r5,2178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2178, ctx.r5.u8);
	// stb r11,2179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2179, ctx.r11.u8);
	// stb r9,2180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2180, ctx.r9.u8);
	// stb r6,2181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2181, ctx.r6.u8);
	// stb r14,2217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2217, ctx.r14.u8);
	// li r14,67
	ctx.r14.s64 = 67;
	// stb r11,2182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2182, ctx.r11.u8);
	// stb r4,2183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2183, ctx.r4.u8);
	// stb r8,2184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2184, ctx.r8.u8);
	// stb r21,2185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2185, ctx.r21.u8);
	// stb r14,2218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2218, ctx.r14.u8);
	// li r14,44
	ctx.r14.s64 = 44;
	// stb r10,2186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2186, ctx.r10.u8);
	// stb r9,2187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2187, ctx.r9.u8);
	// stb r23,2188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2188, ctx.r23.u8);
	// stb r31,2189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2189, ctx.r31.u8);
	// stb r14,2225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2225, ctx.r14.u8);
	// li r14,85
	ctx.r14.s64 = 85;
	// stb r31,2190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2190, ctx.r31.u8);
	// stb r31,2191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2191, ctx.r31.u8);
	// stb r18,2192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2192, ctx.r18.u8);
	// stb r29,2193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2193, ctx.r29.u8);
	// stb r14,2232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2232, ctx.r14.u8);
	// li r14,83
	ctx.r14.s64 = 83;
	// stb r31,2194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2194, ctx.r31.u8);
	// stb r31,2195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2195, ctx.r31.u8);
	// stb r31,2196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2196, ctx.r31.u8);
	// stb r31,2197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2197, ctx.r31.u8);
	// stb r14,2233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2233, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r31,2198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2198, ctx.r31.u8);
	// stb r31,2199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2199, ctx.r31.u8);
	// stb r24,2200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2200, ctx.r24.u8);
	// stb r22,2201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2201, ctx.r22.u8);
	// stb r31,2202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2202, ctx.r31.u8);
	// stb r31,2203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2203, ctx.r31.u8);
	// stb r31,2204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2204, ctx.r31.u8);
	// stb r31,2205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2205, ctx.r31.u8);
	// stb r31,2206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2206, ctx.r31.u8);
	// stb r31,2207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2207, ctx.r31.u8);
	// stb r31,2208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2208, ctx.r31.u8);
	// stb r31,2210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2210, ctx.r31.u8);
	// stb r31,2211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2211, ctx.r31.u8);
	// stb r31,2212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2212, ctx.r31.u8);
	// stb r31,2213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2213, ctx.r31.u8);
	// stb r31,2214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2214, ctx.r31.u8);
	// stb r31,2215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2215, ctx.r31.u8);
	// stb r31,2216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2216, ctx.r31.u8);
	// stb r28,2219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2219, ctx.r28.u8);
	// stb r10,2220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2220, ctx.r10.u8);
	// stb r8,2221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2221, ctx.r8.u8);
	// stb r3,2222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2222, ctx.r3.u8);
	// stb r28,2223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2223, ctx.r28.u8);
	// stb r23,2224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2224, ctx.r23.u8);
	// stb r11,2226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2226, ctx.r11.u8);
	// stb r9,2227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2227, ctx.r9.u8);
	// stb r30,2228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2228, ctx.r30.u8);
	// stb r7,2229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2229, ctx.r7.u8);
	// stb r4,2230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2230, ctx.r4.u8);
	// stb r11,2231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2231, ctx.r11.u8);
	// stb r14,2234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2234, ctx.r14.u8);
	// li r14,73
	ctx.r14.s64 = 73;
	// stb r11,2237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2237, ctx.r11.u8);
	// li r17,77
	ctx.r17.s64 = 77;
	// stb r29,2238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2238, ctx.r29.u8);
	// stb r6,2239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2239, ctx.r6.u8);
	// stb r5,2240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2240, ctx.r5.u8);
	// stb r4,2241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2241, ctx.r4.u8);
	// stb r14,2235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2235, ctx.r14.u8);
	// li r14,68
	ctx.r14.s64 = 68;
	// stb r25,2242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2242, ctx.r25.u8);
	// stb r28,2243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2243, ctx.r28.u8);
	// stb r9,2244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2244, ctx.r9.u8);
	// stb r8,2245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2245, ctx.r8.u8);
	// stb r14,2236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2236, ctx.r14.u8);
	// li r14,119
	ctx.r14.s64 = 119;
	// stb r5,2246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2246, ctx.r5.u8);
	// stb r9,2247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2247, ctx.r9.u8);
	// stb r11,2248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2248, ctx.r11.u8);
	// stb r30,2249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2249, ctx.r30.u8);
	// stb r14,2263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2263, ctx.r14.u8);
	// li r14,75
	ctx.r14.s64 = 75;
	// stb r8,2250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2250, ctx.r8.u8);
	// stb r27,2251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2251, ctx.r27.u8);
	// stb r11,2252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2252, ctx.r11.u8);
	// stb r8,2253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2253, ctx.r8.u8);
	// stb r14,2288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2288, ctx.r14.u8);
	// li r14,39
	ctx.r14.s64 = 39;
	// stb r11,2254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2254, ctx.r11.u8);
	// stb r3,2255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2255, ctx.r3.u8);
	// stb r6,2256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2256, ctx.r6.u8);
	// stb r25,2257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2257, ctx.r25.u8);
	// stb r14,2292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2292, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r20,2258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2258, ctx.r20.u8);
	// stb r30,2259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2259, ctx.r30.u8);
	// stb r11,2260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2260, ctx.r11.u8);
	// stb r21,2261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2261, ctx.r21.u8);
	// stb r10,2262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2262, ctx.r10.u8);
	// stb r11,2264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2264, ctx.r11.u8);
	// stb r27,2265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2265, ctx.r27.u8);
	// stb r8,2266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2266, ctx.r8.u8);
	// stb r23,2267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2267, ctx.r23.u8);
	// stb r4,2268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2268, ctx.r4.u8);
	// stb r11,2269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2269, ctx.r11.u8);
	// stb r7,2270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2270, ctx.r7.u8);
	// stb r5,2271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2271, ctx.r5.u8);
	// stb r11,2272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2272, ctx.r11.u8);
	// stb r9,2273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2273, ctx.r9.u8);
	// stb r30,2274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2274, ctx.r30.u8);
	// stb r10,2275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2275, ctx.r10.u8);
	// stb r11,2276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2276, ctx.r11.u8);
	// stb r29,2277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2277, ctx.r29.u8);
	// stb r6,2278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2278, ctx.r6.u8);
	// stb r19,2279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2279, ctx.r19.u8);
	// stb r15,2280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2280, ctx.r15.u8);
	// stb r8,2281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2281, ctx.r8.u8);
	// stb r5,2282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2282, ctx.r5.u8);
	// stb r23,2283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2283, ctx.r23.u8);
	// stb r11,2284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2284, ctx.r11.u8);
	// stb r6,2285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2285, ctx.r6.u8);
	// stb r21,2286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2286, ctx.r21.u8);
	// stb r11,2287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2287, ctx.r11.u8);
	// stb r7,2289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2289, ctx.r7.u8);
	// stb r10,2290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2290, ctx.r10.u8);
	// stb r16,2291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2291, ctx.r16.u8);
	// stb r4,2293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2293, ctx.r4.u8);
	// stb r11,2294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2294, ctx.r11.u8);
	// stb r21,2295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2295, ctx.r21.u8);
	// stb r7,2296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2296, ctx.r7.u8);
	// stb r5,2297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2297, ctx.r5.u8);
	// stb r10,2298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2298, ctx.r10.u8);
	// stb r4,2299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2299, ctx.r4.u8);
	// stb r9,2300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2300, ctx.r9.u8);
	// stb r14,2301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2301, ctx.r14.u8);
	// stb r11,2302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2302, ctx.r11.u8);
	// stb r11,2303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2303, ctx.r11.u8);
	// stb r17,2304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2304, ctx.r17.u8);
	// stb r25,2305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2305, ctx.r25.u8);
	// stb r3,2306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2306, ctx.r3.u8);
	// stb r3,2307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2307, ctx.r3.u8);
	// stb r8,2308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2308, ctx.r8.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r23,2309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2309, ctx.r23.u8);
	// stb r11,2310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2310, ctx.r11.u8);
	// stb r7,2312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2312, ctx.r7.u8);
	// stb r28,2313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2313, ctx.r28.u8);
	// stb r28,2314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2314, ctx.r28.u8);
	// stb r17,2311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2311, ctx.r17.u8);
	// li r17,44
	ctx.r17.s64 = 44;
	// stb r11,2315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2315, ctx.r11.u8);
	// stb r27,2316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2316, ctx.r27.u8);
	// stb r7,2317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2317, ctx.r7.u8);
	// stb r4,2318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2318, ctx.r4.u8);
	// stb r17,2339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2339, ctx.r17.u8);
	// li r17,98
	ctx.r17.s64 = 98;
	// stb r15,2319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2319, ctx.r15.u8);
	// stb r8,2320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2320, ctx.r8.u8);
	// stb r9,2321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2321, ctx.r9.u8);
	// stb r29,2322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2322, ctx.r29.u8);
	// stb r17,2341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2341, ctx.r17.u8);
	// li r17,39
	ctx.r17.s64 = 39;
	// stb r30,2323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2323, ctx.r30.u8);
	// stb r11,2324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2324, ctx.r11.u8);
	// stb r8,2325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2325, ctx.r8.u8);
	// stb r11,2326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2326, ctx.r11.u8);
	// stb r19,2327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2327, ctx.r19.u8);
	// stb r10,2328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2328, ctx.r10.u8);
	// stb r27,2329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2329, ctx.r27.u8);
	// stb r7,2330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2330, ctx.r7.u8);
	// stb r29,2331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2331, ctx.r29.u8);
	// stb r8,2332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2332, ctx.r8.u8);
	// stb r28,2333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2333, ctx.r28.u8);
	// stb r11,2334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2334, ctx.r11.u8);
	// stb r9,2335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2335, ctx.r9.u8);
	// stb r10,2336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2336, ctx.r10.u8);
	// stb r8,2337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2337, ctx.r8.u8);
	// stb r19,2338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2338, ctx.r19.u8);
	// stb r11,2340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2340, ctx.r11.u8);
	// stb r25,2342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2342, ctx.r25.u8);
	// stb r9,2343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2343, ctx.r9.u8);
	// stb r11,2344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2344, ctx.r11.u8);
	// stb r23,2345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2345, ctx.r23.u8);
	// stb r6,2346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2346, ctx.r6.u8);
	// stb r25,2347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2347, ctx.r25.u8);
	// stb r17,2348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2348, ctx.r17.u8);
	// stb r28,2349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2349, ctx.r28.u8);
	// stb r28,2350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2350, ctx.r28.u8);
	// stb r11,2351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2351, ctx.r11.u8);
	// stb r5,2352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2352, ctx.r5.u8);
	// stb r10,2353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2353, ctx.r10.u8);
	// stb r10,2354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2354, ctx.r10.u8);
	// stb r27,2355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2355, ctx.r27.u8);
	// stb r11,2356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2356, ctx.r11.u8);
	// stb r9,2357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2357, ctx.r9.u8);
	// stb r6,2358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2358, ctx.r6.u8);
	// stb r11,2359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2359, ctx.r11.u8);
	// stb r20,2360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2360, ctx.r20.u8);
	// stb r10,2361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2361, ctx.r10.u8);
	// stb r9,2362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2362, ctx.r9.u8);
	// stb r11,2363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2363, ctx.r11.u8);
	// stb r30,2364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2364, ctx.r30.u8);
	// stb r7,2365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2365, ctx.r7.u8);
	// stb r19,2366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2366, ctx.r19.u8);
	// stb r11,2367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2367, ctx.r11.u8);
	// stb r9,2368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2368, ctx.r9.u8);
	// stb r6,2369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2369, ctx.r6.u8);
	// stb r11,2370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2370, ctx.r11.u8);
	// stb r4,2371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2371, ctx.r4.u8);
	// stb r8,2372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2372, ctx.r8.u8);
	// stb r21,2373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2373, ctx.r21.u8);
	// stb r10,2374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2374, ctx.r10.u8);
	// stb r9,2375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2375, ctx.r9.u8);
	// stb r23,2376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2376, ctx.r23.u8);
	// stb r11,2377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2377, ctx.r11.u8);
	// stb r21,2378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2378, ctx.r21.u8);
	// stb r7,2379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2379, ctx.r7.u8);
	// stb r3,2380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2380, ctx.r3.u8);
	// stb r4,2381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2381, ctx.r4.u8);
	// stb r9,2382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2382, ctx.r9.u8);
	// stb r14,2383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2383, ctx.r14.u8);
	// stb r31,2384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2384, ctx.r31.u8);
	// stb r31,2385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2385, ctx.r31.u8);
	// li r14,92
	ctx.r14.s64 = 92;
	// stb r31,2386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2386, ctx.r31.u8);
	// stb r18,2387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2387, ctx.r18.u8);
	// stb r31,2389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2389, ctx.r31.u8);
	// stb r31,2390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2390, ctx.r31.u8);
	// stb r31,2391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2391, ctx.r31.u8);
	// stb r14,2388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2388, ctx.r14.u8);
	// li r14,52
	ctx.r14.s64 = 52;
	// stb r31,2392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2392, ctx.r31.u8);
	// stb r31,2393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2393, ctx.r31.u8);
	// stb r31,2394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2394, ctx.r31.u8);
	// stb r24,2395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2395, ctx.r24.u8);
	// stb r14,2404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2404, ctx.r14.u8);
	// li r14,48
	ctx.r14.s64 = 48;
	// stb r22,2396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2396, ctx.r22.u8);
	// stb r31,2397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2397, ctx.r31.u8);
	// stb r31,2398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2398, ctx.r31.u8);
	// stb r31,2399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2399, ctx.r31.u8);
	// stb r14,2412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2412, ctx.r14.u8);
	// li r14,66
	ctx.r14.s64 = 66;
	// stb r31,2400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2400, ctx.r31.u8);
	// stb r31,2401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2401, ctx.r31.u8);
	// stb r31,2402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2402, ctx.r31.u8);
	// stb r31,2403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2403, ctx.r31.u8);
	// stb r14,2413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2413, ctx.r14.u8);
	// li r14,67
	ctx.r14.s64 = 67;
	// stb r31,2405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2405, ctx.r31.u8);
	// stb r31,2406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2406, ctx.r31.u8);
	// stb r31,2407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2407, ctx.r31.u8);
	// stb r31,2408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2408, ctx.r31.u8);
	// stb r14,2435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2435, ctx.r14.u8);
	// li r14,39
	ctx.r14.s64 = 39;
	// stb r31,2409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2409, ctx.r31.u8);
	// stb r31,2410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2410, ctx.r31.u8);
	// stb r31,2411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2411, ctx.r31.u8);
	// stb r3,2414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2414, ctx.r3.u8);
	// stb r14,2441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2441, ctx.r14.u8);
	// li r14,120
	ctx.r14.s64 = 120;
	// stb r7,2415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2415, ctx.r7.u8);
	// stb r5,2416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2416, ctx.r5.u8);
	// stb r20,2417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2417, ctx.r20.u8);
	// stb r11,2418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2418, ctx.r11.u8);
	// stb r10,2419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2419, ctx.r10.u8);
	// stb r16,2420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2420, ctx.r16.u8);
	// stb r7,2421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2421, ctx.r7.u8);
	// stb r27,2422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2422, ctx.r27.u8);
	// stb r10,2423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2423, ctx.r10.u8);
	// stb r5,2424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2424, ctx.r5.u8);
	// stb r29,2425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2425, ctx.r29.u8);
	// stb r10,2426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2426, ctx.r10.u8);
	// stb r11,2427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2427, ctx.r11.u8);
	// stb r6,2428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2428, ctx.r6.u8);
	// stb r21,2429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2429, ctx.r21.u8);
	// stb r11,2430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2430, ctx.r11.u8);
	// stb r9,2431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2431, ctx.r9.u8);
	// stb r30,2432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2432, ctx.r30.u8);
	// stb r10,2433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2433, ctx.r10.u8);
	// stb r11,2434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2434, ctx.r11.u8);
	// stb r28,2436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2436, ctx.r28.u8);
	// stb r7,2437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2437, ctx.r7.u8);
	// stb r5,2438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2438, ctx.r5.u8);
	// stb r7,2439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2439, ctx.r7.u8);
	// stb r29,2440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2440, ctx.r29.u8);
	// stb r4,2442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2442, ctx.r4.u8);
	// stb r11,2443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2443, ctx.r11.u8);
	// stb r15,2444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2444, ctx.r15.u8);
	// stb r8,2445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2445, ctx.r8.u8);
	// stb r4,2446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2446, ctx.r4.u8);
	// stb r9,2447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2447, ctx.r9.u8);
	// stb r11,2448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2448, ctx.r11.u8);
	// stb r10,2449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2449, ctx.r10.u8);
	// stb r14,2450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2450, ctx.r14.u8);
	// stb r15,2451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2451, ctx.r15.u8);
	// stb r10,2452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2452, ctx.r10.u8);
	// stb r3,2453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2453, ctx.r3.u8);
	// stb r7,2454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2454, ctx.r7.u8);
	// stb r19,2455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2455, ctx.r19.u8);
	// stb r10,2456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2456, ctx.r10.u8);
	// stb r5,2457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2457, ctx.r5.u8);
	// stb r9,2458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2458, ctx.r9.u8);
	// stb r4,2459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2459, ctx.r4.u8);
	// li r14,93
	ctx.r14.s64 = 93;
	// stb r31,2460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2460, ctx.r31.u8);
	// stb r31,2461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2461, ctx.r31.u8);
	// stb r31,2462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2462, ctx.r31.u8);
	// stb r18,2463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2463, ctx.r18.u8);
	// stb r31,2465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2465, ctx.r31.u8);
	// stb r14,2464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2464, ctx.r14.u8);
	// li r14,198
	ctx.r14.s64 = 198;
	// stb r31,2466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2466, ctx.r31.u8);
	// stb r31,2467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2467, ctx.r31.u8);
	// stb r31,2468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2468, ctx.r31.u8);
	// stb r31,2469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2469, ctx.r31.u8);
	// stb r14,2480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2480, ctx.r14.u8);
	// li r14,194
	ctx.r14.s64 = 194;
	// stb r31,2470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2470, ctx.r31.u8);
	// stb r24,2471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2471, ctx.r24.u8);
	// stb r22,2472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2472, ctx.r22.u8);
	// stb r31,2473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2473, ctx.r31.u8);
	// stb r14,2488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2488, ctx.r14.u8);
	// li r14,84
	ctx.r14.s64 = 84;
	// stb r31,2474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2474, ctx.r31.u8);
	// stb r31,2475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2475, ctx.r31.u8);
	// stb r31,2476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2476, ctx.r31.u8);
	// stb r31,2477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2477, ctx.r31.u8);
	// stb r14,2489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2489, ctx.r14.u8);
	// li r14,87
	ctx.r14.s64 = 87;
	// stb r31,2478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2478, ctx.r31.u8);
	// stb r31,2479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2479, ctx.r31.u8);
	// stb r31,2481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2481, ctx.r31.u8);
	// stb r31,2482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2482, ctx.r31.u8);
	// stb r14,2493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2493, ctx.r14.u8);
	// li r14,120
	ctx.r14.s64 = 120;
	// stb r31,2483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2483, ctx.r31.u8);
	// stb r31,2484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2484, ctx.r31.u8);
	// stb r31,2485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2485, ctx.r31.u8);
	// stb r31,2486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2486, ctx.r31.u8);
	// stb r31,2487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2487, ctx.r31.u8);
	// stb r30,2490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2490, ctx.r30.u8);
	// stb r10,2491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2491, ctx.r10.u8);
	// stb r11,2492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2492, ctx.r11.u8);
	// stb r10,2494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2494, ctx.r10.u8);
	// stb r4,2495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2495, ctx.r4.u8);
	// stb r9,2496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2496, ctx.r9.u8);
	// stb r11,2497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2497, ctx.r11.u8);
	// stb r4,2498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2498, ctx.r4.u8);
	// stb r25,2499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2499, ctx.r25.u8);
	// stb r4,2500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2500, ctx.r4.u8);
	// stb r15,2501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2501, ctx.r15.u8);
	// stb r10,2502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2502, ctx.r10.u8);
	// stb r29,2503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2503, ctx.r29.u8);
	// stb r9,2504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2504, ctx.r9.u8);
	// stb r10,2505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2505, ctx.r10.u8);
	// stb r27,2506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2506, ctx.r27.u8);
	// stb r11,2507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2507, ctx.r11.u8);
	// stb r9,2508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2508, ctx.r9.u8);
	// stb r30,2509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2509, ctx.r30.u8);
	// stb r10,2510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2510, ctx.r10.u8);
	// stb r11,2511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2511, ctx.r11.u8);
	// stb r10,2512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2512, ctx.r10.u8);
	// stb r14,2513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2513, ctx.r14.u8);
	// stb r7,2514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2514, ctx.r7.u8);
	// stb r4,2515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2515, ctx.r4.u8);
	// stb r9,2516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2516, ctx.r9.u8);
	// stb r10,2517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2517, ctx.r10.u8);
	// stb r5,2518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2518, ctx.r5.u8);
	// stb r29,2519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2519, ctx.r29.u8);
	// stb r10,2520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2520, ctx.r10.u8);
	// stb r11,2521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2521, ctx.r11.u8);
	// stb r6,2522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2522, ctx.r6.u8);
	// stb r21,2523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2523, ctx.r21.u8);
	// stb r11,2524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2524, ctx.r11.u8);
	// stb r4,2525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2525, ctx.r4.u8);
	// stb r25,2526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2526, ctx.r25.u8);
	// stb r29,2527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2527, ctx.r29.u8);
	// stb r30,2528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2528, ctx.r30.u8);
	// stb r11,2529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2529, ctx.r11.u8);
	// stb r29,2530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2530, ctx.r29.u8);
	// stb r28,2531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2531, ctx.r28.u8);
	// stb r7,2532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2532, ctx.r7.u8);
	// stb r5,2533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2533, ctx.r5.u8);
	// stb r7,2534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2534, ctx.r7.u8);
	// li r14,119
	ctx.r14.s64 = 119;
	// stb r29,2535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2535, ctx.r29.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r4,2536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2536, ctx.r4.u8);
	// stb r11,2537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2537, ctx.r11.u8);
	// stb r27,2538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2538, ctx.r27.u8);
	// stb r25,2539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2539, ctx.r25.u8);
	// stb r14,2554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2554, ctx.r14.u8);
	// li r14,44
	ctx.r14.s64 = 44;
	// stb r17,2572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2572, ctx.r17.u8);
	// li r17,46
	ctx.r17.s64 = 46;
	// stb r3,2540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2540, ctx.r3.u8);
	// stb r7,2541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2541, ctx.r7.u8);
	// stb r5,2542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2542, ctx.r5.u8);
	// stb r14,2557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2557, ctx.r14.u8);
	// li r14,98
	ctx.r14.s64 = 98;
	// stb r17,2589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2589, ctx.r17.u8);
	// li r17,89
	ctx.r17.s64 = 89;
	// stb r20,2543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2543, ctx.r20.u8);
	// stb r11,2544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2544, ctx.r11.u8);
	// stb r9,2545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2545, ctx.r9.u8);
	// stb r30,2546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2546, ctx.r30.u8);
	// stb r10,2547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2547, ctx.r10.u8);
	// stb r11,2548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2548, ctx.r11.u8);
	// stb r29,2549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2549, ctx.r29.u8);
	// stb r6,2550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2550, ctx.r6.u8);
	// stb r28,2551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2551, ctx.r28.u8);
	// stb r27,2552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2552, ctx.r27.u8);
	// stb r11,2553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2553, ctx.r11.u8);
	// stb r8,2555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2555, ctx.r8.u8);
	// stb r3,2556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2556, ctx.r3.u8);
	// stb r11,2558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2558, ctx.r11.u8);
	// stb r14,2559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2559, ctx.r14.u8);
	// stb r25,2560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2560, ctx.r25.u8);
	// stb r9,2561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2561, ctx.r9.u8);
	// stb r11,2562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2562, ctx.r11.u8);
	// stb r5,2563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2563, ctx.r5.u8);
	// stb r6,2564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2564, ctx.r6.u8);
	// stb r11,2565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2565, ctx.r11.u8);
	// stb r15,2566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2566, ctx.r15.u8);
	// stb r3,2567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2567, ctx.r3.u8);
	// stb r6,2568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2568, ctx.r6.u8);
	// stb r6,2569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2569, ctx.r6.u8);
	// stb r21,2570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2570, ctx.r21.u8);
	// stb r11,2571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2571, ctx.r11.u8);
	// stb r8,2573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2573, ctx.r8.u8);
	// stb r4,2574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2574, ctx.r4.u8);
	// stb r11,2575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2575, ctx.r11.u8);
	// stb r10,2576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2576, ctx.r10.u8);
	// stb r16,2577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2577, ctx.r16.u8);
	// stb r10,2578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2578, ctx.r10.u8);
	// stb r3,2579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2579, ctx.r3.u8);
	// stb r11,2580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2580, ctx.r11.u8);
	// stb r20,2581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2581, ctx.r20.u8);
	// stb r8,2582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2582, ctx.r8.u8);
	// stb r9,2583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2583, ctx.r9.u8);
	// stb r30,2584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2584, ctx.r30.u8);
	// stb r10,2585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2585, ctx.r10.u8);
	// stb r3,2586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2586, ctx.r3.u8);
	// stb r10,2587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2587, ctx.r10.u8);
	// stb r27,2588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2588, ctx.r27.u8);
	// stb r11,2590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2590, ctx.r11.u8);
	// stb r11,2591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2591, ctx.r11.u8);
	// stb r17,2592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2592, ctx.r17.u8);
	// stb r6,2593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2593, ctx.r6.u8);
	// stb r25,2594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2594, ctx.r25.u8);
	// stb r11,2595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2595, ctx.r11.u8);
	// stb r29,2596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2596, ctx.r29.u8);
	// stb r8,2597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2597, ctx.r8.u8);
	// stb r5,2598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2598, ctx.r5.u8);
	// stb r11,2599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2599, ctx.r11.u8);
	// stb r10,2600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2600, ctx.r10.u8);
	// stb r8,2601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2601, ctx.r8.u8);
	// stb r3,2602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2602, ctx.r3.u8);
	// stb r5,2603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2603, ctx.r5.u8);
	// stb r11,2604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2604, ctx.r11.u8);
	// stb r23,2605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2605, ctx.r23.u8);
	// stb r6,2606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2606, ctx.r6.u8);
	// stb r25,2607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2607, ctx.r25.u8);
	// stb r3,2608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2608, ctx.r3.u8);
	// stb r4,2609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2609, ctx.r4.u8);
	// stb r9,2651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2651, ctx.r9.u8);
	// stb r9,2658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2658, ctx.r9.u8);
	// stb r9,2669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2669, ctx.r9.u8);
	// li r9,46
	ctx.r9.s64 = 46;
	// stb r28,2611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2611, ctx.r28.u8);
	// li r28,107
	ctx.r28.s64 = 107;
	// stb r8,2614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2614, ctx.r8.u8);
	// stb r8,2635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2635, ctx.r8.u8);
	// stb r8,2656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2656, ctx.r8.u8);
	// li r8,120
	ctx.r8.s64 = 120;
	// stb r9,2681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2681, ctx.r9.u8);
	// li r9,83
	ctx.r9.s64 = 83;
	// stb r10,2610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2610, ctx.r10.u8);
	// stb r21,2612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2612, ctx.r21.u8);
	// stb r11,2613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2613, ctx.r11.u8);
	// stb r11,2615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2615, ctx.r11.u8);
	// stb r14,2616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2616, ctx.r14.u8);
	// stb r6,2617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2617, ctx.r6.u8);
	// stb r5,2618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2618, ctx.r5.u8);
	// stb r25,2619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2619, ctx.r25.u8);
	// stb r4,2620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2620, ctx.r4.u8);
	// stb r11,2621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2621, ctx.r11.u8);
	// stb r14,2622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2622, ctx.r14.u8);
	// stb r23,2623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2623, ctx.r23.u8);
	// stb r11,2624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2624, ctx.r11.u8);
	// stb r14,2625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2625, ctx.r14.u8);
	// stb r3,2626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2626, ctx.r3.u8);
	// stb r7,2627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2627, ctx.r7.u8);
	// stb r5,2628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2628, ctx.r5.u8);
	// stb r20,2629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2629, ctx.r20.u8);
	// stb r7,2630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2630, ctx.r7.u8);
	// stb r5,2631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2631, ctx.r5.u8);
	// stb r20,2632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2632, ctx.r20.u8);
	// stb r11,2633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2633, ctx.r11.u8);
	// stb r14,2634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2634, ctx.r14.u8);
	// stb r29,2636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2636, ctx.r29.u8);
	// stb r28,2637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2637, ctx.r28.u8);
	// stb r11,2638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2638, ctx.r11.u8);
	// stb r10,2639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2639, ctx.r10.u8);
	// stb r16,2640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2640, ctx.r16.u8);
	// stb r7,2641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2641, ctx.r7.u8);
	// stb r27,2642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2642, ctx.r27.u8);
	// stb r10,2643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2643, ctx.r10.u8);
	// stb r5,2644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2644, ctx.r5.u8);
	// stb r29,2645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2645, ctx.r29.u8);
	// stb r10,2646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2646, ctx.r10.u8);
	// stb r11,2647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2647, ctx.r11.u8);
	// stb r6,2648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2648, ctx.r6.u8);
	// stb r5,2649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2649, ctx.r5.u8);
	// stb r11,2650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2650, ctx.r11.u8);
	// stb r30,2652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2652, ctx.r30.u8);
	// stb r10,2653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2653, ctx.r10.u8);
	// stb r11,2654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2654, ctx.r11.u8);
	// stb r15,2655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2655, ctx.r15.u8);
	// stb r4,2657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2657, ctx.r4.u8);
	// stb r11,2659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2659, ctx.r11.u8);
	// stb r10,2660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2660, ctx.r10.u8);
	// stb r8,2661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2661, ctx.r8.u8);
	// stb r15,2662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2662, ctx.r15.u8);
	// stb r10,2663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2663, ctx.r10.u8);
	// stb r3,2664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2664, ctx.r3.u8);
	// stb r7,2665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2665, ctx.r7.u8);
	// stb r19,2666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2666, ctx.r19.u8);
	// stb r10,2667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2667, ctx.r10.u8);
	// stb r5,2668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2668, ctx.r5.u8);
	// stb r4,2670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2670, ctx.r4.u8);
	// stb r11,2671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2671, ctx.r11.u8);
	// stb r27,2672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2672, ctx.r27.u8);
	// stb r6,2673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2673, ctx.r6.u8);
	// stb r5,2674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2674, ctx.r5.u8);
	// stb r10,2675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2675, ctx.r10.u8);
	// stb r11,2676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2676, ctx.r11.u8);
	// stb r30,2677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2677, ctx.r30.u8);
	// stb r10,2678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2678, ctx.r10.u8);
	// stb r3,2679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2679, ctx.r3.u8);
	// stb r10,2680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2680, ctx.r10.u8);
	// stb r31,2682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2682, ctx.r31.u8);
	// stb r31,2683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2683, ctx.r31.u8);
	// stb r31,2684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2684, ctx.r31.u8);
	// stb r18,2685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2685, ctx.r18.u8);
	// stb r9,2686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2686, ctx.r9.u8);
	// li r9,196
	ctx.r9.s64 = 196;
	// ld r17,6664(r1)
	ctx.r17.u64 = PPC_LOAD_U64(ctx.r1.u32 + 6664);
	// li r7,8
	ctx.r7.s64 = 8;
	// stb r31,2687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2687, ctx.r31.u8);
	// li r4,6
	ctx.r4.s64 = 6;
	// stb r31,2688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2688, ctx.r31.u8);
	// li r6,4
	ctx.r6.s64 = 4;
	// stb r31,2689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2689, ctx.r31.u8);
	// li r3,7
	ctx.r3.s64 = 7;
	// stb r31,2690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2690, ctx.r31.u8);
	// stb r9,2702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2702, ctx.r9.u8);
	// li r14,214
	ctx.r14.s64 = 214;
	// li r9,79
	ctx.r9.s64 = 79;
	// stb r31,2691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2691, ctx.r31.u8);
	// stb r31,2692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2692, ctx.r31.u8);
	// stb r26,2693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2693, ctx.r26.u8);
	// stb r11,2694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2694, ctx.r11.u8);
	// stb r31,2695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2695, ctx.r31.u8);
	// stb r31,2696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2696, ctx.r31.u8);
	// stb r31,2697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2697, ctx.r31.u8);
	// stb r31,2698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2698, ctx.r31.u8);
	// stb r31,2699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2699, ctx.r31.u8);
	// stb r31,2700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2700, ctx.r31.u8);
	// stb r4,2701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2701, ctx.r4.u8);
	// stb r31,2703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2703, ctx.r31.u8);
	// stb r31,2704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2704, ctx.r31.u8);
	// stb r31,2705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2705, ctx.r31.u8);
	// stb r31,2706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2706, ctx.r31.u8);
	// stb r31,2707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2707, ctx.r31.u8);
	// stb r31,2708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2708, ctx.r31.u8);
	// stb r31,2709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2709, ctx.r31.u8);
	// stb r6,2710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2710, ctx.r6.u8);
	// stb r31,2711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2711, ctx.r31.u8);
	// stb r31,2712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2712, ctx.r31.u8);
	// stb r7,2713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2713, ctx.r7.u8);
	// stb r17,2714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2714, ctx.r17.u8);
	// stb r31,2715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2715, ctx.r31.u8);
	// stb r31,2716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2716, ctx.r31.u8);
	// stb r31,2717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2717, ctx.r31.u8);
	// stb r31,2718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2718, ctx.r31.u8);
	// stb r31,2719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2719, ctx.r31.u8);
	// stb r31,2720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2720, ctx.r31.u8);
	// stb r3,2721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2721, ctx.r3.u8);
	// stb r14,2722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2722, ctx.r14.u8);
	// stb r31,2723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2723, ctx.r31.u8);
	// stb r31,2724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2724, ctx.r31.u8);
	// stb r31,2725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2725, ctx.r31.u8);
	// stb r31,2726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2726, ctx.r31.u8);
	// stb r31,2727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2727, ctx.r31.u8);
	// stb r31,2728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2728, ctx.r31.u8);
	// stb r31,2729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2729, ctx.r31.u8);
	// stb r7,2730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2730, ctx.r7.u8);
	// stb r31,2731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2731, ctx.r31.u8);
	// stb r31,2732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2732, ctx.r31.u8);
	// stb r31,2733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2733, ctx.r31.u8);
	// stb r31,2734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2734, ctx.r31.u8);
	// stb r31,2735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2735, ctx.r31.u8);
	// stb r31,2736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2736, ctx.r31.u8);
	// stb r18,2737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2737, ctx.r18.u8);
	// stb r9,2738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2738, ctx.r9.u8);
	// stb r31,2739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2739, ctx.r31.u8);
	// stb r31,2740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2740, ctx.r31.u8);
	// stb r31,2741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2741, ctx.r31.u8);
	// stb r31,2742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2742, ctx.r31.u8);
	// stb r31,2743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2743, ctx.r31.u8);
	// stb r31,2744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2744, ctx.r31.u8);
	// stb r7,2745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2745, ctx.r7.u8);
	// stb r7,2746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2746, ctx.r7.u8);
	// stb r31,2747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2747, ctx.r31.u8);
	// stb r31,2748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2748, ctx.r31.u8);
	// stb r31,2749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2749, ctx.r31.u8);
	// stb r31,2750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2750, ctx.r31.u8);
	// stb r31,2751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2751, ctx.r31.u8);
	// stb r31,2752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2752, ctx.r31.u8);
	// stb r24,2753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2753, ctx.r24.u8);
	// stb r22,2754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2754, ctx.r22.u8);
	// stb r31,2755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2755, ctx.r31.u8);
	// stb r31,2756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2756, ctx.r31.u8);
	// stb r31,2757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2757, ctx.r31.u8);
	// stb r31,2758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2758, ctx.r31.u8);
	// stb r31,2759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2759, ctx.r31.u8);
	// li r9,13
	ctx.r9.s64 = 13;
	// stb r31,2760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2760, ctx.r31.u8);
	// li r23,106
	ctx.r23.s64 = 106;
	// stb r31,2761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2761, ctx.r31.u8);
	// li r28,14
	ctx.r28.s64 = 14;
	// stb r6,2762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2762, ctx.r6.u8);
	// stb r31,2763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2763, ctx.r31.u8);
	// li r29,5
	ctx.r29.s64 = 5;
	// stb r31,2764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2764, ctx.r31.u8);
	// stb r31,2765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2765, ctx.r31.u8);
	// stb r31,2766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2766, ctx.r31.u8);
	// stb r31,2767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2767, ctx.r31.u8);
	// stb r31,2768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2768, ctx.r31.u8);
	// stb r31,2769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2769, ctx.r31.u8);
	// stb r31,2770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2770, ctx.r31.u8);
	// stb r31,2771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2771, ctx.r31.u8);
	// stb r31,2772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2772, ctx.r31.u8);
	// stb r7,2773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2773, ctx.r7.u8);
	// stb r24,2774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2774, ctx.r24.u8);
	// stb r31,2775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2775, ctx.r31.u8);
	// stb r31,2776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2776, ctx.r31.u8);
	// stb r31,2777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2777, ctx.r31.u8);
	// stb r31,2778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2778, ctx.r31.u8);
	// stb r31,2779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2779, ctx.r31.u8);
	// stb r31,2780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2780, ctx.r31.u8);
	// stb r24,2781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2781, ctx.r24.u8);
	// stb r22,2782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2782, ctx.r22.u8);
	// stb r31,2783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2783, ctx.r31.u8);
	// stb r31,2784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2784, ctx.r31.u8);
	// stb r31,2785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2785, ctx.r31.u8);
	// stb r31,2786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2786, ctx.r31.u8);
	// stb r31,2787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2787, ctx.r31.u8);
	// stb r31,2788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2788, ctx.r31.u8);
	// stb r31,2789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2789, ctx.r31.u8);
	// stb r6,2790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2790, ctx.r6.u8);
	// stb r31,2791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2791, ctx.r31.u8);
	// stb r31,2792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2792, ctx.r31.u8);
	// stb r31,2793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2793, ctx.r31.u8);
	// stb r31,2794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2794, ctx.r31.u8);
	// stb r31,2795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2795, ctx.r31.u8);
	// stb r31,2796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2796, ctx.r31.u8);
	// stb r31,2797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2797, ctx.r31.u8);
	// stb r31,2798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2798, ctx.r31.u8);
	// stb r31,2799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2799, ctx.r31.u8);
	// stb r31,2800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2800, ctx.r31.u8);
	// stb r7,2801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2801, ctx.r7.u8);
	// stb r9,2802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2802, ctx.r9.u8);
	// stb r31,2803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2803, ctx.r31.u8);
	// stb r31,2804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2804, ctx.r31.u8);
	// stb r31,2805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2805, ctx.r31.u8);
	// stb r31,2806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2806, ctx.r31.u8);
	// stb r31,2807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2807, ctx.r31.u8);
	// stb r31,2808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2808, ctx.r31.u8);
	// stb r7,2809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2809, ctx.r7.u8);
	// stb r23,2810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2810, ctx.r23.u8);
	// stb r31,2811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2811, ctx.r31.u8);
	// stb r31,2812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2812, ctx.r31.u8);
	// stb r31,2813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2813, ctx.r31.u8);
	// stb r31,2814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2814, ctx.r31.u8);
	// stb r31,2815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2815, ctx.r31.u8);
	// stb r31,2816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2816, ctx.r31.u8);
	// stb r31,2817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2817, ctx.r31.u8);
	// stb r6,2818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2818, ctx.r6.u8);
	// stb r31,2819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2819, ctx.r31.u8);
	// stb r31,2820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2820, ctx.r31.u8);
	// stb r31,2821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2821, ctx.r31.u8);
	// stb r31,2822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2822, ctx.r31.u8);
	// stb r31,2823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2823, ctx.r31.u8);
	// stb r31,2824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2824, ctx.r31.u8);
	// stb r31,2825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2825, ctx.r31.u8);
	// stb r31,2826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2826, ctx.r31.u8);
	// stb r31,2827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2827, ctx.r31.u8);
	// stb r31,2828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2828, ctx.r31.u8);
	// stb r7,2829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2829, ctx.r7.u8);
	// stb r28,2830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2830, ctx.r28.u8);
	// stb r31,2831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2831, ctx.r31.u8);
	// stb r31,2832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2832, ctx.r31.u8);
	// stb r31,2833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2833, ctx.r31.u8);
	// stb r31,2834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2834, ctx.r31.u8);
	// stb r31,2835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2835, ctx.r31.u8);
	// stb r31,2836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2836, ctx.r31.u8);
	// li r9,71
	ctx.r9.s64 = 71;
	// stb r29,2837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2837, ctx.r29.u8);
	// li r5,255
	ctx.r5.s64 = 255;
	// stb r31,2839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2839, ctx.r31.u8);
	// li r30,23
	ctx.r30.s64 = 23;
	// stb r31,2840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2840, ctx.r31.u8);
	// li r25,67
	ctx.r25.s64 = 67;
	// stb r31,2841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2841, ctx.r31.u8);
	// li r8,17
	ctx.r8.s64 = 17;
	// stb r31,2842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2842, ctx.r31.u8);
	// stb r9,2851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2851, ctx.r9.u8);
	// li r9,146
	ctx.r9.s64 = 146;
	// li r27,95
	ctx.r27.s64 = 95;
	// stb r31,2843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2843, ctx.r31.u8);
	// stb r30,2838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2838, ctx.r30.u8);
	// stb r31,2844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2844, ctx.r31.u8);
	// stb r31,2845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2845, ctx.r31.u8);
	// stb r9,2852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2852, ctx.r9.u8);
	// li r9,124
	ctx.r9.s64 = 124;
	// stb r6,2846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2846, ctx.r6.u8);
	// stb r31,2847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2847, ctx.r31.u8);
	// stb r31,2848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2848, ctx.r31.u8);
	// stb r31,2849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2849, ctx.r31.u8);
	// stb r9,2853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2853, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,2850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2850, ctx.r31.u8);
	// stb r31,2854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2854, ctx.r31.u8);
	// stb r31,2855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2855, ctx.r31.u8);
	// stb r31,2856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2856, ctx.r31.u8);
	// stb r26,2857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2857, ctx.r26.u8);
	// stb r25,2858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2858, ctx.r25.u8);
	// stb r31,2859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2859, ctx.r31.u8);
	// stb r31,2860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2860, ctx.r31.u8);
	// stb r31,2861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2861, ctx.r31.u8);
	// stb r31,2862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2862, ctx.r31.u8);
	// stb r31,2863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2863, ctx.r31.u8);
	// stb r31,2864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2864, ctx.r31.u8);
	// stb r9,2865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2865, ctx.r9.u8);
	// stb r8,2866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2866, ctx.r8.u8);
	// stb r31,2867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2867, ctx.r31.u8);
	// stb r31,2868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2868, ctx.r31.u8);
	// stb r31,2869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2869, ctx.r31.u8);
	// stb r31,2870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2870, ctx.r31.u8);
	// stb r31,2871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2871, ctx.r31.u8);
	// stb r31,2872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2872, ctx.r31.u8);
	// stb r31,2873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2873, ctx.r31.u8);
	// stb r31,2874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2874, ctx.r31.u8);
	// stb r31,2875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2875, ctx.r31.u8);
	// stb r31,2876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2876, ctx.r31.u8);
	// stb r31,2877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2877, ctx.r31.u8);
	// stb r31,2878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2878, ctx.r31.u8);
	// stb r31,2879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2879, ctx.r31.u8);
	// stb r31,2880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2880, ctx.r31.u8);
	// stb r31,2881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2881, ctx.r31.u8);
	// stb r31,2882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2882, ctx.r31.u8);
	// stb r31,2883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2883, ctx.r31.u8);
	// stb r31,2884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2884, ctx.r31.u8);
	// stb r3,2885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2885, ctx.r3.u8);
	// stb r28,2886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2886, ctx.r28.u8);
	// stb r31,2887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2887, ctx.r31.u8);
	// stb r31,2888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2888, ctx.r31.u8);
	// stb r31,2889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2889, ctx.r31.u8);
	// stb r31,2890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2890, ctx.r31.u8);
	// stb r31,2891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2891, ctx.r31.u8);
	// stb r31,2892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2892, ctx.r31.u8);
	// stb r4,2893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2893, ctx.r4.u8);
	// stb r27,2894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2894, ctx.r27.u8);
	// stb r31,2895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2895, ctx.r31.u8);
	// stb r31,2896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2896, ctx.r31.u8);
	// stb r31,2897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2897, ctx.r31.u8);
	// stb r31,2898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2898, ctx.r31.u8);
	// stb r31,2899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2899, ctx.r31.u8);
	// stb r31,2900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2900, ctx.r31.u8);
	// stb r31,2901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2901, ctx.r31.u8);
	// stb r6,2902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2902, ctx.r6.u8);
	// stb r31,2903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2903, ctx.r31.u8);
	// stb r31,2904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2904, ctx.r31.u8);
	// stb r31,2905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2905, ctx.r31.u8);
	// stb r31,2906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2906, ctx.r31.u8);
	// stb r5,2907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2907, ctx.r5.u8);
	// stb r5,2908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2908, ctx.r5.u8);
	// li r21,127
	ctx.r21.s64 = 127;
	// stb r5,2909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2909, ctx.r5.u8);
	// stb r5,2910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2910, ctx.r5.u8);
	// stb r31,2911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2911, ctx.r31.u8);
	// stb r31,2912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2912, ctx.r31.u8);
	// stb r9,2913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2913, ctx.r9.u8);
	// stb r17,2914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2914, ctx.r17.u8);
	// stb r31,2915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2915, ctx.r31.u8);
	// stb r31,2916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2916, ctx.r31.u8);
	// stb r31,2917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2917, ctx.r31.u8);
	// stb r31,2918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2918, ctx.r31.u8);
	// stb r31,2919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2919, ctx.r31.u8);
	// stb r31,2920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2920, ctx.r31.u8);
	// stb r9,2921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2921, ctx.r9.u8);
	// stb r8,2922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2922, ctx.r8.u8);
	// stb r31,2923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2923, ctx.r31.u8);
	// stb r31,2924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2924, ctx.r31.u8);
	// stb r31,2925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2925, ctx.r31.u8);
	// stb r31,2926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2926, ctx.r31.u8);
	// stb r31,2927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2927, ctx.r31.u8);
	// stb r31,2928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2928, ctx.r31.u8);
	// stb r31,2929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2929, ctx.r31.u8);
	// stb r31,2930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2930, ctx.r31.u8);
	// stb r31,2931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2931, ctx.r31.u8);
	// stb r31,2932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2932, ctx.r31.u8);
	// stb r31,2933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2933, ctx.r31.u8);
	// stb r31,2934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2934, ctx.r31.u8);
	// stb r31,2935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2935, ctx.r31.u8);
	// stb r31,2936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2936, ctx.r31.u8);
	// stb r31,2937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2937, ctx.r31.u8);
	// stb r31,2938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2938, ctx.r31.u8);
	// stb r31,2939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2939, ctx.r31.u8);
	// stb r31,2940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2940, ctx.r31.u8);
	// stb r9,2941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2941, ctx.r9.u8);
	// stb r21,2942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2942, ctx.r21.u8);
	// stb r31,2943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2943, ctx.r31.u8);
	// stb r31,2944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2944, ctx.r31.u8);
	// stb r31,2945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2945, ctx.r31.u8);
	// stb r31,2946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2946, ctx.r31.u8);
	// stb r31,2947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2947, ctx.r31.u8);
	// stb r31,2948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2948, ctx.r31.u8);
	// stb r9,2949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2949, ctx.r9.u8);
	// stb r8,2950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2950, ctx.r8.u8);
	// stb r31,2951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2951, ctx.r31.u8);
	// stb r31,2952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2952, ctx.r31.u8);
	// stb r31,2953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2953, ctx.r31.u8);
	// stb r31,2954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2954, ctx.r31.u8);
	// stb r31,2955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2955, ctx.r31.u8);
	// stb r31,2956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2956, ctx.r31.u8);
	// stb r31,2957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2957, ctx.r31.u8);
	// stb r31,2958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2958, ctx.r31.u8);
	// stb r31,2959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2959, ctx.r31.u8);
	// stb r31,2960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2960, ctx.r31.u8);
	// stb r31,2961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2961, ctx.r31.u8);
	// stb r31,2962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2962, ctx.r31.u8);
	// stb r31,2963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2963, ctx.r31.u8);
	// stb r31,2964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2964, ctx.r31.u8);
	// stb r31,2965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2965, ctx.r31.u8);
	// stb r31,2966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2966, ctx.r31.u8);
	// stb r31,2967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2967, ctx.r31.u8);
	// stb r31,2968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2968, ctx.r31.u8);
	// stb r26,2969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2969, ctx.r26.u8);
	// stb r10,2970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2970, ctx.r10.u8);
	// stb r31,2971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2971, ctx.r31.u8);
	// stb r31,2972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2972, ctx.r31.u8);
	// stb r31,2973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2973, ctx.r31.u8);
	// stb r31,2974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2974, ctx.r31.u8);
	// stb r31,2975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2975, ctx.r31.u8);
	// stb r31,2976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2976, ctx.r31.u8);
	// stb r9,2977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2977, ctx.r9.u8);
	// stb r8,2978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2978, ctx.r8.u8);
	// stb r31,2979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2979, ctx.r31.u8);
	// stb r31,2980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2980, ctx.r31.u8);
	// stb r31,2981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2981, ctx.r31.u8);
	// stb r31,2982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2982, ctx.r31.u8);
	// stb r31,2983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2983, ctx.r31.u8);
	// stb r31,2984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2984, ctx.r31.u8);
	// stb r31,2985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2985, ctx.r31.u8);
	// stb r31,2986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2986, ctx.r31.u8);
	// stb r31,2987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2987, ctx.r31.u8);
	// stb r31,2988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2988, ctx.r31.u8);
	// li r15,142
	ctx.r15.s64 = 142;
	// stb r31,2989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2989, ctx.r31.u8);
	// li r19,140
	ctx.r19.s64 = 140;
	// stb r31,2990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2990, ctx.r31.u8);
	// li r20,174
	ctx.r20.s64 = 174;
	// stb r31,2991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2991, ctx.r31.u8);
	// stb r31,2992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2992, ctx.r31.u8);
	// stb r31,2993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2993, ctx.r31.u8);
	// stb r31,2994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2994, ctx.r31.u8);
	// stb r31,2995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2995, ctx.r31.u8);
	// stb r31,2996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2996, ctx.r31.u8);
	// stb r26,2997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2997, ctx.r26.u8);
	// stb r15,2998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2998, ctx.r15.u8);
	// stb r31,2999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 2999, ctx.r31.u8);
	// stb r31,3000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3000, ctx.r31.u8);
	// stb r31,3001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3001, ctx.r31.u8);
	// stb r31,3002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3002, ctx.r31.u8);
	// stb r31,3003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3003, ctx.r31.u8);
	// stb r31,3004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3004, ctx.r31.u8);
	// stb r9,3005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3005, ctx.r9.u8);
	// stb r8,3006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3006, ctx.r8.u8);
	// stb r31,3007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3007, ctx.r31.u8);
	// stb r31,3008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3008, ctx.r31.u8);
	// stb r31,3009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3009, ctx.r31.u8);
	// stb r31,3010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3010, ctx.r31.u8);
	// stb r31,3011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3011, ctx.r31.u8);
	// stb r31,3012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3012, ctx.r31.u8);
	// stb r31,3013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3013, ctx.r31.u8);
	// stb r31,3014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3014, ctx.r31.u8);
	// stb r31,3015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3015, ctx.r31.u8);
	// stb r31,3016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3016, ctx.r31.u8);
	// stb r31,3017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3017, ctx.r31.u8);
	// stb r31,3018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3018, ctx.r31.u8);
	// stb r31,3019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3019, ctx.r31.u8);
	// stb r31,3020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3020, ctx.r31.u8);
	// stb r31,3021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3021, ctx.r31.u8);
	// stb r31,3022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3022, ctx.r31.u8);
	// stb r31,3023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3023, ctx.r31.u8);
	// stb r31,3024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3024, ctx.r31.u8);
	// stb r17,3025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3025, ctx.r17.u8);
	// stb r19,3026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3026, ctx.r19.u8);
	// stb r31,3027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3027, ctx.r31.u8);
	// stb r31,3028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3028, ctx.r31.u8);
	// stb r31,3029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3029, ctx.r31.u8);
	// stb r31,3030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3030, ctx.r31.u8);
	// stb r31,3031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3031, ctx.r31.u8);
	// stb r31,3032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3032, ctx.r31.u8);
	// stb r29,3033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3033, ctx.r29.u8);
	// stb r30,3034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3034, ctx.r30.u8);
	// stb r31,3035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3035, ctx.r31.u8);
	// stb r31,3036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3036, ctx.r31.u8);
	// stb r31,3037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3037, ctx.r31.u8);
	// stb r31,3038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3038, ctx.r31.u8);
	// stb r31,3039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3039, ctx.r31.u8);
	// stb r31,3040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3040, ctx.r31.u8);
	// stb r31,3041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3041, ctx.r31.u8);
	// stb r6,3042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3042, ctx.r6.u8);
	// stb r31,3043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3043, ctx.r31.u8);
	// stb r31,3044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3044, ctx.r31.u8);
	// stb r31,3045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3045, ctx.r31.u8);
	// stb r31,3046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3046, ctx.r31.u8);
	// stb r31,3047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3047, ctx.r31.u8);
	// stb r31,3048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3048, ctx.r31.u8);
	// stb r31,3049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3049, ctx.r31.u8);
	// stb r31,3050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3050, ctx.r31.u8);
	// stb r31,3051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3051, ctx.r31.u8);
	// stb r31,3052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3052, ctx.r31.u8);
	// stb r26,3053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3053, ctx.r26.u8);
	// stb r20,3054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3054, ctx.r20.u8);
	// stb r31,3055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3055, ctx.r31.u8);
	// stb r31,3056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3056, ctx.r31.u8);
	// stb r31,3057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3057, ctx.r31.u8);
	// stb r31,3058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3058, ctx.r31.u8);
	// stb r31,3059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3059, ctx.r31.u8);
	// stb r31,3060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3060, ctx.r31.u8);
	// stb r9,3061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3061, ctx.r9.u8);
	// stb r8,3062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3062, ctx.r8.u8);
	// stb r31,3063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3063, ctx.r31.u8);
	// stb r31,3064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3064, ctx.r31.u8);
	// stb r31,3065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3065, ctx.r31.u8);
	// stb r31,3066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3066, ctx.r31.u8);
	// li r21,246
	ctx.r21.s64 = 246;
	// stb r31,3067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3067, ctx.r31.u8);
	// stb r31,3068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3068, ctx.r31.u8);
	// stb r31,3069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3069, ctx.r31.u8);
	// stb r31,3070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3070, ctx.r31.u8);
	// stb r31,3071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3071, ctx.r31.u8);
	// stb r31,3072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3072, ctx.r31.u8);
	// stb r31,3073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3073, ctx.r31.u8);
	// stb r31,3074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3074, ctx.r31.u8);
	// stb r31,3075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3075, ctx.r31.u8);
	// stb r31,3076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3076, ctx.r31.u8);
	// stb r31,3077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3077, ctx.r31.u8);
	// stb r31,3078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3078, ctx.r31.u8);
	// stb r31,3079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3079, ctx.r31.u8);
	// stb r31,3080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3080, ctx.r31.u8);
	// stb r9,3081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3081, ctx.r9.u8);
	// stb r4,3082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3082, ctx.r4.u8);
	// stb r31,3083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3083, ctx.r31.u8);
	// stb r31,3084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3084, ctx.r31.u8);
	// stb r31,3085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3085, ctx.r31.u8);
	// stb r31,3086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3086, ctx.r31.u8);
	// stb r31,3087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3087, ctx.r31.u8);
	// stb r31,3088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3088, ctx.r31.u8);
	// stb r9,3089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3089, ctx.r9.u8);
	// stb r8,3090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3090, ctx.r8.u8);
	// stb r31,3091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3091, ctx.r31.u8);
	// stb r31,3092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3092, ctx.r31.u8);
	// stb r31,3093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3093, ctx.r31.u8);
	// stb r31,3094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3094, ctx.r31.u8);
	// stb r31,3095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3095, ctx.r31.u8);
	// stb r31,3096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3096, ctx.r31.u8);
	// stb r31,3097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3097, ctx.r31.u8);
	// stb r31,3098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3098, ctx.r31.u8);
	// stb r31,3099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3099, ctx.r31.u8);
	// stb r31,3100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3100, ctx.r31.u8);
	// stb r31,3101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3101, ctx.r31.u8);
	// stb r31,3102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3102, ctx.r31.u8);
	// stb r31,3103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3103, ctx.r31.u8);
	// stb r31,3104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3104, ctx.r31.u8);
	// stb r31,3105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3105, ctx.r31.u8);
	// stb r26,3106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3106, ctx.r26.u8);
	// stb r31,3107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3107, ctx.r31.u8);
	// stb r31,3108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3108, ctx.r31.u8);
	// stb r26,3109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3109, ctx.r26.u8);
	// stb r16,3110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3110, ctx.r16.u8);
	// stb r31,3111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3111, ctx.r31.u8);
	// stb r31,3112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3112, ctx.r31.u8);
	// stb r31,3113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3113, ctx.r31.u8);
	// stb r31,3114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3114, ctx.r31.u8);
	// stb r31,3115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3115, ctx.r31.u8);
	// stb r31,3116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3116, ctx.r31.u8);
	// stb r9,3117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3117, ctx.r9.u8);
	// stb r8,3118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3118, ctx.r8.u8);
	// stb r31,3119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3119, ctx.r31.u8);
	// stb r31,3120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3120, ctx.r31.u8);
	// stb r31,3121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3121, ctx.r31.u8);
	// stb r31,3122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3122, ctx.r31.u8);
	// stb r31,3123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3123, ctx.r31.u8);
	// stb r31,3124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3124, ctx.r31.u8);
	// stb r31,3125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3125, ctx.r31.u8);
	// stb r31,3126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3126, ctx.r31.u8);
	// stb r31,3127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3127, ctx.r31.u8);
	// stb r31,3128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3128, ctx.r31.u8);
	// stb r31,3129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3129, ctx.r31.u8);
	// stb r31,3130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3130, ctx.r31.u8);
	// stb r31,3131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3131, ctx.r31.u8);
	// stb r31,3132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3132, ctx.r31.u8);
	// stb r31,3133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3133, ctx.r31.u8);
	// stb r31,3134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3134, ctx.r31.u8);
	// stb r31,3135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3135, ctx.r31.u8);
	// stb r31,3136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3136, ctx.r31.u8);
	// stb r3,3137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3137, ctx.r3.u8);
	// stb r21,3138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3138, ctx.r21.u8);
	// stb r31,3139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3139, ctx.r31.u8);
	// stb r31,3140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3140, ctx.r31.u8);
	// stb r31,3141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3141, ctx.r31.u8);
	// stb r31,3142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3142, ctx.r31.u8);
	// stb r31,3143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3143, ctx.r31.u8);
	// stb r31,3144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3144, ctx.r31.u8);
	// stb r7,3145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3145, ctx.r7.u8);
	// stb r17,3146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3146, ctx.r17.u8);
	// std r11,6664(r1)
	PPC_STORE_U64(ctx.r1.u32 + 6664, ctx.r11.u64);
	// li r11,80
	ctx.r11.s64 = 80;
	// stb r31,3147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3147, ctx.r31.u8);
	// stb r31,3148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3148, ctx.r31.u8);
	// stb r31,3149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3149, ctx.r31.u8);
	// stb r31,3150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3150, ctx.r31.u8);
	// stb r31,3151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3151, ctx.r31.u8);
	// stb r31,3152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3152, ctx.r31.u8);
	// stb r3,3153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3153, ctx.r3.u8);
	// stb r14,3154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3154, ctx.r14.u8);
	// stb r31,3155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3155, ctx.r31.u8);
	// stb r31,3156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3156, ctx.r31.u8);
	// stb r31,3157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3157, ctx.r31.u8);
	// stb r31,3158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3158, ctx.r31.u8);
	// stb r31,3159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3159, ctx.r31.u8);
	// stb r31,3160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3160, ctx.r31.u8);
	// stb r31,3161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3161, ctx.r31.u8);
	// stb r7,3162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3162, ctx.r7.u8);
	// stb r31,3163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3163, ctx.r31.u8);
	// stb r31,3164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3164, ctx.r31.u8);
	// stb r31,3165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3165, ctx.r31.u8);
	// stb r31,3166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3166, ctx.r31.u8);
	// stb r31,3167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3167, ctx.r31.u8);
	// stb r31,3168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3168, ctx.r31.u8);
	// stb r18,3169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3169, ctx.r18.u8);
	// stb r11,3170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3170, ctx.r11.u8);
	// stb r31,3171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3171, ctx.r31.u8);
	// stb r31,3172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3172, ctx.r31.u8);
	// stb r31,3173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3173, ctx.r31.u8);
	// stb r31,3174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3174, ctx.r31.u8);
	// stb r31,3175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3175, ctx.r31.u8);
	// stb r31,3176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3176, ctx.r31.u8);
	// stb r7,3177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3177, ctx.r7.u8);
	// stb r7,3178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3178, ctx.r7.u8);
	// stb r31,3179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3179, ctx.r31.u8);
	// stb r31,3180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3180, ctx.r31.u8);
	// stb r31,3181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3181, ctx.r31.u8);
	// stb r31,3182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3182, ctx.r31.u8);
	// stb r31,3183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3183, ctx.r31.u8);
	// stb r31,3184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3184, ctx.r31.u8);
	// stb r24,3185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3185, ctx.r24.u8);
	// stb r22,3186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3186, ctx.r22.u8);
	// stb r31,3187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3187, ctx.r31.u8);
	// stb r31,3188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3188, ctx.r31.u8);
	// stb r31,3189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3189, ctx.r31.u8);
	// stb r31,3190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3190, ctx.r31.u8);
	// stb r31,3191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3191, ctx.r31.u8);
	// stb r31,3192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3192, ctx.r31.u8);
	// stb r31,3193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3193, ctx.r31.u8);
	// stb r6,3194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3194, ctx.r6.u8);
	// stb r31,3195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3195, ctx.r31.u8);
	// stb r31,3196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3196, ctx.r31.u8);
	// stb r31,3197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3197, ctx.r31.u8);
	// stb r31,3198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3198, ctx.r31.u8);
	// stb r31,3199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3199, ctx.r31.u8);
	// stb r31,3200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3200, ctx.r31.u8);
	// stb r31,3201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3201, ctx.r31.u8);
	// stb r31,3202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3202, ctx.r31.u8);
	// stb r31,3203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3203, ctx.r31.u8);
	// stb r31,3204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3204, ctx.r31.u8);
	// stb r7,3205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3205, ctx.r7.u8);
	// stb r24,3206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3206, ctx.r24.u8);
	// stb r31,3207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3207, ctx.r31.u8);
	// stb r31,3208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3208, ctx.r31.u8);
	// stb r31,3209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3209, ctx.r31.u8);
	// stb r31,3210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3210, ctx.r31.u8);
	// stb r31,3211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3211, ctx.r31.u8);
	// stb r31,3212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3212, ctx.r31.u8);
	// stb r24,3213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3213, ctx.r24.u8);
	// stb r22,3214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3214, ctx.r22.u8);
	// stb r31,3215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3215, ctx.r31.u8);
	// stb r31,3216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3216, ctx.r31.u8);
	// stb r31,3217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3217, ctx.r31.u8);
	// stb r31,3218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3218, ctx.r31.u8);
	// stb r31,3219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3219, ctx.r31.u8);
	// stb r31,3220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3220, ctx.r31.u8);
	// stb r31,3221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3221, ctx.r31.u8);
	// stb r6,3222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3222, ctx.r6.u8);
	// stb r31,3223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3223, ctx.r31.u8);
	// stb r31,3224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3224, ctx.r31.u8);
	// stb r31,3225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3225, ctx.r31.u8);
	// li r11,13
	ctx.r11.s64 = 13;
	// stb r31,3226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3226, ctx.r31.u8);
	// stb r31,3227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3227, ctx.r31.u8);
	// stb r31,3228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3228, ctx.r31.u8);
	// stb r31,3229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3229, ctx.r31.u8);
	// stb r31,3230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3230, ctx.r31.u8);
	// stb r31,3231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3231, ctx.r31.u8);
	// stb r31,3232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3232, ctx.r31.u8);
	// stb r7,3233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3233, ctx.r7.u8);
	// stb r11,3234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3234, ctx.r11.u8);
	// stb r31,3235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3235, ctx.r31.u8);
	// stb r31,3236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3236, ctx.r31.u8);
	// stb r31,3237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3237, ctx.r31.u8);
	// stb r31,3238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3238, ctx.r31.u8);
	// stb r31,3239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3239, ctx.r31.u8);
	// stb r31,3240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3240, ctx.r31.u8);
	// stb r7,3241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3241, ctx.r7.u8);
	// stb r23,3242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3242, ctx.r23.u8);
	// stb r31,3243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3243, ctx.r31.u8);
	// stb r31,3244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3244, ctx.r31.u8);
	// stb r31,3245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3245, ctx.r31.u8);
	// stb r31,3246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3246, ctx.r31.u8);
	// stb r31,3247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3247, ctx.r31.u8);
	// stb r31,3248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3248, ctx.r31.u8);
	// stb r31,3249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3249, ctx.r31.u8);
	// stb r6,3250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3250, ctx.r6.u8);
	// stb r31,3251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3251, ctx.r31.u8);
	// stb r31,3252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3252, ctx.r31.u8);
	// stb r31,3253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3253, ctx.r31.u8);
	// stb r31,3254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3254, ctx.r31.u8);
	// stb r31,3255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3255, ctx.r31.u8);
	// stb r31,3256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3256, ctx.r31.u8);
	// stb r31,3257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3257, ctx.r31.u8);
	// stb r31,3258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3258, ctx.r31.u8);
	// stb r31,3259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3259, ctx.r31.u8);
	// stb r31,3260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3260, ctx.r31.u8);
	// stb r7,3261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3261, ctx.r7.u8);
	// stb r28,3262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3262, ctx.r28.u8);
	// stb r31,3263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3263, ctx.r31.u8);
	// stb r31,3264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3264, ctx.r31.u8);
	// stb r31,3265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3265, ctx.r31.u8);
	// stb r31,3266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3266, ctx.r31.u8);
	// stb r31,3267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3267, ctx.r31.u8);
	// stb r31,3268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3268, ctx.r31.u8);
	// stb r29,3269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3269, ctx.r29.u8);
	// stb r30,3270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3270, ctx.r30.u8);
	// stb r31,3271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3271, ctx.r31.u8);
	// stb r31,3272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3272, ctx.r31.u8);
	// stb r31,3273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3273, ctx.r31.u8);
	// stb r31,3274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3274, ctx.r31.u8);
	// stb r31,3275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3275, ctx.r31.u8);
	// stb r31,3276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3276, ctx.r31.u8);
	// stb r31,3277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3277, ctx.r31.u8);
	// stb r6,3278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3278, ctx.r6.u8);
	// stb r31,3279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3279, ctx.r31.u8);
	// stb r31,3280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3280, ctx.r31.u8);
	// stb r31,3281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3281, ctx.r31.u8);
	// stb r31,3282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3282, ctx.r31.u8);
	// stb r31,3283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3283, ctx.r31.u8);
	// stb r31,3284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3284, ctx.r31.u8);
	// stb r31,3285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3285, ctx.r31.u8);
	// stb r31,3286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3286, ctx.r31.u8);
	// stb r31,3287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3287, ctx.r31.u8);
	// stb r31,3288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3288, ctx.r31.u8);
	// stb r26,3289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3289, ctx.r26.u8);
	// stb r25,3290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3290, ctx.r25.u8);
	// stb r31,3291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3291, ctx.r31.u8);
	// stb r31,3292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3292, ctx.r31.u8);
	// stb r31,3293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3293, ctx.r31.u8);
	// stb r31,3294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3294, ctx.r31.u8);
	// stb r31,3295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3295, ctx.r31.u8);
	// stb r31,3296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3296, ctx.r31.u8);
	// stb r9,3297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3297, ctx.r9.u8);
	// stb r8,3298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3298, ctx.r8.u8);
	// stb r31,3299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3299, ctx.r31.u8);
	// stb r31,3300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3300, ctx.r31.u8);
	// stb r31,3301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3301, ctx.r31.u8);
	// stb r31,3302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3302, ctx.r31.u8);
	// stb r31,3303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3303, ctx.r31.u8);
	// stb r31,3304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3304, ctx.r31.u8);
	// stb r31,3305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3305, ctx.r31.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,3306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3306, ctx.r31.u8);
	// stb r31,3307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3307, ctx.r31.u8);
	// stb r31,3308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3308, ctx.r31.u8);
	// stb r31,3309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3309, ctx.r31.u8);
	// stb r31,3310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3310, ctx.r31.u8);
	// stb r31,3311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3311, ctx.r31.u8);
	// stb r31,3312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3312, ctx.r31.u8);
	// stb r31,3313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3313, ctx.r31.u8);
	// stb r31,3314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3314, ctx.r31.u8);
	// stb r31,3315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3315, ctx.r31.u8);
	// stb r31,3316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3316, ctx.r31.u8);
	// stb r3,3317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3317, ctx.r3.u8);
	// stb r28,3318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3318, ctx.r28.u8);
	// stb r31,3319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3319, ctx.r31.u8);
	// stb r31,3320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3320, ctx.r31.u8);
	// stb r31,3321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3321, ctx.r31.u8);
	// stb r31,3322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3322, ctx.r31.u8);
	// stb r31,3323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3323, ctx.r31.u8);
	// stb r31,3324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3324, ctx.r31.u8);
	// stb r4,3325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3325, ctx.r4.u8);
	// stb r27,3326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3326, ctx.r27.u8);
	// stb r31,3327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3327, ctx.r31.u8);
	// stb r31,3328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3328, ctx.r31.u8);
	// stb r31,3329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3329, ctx.r31.u8);
	// stb r31,3330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3330, ctx.r31.u8);
	// stb r31,3331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3331, ctx.r31.u8);
	// stb r31,3332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3332, ctx.r31.u8);
	// stb r31,3333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3333, ctx.r31.u8);
	// stb r6,3334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3334, ctx.r6.u8);
	// stb r31,3335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3335, ctx.r31.u8);
	// stb r31,3336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3336, ctx.r31.u8);
	// stb r31,3337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3337, ctx.r31.u8);
	// stb r31,3338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3338, ctx.r31.u8);
	// stb r5,3339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3339, ctx.r5.u8);
	// stb r5,3340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3340, ctx.r5.u8);
	// stb r5,3341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3341, ctx.r5.u8);
	// stb r5,3342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3342, ctx.r5.u8);
	// stb r31,3343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3343, ctx.r31.u8);
	// stb r31,3344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3344, ctx.r31.u8);
	// stb r9,3345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3345, ctx.r9.u8);
	// stb r17,3346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3346, ctx.r17.u8);
	// stb r31,3347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3347, ctx.r31.u8);
	// stb r31,3348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3348, ctx.r31.u8);
	// stb r31,3349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3349, ctx.r31.u8);
	// stb r31,3350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3350, ctx.r31.u8);
	// stb r31,3351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3351, ctx.r31.u8);
	// stb r31,3352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3352, ctx.r31.u8);
	// stb r9,3353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3353, ctx.r9.u8);
	// stb r8,3354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3354, ctx.r8.u8);
	// stb r31,3355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3355, ctx.r31.u8);
	// stb r31,3356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3356, ctx.r31.u8);
	// stb r31,3357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3357, ctx.r31.u8);
	// stb r31,3358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3358, ctx.r31.u8);
	// stb r31,3359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3359, ctx.r31.u8);
	// stb r31,3360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3360, ctx.r31.u8);
	// stb r31,3361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3361, ctx.r31.u8);
	// stb r31,3362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3362, ctx.r31.u8);
	// stb r31,3363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3363, ctx.r31.u8);
	// stb r31,3364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3364, ctx.r31.u8);
	// stb r31,3365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3365, ctx.r31.u8);
	// stb r31,3366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3366, ctx.r31.u8);
	// stb r31,3367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3367, ctx.r31.u8);
	// stb r31,3368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3368, ctx.r31.u8);
	// stb r31,3369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3369, ctx.r31.u8);
	// stb r31,3370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3370, ctx.r31.u8);
	// stb r31,3371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3371, ctx.r31.u8);
	// stb r31,3372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3372, ctx.r31.u8);
	// stb r9,3373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3373, ctx.r9.u8);
	// stb r11,3374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3374, ctx.r11.u8);
	// stb r31,3375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3375, ctx.r31.u8);
	// stb r31,3376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3376, ctx.r31.u8);
	// stb r31,3377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3377, ctx.r31.u8);
	// stb r31,3378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3378, ctx.r31.u8);
	// stb r31,3379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3379, ctx.r31.u8);
	// stb r31,3380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3380, ctx.r31.u8);
	// stb r9,3381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3381, ctx.r9.u8);
	// stb r8,3382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3382, ctx.r8.u8);
	// stb r31,3383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3383, ctx.r31.u8);
	// stb r31,3384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3384, ctx.r31.u8);
	// stb r31,3385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3385, ctx.r31.u8);
	// stb r31,3386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3386, ctx.r31.u8);
	// stb r31,3387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3387, ctx.r31.u8);
	// stb r31,3388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3388, ctx.r31.u8);
	// stb r31,3389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3389, ctx.r31.u8);
	// stb r31,3390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3390, ctx.r31.u8);
	// stb r31,3391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3391, ctx.r31.u8);
	// stb r31,3392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3392, ctx.r31.u8);
	// stb r31,3393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3393, ctx.r31.u8);
	// stb r31,3394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3394, ctx.r31.u8);
	// stb r31,3395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3395, ctx.r31.u8);
	// stb r31,3396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3396, ctx.r31.u8);
	// stb r31,3397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3397, ctx.r31.u8);
	// stb r31,3398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3398, ctx.r31.u8);
	// stb r31,3399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3399, ctx.r31.u8);
	// stb r31,3400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3400, ctx.r31.u8);
	// stb r26,3401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3401, ctx.r26.u8);
	// stb r10,3402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3402, ctx.r10.u8);
	// stb r31,3403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3403, ctx.r31.u8);
	// stb r31,3404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3404, ctx.r31.u8);
	// stb r31,3405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3405, ctx.r31.u8);
	// stb r31,3406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3406, ctx.r31.u8);
	// stb r31,3407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3407, ctx.r31.u8);
	// stb r31,3408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3408, ctx.r31.u8);
	// stb r9,3409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3409, ctx.r9.u8);
	// stb r8,3410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3410, ctx.r8.u8);
	// stb r31,3411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3411, ctx.r31.u8);
	// stb r31,3412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3412, ctx.r31.u8);
	// stb r31,3413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3413, ctx.r31.u8);
	// stb r31,3414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3414, ctx.r31.u8);
	// stb r31,3415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3415, ctx.r31.u8);
	// stb r31,3416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3416, ctx.r31.u8);
	// stb r31,3417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3417, ctx.r31.u8);
	// stb r31,3418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3418, ctx.r31.u8);
	// stb r31,3419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3419, ctx.r31.u8);
	// stb r31,3420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3420, ctx.r31.u8);
	// stb r31,3421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3421, ctx.r31.u8);
	// stb r31,3422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3422, ctx.r31.u8);
	// stb r31,3423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3423, ctx.r31.u8);
	// stb r31,3424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3424, ctx.r31.u8);
	// stb r31,3425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3425, ctx.r31.u8);
	// stb r31,3426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3426, ctx.r31.u8);
	// stb r31,3427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3427, ctx.r31.u8);
	// stb r31,3428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3428, ctx.r31.u8);
	// stb r26,3429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3429, ctx.r26.u8);
	// stb r15,3430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3430, ctx.r15.u8);
	// stb r31,3431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3431, ctx.r31.u8);
	// stb r31,3432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3432, ctx.r31.u8);
	// stb r31,3433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3433, ctx.r31.u8);
	// stb r31,3434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3434, ctx.r31.u8);
	// stb r31,3435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3435, ctx.r31.u8);
	// stb r31,3436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3436, ctx.r31.u8);
	// stb r9,3437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3437, ctx.r9.u8);
	// stb r8,3438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3438, ctx.r8.u8);
	// stb r31,3439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3439, ctx.r31.u8);
	// stb r31,3440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3440, ctx.r31.u8);
	// stb r31,3441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3441, ctx.r31.u8);
	// stb r31,3442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3442, ctx.r31.u8);
	// stb r31,3443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3443, ctx.r31.u8);
	// stb r31,3444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3444, ctx.r31.u8);
	// stb r31,3445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3445, ctx.r31.u8);
	// stb r31,3446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3446, ctx.r31.u8);
	// stb r31,3447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3447, ctx.r31.u8);
	// stb r31,3448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3448, ctx.r31.u8);
	// stb r31,3449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3449, ctx.r31.u8);
	// stb r31,3450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3450, ctx.r31.u8);
	// stb r31,3451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3451, ctx.r31.u8);
	// stb r31,3452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3452, ctx.r31.u8);
	// stb r31,3453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3453, ctx.r31.u8);
	// stb r31,3454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3454, ctx.r31.u8);
	// stb r31,3455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3455, ctx.r31.u8);
	// stb r31,3456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3456, ctx.r31.u8);
	// stb r17,3457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3457, ctx.r17.u8);
	// stb r19,3458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3458, ctx.r19.u8);
	// stb r31,3459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3459, ctx.r31.u8);
	// stb r31,3460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3460, ctx.r31.u8);
	// stb r31,3461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3461, ctx.r31.u8);
	// stb r31,3462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3462, ctx.r31.u8);
	// stb r31,3463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3463, ctx.r31.u8);
	// stb r31,3464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3464, ctx.r31.u8);
	// stb r29,3465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3465, ctx.r29.u8);
	// stb r30,3466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3466, ctx.r30.u8);
	// stb r31,3467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3467, ctx.r31.u8);
	// stb r31,3468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3468, ctx.r31.u8);
	// stb r31,3469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3469, ctx.r31.u8);
	// stb r31,3470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3470, ctx.r31.u8);
	// stb r31,3471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3471, ctx.r31.u8);
	// stb r31,3472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3472, ctx.r31.u8);
	// stb r31,3473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3473, ctx.r31.u8);
	// stb r6,3474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3474, ctx.r6.u8);
	// stb r31,3475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3475, ctx.r31.u8);
	// stb r31,3476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3476, ctx.r31.u8);
	// stb r31,3477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3477, ctx.r31.u8);
	// stb r31,3478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3478, ctx.r31.u8);
	// stb r31,3479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3479, ctx.r31.u8);
	// stb r31,3480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3480, ctx.r31.u8);
	// stb r31,3481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3481, ctx.r31.u8);
	// stb r31,3482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3482, ctx.r31.u8);
	// stb r31,3483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3483, ctx.r31.u8);
	// stb r31,3484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3484, ctx.r31.u8);
	// stb r26,3485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3485, ctx.r26.u8);
	// stb r20,3486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3486, ctx.r20.u8);
	// stb r31,3487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3487, ctx.r31.u8);
	// stb r31,3488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3488, ctx.r31.u8);
	// stb r31,3489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3489, ctx.r31.u8);
	// stb r31,3490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3490, ctx.r31.u8);
	// stb r31,3491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3491, ctx.r31.u8);
	// stb r31,3492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3492, ctx.r31.u8);
	// stb r9,3493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3493, ctx.r9.u8);
	// stb r8,3494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3494, ctx.r8.u8);
	// stb r31,3495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3495, ctx.r31.u8);
	// stb r31,3496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3496, ctx.r31.u8);
	// stb r31,3497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3497, ctx.r31.u8);
	// stb r31,3498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3498, ctx.r31.u8);
	// stb r31,3499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3499, ctx.r31.u8);
	// stb r31,3500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3500, ctx.r31.u8);
	// stb r31,3501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3501, ctx.r31.u8);
	// stb r31,3502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3502, ctx.r31.u8);
	// stb r31,3503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3503, ctx.r31.u8);
	// stb r31,3504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3504, ctx.r31.u8);
	// stb r31,3505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3505, ctx.r31.u8);
	// stb r31,3506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3506, ctx.r31.u8);
	// stb r31,3507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3507, ctx.r31.u8);
	// stb r31,3508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3508, ctx.r31.u8);
	// stb r31,3509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3509, ctx.r31.u8);
	// stb r31,3510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3510, ctx.r31.u8);
	// stb r31,3511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3511, ctx.r31.u8);
	// stb r31,3512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3512, ctx.r31.u8);
	// stb r9,3513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3513, ctx.r9.u8);
	// stb r4,3514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3514, ctx.r4.u8);
	// stb r31,3515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3515, ctx.r31.u8);
	// stb r31,3516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3516, ctx.r31.u8);
	// stb r31,3517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3517, ctx.r31.u8);
	// stb r31,3518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3518, ctx.r31.u8);
	// stb r31,3519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3519, ctx.r31.u8);
	// stb r31,3520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3520, ctx.r31.u8);
	// stb r9,3521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3521, ctx.r9.u8);
	// stb r8,3522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3522, ctx.r8.u8);
	// stb r31,3523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3523, ctx.r31.u8);
	// stb r31,3524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3524, ctx.r31.u8);
	// stb r31,3525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3525, ctx.r31.u8);
	// stb r31,3526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3526, ctx.r31.u8);
	// stb r31,3527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3527, ctx.r31.u8);
	// stb r31,3528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3528, ctx.r31.u8);
	// stb r31,3529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3529, ctx.r31.u8);
	// stb r31,3530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3530, ctx.r31.u8);
	// stb r31,3531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3531, ctx.r31.u8);
	// stb r31,3532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3532, ctx.r31.u8);
	// stb r31,3533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3533, ctx.r31.u8);
	// stb r31,3534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3534, ctx.r31.u8);
	// stb r31,3535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3535, ctx.r31.u8);
	// stb r31,3536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3536, ctx.r31.u8);
	// stb r31,3537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3537, ctx.r31.u8);
	// stb r26,3538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3538, ctx.r26.u8);
	// stb r31,3539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3539, ctx.r31.u8);
	// stb r31,3540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3540, ctx.r31.u8);
	// stb r26,3541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3541, ctx.r26.u8);
	// stb r16,3542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3542, ctx.r16.u8);
	// stb r31,3543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3543, ctx.r31.u8);
	// stb r31,3544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3544, ctx.r31.u8);
	// stb r31,3545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3545, ctx.r31.u8);
	// stb r31,3546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3546, ctx.r31.u8);
	// stb r31,3547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3547, ctx.r31.u8);
	// stb r14,3586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3586, ctx.r14.u8);
	// li r14,81
	ctx.r14.s64 = 81;
	// stb r31,3548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3548, ctx.r31.u8);
	// stb r9,3549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3549, ctx.r9.u8);
	// stb r8,3550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3550, ctx.r8.u8);
	// stb r31,3551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3551, ctx.r31.u8);
	// stb r31,3552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3552, ctx.r31.u8);
	// stb r31,3553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3553, ctx.r31.u8);
	// stb r31,3554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3554, ctx.r31.u8);
	// stb r31,3555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3555, ctx.r31.u8);
	// stb r31,3556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3556, ctx.r31.u8);
	// stb r31,3557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3557, ctx.r31.u8);
	// stb r31,3558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3558, ctx.r31.u8);
	// stb r31,3559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3559, ctx.r31.u8);
	// stb r31,3560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3560, ctx.r31.u8);
	// stb r31,3561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3561, ctx.r31.u8);
	// stb r31,3562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3562, ctx.r31.u8);
	// stb r31,3563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3563, ctx.r31.u8);
	// stb r31,3564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3564, ctx.r31.u8);
	// stb r31,3565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3565, ctx.r31.u8);
	// stb r31,3566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3566, ctx.r31.u8);
	// stb r31,3567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3567, ctx.r31.u8);
	// stb r31,3568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3568, ctx.r31.u8);
	// stb r3,3569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3569, ctx.r3.u8);
	// stb r21,3570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3570, ctx.r21.u8);
	// stb r31,3571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3571, ctx.r31.u8);
	// stb r31,3572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3572, ctx.r31.u8);
	// stb r31,3573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3573, ctx.r31.u8);
	// stb r31,3574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3574, ctx.r31.u8);
	// stb r31,3575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3575, ctx.r31.u8);
	// stb r31,3576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3576, ctx.r31.u8);
	// stb r7,3577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3577, ctx.r7.u8);
	// stb r17,3578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3578, ctx.r17.u8);
	// stb r31,3579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3579, ctx.r31.u8);
	// stb r31,3580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3580, ctx.r31.u8);
	// stb r31,3581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3581, ctx.r31.u8);
	// stb r31,3582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3582, ctx.r31.u8);
	// stb r31,3583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3583, ctx.r31.u8);
	// stb r31,3584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3584, ctx.r31.u8);
	// stb r3,3585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3585, ctx.r3.u8);
	// stb r31,3587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3587, ctx.r31.u8);
	// stb r31,3588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3588, ctx.r31.u8);
	// stb r31,3589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3589, ctx.r31.u8);
	// stb r31,3590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3590, ctx.r31.u8);
	// stb r31,3591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3591, ctx.r31.u8);
	// stb r31,3592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3592, ctx.r31.u8);
	// stb r31,3593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3593, ctx.r31.u8);
	// stb r7,3594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3594, ctx.r7.u8);
	// stb r31,3595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3595, ctx.r31.u8);
	// stb r31,3596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3596, ctx.r31.u8);
	// stb r31,3597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3597, ctx.r31.u8);
	// stb r31,3598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3598, ctx.r31.u8);
	// stb r31,3599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3599, ctx.r31.u8);
	// stb r31,3600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3600, ctx.r31.u8);
	// stb r18,3601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3601, ctx.r18.u8);
	// stb r14,3602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3602, ctx.r14.u8);
	// stb r31,3603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3603, ctx.r31.u8);
	// stb r31,3604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3604, ctx.r31.u8);
	// stb r31,3605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3605, ctx.r31.u8);
	// stb r31,3606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3606, ctx.r31.u8);
	// stb r31,3607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3607, ctx.r31.u8);
	// stb r31,3608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3608, ctx.r31.u8);
	// stb r7,3609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3609, ctx.r7.u8);
	// stb r7,3610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3610, ctx.r7.u8);
	// stb r31,3611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3611, ctx.r31.u8);
	// stb r31,3612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3612, ctx.r31.u8);
	// stb r31,3613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3613, ctx.r31.u8);
	// stb r31,3614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3614, ctx.r31.u8);
	// stb r31,3615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3615, ctx.r31.u8);
	// stb r31,3616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3616, ctx.r31.u8);
	// stb r24,3617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3617, ctx.r24.u8);
	// stb r22,3618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3618, ctx.r22.u8);
	// stb r31,3619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3619, ctx.r31.u8);
	// stb r31,3620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3620, ctx.r31.u8);
	// stb r31,3621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3621, ctx.r31.u8);
	// stb r31,3622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3622, ctx.r31.u8);
	// stb r31,3623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3623, ctx.r31.u8);
	// stb r31,3624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3624, ctx.r31.u8);
	// stb r31,3625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3625, ctx.r31.u8);
	// stb r6,3626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3626, ctx.r6.u8);
	// stb r31,3627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3627, ctx.r31.u8);
	// li r14,13
	ctx.r14.s64 = 13;
	// stb r31,3628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3628, ctx.r31.u8);
	// stb r31,3629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3629, ctx.r31.u8);
	// stb r31,3630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3630, ctx.r31.u8);
	// stb r31,3631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3631, ctx.r31.u8);
	// stb r31,3632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3632, ctx.r31.u8);
	// stb r31,3633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3633, ctx.r31.u8);
	// stb r31,3634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3634, ctx.r31.u8);
	// stb r31,3635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3635, ctx.r31.u8);
	// stb r31,3636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3636, ctx.r31.u8);
	// stb r7,3637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3637, ctx.r7.u8);
	// stb r24,3638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3638, ctx.r24.u8);
	// stb r31,3639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3639, ctx.r31.u8);
	// stb r31,3640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3640, ctx.r31.u8);
	// stb r31,3641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3641, ctx.r31.u8);
	// stb r31,3642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3642, ctx.r31.u8);
	// stb r31,3643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3643, ctx.r31.u8);
	// stb r31,3644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3644, ctx.r31.u8);
	// stb r24,3645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3645, ctx.r24.u8);
	// stb r22,3646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3646, ctx.r22.u8);
	// stb r31,3647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3647, ctx.r31.u8);
	// stb r31,3648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3648, ctx.r31.u8);
	// stb r31,3649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3649, ctx.r31.u8);
	// stb r31,3650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3650, ctx.r31.u8);
	// stb r31,3651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3651, ctx.r31.u8);
	// stb r31,3652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3652, ctx.r31.u8);
	// stb r31,3653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3653, ctx.r31.u8);
	// stb r6,3654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3654, ctx.r6.u8);
	// stb r31,3655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3655, ctx.r31.u8);
	// stb r31,3656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3656, ctx.r31.u8);
	// stb r31,3657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3657, ctx.r31.u8);
	// stb r31,3658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3658, ctx.r31.u8);
	// stb r31,3659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3659, ctx.r31.u8);
	// stb r31,3660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3660, ctx.r31.u8);
	// stb r31,3661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3661, ctx.r31.u8);
	// stb r31,3662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3662, ctx.r31.u8);
	// stb r31,3663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3663, ctx.r31.u8);
	// stb r31,3664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3664, ctx.r31.u8);
	// stb r7,3665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3665, ctx.r7.u8);
	// stb r14,3666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3666, ctx.r14.u8);
	// stb r31,3667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3667, ctx.r31.u8);
	// stb r31,3668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3668, ctx.r31.u8);
	// stb r31,3669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3669, ctx.r31.u8);
	// stb r31,3670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3670, ctx.r31.u8);
	// stb r31,3671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3671, ctx.r31.u8);
	// stb r31,3672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3672, ctx.r31.u8);
	// stb r7,3673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3673, ctx.r7.u8);
	// stb r23,3674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3674, ctx.r23.u8);
	// stb r31,3675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3675, ctx.r31.u8);
	// stb r31,3676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3676, ctx.r31.u8);
	// stb r31,3677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3677, ctx.r31.u8);
	// stb r31,3678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3678, ctx.r31.u8);
	// stb r31,3679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3679, ctx.r31.u8);
	// stb r31,3680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3680, ctx.r31.u8);
	// stb r31,3681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3681, ctx.r31.u8);
	// stb r6,3682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3682, ctx.r6.u8);
	// stb r31,3683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3683, ctx.r31.u8);
	// stb r31,3684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3684, ctx.r31.u8);
	// stb r31,3685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3685, ctx.r31.u8);
	// stb r31,3686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3686, ctx.r31.u8);
	// stb r31,3687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3687, ctx.r31.u8);
	// stb r31,3688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3688, ctx.r31.u8);
	// stb r31,3689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3689, ctx.r31.u8);
	// stb r31,3690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3690, ctx.r31.u8);
	// stb r31,3691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3691, ctx.r31.u8);
	// stb r31,3692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3692, ctx.r31.u8);
	// stb r7,3693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3693, ctx.r7.u8);
	// stb r28,3694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3694, ctx.r28.u8);
	// stb r31,3695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3695, ctx.r31.u8);
	// stb r31,3696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3696, ctx.r31.u8);
	// stb r31,3697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3697, ctx.r31.u8);
	// stb r31,3698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3698, ctx.r31.u8);
	// stb r31,3699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3699, ctx.r31.u8);
	// stb r31,3700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3700, ctx.r31.u8);
	// stb r29,3701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3701, ctx.r29.u8);
	// stb r30,3702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3702, ctx.r30.u8);
	// stb r31,3703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3703, ctx.r31.u8);
	// stb r31,3704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3704, ctx.r31.u8);
	// stb r31,3705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3705, ctx.r31.u8);
	// stb r31,3706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3706, ctx.r31.u8);
	// stb r31,3707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3707, ctx.r31.u8);
	// stb r31,3708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3708, ctx.r31.u8);
	// stb r31,3709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3709, ctx.r31.u8);
	// stb r6,3710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3710, ctx.r6.u8);
	// stb r31,3711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3711, ctx.r31.u8);
	// stb r31,3712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3712, ctx.r31.u8);
	// stb r31,3713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3713, ctx.r31.u8);
	// stb r31,3714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3714, ctx.r31.u8);
	// stb r31,3715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3715, ctx.r31.u8);
	// stb r31,3716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3716, ctx.r31.u8);
	// stb r31,3717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3717, ctx.r31.u8);
	// stb r31,3718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3718, ctx.r31.u8);
	// stb r31,3719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3719, ctx.r31.u8);
	// stb r31,3720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3720, ctx.r31.u8);
	// stb r26,3721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3721, ctx.r26.u8);
	// stb r25,3722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3722, ctx.r25.u8);
	// stb r31,3723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3723, ctx.r31.u8);
	// stb r31,3724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3724, ctx.r31.u8);
	// stb r31,3725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3725, ctx.r31.u8);
	// stb r31,3726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3726, ctx.r31.u8);
	// stb r31,3727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3727, ctx.r31.u8);
	// stb r31,3728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3728, ctx.r31.u8);
	// stb r9,3729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3729, ctx.r9.u8);
	// stb r8,3730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3730, ctx.r8.u8);
	// stb r31,3731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3731, ctx.r31.u8);
	// stb r31,3732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3732, ctx.r31.u8);
	// stb r31,3733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3733, ctx.r31.u8);
	// stb r31,3734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3734, ctx.r31.u8);
	// stb r31,3735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3735, ctx.r31.u8);
	// stb r31,3736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3736, ctx.r31.u8);
	// stb r31,3737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3737, ctx.r31.u8);
	// stb r31,3738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3738, ctx.r31.u8);
	// stb r31,3739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3739, ctx.r31.u8);
	// stb r31,3740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3740, ctx.r31.u8);
	// stb r31,3741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3741, ctx.r31.u8);
	// stb r31,3742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3742, ctx.r31.u8);
	// stb r31,3743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3743, ctx.r31.u8);
	// stb r31,3744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3744, ctx.r31.u8);
	// stb r31,3745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3745, ctx.r31.u8);
	// stb r31,3746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3746, ctx.r31.u8);
	// stb r31,3747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3747, ctx.r31.u8);
	// stb r31,3748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3748, ctx.r31.u8);
	// stb r3,3749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3749, ctx.r3.u8);
	// stb r28,3750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3750, ctx.r28.u8);
	// stb r31,3751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3751, ctx.r31.u8);
	// stb r31,3752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3752, ctx.r31.u8);
	// stb r31,3753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3753, ctx.r31.u8);
	// stb r31,3754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3754, ctx.r31.u8);
	// stb r31,3755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3755, ctx.r31.u8);
	// stb r31,3756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3756, ctx.r31.u8);
	// stb r4,3757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3757, ctx.r4.u8);
	// stb r27,3758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3758, ctx.r27.u8);
	// stb r31,3759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3759, ctx.r31.u8);
	// stb r31,3760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3760, ctx.r31.u8);
	// stb r31,3761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3761, ctx.r31.u8);
	// stb r31,3762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3762, ctx.r31.u8);
	// stb r31,3763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3763, ctx.r31.u8);
	// stb r31,3764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3764, ctx.r31.u8);
	// stb r31,3765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3765, ctx.r31.u8);
	// stb r6,3766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3766, ctx.r6.u8);
	// stb r31,3767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3767, ctx.r31.u8);
	// stb r31,3768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3768, ctx.r31.u8);
	// stb r31,3769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3769, ctx.r31.u8);
	// stb r31,3770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3770, ctx.r31.u8);
	// stb r5,3771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3771, ctx.r5.u8);
	// stb r5,3772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3772, ctx.r5.u8);
	// stb r5,3773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3773, ctx.r5.u8);
	// stb r5,3774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3774, ctx.r5.u8);
	// stb r31,3775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3775, ctx.r31.u8);
	// stb r31,3776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3776, ctx.r31.u8);
	// stb r9,3777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3777, ctx.r9.u8);
	// stb r17,3778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3778, ctx.r17.u8);
	// stb r31,3779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3779, ctx.r31.u8);
	// stb r31,3780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3780, ctx.r31.u8);
	// stb r31,3781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3781, ctx.r31.u8);
	// stb r31,3782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3782, ctx.r31.u8);
	// stb r31,3783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3783, ctx.r31.u8);
	// stb r31,3784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3784, ctx.r31.u8);
	// stb r9,3785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3785, ctx.r9.u8);
	// stb r8,3786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3786, ctx.r8.u8);
	// stb r31,3787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3787, ctx.r31.u8);
	// stb r31,3788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3788, ctx.r31.u8);
	// stb r31,3789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3789, ctx.r31.u8);
	// stb r31,3790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3790, ctx.r31.u8);
	// stb r31,3791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3791, ctx.r31.u8);
	// stb r31,3792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3792, ctx.r31.u8);
	// stb r31,3793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3793, ctx.r31.u8);
	// stb r31,3794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3794, ctx.r31.u8);
	// stb r31,3795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3795, ctx.r31.u8);
	// stb r31,3796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3796, ctx.r31.u8);
	// stb r31,3797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3797, ctx.r31.u8);
	// stb r31,3798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3798, ctx.r31.u8);
	// stb r31,3799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3799, ctx.r31.u8);
	// stb r31,3800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3800, ctx.r31.u8);
	// stb r31,3801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3801, ctx.r31.u8);
	// stb r31,3802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3802, ctx.r31.u8);
	// stb r31,3803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3803, ctx.r31.u8);
	// stb r31,3804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3804, ctx.r31.u8);
	// stb r9,3805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3805, ctx.r9.u8);
	// stb r11,3806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3806, ctx.r11.u8);
	// stb r31,3807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3807, ctx.r31.u8);
	// stb r31,3808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3808, ctx.r31.u8);
	// stb r31,3809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3809, ctx.r31.u8);
	// stb r31,3810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3810, ctx.r31.u8);
	// stb r31,3811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3811, ctx.r31.u8);
	// stb r31,3812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3812, ctx.r31.u8);
	// stb r9,3813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3813, ctx.r9.u8);
	// stb r8,3814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3814, ctx.r8.u8);
	// stb r31,3815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3815, ctx.r31.u8);
	// stb r31,3816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3816, ctx.r31.u8);
	// stb r31,3817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3817, ctx.r31.u8);
	// stb r31,3818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3818, ctx.r31.u8);
	// stb r31,3819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3819, ctx.r31.u8);
	// stb r31,3820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3820, ctx.r31.u8);
	// stb r31,3821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3821, ctx.r31.u8);
	// stb r31,3822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3822, ctx.r31.u8);
	// stb r31,3823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3823, ctx.r31.u8);
	// stb r31,3824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3824, ctx.r31.u8);
	// stb r31,3825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3825, ctx.r31.u8);
	// stb r31,3826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3826, ctx.r31.u8);
	// stb r31,3827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3827, ctx.r31.u8);
	// stb r31,3828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3828, ctx.r31.u8);
	// stb r31,3829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3829, ctx.r31.u8);
	// stb r31,3830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3830, ctx.r31.u8);
	// stb r31,3831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3831, ctx.r31.u8);
	// stb r31,3832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3832, ctx.r31.u8);
	// stb r26,3833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3833, ctx.r26.u8);
	// stb r10,3834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3834, ctx.r10.u8);
	// stb r31,3835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3835, ctx.r31.u8);
	// stb r31,3836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3836, ctx.r31.u8);
	// stb r31,3837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3837, ctx.r31.u8);
	// stb r31,3838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3838, ctx.r31.u8);
	// stb r31,3839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3839, ctx.r31.u8);
	// stb r31,3840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3840, ctx.r31.u8);
	// stb r9,3841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3841, ctx.r9.u8);
	// stb r8,3842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3842, ctx.r8.u8);
	// stb r31,3843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3843, ctx.r31.u8);
	// stb r31,3844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3844, ctx.r31.u8);
	// stb r31,3845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3845, ctx.r31.u8);
	// stb r31,3846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3846, ctx.r31.u8);
	// stb r31,3847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3847, ctx.r31.u8);
	// stb r31,3848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3848, ctx.r31.u8);
	// stb r31,3849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3849, ctx.r31.u8);
	// stb r31,3850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3850, ctx.r31.u8);
	// stb r31,3851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3851, ctx.r31.u8);
	// stb r31,3852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3852, ctx.r31.u8);
	// stb r31,3853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3853, ctx.r31.u8);
	// stb r31,3854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3854, ctx.r31.u8);
	// stb r31,3855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3855, ctx.r31.u8);
	// stb r31,3856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3856, ctx.r31.u8);
	// stb r31,3857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3857, ctx.r31.u8);
	// stb r31,3858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3858, ctx.r31.u8);
	// stb r31,3859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3859, ctx.r31.u8);
	// stb r31,3860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3860, ctx.r31.u8);
	// stb r26,3861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3861, ctx.r26.u8);
	// stb r15,3862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3862, ctx.r15.u8);
	// stb r31,3863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3863, ctx.r31.u8);
	// stb r31,3864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3864, ctx.r31.u8);
	// stb r31,3865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3865, ctx.r31.u8);
	// stb r31,3866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3866, ctx.r31.u8);
	// stb r31,3867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3867, ctx.r31.u8);
	// stb r31,3868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3868, ctx.r31.u8);
	// stb r9,3869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3869, ctx.r9.u8);
	// stb r8,3870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3870, ctx.r8.u8);
	// stb r31,3871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3871, ctx.r31.u8);
	// stb r31,3872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3872, ctx.r31.u8);
	// stb r31,3873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3873, ctx.r31.u8);
	// stb r31,3874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3874, ctx.r31.u8);
	// stb r31,3875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3875, ctx.r31.u8);
	// stb r31,3876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3876, ctx.r31.u8);
	// stb r31,3877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3877, ctx.r31.u8);
	// stb r31,3878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3878, ctx.r31.u8);
	// stb r31,3879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3879, ctx.r31.u8);
	// stb r31,3880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3880, ctx.r31.u8);
	// stb r31,3881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3881, ctx.r31.u8);
	// stb r31,3882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3882, ctx.r31.u8);
	// stb r31,3883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3883, ctx.r31.u8);
	// stb r31,3884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3884, ctx.r31.u8);
	// stb r31,3885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3885, ctx.r31.u8);
	// stb r31,3886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3886, ctx.r31.u8);
	// stb r31,3887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3887, ctx.r31.u8);
	// stb r31,3888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3888, ctx.r31.u8);
	// stb r17,3889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3889, ctx.r17.u8);
	// stb r19,3890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3890, ctx.r19.u8);
	// stb r31,3891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3891, ctx.r31.u8);
	// stb r31,3892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3892, ctx.r31.u8);
	// stb r31,3893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3893, ctx.r31.u8);
	// stb r31,3894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3894, ctx.r31.u8);
	// stb r31,3895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3895, ctx.r31.u8);
	// stb r31,3896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3896, ctx.r31.u8);
	// stb r29,3897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3897, ctx.r29.u8);
	// stb r30,3898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3898, ctx.r30.u8);
	// stb r31,3899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3899, ctx.r31.u8);
	// stb r31,3900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3900, ctx.r31.u8);
	// stb r31,3901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3901, ctx.r31.u8);
	// stb r31,3902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3902, ctx.r31.u8);
	// stb r31,3903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3903, ctx.r31.u8);
	// stb r31,3904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3904, ctx.r31.u8);
	// stb r31,3905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3905, ctx.r31.u8);
	// stb r6,3906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3906, ctx.r6.u8);
	// stb r31,3907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3907, ctx.r31.u8);
	// stb r31,3908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3908, ctx.r31.u8);
	// stb r31,3909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3909, ctx.r31.u8);
	// stb r31,3910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3910, ctx.r31.u8);
	// stb r31,3911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3911, ctx.r31.u8);
	// stb r31,3912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3912, ctx.r31.u8);
	// stb r31,3913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3913, ctx.r31.u8);
	// stb r31,3914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3914, ctx.r31.u8);
	// stb r31,3915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3915, ctx.r31.u8);
	// stb r31,3916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3916, ctx.r31.u8);
	// stb r26,3917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3917, ctx.r26.u8);
	// stb r20,3918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3918, ctx.r20.u8);
	// stb r31,3919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3919, ctx.r31.u8);
	// stb r31,3920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3920, ctx.r31.u8);
	// stb r31,3921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3921, ctx.r31.u8);
	// stb r31,3922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3922, ctx.r31.u8);
	// stb r31,3923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3923, ctx.r31.u8);
	// stb r31,3924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3924, ctx.r31.u8);
	// stb r9,3925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3925, ctx.r9.u8);
	// stb r8,3926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3926, ctx.r8.u8);
	// stb r31,3927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3927, ctx.r31.u8);
	// stb r31,3928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3928, ctx.r31.u8);
	// stb r31,3929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3929, ctx.r31.u8);
	// stb r31,3930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3930, ctx.r31.u8);
	// stb r31,3931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3931, ctx.r31.u8);
	// stb r31,3932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3932, ctx.r31.u8);
	// stb r31,3933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3933, ctx.r31.u8);
	// stb r31,3934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3934, ctx.r31.u8);
	// stb r31,3935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3935, ctx.r31.u8);
	// stb r31,3936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3936, ctx.r31.u8);
	// stb r31,3937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3937, ctx.r31.u8);
	// stb r31,3938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3938, ctx.r31.u8);
	// stb r31,3939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3939, ctx.r31.u8);
	// stb r31,3940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3940, ctx.r31.u8);
	// stb r31,3941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3941, ctx.r31.u8);
	// stb r31,3942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3942, ctx.r31.u8);
	// stb r31,3943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3943, ctx.r31.u8);
	// stb r31,3944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3944, ctx.r31.u8);
	// stb r9,3945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3945, ctx.r9.u8);
	// stb r4,3946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3946, ctx.r4.u8);
	// stb r31,3947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3947, ctx.r31.u8);
	// stb r31,3948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3948, ctx.r31.u8);
	// stb r31,3949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3949, ctx.r31.u8);
	// stb r31,3950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3950, ctx.r31.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r31,3951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3951, ctx.r31.u8);
	// stb r31,3952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3952, ctx.r31.u8);
	// stb r9,3953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3953, ctx.r9.u8);
	// stb r8,3954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3954, ctx.r8.u8);
	// stb r31,3955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3955, ctx.r31.u8);
	// stb r31,3956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3956, ctx.r31.u8);
	// stb r31,3957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3957, ctx.r31.u8);
	// stb r31,3958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3958, ctx.r31.u8);
	// stb r31,3959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3959, ctx.r31.u8);
	// stb r31,3960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3960, ctx.r31.u8);
	// stb r31,3961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3961, ctx.r31.u8);
	// stb r31,3962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3962, ctx.r31.u8);
	// stb r31,3963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3963, ctx.r31.u8);
	// stb r31,3964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3964, ctx.r31.u8);
	// stb r31,3965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3965, ctx.r31.u8);
	// stb r31,3966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3966, ctx.r31.u8);
	// stb r31,3967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3967, ctx.r31.u8);
	// stb r31,3968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3968, ctx.r31.u8);
	// stb r31,3969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3969, ctx.r31.u8);
	// stb r26,3970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3970, ctx.r26.u8);
	// stb r31,3971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3971, ctx.r31.u8);
	// stb r31,3972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3972, ctx.r31.u8);
	// stb r26,3973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3973, ctx.r26.u8);
	// stb r16,3974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3974, ctx.r16.u8);
	// stb r31,3975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3975, ctx.r31.u8);
	// stb r31,3976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3976, ctx.r31.u8);
	// stb r31,3977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3977, ctx.r31.u8);
	// stb r31,3978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3978, ctx.r31.u8);
	// stb r31,3979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3979, ctx.r31.u8);
	// stb r31,3980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3980, ctx.r31.u8);
	// stb r9,3981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3981, ctx.r9.u8);
	// stb r8,3982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3982, ctx.r8.u8);
	// stb r31,3983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3983, ctx.r31.u8);
	// stb r31,3984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3984, ctx.r31.u8);
	// stb r31,3985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3985, ctx.r31.u8);
	// stb r31,3986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3986, ctx.r31.u8);
	// stb r31,3987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3987, ctx.r31.u8);
	// stb r31,3988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3988, ctx.r31.u8);
	// stb r31,3989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3989, ctx.r31.u8);
	// stb r31,3990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3990, ctx.r31.u8);
	// stb r31,3991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3991, ctx.r31.u8);
	// stb r31,3992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3992, ctx.r31.u8);
	// stb r31,3993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3993, ctx.r31.u8);
	// stb r31,3994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3994, ctx.r31.u8);
	// stb r31,3995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3995, ctx.r31.u8);
	// stb r31,3996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3996, ctx.r31.u8);
	// stb r31,3997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3997, ctx.r31.u8);
	// stb r31,3998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3998, ctx.r31.u8);
	// stb r31,3999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 3999, ctx.r31.u8);
	// stb r31,4000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4000, ctx.r31.u8);
	// stb r3,4001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4001, ctx.r3.u8);
	// stb r21,4002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4002, ctx.r21.u8);
	// stb r31,4003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4003, ctx.r31.u8);
	// stb r31,4004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4004, ctx.r31.u8);
	// stb r31,4005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4005, ctx.r31.u8);
	// stb r31,4006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4006, ctx.r31.u8);
	// stb r31,4007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4007, ctx.r31.u8);
	// stb r31,4008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4008, ctx.r31.u8);
	// stb r7,4009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4009, ctx.r7.u8);
	// stb r17,4010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4010, ctx.r17.u8);
	// stb r31,4011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4011, ctx.r31.u8);
	// stb r31,4012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4012, ctx.r31.u8);
	// stb r31,4013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4013, ctx.r31.u8);
	// stb r31,4014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4014, ctx.r31.u8);
	// stb r31,4015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4015, ctx.r31.u8);
	// stb r31,4016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4016, ctx.r31.u8);
	// stb r3,4017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4017, ctx.r3.u8);
	// stb r11,4018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4018, ctx.r11.u8);
	// stb r31,4019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4019, ctx.r31.u8);
	// stb r31,4020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4020, ctx.r31.u8);
	// stb r31,4021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4021, ctx.r31.u8);
	// stb r31,4022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4022, ctx.r31.u8);
	// stb r31,4023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4023, ctx.r31.u8);
	// stb r31,4024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4024, ctx.r31.u8);
	// stb r31,4025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4025, ctx.r31.u8);
	// stb r7,4026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4026, ctx.r7.u8);
	// stb r31,4027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4027, ctx.r31.u8);
	// stb r31,4028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4028, ctx.r31.u8);
	// stb r31,4029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4029, ctx.r31.u8);
	// stb r31,4030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4030, ctx.r31.u8);
	// li r11,82
	ctx.r11.s64 = 82;
	// stb r31,4031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4031, ctx.r31.u8);
	// stb r31,4032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4032, ctx.r31.u8);
	// stb r18,4033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4033, ctx.r18.u8);
	// stb r31,4035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4035, ctx.r31.u8);
	// stb r31,4036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4036, ctx.r31.u8);
	// stb r11,4034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4034, ctx.r11.u8);
	// stb r31,4037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4037, ctx.r31.u8);
	// stb r31,4038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4038, ctx.r31.u8);
	// stb r31,4039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4039, ctx.r31.u8);
	// stb r31,4040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4040, ctx.r31.u8);
	// stb r7,4041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4041, ctx.r7.u8);
	// stb r7,4042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4042, ctx.r7.u8);
	// stb r31,4043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4043, ctx.r31.u8);
	// stb r31,4044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4044, ctx.r31.u8);
	// stb r31,4045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4045, ctx.r31.u8);
	// stb r31,4046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4046, ctx.r31.u8);
	// stb r31,4047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4047, ctx.r31.u8);
	// stb r31,4048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4048, ctx.r31.u8);
	// stb r24,4049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4049, ctx.r24.u8);
	// stb r22,4050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4050, ctx.r22.u8);
	// stb r31,4051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4051, ctx.r31.u8);
	// stb r31,4052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4052, ctx.r31.u8);
	// stb r31,4053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4053, ctx.r31.u8);
	// stb r31,4054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4054, ctx.r31.u8);
	// stb r31,4055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4055, ctx.r31.u8);
	// stb r31,4056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4056, ctx.r31.u8);
	// stb r31,4057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4057, ctx.r31.u8);
	// stb r6,4058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4058, ctx.r6.u8);
	// stb r31,4059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4059, ctx.r31.u8);
	// stb r31,4060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4060, ctx.r31.u8);
	// stb r31,4061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4061, ctx.r31.u8);
	// stb r31,4062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4062, ctx.r31.u8);
	// stb r31,4063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4063, ctx.r31.u8);
	// stb r31,4064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4064, ctx.r31.u8);
	// stb r31,4065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4065, ctx.r31.u8);
	// stb r31,4066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4066, ctx.r31.u8);
	// stb r31,4067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4067, ctx.r31.u8);
	// stb r31,4068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4068, ctx.r31.u8);
	// stb r7,4069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4069, ctx.r7.u8);
	// stb r24,4070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4070, ctx.r24.u8);
	// stb r31,4071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4071, ctx.r31.u8);
	// stb r31,4072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4072, ctx.r31.u8);
	// stb r31,4073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4073, ctx.r31.u8);
	// stb r31,4074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4074, ctx.r31.u8);
	// stb r31,4075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4075, ctx.r31.u8);
	// stb r31,4076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4076, ctx.r31.u8);
	// stb r24,4077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4077, ctx.r24.u8);
	// stb r22,4078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4078, ctx.r22.u8);
	// stb r31,4079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4079, ctx.r31.u8);
	// stb r31,4080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4080, ctx.r31.u8);
	// stb r31,4081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4081, ctx.r31.u8);
	// stb r31,4082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4082, ctx.r31.u8);
	// stb r31,4083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4083, ctx.r31.u8);
	// stb r31,4084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4084, ctx.r31.u8);
	// stb r31,4085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4085, ctx.r31.u8);
	// stb r6,4086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4086, ctx.r6.u8);
	// stb r31,4087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4087, ctx.r31.u8);
	// stb r31,4088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4088, ctx.r31.u8);
	// stb r31,4089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4089, ctx.r31.u8);
	// stb r31,4090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4090, ctx.r31.u8);
	// stb r31,4091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4091, ctx.r31.u8);
	// stb r31,4092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4092, ctx.r31.u8);
	// stb r31,4093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4093, ctx.r31.u8);
	// stb r31,4094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4094, ctx.r31.u8);
	// stb r31,4095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4095, ctx.r31.u8);
	// stb r31,4096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4096, ctx.r31.u8);
	// stb r7,4097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4097, ctx.r7.u8);
	// stb r14,4098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4098, ctx.r14.u8);
	// stb r31,4099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4099, ctx.r31.u8);
	// stb r31,4100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4100, ctx.r31.u8);
	// stb r31,4101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4101, ctx.r31.u8);
	// stb r31,4102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4102, ctx.r31.u8);
	// stb r31,4103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4103, ctx.r31.u8);
	// stb r31,4104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4104, ctx.r31.u8);
	// stb r7,4105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4105, ctx.r7.u8);
	// stb r23,4106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4106, ctx.r23.u8);
	// stb r31,4107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4107, ctx.r31.u8);
	// stb r31,4108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4108, ctx.r31.u8);
	// stb r31,4109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4109, ctx.r31.u8);
	// stb r31,4110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4110, ctx.r31.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r31,4111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4111, ctx.r31.u8);
	// stb r31,4112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4112, ctx.r31.u8);
	// stb r31,4113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4113, ctx.r31.u8);
	// stb r6,4114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4114, ctx.r6.u8);
	// stb r31,4115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4115, ctx.r31.u8);
	// stb r14,4147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4147, ctx.r14.u8);
	// li r14,156
	ctx.r14.s64 = 156;
	// stb r31,4116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4116, ctx.r31.u8);
	// stb r31,4117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4117, ctx.r31.u8);
	// stb r31,4118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4118, ctx.r31.u8);
	// stb r31,4119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4119, ctx.r31.u8);
	// stb r14,4148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4148, ctx.r14.u8);
	// li r14,64
	ctx.r14.s64 = 64;
	// stb r31,4120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4120, ctx.r31.u8);
	// stb r31,4121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4121, ctx.r31.u8);
	// stb r31,4122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4122, ctx.r31.u8);
	// stb r31,4123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4123, ctx.r31.u8);
	// stb r31,4124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4124, ctx.r31.u8);
	// stb r7,4125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4125, ctx.r7.u8);
	// stb r28,4126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4126, ctx.r28.u8);
	// stb r31,4127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4127, ctx.r31.u8);
	// stb r31,4128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4128, ctx.r31.u8);
	// stb r31,4129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4129, ctx.r31.u8);
	// stb r31,4130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4130, ctx.r31.u8);
	// stb r31,4131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4131, ctx.r31.u8);
	// stb r31,4132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4132, ctx.r31.u8);
	// stb r29,4133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4133, ctx.r29.u8);
	// stb r30,4134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4134, ctx.r30.u8);
	// stb r31,4135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4135, ctx.r31.u8);
	// stb r31,4136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4136, ctx.r31.u8);
	// stb r31,4137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4137, ctx.r31.u8);
	// stb r31,4138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4138, ctx.r31.u8);
	// stb r31,4139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4139, ctx.r31.u8);
	// stb r31,4140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4140, ctx.r31.u8);
	// stb r31,4141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4141, ctx.r31.u8);
	// stb r6,4142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4142, ctx.r6.u8);
	// stb r31,4143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4143, ctx.r31.u8);
	// stb r31,4144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4144, ctx.r31.u8);
	// stb r31,4145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4145, ctx.r31.u8);
	// stb r31,4146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4146, ctx.r31.u8);
	// stb r14,4149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4149, ctx.r14.u8);
	// stb r31,4150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4150, ctx.r31.u8);
	// stb r31,4151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4151, ctx.r31.u8);
	// stb r31,4152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4152, ctx.r31.u8);
	// stb r26,4153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4153, ctx.r26.u8);
	// stb r25,4154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4154, ctx.r25.u8);
	// stb r31,4155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4155, ctx.r31.u8);
	// stb r31,4156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4156, ctx.r31.u8);
	// stb r31,4157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4157, ctx.r31.u8);
	// stb r31,4158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4158, ctx.r31.u8);
	// stb r31,4159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4159, ctx.r31.u8);
	// stb r31,4160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4160, ctx.r31.u8);
	// stb r9,4161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4161, ctx.r9.u8);
	// stb r8,4162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4162, ctx.r8.u8);
	// stb r31,4163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4163, ctx.r31.u8);
	// stb r31,4164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4164, ctx.r31.u8);
	// stb r31,4165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4165, ctx.r31.u8);
	// stb r31,4166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4166, ctx.r31.u8);
	// stb r31,4167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4167, ctx.r31.u8);
	// stb r31,4168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4168, ctx.r31.u8);
	// stb r31,4169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4169, ctx.r31.u8);
	// stb r31,4170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4170, ctx.r31.u8);
	// stb r31,4171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4171, ctx.r31.u8);
	// stb r31,4172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4172, ctx.r31.u8);
	// stb r31,4173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4173, ctx.r31.u8);
	// stb r31,4174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4174, ctx.r31.u8);
	// stb r31,4175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4175, ctx.r31.u8);
	// stb r31,4176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4176, ctx.r31.u8);
	// stb r31,4177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4177, ctx.r31.u8);
	// stb r31,4178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4178, ctx.r31.u8);
	// stb r31,4179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4179, ctx.r31.u8);
	// stb r31,4180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4180, ctx.r31.u8);
	// stb r3,4181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4181, ctx.r3.u8);
	// stb r28,4182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4182, ctx.r28.u8);
	// stb r31,4183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4183, ctx.r31.u8);
	// stb r31,4184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4184, ctx.r31.u8);
	// stb r31,4185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4185, ctx.r31.u8);
	// stb r31,4186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4186, ctx.r31.u8);
	// stb r31,4187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4187, ctx.r31.u8);
	// stb r31,4188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4188, ctx.r31.u8);
	// li r14,127
	ctx.r14.s64 = 127;
	// stb r4,4189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4189, ctx.r4.u8);
	// stb r27,4190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4190, ctx.r27.u8);
	// stb r31,4191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4191, ctx.r31.u8);
	// stb r31,4192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4192, ctx.r31.u8);
	// stb r31,4193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4193, ctx.r31.u8);
	// stb r31,4194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4194, ctx.r31.u8);
	// stb r31,4195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4195, ctx.r31.u8);
	// stb r31,4196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4196, ctx.r31.u8);
	// stb r31,4197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4197, ctx.r31.u8);
	// stb r6,4198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4198, ctx.r6.u8);
	// stb r31,4199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4199, ctx.r31.u8);
	// stb r31,4200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4200, ctx.r31.u8);
	// stb r31,4201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4201, ctx.r31.u8);
	// stb r31,4202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4202, ctx.r31.u8);
	// stb r5,4203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4203, ctx.r5.u8);
	// stb r5,4204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4204, ctx.r5.u8);
	// stb r5,4205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4205, ctx.r5.u8);
	// stb r5,4206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4206, ctx.r5.u8);
	// stb r31,4207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4207, ctx.r31.u8);
	// stb r31,4208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4208, ctx.r31.u8);
	// stb r9,4209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4209, ctx.r9.u8);
	// stb r17,4210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4210, ctx.r17.u8);
	// stb r31,4211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4211, ctx.r31.u8);
	// stb r31,4212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4212, ctx.r31.u8);
	// stb r31,4213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4213, ctx.r31.u8);
	// stb r31,4214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4214, ctx.r31.u8);
	// stb r31,4215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4215, ctx.r31.u8);
	// stb r31,4216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4216, ctx.r31.u8);
	// stb r9,4217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4217, ctx.r9.u8);
	// stb r8,4218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4218, ctx.r8.u8);
	// stb r31,4219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4219, ctx.r31.u8);
	// stb r31,4220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4220, ctx.r31.u8);
	// stb r31,4221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4221, ctx.r31.u8);
	// stb r31,4222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4222, ctx.r31.u8);
	// stb r31,4223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4223, ctx.r31.u8);
	// stb r31,4224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4224, ctx.r31.u8);
	// stb r31,4225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4225, ctx.r31.u8);
	// stb r31,4226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4226, ctx.r31.u8);
	// stb r31,4227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4227, ctx.r31.u8);
	// stb r31,4228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4228, ctx.r31.u8);
	// stb r31,4229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4229, ctx.r31.u8);
	// stb r31,4230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4230, ctx.r31.u8);
	// stb r31,4231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4231, ctx.r31.u8);
	// stb r31,4232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4232, ctx.r31.u8);
	// stb r31,4233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4233, ctx.r31.u8);
	// stb r31,4234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4234, ctx.r31.u8);
	// stb r31,4235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4235, ctx.r31.u8);
	// stb r31,4236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4236, ctx.r31.u8);
	// stb r9,4237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4237, ctx.r9.u8);
	// stb r14,4238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4238, ctx.r14.u8);
	// stb r31,4239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4239, ctx.r31.u8);
	// stb r31,4240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4240, ctx.r31.u8);
	// stb r31,4241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4241, ctx.r31.u8);
	// stb r31,4242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4242, ctx.r31.u8);
	// stb r31,4243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4243, ctx.r31.u8);
	// stb r31,4244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4244, ctx.r31.u8);
	// stb r9,4245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4245, ctx.r9.u8);
	// stb r8,4246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4246, ctx.r8.u8);
	// stb r31,4247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4247, ctx.r31.u8);
	// stb r31,4248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4248, ctx.r31.u8);
	// stb r31,4249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4249, ctx.r31.u8);
	// stb r31,4250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4250, ctx.r31.u8);
	// stb r31,4251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4251, ctx.r31.u8);
	// stb r31,4252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4252, ctx.r31.u8);
	// stb r31,4253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4253, ctx.r31.u8);
	// stb r31,4254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4254, ctx.r31.u8);
	// stb r31,4255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4255, ctx.r31.u8);
	// stb r31,4256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4256, ctx.r31.u8);
	// stb r31,4257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4257, ctx.r31.u8);
	// stb r31,4258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4258, ctx.r31.u8);
	// stb r31,4259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4259, ctx.r31.u8);
	// stb r31,4260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4260, ctx.r31.u8);
	// stb r31,4261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4261, ctx.r31.u8);
	// stb r31,4262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4262, ctx.r31.u8);
	// stb r31,4263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4263, ctx.r31.u8);
	// stb r31,4264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4264, ctx.r31.u8);
	// stb r26,4265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4265, ctx.r26.u8);
	// stb r10,4266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4266, ctx.r10.u8);
	// stb r31,4267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4267, ctx.r31.u8);
	// stb r31,4268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4268, ctx.r31.u8);
	// stb r31,4269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4269, ctx.r31.u8);
	// stb r31,4270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4270, ctx.r31.u8);
	// stb r31,4271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4271, ctx.r31.u8);
	// stb r31,4272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4272, ctx.r31.u8);
	// stb r9,4273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4273, ctx.r9.u8);
	// stb r8,4274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4274, ctx.r8.u8);
	// stb r31,4275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4275, ctx.r31.u8);
	// stb r31,4276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4276, ctx.r31.u8);
	// stb r31,4277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4277, ctx.r31.u8);
	// stb r31,4278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4278, ctx.r31.u8);
	// stb r31,4279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4279, ctx.r31.u8);
	// stb r31,4280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4280, ctx.r31.u8);
	// stb r31,4281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4281, ctx.r31.u8);
	// stb r31,4282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4282, ctx.r31.u8);
	// stb r31,4283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4283, ctx.r31.u8);
	// stb r31,4284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4284, ctx.r31.u8);
	// stb r31,4285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4285, ctx.r31.u8);
	// stb r31,4286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4286, ctx.r31.u8);
	// stb r31,4287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4287, ctx.r31.u8);
	// stb r31,4288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4288, ctx.r31.u8);
	// stb r31,4289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4289, ctx.r31.u8);
	// stb r31,4290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4290, ctx.r31.u8);
	// stb r31,4291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4291, ctx.r31.u8);
	// stb r31,4292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4292, ctx.r31.u8);
	// stb r26,4293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4293, ctx.r26.u8);
	// stb r15,4294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4294, ctx.r15.u8);
	// stb r31,4295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4295, ctx.r31.u8);
	// stb r31,4296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4296, ctx.r31.u8);
	// stb r31,4297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4297, ctx.r31.u8);
	// stb r31,4298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4298, ctx.r31.u8);
	// stb r31,4299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4299, ctx.r31.u8);
	// stb r31,4300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4300, ctx.r31.u8);
	// stb r9,4301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4301, ctx.r9.u8);
	// stb r8,4302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4302, ctx.r8.u8);
	// stb r31,4303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4303, ctx.r31.u8);
	// stb r31,4304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4304, ctx.r31.u8);
	// stb r31,4305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4305, ctx.r31.u8);
	// stb r31,4306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4306, ctx.r31.u8);
	// stb r31,4307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4307, ctx.r31.u8);
	// stb r31,4308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4308, ctx.r31.u8);
	// stb r31,4309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4309, ctx.r31.u8);
	// stb r31,4310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4310, ctx.r31.u8);
	// stb r31,4311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4311, ctx.r31.u8);
	// stb r31,4312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4312, ctx.r31.u8);
	// stb r31,4313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4313, ctx.r31.u8);
	// stb r31,4314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4314, ctx.r31.u8);
	// stb r31,4315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4315, ctx.r31.u8);
	// stb r31,4316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4316, ctx.r31.u8);
	// stb r31,4317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4317, ctx.r31.u8);
	// stb r31,4318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4318, ctx.r31.u8);
	// stb r31,4319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4319, ctx.r31.u8);
	// stb r31,4320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4320, ctx.r31.u8);
	// stb r17,4321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4321, ctx.r17.u8);
	// stb r19,4322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4322, ctx.r19.u8);
	// stb r31,4323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4323, ctx.r31.u8);
	// stb r31,4324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4324, ctx.r31.u8);
	// stb r31,4325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4325, ctx.r31.u8);
	// stb r31,4326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4326, ctx.r31.u8);
	// stb r31,4327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4327, ctx.r31.u8);
	// stb r31,4328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4328, ctx.r31.u8);
	// stb r29,4329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4329, ctx.r29.u8);
	// stb r30,4330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4330, ctx.r30.u8);
	// stb r31,4331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4331, ctx.r31.u8);
	// stb r31,4332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4332, ctx.r31.u8);
	// stb r31,4333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4333, ctx.r31.u8);
	// stb r31,4334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4334, ctx.r31.u8);
	// stb r31,4335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4335, ctx.r31.u8);
	// stb r31,4336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4336, ctx.r31.u8);
	// stb r31,4337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4337, ctx.r31.u8);
	// stb r6,4338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4338, ctx.r6.u8);
	// stb r31,4339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4339, ctx.r31.u8);
	// stb r31,4340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4340, ctx.r31.u8);
	// stb r31,4341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4341, ctx.r31.u8);
	// stb r31,4342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4342, ctx.r31.u8);
	// stb r31,4343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4343, ctx.r31.u8);
	// stb r31,4344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4344, ctx.r31.u8);
	// stb r31,4345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4345, ctx.r31.u8);
	// stb r31,4346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4346, ctx.r31.u8);
	// stb r31,4347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4347, ctx.r31.u8);
	// stb r31,4348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4348, ctx.r31.u8);
	// stb r26,4349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4349, ctx.r26.u8);
	// stb r20,4350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4350, ctx.r20.u8);
	// stb r31,4351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4351, ctx.r31.u8);
	// stb r31,4352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4352, ctx.r31.u8);
	// stb r31,4353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4353, ctx.r31.u8);
	// stb r31,4354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4354, ctx.r31.u8);
	// stb r31,4355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4355, ctx.r31.u8);
	// stb r31,4356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4356, ctx.r31.u8);
	// stb r9,4357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4357, ctx.r9.u8);
	// stb r8,4358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4358, ctx.r8.u8);
	// stb r31,4359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4359, ctx.r31.u8);
	// stb r31,4360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4360, ctx.r31.u8);
	// stb r31,4361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4361, ctx.r31.u8);
	// stb r31,4362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4362, ctx.r31.u8);
	// stb r31,4363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4363, ctx.r31.u8);
	// stb r31,4364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4364, ctx.r31.u8);
	// stb r31,4365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4365, ctx.r31.u8);
	// stb r31,4366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4366, ctx.r31.u8);
	// stb r31,4367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4367, ctx.r31.u8);
	// stb r31,4368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4368, ctx.r31.u8);
	// stb r31,4369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4369, ctx.r31.u8);
	// stb r31,4370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4370, ctx.r31.u8);
	// stb r31,4371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4371, ctx.r31.u8);
	// stb r31,4372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4372, ctx.r31.u8);
	// stb r31,4373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4373, ctx.r31.u8);
	// stb r31,4374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4374, ctx.r31.u8);
	// stb r31,4375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4375, ctx.r31.u8);
	// stb r31,4376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4376, ctx.r31.u8);
	// stb r9,4377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4377, ctx.r9.u8);
	// stb r4,4378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4378, ctx.r4.u8);
	// stb r31,4379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4379, ctx.r31.u8);
	// stb r31,4380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4380, ctx.r31.u8);
	// stb r31,4381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4381, ctx.r31.u8);
	// stb r31,4382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4382, ctx.r31.u8);
	// stb r31,4383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4383, ctx.r31.u8);
	// stb r31,4384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4384, ctx.r31.u8);
	// stb r9,4385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4385, ctx.r9.u8);
	// stb r8,4386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4386, ctx.r8.u8);
	// stb r31,4387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4387, ctx.r31.u8);
	// stb r31,4388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4388, ctx.r31.u8);
	// stb r31,4389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4389, ctx.r31.u8);
	// stb r31,4390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4390, ctx.r31.u8);
	// stb r31,4391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4391, ctx.r31.u8);
	// stb r31,4392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4392, ctx.r31.u8);
	// stb r31,4393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4393, ctx.r31.u8);
	// stb r31,4394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4394, ctx.r31.u8);
	// stb r31,4395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4395, ctx.r31.u8);
	// stb r31,4396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4396, ctx.r31.u8);
	// stb r31,4397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4397, ctx.r31.u8);
	// stb r31,4398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4398, ctx.r31.u8);
	// stb r31,4399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4399, ctx.r31.u8);
	// stb r31,4400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4400, ctx.r31.u8);
	// stb r31,4401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4401, ctx.r31.u8);
	// stb r26,4402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4402, ctx.r26.u8);
	// stb r31,4403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4403, ctx.r31.u8);
	// stb r31,4404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4404, ctx.r31.u8);
	// stb r26,4405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4405, ctx.r26.u8);
	// stb r16,4406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4406, ctx.r16.u8);
	// stb r31,4407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4407, ctx.r31.u8);
	// stb r31,4408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4408, ctx.r31.u8);
	// stb r31,4409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4409, ctx.r31.u8);
	// stb r31,4410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4410, ctx.r31.u8);
	// stb r31,4411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4411, ctx.r31.u8);
	// stb r31,4412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4412, ctx.r31.u8);
	// stb r9,4413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4413, ctx.r9.u8);
	// stb r8,4414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4414, ctx.r8.u8);
	// stb r31,4415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4415, ctx.r31.u8);
	// stb r31,4416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4416, ctx.r31.u8);
	// stb r31,4417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4417, ctx.r31.u8);
	// stb r31,4418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4418, ctx.r31.u8);
	// stb r31,4419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4419, ctx.r31.u8);
	// stb r31,4420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4420, ctx.r31.u8);
	// stb r31,4421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4421, ctx.r31.u8);
	// stb r31,4422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4422, ctx.r31.u8);
	// stb r31,4423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4423, ctx.r31.u8);
	// stb r31,4424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4424, ctx.r31.u8);
	// stb r31,4425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4425, ctx.r31.u8);
	// stb r31,4426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4426, ctx.r31.u8);
	// stb r31,4427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4427, ctx.r31.u8);
	// stb r31,4428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4428, ctx.r31.u8);
	// stb r31,4429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4429, ctx.r31.u8);
	// stb r31,4430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4430, ctx.r31.u8);
	// li r14,74
	ctx.r14.s64 = 74;
	// ld r11,6664(r1)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 6664);
	// stb r31,4431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4431, ctx.r31.u8);
	// stb r31,4432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4432, ctx.r31.u8);
	// stb r3,4433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4433, ctx.r3.u8);
	// stb r21,4434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4434, ctx.r21.u8);
	// stb r14,4442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4442, ctx.r14.u8);
	// li r14,196
	ctx.r14.s64 = 196;
	// stb r31,4435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4435, ctx.r31.u8);
	// stb r31,4436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4436, ctx.r31.u8);
	// stb r31,4437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4437, ctx.r31.u8);
	// stb r31,4438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4438, ctx.r31.u8);
	// stb r14,4458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4458, ctx.r14.u8);
	// li r14,214
	ctx.r14.s64 = 214;
	// stb r31,4439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4439, ctx.r31.u8);
	// stb r31,4440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4440, ctx.r31.u8);
	// stb r18,4441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4441, ctx.r18.u8);
	// stb r31,4443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4443, ctx.r31.u8);
	// stb r14,4478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4478, ctx.r14.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r31,4444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4444, ctx.r31.u8);
	// stb r31,4445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4445, ctx.r31.u8);
	// stb r31,4446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4446, ctx.r31.u8);
	// stb r31,4447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4447, ctx.r31.u8);
	// stb r31,4448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4448, ctx.r31.u8);
	// stb r26,4449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4449, ctx.r26.u8);
	// stb r11,4450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4450, ctx.r11.u8);
	// stb r31,4451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4451, ctx.r31.u8);
	// stb r31,4452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4452, ctx.r31.u8);
	// stb r31,4453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4453, ctx.r31.u8);
	// stb r31,4454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4454, ctx.r31.u8);
	// stb r31,4455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4455, ctx.r31.u8);
	// stb r31,4456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4456, ctx.r31.u8);
	// stb r4,4457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4457, ctx.r4.u8);
	// stb r31,4459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4459, ctx.r31.u8);
	// stb r31,4460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4460, ctx.r31.u8);
	// stb r31,4461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4461, ctx.r31.u8);
	// stb r31,4462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4462, ctx.r31.u8);
	// stb r31,4463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4463, ctx.r31.u8);
	// stb r31,4464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4464, ctx.r31.u8);
	// stb r31,4465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4465, ctx.r31.u8);
	// stb r6,4466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4466, ctx.r6.u8);
	// stb r31,4467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4467, ctx.r31.u8);
	// stb r31,4468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4468, ctx.r31.u8);
	// stb r7,4469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4469, ctx.r7.u8);
	// stb r17,4470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4470, ctx.r17.u8);
	// stb r31,4471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4471, ctx.r31.u8);
	// stb r31,4472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4472, ctx.r31.u8);
	// stb r31,4473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4473, ctx.r31.u8);
	// stb r31,4474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4474, ctx.r31.u8);
	// stb r31,4475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4475, ctx.r31.u8);
	// stb r31,4476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4476, ctx.r31.u8);
	// stb r3,4477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4477, ctx.r3.u8);
	// stb r31,4479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4479, ctx.r31.u8);
	// stb r31,4480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4480, ctx.r31.u8);
	// stb r31,4481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4481, ctx.r31.u8);
	// stb r31,4482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4482, ctx.r31.u8);
	// stb r31,4483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4483, ctx.r31.u8);
	// stb r31,4484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4484, ctx.r31.u8);
	// stb r31,4485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4485, ctx.r31.u8);
	// stb r7,4486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4486, ctx.r7.u8);
	// stb r31,4487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4487, ctx.r31.u8);
	// stb r31,4488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4488, ctx.r31.u8);
	// stb r31,4489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4489, ctx.r31.u8);
	// stb r31,4490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4490, ctx.r31.u8);
	// stb r31,4491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4491, ctx.r31.u8);
	// stb r31,4492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4492, ctx.r31.u8);
	// stb r18,4493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4493, ctx.r18.u8);
	// stb r14,4494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4494, ctx.r14.u8);
	// stb r31,4495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4495, ctx.r31.u8);
	// stb r31,4496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4496, ctx.r31.u8);
	// stb r31,4497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4497, ctx.r31.u8);
	// stb r31,4498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4498, ctx.r31.u8);
	// stb r31,4499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4499, ctx.r31.u8);
	// stb r31,4500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4500, ctx.r31.u8);
	// stb r7,4501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4501, ctx.r7.u8);
	// stb r7,4502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4502, ctx.r7.u8);
	// stb r31,4503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4503, ctx.r31.u8);
	// stb r31,4504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4504, ctx.r31.u8);
	// stb r31,4505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4505, ctx.r31.u8);
	// stb r31,4506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4506, ctx.r31.u8);
	// li r14,13
	ctx.r14.s64 = 13;
	// stb r31,4507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4507, ctx.r31.u8);
	// stb r31,4508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4508, ctx.r31.u8);
	// stb r24,4509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4509, ctx.r24.u8);
	// stb r22,4510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4510, ctx.r22.u8);
	// stb r31,4511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4511, ctx.r31.u8);
	// stb r31,4512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4512, ctx.r31.u8);
	// stb r31,4513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4513, ctx.r31.u8);
	// stb r31,4514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4514, ctx.r31.u8);
	// stb r31,4515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4515, ctx.r31.u8);
	// stb r31,4516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4516, ctx.r31.u8);
	// stb r31,4517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4517, ctx.r31.u8);
	// stb r6,4518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4518, ctx.r6.u8);
	// stb r31,4519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4519, ctx.r31.u8);
	// stb r31,4520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4520, ctx.r31.u8);
	// stb r31,4521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4521, ctx.r31.u8);
	// stb r31,4522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4522, ctx.r31.u8);
	// stb r31,4523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4523, ctx.r31.u8);
	// stb r31,4524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4524, ctx.r31.u8);
	// stb r31,4525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4525, ctx.r31.u8);
	// stb r31,4526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4526, ctx.r31.u8);
	// stb r31,4527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4527, ctx.r31.u8);
	// stb r31,4528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4528, ctx.r31.u8);
	// stb r7,4529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4529, ctx.r7.u8);
	// stb r24,4530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4530, ctx.r24.u8);
	// stb r31,4531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4531, ctx.r31.u8);
	// stb r31,4532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4532, ctx.r31.u8);
	// stb r31,4533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4533, ctx.r31.u8);
	// stb r31,4534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4534, ctx.r31.u8);
	// stb r31,4535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4535, ctx.r31.u8);
	// stb r31,4536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4536, ctx.r31.u8);
	// stb r24,4537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4537, ctx.r24.u8);
	// stb r22,4538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4538, ctx.r22.u8);
	// stb r31,4539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4539, ctx.r31.u8);
	// stb r31,4540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4540, ctx.r31.u8);
	// stb r31,4541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4541, ctx.r31.u8);
	// stb r31,4542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4542, ctx.r31.u8);
	// stb r31,4543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4543, ctx.r31.u8);
	// stb r31,4544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4544, ctx.r31.u8);
	// stb r31,4545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4545, ctx.r31.u8);
	// stb r6,4546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4546, ctx.r6.u8);
	// stb r31,4547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4547, ctx.r31.u8);
	// stb r31,4548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4548, ctx.r31.u8);
	// stb r31,4549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4549, ctx.r31.u8);
	// stb r31,4550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4550, ctx.r31.u8);
	// stb r31,4551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4551, ctx.r31.u8);
	// stb r31,4552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4552, ctx.r31.u8);
	// stb r31,4553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4553, ctx.r31.u8);
	// stb r31,4554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4554, ctx.r31.u8);
	// stb r31,4555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4555, ctx.r31.u8);
	// stb r31,4556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4556, ctx.r31.u8);
	// stb r7,4557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4557, ctx.r7.u8);
	// stb r14,4558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4558, ctx.r14.u8);
	// stb r31,4559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4559, ctx.r31.u8);
	// stb r31,4560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4560, ctx.r31.u8);
	// stb r31,4561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4561, ctx.r31.u8);
	// stb r31,4562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4562, ctx.r31.u8);
	// stb r31,4563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4563, ctx.r31.u8);
	// stb r31,4564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4564, ctx.r31.u8);
	// stb r7,4565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4565, ctx.r7.u8);
	// stb r23,4566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4566, ctx.r23.u8);
	// stb r31,4567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4567, ctx.r31.u8);
	// stb r31,4568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4568, ctx.r31.u8);
	// stb r31,4569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4569, ctx.r31.u8);
	// stb r31,4570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4570, ctx.r31.u8);
	// stb r31,4571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4571, ctx.r31.u8);
	// stb r31,4572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4572, ctx.r31.u8);
	// stb r31,4573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4573, ctx.r31.u8);
	// stb r6,4574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4574, ctx.r6.u8);
	// stb r31,4575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4575, ctx.r31.u8);
	// stb r31,4576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4576, ctx.r31.u8);
	// stb r31,4577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4577, ctx.r31.u8);
	// stb r31,4578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4578, ctx.r31.u8);
	// stb r31,4579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4579, ctx.r31.u8);
	// stb r31,4580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4580, ctx.r31.u8);
	// stb r31,4581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4581, ctx.r31.u8);
	// stb r31,4582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4582, ctx.r31.u8);
	// stb r31,4583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4583, ctx.r31.u8);
	// stb r31,4584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4584, ctx.r31.u8);
	// stb r7,4585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4585, ctx.r7.u8);
	// stb r28,4586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4586, ctx.r28.u8);
	// std r11,6664(r1)
	PPC_STORE_U64(ctx.r1.u32 + 6664, ctx.r11.u64);
	// li r11,71
	ctx.r11.s64 = 71;
	// stb r31,4587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4587, ctx.r31.u8);
	// stb r31,4588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4588, ctx.r31.u8);
	// stb r31,4589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4589, ctx.r31.u8);
	// stb r31,4590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4590, ctx.r31.u8);
	// stb r11,4607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4607, ctx.r11.u8);
	// li r11,28
	ctx.r11.s64 = 28;
	// stb r31,4591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4591, ctx.r31.u8);
	// stb r31,4592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4592, ctx.r31.u8);
	// stb r29,4593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4593, ctx.r29.u8);
	// stb r30,4594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4594, ctx.r30.u8);
	// stb r11,4608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4608, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,4595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4595, ctx.r31.u8);
	// stb r31,4596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4596, ctx.r31.u8);
	// stb r31,4597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4597, ctx.r31.u8);
	// stb r31,4598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4598, ctx.r31.u8);
	// stb r31,4599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4599, ctx.r31.u8);
	// stb r31,4600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4600, ctx.r31.u8);
	// stb r31,4601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4601, ctx.r31.u8);
	// stb r6,4602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4602, ctx.r6.u8);
	// stb r31,4603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4603, ctx.r31.u8);
	// stb r31,4604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4604, ctx.r31.u8);
	// stb r31,4605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4605, ctx.r31.u8);
	// stb r31,4606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4606, ctx.r31.u8);
	// stb r11,4609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4609, ctx.r11.u8);
	// stb r31,4610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4610, ctx.r31.u8);
	// stb r31,4611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4611, ctx.r31.u8);
	// stb r31,4612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4612, ctx.r31.u8);
	// stb r26,4613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4613, ctx.r26.u8);
	// stb r25,4614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4614, ctx.r25.u8);
	// stb r31,4615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4615, ctx.r31.u8);
	// stb r31,4616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4616, ctx.r31.u8);
	// stb r31,4617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4617, ctx.r31.u8);
	// stb r31,4618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4618, ctx.r31.u8);
	// stb r31,4619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4619, ctx.r31.u8);
	// stb r31,4620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4620, ctx.r31.u8);
	// stb r9,4621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4621, ctx.r9.u8);
	// stb r8,4622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4622, ctx.r8.u8);
	// stb r31,4623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4623, ctx.r31.u8);
	// stb r31,4624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4624, ctx.r31.u8);
	// stb r31,4625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4625, ctx.r31.u8);
	// stb r31,4626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4626, ctx.r31.u8);
	// stb r31,4627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4627, ctx.r31.u8);
	// stb r31,4628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4628, ctx.r31.u8);
	// stb r31,4629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4629, ctx.r31.u8);
	// stb r31,4630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4630, ctx.r31.u8);
	// stb r31,4631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4631, ctx.r31.u8);
	// stb r31,4632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4632, ctx.r31.u8);
	// stb r31,4633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4633, ctx.r31.u8);
	// stb r31,4634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4634, ctx.r31.u8);
	// stb r31,4635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4635, ctx.r31.u8);
	// stb r31,4636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4636, ctx.r31.u8);
	// stb r31,4637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4637, ctx.r31.u8);
	// stb r31,4638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4638, ctx.r31.u8);
	// stb r31,4639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4639, ctx.r31.u8);
	// stb r31,4640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4640, ctx.r31.u8);
	// stb r3,4641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4641, ctx.r3.u8);
	// stb r28,4642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4642, ctx.r28.u8);
	// stb r31,4643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4643, ctx.r31.u8);
	// stb r31,4644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4644, ctx.r31.u8);
	// stb r31,4645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4645, ctx.r31.u8);
	// stb r31,4646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4646, ctx.r31.u8);
	// stb r31,4647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4647, ctx.r31.u8);
	// stb r31,4648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4648, ctx.r31.u8);
	// stb r4,4649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4649, ctx.r4.u8);
	// stb r27,4650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4650, ctx.r27.u8);
	// stb r31,4651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4651, ctx.r31.u8);
	// stb r31,4652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4652, ctx.r31.u8);
	// stb r31,4653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4653, ctx.r31.u8);
	// stb r31,4654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4654, ctx.r31.u8);
	// stb r31,4655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4655, ctx.r31.u8);
	// stb r31,4656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4656, ctx.r31.u8);
	// stb r31,4657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4657, ctx.r31.u8);
	// stb r6,4658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4658, ctx.r6.u8);
	// stb r31,4659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4659, ctx.r31.u8);
	// stb r31,4660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4660, ctx.r31.u8);
	// stb r31,4661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4661, ctx.r31.u8);
	// stb r31,4662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4662, ctx.r31.u8);
	// stb r5,4663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4663, ctx.r5.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r5,4664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4664, ctx.r5.u8);
	// stb r5,4665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4665, ctx.r5.u8);
	// stb r5,4666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4666, ctx.r5.u8);
	// stb r31,4667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4667, ctx.r31.u8);
	// stb r31,4668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4668, ctx.r31.u8);
	// stb r9,4669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4669, ctx.r9.u8);
	// stb r17,4670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4670, ctx.r17.u8);
	// stb r31,4671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4671, ctx.r31.u8);
	// stb r31,4672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4672, ctx.r31.u8);
	// stb r31,4673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4673, ctx.r31.u8);
	// stb r31,4674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4674, ctx.r31.u8);
	// stb r31,4675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4675, ctx.r31.u8);
	// stb r31,4676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4676, ctx.r31.u8);
	// stb r9,4677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4677, ctx.r9.u8);
	// stb r8,4678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4678, ctx.r8.u8);
	// stb r31,4679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4679, ctx.r31.u8);
	// stb r31,4680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4680, ctx.r31.u8);
	// stb r31,4681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4681, ctx.r31.u8);
	// stb r31,4682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4682, ctx.r31.u8);
	// stb r31,4683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4683, ctx.r31.u8);
	// stb r31,4684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4684, ctx.r31.u8);
	// stb r31,4685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4685, ctx.r31.u8);
	// stb r31,4686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4686, ctx.r31.u8);
	// stb r31,4687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4687, ctx.r31.u8);
	// stb r31,4688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4688, ctx.r31.u8);
	// stb r31,4689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4689, ctx.r31.u8);
	// stb r31,4690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4690, ctx.r31.u8);
	// stb r31,4691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4691, ctx.r31.u8);
	// stb r31,4692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4692, ctx.r31.u8);
	// stb r31,4693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4693, ctx.r31.u8);
	// stb r31,4694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4694, ctx.r31.u8);
	// stb r31,4695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4695, ctx.r31.u8);
	// stb r31,4696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4696, ctx.r31.u8);
	// stb r9,4697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4697, ctx.r9.u8);
	// stb r11,4698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4698, ctx.r11.u8);
	// stb r31,4699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4699, ctx.r31.u8);
	// stb r31,4700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4700, ctx.r31.u8);
	// stb r31,4701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4701, ctx.r31.u8);
	// stb r31,4702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4702, ctx.r31.u8);
	// stb r31,4703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4703, ctx.r31.u8);
	// stb r31,4704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4704, ctx.r31.u8);
	// stb r9,4705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4705, ctx.r9.u8);
	// stb r8,4706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4706, ctx.r8.u8);
	// stb r31,4707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4707, ctx.r31.u8);
	// stb r31,4708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4708, ctx.r31.u8);
	// stb r31,4709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4709, ctx.r31.u8);
	// stb r31,4710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4710, ctx.r31.u8);
	// stb r31,4711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4711, ctx.r31.u8);
	// stb r31,4712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4712, ctx.r31.u8);
	// stb r31,4713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4713, ctx.r31.u8);
	// stb r31,4714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4714, ctx.r31.u8);
	// stb r31,4715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4715, ctx.r31.u8);
	// stb r31,4716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4716, ctx.r31.u8);
	// stb r31,4717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4717, ctx.r31.u8);
	// stb r31,4718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4718, ctx.r31.u8);
	// stb r31,4719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4719, ctx.r31.u8);
	// stb r31,4720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4720, ctx.r31.u8);
	// stb r31,4721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4721, ctx.r31.u8);
	// stb r31,4722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4722, ctx.r31.u8);
	// stb r31,4723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4723, ctx.r31.u8);
	// stb r31,4724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4724, ctx.r31.u8);
	// stb r26,4725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4725, ctx.r26.u8);
	// stb r10,4726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4726, ctx.r10.u8);
	// stb r31,4727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4727, ctx.r31.u8);
	// stb r31,4728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4728, ctx.r31.u8);
	// stb r31,4729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4729, ctx.r31.u8);
	// stb r31,4730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4730, ctx.r31.u8);
	// stb r31,4731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4731, ctx.r31.u8);
	// stb r31,4732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4732, ctx.r31.u8);
	// stb r9,4733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4733, ctx.r9.u8);
	// stb r8,4734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4734, ctx.r8.u8);
	// stb r31,4735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4735, ctx.r31.u8);
	// stb r31,4736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4736, ctx.r31.u8);
	// stb r31,4737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4737, ctx.r31.u8);
	// stb r31,4738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4738, ctx.r31.u8);
	// stb r31,4739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4739, ctx.r31.u8);
	// stb r31,4740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4740, ctx.r31.u8);
	// stb r31,4741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4741, ctx.r31.u8);
	// stb r31,4742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4742, ctx.r31.u8);
	// stb r31,4743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4743, ctx.r31.u8);
	// stb r31,4744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4744, ctx.r31.u8);
	// stb r31,4745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4745, ctx.r31.u8);
	// stb r31,4746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4746, ctx.r31.u8);
	// stb r31,4747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4747, ctx.r31.u8);
	// stb r31,4748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4748, ctx.r31.u8);
	// stb r31,4749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4749, ctx.r31.u8);
	// stb r31,4750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4750, ctx.r31.u8);
	// stb r31,4751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4751, ctx.r31.u8);
	// stb r31,4752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4752, ctx.r31.u8);
	// stb r26,4753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4753, ctx.r26.u8);
	// stb r15,4754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4754, ctx.r15.u8);
	// stb r31,4755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4755, ctx.r31.u8);
	// stb r31,4756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4756, ctx.r31.u8);
	// stb r31,4757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4757, ctx.r31.u8);
	// stb r31,4758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4758, ctx.r31.u8);
	// stb r31,4759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4759, ctx.r31.u8);
	// stb r31,4760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4760, ctx.r31.u8);
	// stb r9,4761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4761, ctx.r9.u8);
	// stb r8,4762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4762, ctx.r8.u8);
	// stb r31,4763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4763, ctx.r31.u8);
	// stb r31,4764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4764, ctx.r31.u8);
	// stb r31,4765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4765, ctx.r31.u8);
	// stb r31,4766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4766, ctx.r31.u8);
	// stb r31,4767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4767, ctx.r31.u8);
	// stb r31,4768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4768, ctx.r31.u8);
	// stb r31,4769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4769, ctx.r31.u8);
	// stb r31,4770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4770, ctx.r31.u8);
	// stb r31,4771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4771, ctx.r31.u8);
	// stb r31,4772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4772, ctx.r31.u8);
	// stb r31,4773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4773, ctx.r31.u8);
	// stb r31,4774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4774, ctx.r31.u8);
	// stb r31,4775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4775, ctx.r31.u8);
	// stb r31,4776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4776, ctx.r31.u8);
	// stb r31,4777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4777, ctx.r31.u8);
	// stb r31,4778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4778, ctx.r31.u8);
	// stb r31,4779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4779, ctx.r31.u8);
	// stb r31,4780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4780, ctx.r31.u8);
	// stb r17,4781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4781, ctx.r17.u8);
	// stb r19,4782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4782, ctx.r19.u8);
	// stb r31,4783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4783, ctx.r31.u8);
	// stb r31,4784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4784, ctx.r31.u8);
	// stb r31,4785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4785, ctx.r31.u8);
	// stb r31,4786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4786, ctx.r31.u8);
	// stb r31,4787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4787, ctx.r31.u8);
	// stb r31,4788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4788, ctx.r31.u8);
	// stb r29,4789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4789, ctx.r29.u8);
	// stb r30,4790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4790, ctx.r30.u8);
	// stb r31,4791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4791, ctx.r31.u8);
	// stb r31,4792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4792, ctx.r31.u8);
	// stb r31,4793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4793, ctx.r31.u8);
	// stb r31,4794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4794, ctx.r31.u8);
	// stb r31,4795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4795, ctx.r31.u8);
	// stb r31,4796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4796, ctx.r31.u8);
	// stb r31,4797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4797, ctx.r31.u8);
	// stb r6,4798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4798, ctx.r6.u8);
	// stb r31,4799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4799, ctx.r31.u8);
	// stb r31,4800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4800, ctx.r31.u8);
	// stb r31,4801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4801, ctx.r31.u8);
	// stb r31,4802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4802, ctx.r31.u8);
	// stb r31,4803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4803, ctx.r31.u8);
	// stb r31,4804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4804, ctx.r31.u8);
	// stb r31,4805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4805, ctx.r31.u8);
	// stb r31,4806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4806, ctx.r31.u8);
	// stb r31,4807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4807, ctx.r31.u8);
	// stb r31,4808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4808, ctx.r31.u8);
	// stb r26,4809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4809, ctx.r26.u8);
	// stb r20,4810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4810, ctx.r20.u8);
	// stb r31,4811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4811, ctx.r31.u8);
	// stb r31,4812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4812, ctx.r31.u8);
	// stb r31,4813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4813, ctx.r31.u8);
	// stb r31,4814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4814, ctx.r31.u8);
	// stb r31,4815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4815, ctx.r31.u8);
	// stb r31,4816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4816, ctx.r31.u8);
	// stb r9,4817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4817, ctx.r9.u8);
	// stb r8,4818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4818, ctx.r8.u8);
	// stb r31,4819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4819, ctx.r31.u8);
	// stb r31,4820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4820, ctx.r31.u8);
	// stb r31,4821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4821, ctx.r31.u8);
	// stb r31,4822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4822, ctx.r31.u8);
	// stb r31,4823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4823, ctx.r31.u8);
	// stb r31,4824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4824, ctx.r31.u8);
	// stb r31,4825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4825, ctx.r31.u8);
	// stb r31,4826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4826, ctx.r31.u8);
	// stb r31,4827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4827, ctx.r31.u8);
	// stb r31,4828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4828, ctx.r31.u8);
	// stb r31,4829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4829, ctx.r31.u8);
	// stb r31,4830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4830, ctx.r31.u8);
	// stb r31,4831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4831, ctx.r31.u8);
	// stb r31,4832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4832, ctx.r31.u8);
	// stb r31,4833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4833, ctx.r31.u8);
	// stb r31,4834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4834, ctx.r31.u8);
	// stb r31,4835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4835, ctx.r31.u8);
	// stb r31,4836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4836, ctx.r31.u8);
	// stb r9,4837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4837, ctx.r9.u8);
	// stb r4,4838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4838, ctx.r4.u8);
	// stb r31,4839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4839, ctx.r31.u8);
	// stb r31,4840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4840, ctx.r31.u8);
	// stb r31,4841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4841, ctx.r31.u8);
	// stb r31,4842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4842, ctx.r31.u8);
	// stb r31,4843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4843, ctx.r31.u8);
	// stb r31,4844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4844, ctx.r31.u8);
	// stb r9,4845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4845, ctx.r9.u8);
	// stb r8,4846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4846, ctx.r8.u8);
	// stb r31,4847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4847, ctx.r31.u8);
	// stb r31,4848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4848, ctx.r31.u8);
	// stb r31,4849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4849, ctx.r31.u8);
	// stb r31,4850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4850, ctx.r31.u8);
	// stb r31,4851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4851, ctx.r31.u8);
	// stb r31,4852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4852, ctx.r31.u8);
	// stb r31,4853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4853, ctx.r31.u8);
	// stb r31,4854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4854, ctx.r31.u8);
	// stb r31,4855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4855, ctx.r31.u8);
	// stb r31,4856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4856, ctx.r31.u8);
	// stb r31,4857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4857, ctx.r31.u8);
	// stb r31,4858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4858, ctx.r31.u8);
	// stb r31,4859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4859, ctx.r31.u8);
	// stb r31,4860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4860, ctx.r31.u8);
	// stb r31,4861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4861, ctx.r31.u8);
	// stb r26,4862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4862, ctx.r26.u8);
	// stb r31,4863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4863, ctx.r31.u8);
	// stb r31,4864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4864, ctx.r31.u8);
	// stb r26,4865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4865, ctx.r26.u8);
	// stb r16,4866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4866, ctx.r16.u8);
	// stb r31,4867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4867, ctx.r31.u8);
	// stb r31,4868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4868, ctx.r31.u8);
	// stb r31,4869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4869, ctx.r31.u8);
	// stb r31,4870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4870, ctx.r31.u8);
	// stb r31,4871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4871, ctx.r31.u8);
	// stb r31,4872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4872, ctx.r31.u8);
	// stb r9,4873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4873, ctx.r9.u8);
	// stb r8,4874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4874, ctx.r8.u8);
	// stb r31,4875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4875, ctx.r31.u8);
	// stb r31,4876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4876, ctx.r31.u8);
	// stb r31,4877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4877, ctx.r31.u8);
	// stb r31,4878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4878, ctx.r31.u8);
	// stb r31,4879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4879, ctx.r31.u8);
	// stb r31,4880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4880, ctx.r31.u8);
	// stb r31,4881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4881, ctx.r31.u8);
	// stb r31,4882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4882, ctx.r31.u8);
	// stb r31,4883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4883, ctx.r31.u8);
	// stb r31,4884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4884, ctx.r31.u8);
	// stb r31,4885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4885, ctx.r31.u8);
	// stb r31,4886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4886, ctx.r31.u8);
	// stb r31,4887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4887, ctx.r31.u8);
	// stb r31,4888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4888, ctx.r31.u8);
	// stb r31,4889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4889, ctx.r31.u8);
	// stb r31,4890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4890, ctx.r31.u8);
	// stb r31,4891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4891, ctx.r31.u8);
	// stb r31,4892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4892, ctx.r31.u8);
	// stb r3,4893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4893, ctx.r3.u8);
	// stb r21,4894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4894, ctx.r21.u8);
	// stb r31,4895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4895, ctx.r31.u8);
	// stb r31,4896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4896, ctx.r31.u8);
	// stb r31,4897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4897, ctx.r31.u8);
	// stb r31,4898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4898, ctx.r31.u8);
	// stb r31,4899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4899, ctx.r31.u8);
	// stb r31,4900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4900, ctx.r31.u8);
	// stb r7,4901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4901, ctx.r7.u8);
	// stb r17,4902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4902, ctx.r17.u8);
	// stb r31,4903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4903, ctx.r31.u8);
	// stb r31,4904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4904, ctx.r31.u8);
	// stb r31,4905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4905, ctx.r31.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r31,4906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4906, ctx.r31.u8);
	// stb r31,4907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4907, ctx.r31.u8);
	// stb r31,4908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4908, ctx.r31.u8);
	// stb r3,4909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4909, ctx.r3.u8);
	// stb r31,4911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4911, ctx.r31.u8);
	// stb r11,4910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4910, ctx.r11.u8);
	// li r11,71
	ctx.r11.s64 = 71;
	// stb r31,4912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4912, ctx.r31.u8);
	// stb r31,4913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4913, ctx.r31.u8);
	// stb r31,4914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4914, ctx.r31.u8);
	// stb r31,4915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4915, ctx.r31.u8);
	// stb r31,4916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4916, ctx.r31.u8);
	// stb r31,4917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4917, ctx.r31.u8);
	// stb r7,4918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4918, ctx.r7.u8);
	// stb r31,4919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4919, ctx.r31.u8);
	// stb r31,4920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4920, ctx.r31.u8);
	// stb r31,4921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4921, ctx.r31.u8);
	// stb r31,4922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4922, ctx.r31.u8);
	// stb r31,4923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4923, ctx.r31.u8);
	// stb r31,4924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4924, ctx.r31.u8);
	// stb r18,4925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4925, ctx.r18.u8);
	// stb r11,4926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4926, ctx.r11.u8);
	// stb r31,4927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4927, ctx.r31.u8);
	// stb r31,4928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4928, ctx.r31.u8);
	// stb r31,4929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4929, ctx.r31.u8);
	// stb r31,4930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4930, ctx.r31.u8);
	// stb r31,4931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4931, ctx.r31.u8);
	// stb r31,4932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4932, ctx.r31.u8);
	// stb r7,4933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4933, ctx.r7.u8);
	// stb r7,4934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4934, ctx.r7.u8);
	// stb r31,4935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4935, ctx.r31.u8);
	// stb r31,4936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4936, ctx.r31.u8);
	// stb r31,4937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4937, ctx.r31.u8);
	// stb r31,4938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4938, ctx.r31.u8);
	// stb r31,4939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4939, ctx.r31.u8);
	// stb r31,4940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4940, ctx.r31.u8);
	// stb r24,4941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4941, ctx.r24.u8);
	// stb r22,4942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4942, ctx.r22.u8);
	// stb r31,4943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4943, ctx.r31.u8);
	// stb r31,4944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4944, ctx.r31.u8);
	// stb r31,4945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4945, ctx.r31.u8);
	// stb r31,4946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4946, ctx.r31.u8);
	// stb r31,4947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4947, ctx.r31.u8);
	// stb r31,4948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4948, ctx.r31.u8);
	// stb r31,4949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4949, ctx.r31.u8);
	// stb r6,4950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4950, ctx.r6.u8);
	// stb r31,4951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4951, ctx.r31.u8);
	// stb r31,4952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4952, ctx.r31.u8);
	// stb r31,4953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4953, ctx.r31.u8);
	// stb r31,4954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4954, ctx.r31.u8);
	// stb r31,4955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4955, ctx.r31.u8);
	// stb r31,4956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4956, ctx.r31.u8);
	// stb r31,4957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4957, ctx.r31.u8);
	// stb r31,4958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4958, ctx.r31.u8);
	// stb r31,4959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4959, ctx.r31.u8);
	// stb r31,4960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4960, ctx.r31.u8);
	// stb r7,4961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4961, ctx.r7.u8);
	// stb r24,4962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4962, ctx.r24.u8);
	// stb r31,4963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4963, ctx.r31.u8);
	// stb r31,4964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4964, ctx.r31.u8);
	// stb r31,4965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4965, ctx.r31.u8);
	// stb r31,4966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4966, ctx.r31.u8);
	// stb r31,4967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4967, ctx.r31.u8);
	// stb r31,4968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4968, ctx.r31.u8);
	// stb r24,4969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4969, ctx.r24.u8);
	// stb r22,4970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4970, ctx.r22.u8);
	// stb r31,4971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4971, ctx.r31.u8);
	// stb r31,4972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4972, ctx.r31.u8);
	// stb r31,4973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4973, ctx.r31.u8);
	// stb r31,4974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4974, ctx.r31.u8);
	// stb r31,4975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4975, ctx.r31.u8);
	// stb r31,4976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4976, ctx.r31.u8);
	// stb r31,4977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4977, ctx.r31.u8);
	// stb r6,4978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4978, ctx.r6.u8);
	// stb r31,4979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4979, ctx.r31.u8);
	// stb r31,4980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4980, ctx.r31.u8);
	// stb r31,4981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4981, ctx.r31.u8);
	// stb r31,4982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4982, ctx.r31.u8);
	// stb r31,4983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4983, ctx.r31.u8);
	// stb r31,4984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4984, ctx.r31.u8);
	// stb r31,4985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4985, ctx.r31.u8);
	// stb r31,4986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4986, ctx.r31.u8);
	// stb r31,4987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4987, ctx.r31.u8);
	// stb r31,4988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4988, ctx.r31.u8);
	// stb r7,4989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4989, ctx.r7.u8);
	// stb r14,4990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4990, ctx.r14.u8);
	// stb r31,4991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4991, ctx.r31.u8);
	// stb r31,4992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4992, ctx.r31.u8);
	// stb r31,4993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4993, ctx.r31.u8);
	// stb r31,4994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4994, ctx.r31.u8);
	// stb r31,4995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4995, ctx.r31.u8);
	// stb r31,4996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4996, ctx.r31.u8);
	// stb r7,4997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4997, ctx.r7.u8);
	// stb r23,4998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4998, ctx.r23.u8);
	// stb r31,4999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 4999, ctx.r31.u8);
	// stb r31,5000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5000, ctx.r31.u8);
	// stb r31,5001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5001, ctx.r31.u8);
	// stb r31,5002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5002, ctx.r31.u8);
	// stb r31,5003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5003, ctx.r31.u8);
	// stb r31,5004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5004, ctx.r31.u8);
	// stb r31,5005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5005, ctx.r31.u8);
	// stb r6,5006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5006, ctx.r6.u8);
	// stb r31,5007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5007, ctx.r31.u8);
	// stb r31,5008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5008, ctx.r31.u8);
	// stb r31,5009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5009, ctx.r31.u8);
	// stb r31,5010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5010, ctx.r31.u8);
	// stb r31,5011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5011, ctx.r31.u8);
	// stb r31,5012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5012, ctx.r31.u8);
	// stb r31,5013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5013, ctx.r31.u8);
	// stb r31,5014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5014, ctx.r31.u8);
	// stb r31,5015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5015, ctx.r31.u8);
	// stb r31,5016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5016, ctx.r31.u8);
	// stb r7,5017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5017, ctx.r7.u8);
	// stb r28,5018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5018, ctx.r28.u8);
	// stb r31,5019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5019, ctx.r31.u8);
	// stb r31,5020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5020, ctx.r31.u8);
	// stb r31,5021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5021, ctx.r31.u8);
	// stb r31,5022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5022, ctx.r31.u8);
	// stb r31,5023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5023, ctx.r31.u8);
	// stb r31,5024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5024, ctx.r31.u8);
	// stb r29,5025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5025, ctx.r29.u8);
	// stb r30,5026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5026, ctx.r30.u8);
	// stb r31,5027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5027, ctx.r31.u8);
	// stb r31,5028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5028, ctx.r31.u8);
	// stb r31,5029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5029, ctx.r31.u8);
	// stb r31,5030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5030, ctx.r31.u8);
	// stb r31,5031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5031, ctx.r31.u8);
	// stb r31,5032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5032, ctx.r31.u8);
	// stb r31,5033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5033, ctx.r31.u8);
	// stb r6,5034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5034, ctx.r6.u8);
	// stb r31,5035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5035, ctx.r31.u8);
	// stb r31,5036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5036, ctx.r31.u8);
	// stb r31,5037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5037, ctx.r31.u8);
	// stb r31,5038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5038, ctx.r31.u8);
	// stb r31,5039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5039, ctx.r31.u8);
	// stb r31,5040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5040, ctx.r31.u8);
	// stb r31,5041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5041, ctx.r31.u8);
	// stb r31,5042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5042, ctx.r31.u8);
	// stb r31,5043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5043, ctx.r31.u8);
	// stb r31,5044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5044, ctx.r31.u8);
	// stb r26,5045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5045, ctx.r26.u8);
	// stb r25,5046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5046, ctx.r25.u8);
	// stb r31,5047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5047, ctx.r31.u8);
	// stb r31,5048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5048, ctx.r31.u8);
	// stb r31,5049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5049, ctx.r31.u8);
	// stb r31,5050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5050, ctx.r31.u8);
	// stb r31,5051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5051, ctx.r31.u8);
	// stb r31,5052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5052, ctx.r31.u8);
	// stb r9,5053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5053, ctx.r9.u8);
	// stb r8,5054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5054, ctx.r8.u8);
	// stb r31,5055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5055, ctx.r31.u8);
	// stb r31,5056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5056, ctx.r31.u8);
	// stb r31,5057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5057, ctx.r31.u8);
	// stb r31,5058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5058, ctx.r31.u8);
	// stb r31,5059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5059, ctx.r31.u8);
	// stb r31,5060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5060, ctx.r31.u8);
	// stb r31,5061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5061, ctx.r31.u8);
	// stb r31,5062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5062, ctx.r31.u8);
	// stb r31,5063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5063, ctx.r31.u8);
	// stb r31,5064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5064, ctx.r31.u8);
	// stb r31,5065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5065, ctx.r31.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,5066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5066, ctx.r31.u8);
	// stb r31,5067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5067, ctx.r31.u8);
	// stb r31,5068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5068, ctx.r31.u8);
	// stb r31,5069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5069, ctx.r31.u8);
	// stb r31,5070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5070, ctx.r31.u8);
	// stb r31,5071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5071, ctx.r31.u8);
	// stb r31,5072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5072, ctx.r31.u8);
	// stb r3,5073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5073, ctx.r3.u8);
	// stb r28,5074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5074, ctx.r28.u8);
	// stb r31,5075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5075, ctx.r31.u8);
	// stb r31,5076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5076, ctx.r31.u8);
	// stb r31,5077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5077, ctx.r31.u8);
	// stb r31,5078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5078, ctx.r31.u8);
	// stb r31,5079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5079, ctx.r31.u8);
	// stb r31,5080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5080, ctx.r31.u8);
	// stb r4,5081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5081, ctx.r4.u8);
	// stb r27,5082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5082, ctx.r27.u8);
	// stb r31,5083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5083, ctx.r31.u8);
	// stb r31,5084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5084, ctx.r31.u8);
	// stb r31,5085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5085, ctx.r31.u8);
	// stb r31,5086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5086, ctx.r31.u8);
	// stb r31,5087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5087, ctx.r31.u8);
	// stb r31,5088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5088, ctx.r31.u8);
	// stb r31,5089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5089, ctx.r31.u8);
	// stb r6,5090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5090, ctx.r6.u8);
	// stb r31,5091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5091, ctx.r31.u8);
	// stb r31,5092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5092, ctx.r31.u8);
	// stb r31,5093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5093, ctx.r31.u8);
	// stb r31,5094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5094, ctx.r31.u8);
	// stb r5,5095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5095, ctx.r5.u8);
	// stb r5,5096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5096, ctx.r5.u8);
	// stb r5,5097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5097, ctx.r5.u8);
	// stb r5,5098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5098, ctx.r5.u8);
	// stb r31,5099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5099, ctx.r31.u8);
	// stb r31,5100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5100, ctx.r31.u8);
	// stb r9,5101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5101, ctx.r9.u8);
	// stb r17,5102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5102, ctx.r17.u8);
	// stb r31,5103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5103, ctx.r31.u8);
	// stb r31,5104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5104, ctx.r31.u8);
	// stb r31,5105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5105, ctx.r31.u8);
	// stb r31,5106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5106, ctx.r31.u8);
	// stb r31,5107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5107, ctx.r31.u8);
	// stb r31,5108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5108, ctx.r31.u8);
	// stb r9,5109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5109, ctx.r9.u8);
	// stb r8,5110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5110, ctx.r8.u8);
	// stb r31,5111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5111, ctx.r31.u8);
	// stb r31,5112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5112, ctx.r31.u8);
	// stb r31,5113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5113, ctx.r31.u8);
	// stb r31,5114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5114, ctx.r31.u8);
	// stb r31,5115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5115, ctx.r31.u8);
	// stb r31,5116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5116, ctx.r31.u8);
	// stb r31,5117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5117, ctx.r31.u8);
	// stb r31,5118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5118, ctx.r31.u8);
	// stb r31,5119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5119, ctx.r31.u8);
	// stb r31,5120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5120, ctx.r31.u8);
	// stb r31,5121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5121, ctx.r31.u8);
	// stb r31,5122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5122, ctx.r31.u8);
	// stb r31,5123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5123, ctx.r31.u8);
	// stb r31,5124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5124, ctx.r31.u8);
	// stb r31,5125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5125, ctx.r31.u8);
	// stb r31,5126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5126, ctx.r31.u8);
	// stb r31,5127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5127, ctx.r31.u8);
	// stb r31,5128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5128, ctx.r31.u8);
	// stb r9,5129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5129, ctx.r9.u8);
	// stb r11,5130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5130, ctx.r11.u8);
	// stb r31,5131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5131, ctx.r31.u8);
	// stb r31,5132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5132, ctx.r31.u8);
	// stb r31,5133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5133, ctx.r31.u8);
	// stb r31,5134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5134, ctx.r31.u8);
	// stb r31,5135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5135, ctx.r31.u8);
	// stb r31,5136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5136, ctx.r31.u8);
	// stb r9,5137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5137, ctx.r9.u8);
	// stb r8,5138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5138, ctx.r8.u8);
	// stb r31,5139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5139, ctx.r31.u8);
	// stb r31,5140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5140, ctx.r31.u8);
	// stb r31,5141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5141, ctx.r31.u8);
	// stb r31,5142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5142, ctx.r31.u8);
	// stb r31,5143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5143, ctx.r31.u8);
	// stb r31,5144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5144, ctx.r31.u8);
	// stb r31,5145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5145, ctx.r31.u8);
	// stb r31,5146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5146, ctx.r31.u8);
	// stb r31,5147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5147, ctx.r31.u8);
	// stb r31,5148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5148, ctx.r31.u8);
	// stb r31,5149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5149, ctx.r31.u8);
	// stb r31,5150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5150, ctx.r31.u8);
	// stb r31,5151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5151, ctx.r31.u8);
	// stb r31,5152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5152, ctx.r31.u8);
	// stb r31,5153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5153, ctx.r31.u8);
	// stb r31,5154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5154, ctx.r31.u8);
	// stb r31,5155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5155, ctx.r31.u8);
	// stb r31,5156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5156, ctx.r31.u8);
	// stb r26,5157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5157, ctx.r26.u8);
	// stb r10,5158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5158, ctx.r10.u8);
	// stb r31,5159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5159, ctx.r31.u8);
	// stb r31,5160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5160, ctx.r31.u8);
	// stb r31,5161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5161, ctx.r31.u8);
	// stb r31,5162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5162, ctx.r31.u8);
	// stb r31,5163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5163, ctx.r31.u8);
	// stb r31,5164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5164, ctx.r31.u8);
	// stb r9,5165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5165, ctx.r9.u8);
	// stb r8,5166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5166, ctx.r8.u8);
	// stb r31,5167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5167, ctx.r31.u8);
	// stb r31,5168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5168, ctx.r31.u8);
	// stb r31,5169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5169, ctx.r31.u8);
	// stb r31,5170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5170, ctx.r31.u8);
	// stb r31,5171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5171, ctx.r31.u8);
	// stb r31,5172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5172, ctx.r31.u8);
	// stb r31,5173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5173, ctx.r31.u8);
	// stb r31,5174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5174, ctx.r31.u8);
	// stb r31,5175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5175, ctx.r31.u8);
	// stb r31,5176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5176, ctx.r31.u8);
	// stb r31,5177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5177, ctx.r31.u8);
	// stb r31,5178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5178, ctx.r31.u8);
	// stb r31,5179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5179, ctx.r31.u8);
	// stb r31,5180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5180, ctx.r31.u8);
	// stb r31,5181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5181, ctx.r31.u8);
	// stb r31,5182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5182, ctx.r31.u8);
	// stb r31,5183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5183, ctx.r31.u8);
	// stb r31,5184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5184, ctx.r31.u8);
	// stb r26,5185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5185, ctx.r26.u8);
	// stb r15,5186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5186, ctx.r15.u8);
	// stb r31,5187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5187, ctx.r31.u8);
	// stb r31,5188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5188, ctx.r31.u8);
	// stb r31,5189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5189, ctx.r31.u8);
	// stb r31,5190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5190, ctx.r31.u8);
	// stb r31,5191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5191, ctx.r31.u8);
	// stb r31,5192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5192, ctx.r31.u8);
	// stb r9,5193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5193, ctx.r9.u8);
	// stb r8,5194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5194, ctx.r8.u8);
	// stb r31,5195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5195, ctx.r31.u8);
	// stb r31,5196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5196, ctx.r31.u8);
	// stb r31,5197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5197, ctx.r31.u8);
	// stb r31,5198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5198, ctx.r31.u8);
	// stb r31,5199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5199, ctx.r31.u8);
	// stb r31,5200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5200, ctx.r31.u8);
	// stb r31,5201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5201, ctx.r31.u8);
	// stb r31,5202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5202, ctx.r31.u8);
	// stb r31,5203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5203, ctx.r31.u8);
	// stb r31,5204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5204, ctx.r31.u8);
	// stb r31,5205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5205, ctx.r31.u8);
	// stb r31,5206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5206, ctx.r31.u8);
	// stb r31,5207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5207, ctx.r31.u8);
	// stb r31,5208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5208, ctx.r31.u8);
	// stb r31,5209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5209, ctx.r31.u8);
	// stb r31,5210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5210, ctx.r31.u8);
	// stb r31,5211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5211, ctx.r31.u8);
	// stb r31,5212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5212, ctx.r31.u8);
	// stb r17,5213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5213, ctx.r17.u8);
	// stb r19,5214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5214, ctx.r19.u8);
	// stb r31,5215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5215, ctx.r31.u8);
	// stb r31,5216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5216, ctx.r31.u8);
	// stb r31,5217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5217, ctx.r31.u8);
	// stb r31,5218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5218, ctx.r31.u8);
	// stb r31,5219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5219, ctx.r31.u8);
	// stb r31,5220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5220, ctx.r31.u8);
	// stb r29,5221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5221, ctx.r29.u8);
	// stb r30,5222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5222, ctx.r30.u8);
	// stb r31,5223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5223, ctx.r31.u8);
	// stb r31,5224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5224, ctx.r31.u8);
	// stb r31,5225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5225, ctx.r31.u8);
	// stb r31,5226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5226, ctx.r31.u8);
	// stb r31,5227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5227, ctx.r31.u8);
	// stb r31,5228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5228, ctx.r31.u8);
	// stb r31,5229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5229, ctx.r31.u8);
	// stb r6,5230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5230, ctx.r6.u8);
	// stb r31,5231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5231, ctx.r31.u8);
	// stb r31,5232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5232, ctx.r31.u8);
	// stb r31,5233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5233, ctx.r31.u8);
	// stb r31,5234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5234, ctx.r31.u8);
	// stb r31,5235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5235, ctx.r31.u8);
	// stb r31,5236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5236, ctx.r31.u8);
	// stb r31,5237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5237, ctx.r31.u8);
	// stb r31,5238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5238, ctx.r31.u8);
	// stb r31,5239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5239, ctx.r31.u8);
	// stb r31,5240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5240, ctx.r31.u8);
	// stb r26,5241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5241, ctx.r26.u8);
	// stb r20,5242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5242, ctx.r20.u8);
	// stb r31,5243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5243, ctx.r31.u8);
	// stb r31,5244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5244, ctx.r31.u8);
	// stb r31,5245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5245, ctx.r31.u8);
	// stb r31,5246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5246, ctx.r31.u8);
	// stb r31,5247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5247, ctx.r31.u8);
	// stb r31,5248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5248, ctx.r31.u8);
	// stb r9,5249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5249, ctx.r9.u8);
	// stb r8,5250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5250, ctx.r8.u8);
	// stb r31,5251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5251, ctx.r31.u8);
	// stb r31,5252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5252, ctx.r31.u8);
	// stb r31,5253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5253, ctx.r31.u8);
	// stb r31,5254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5254, ctx.r31.u8);
	// stb r31,5255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5255, ctx.r31.u8);
	// stb r31,5256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5256, ctx.r31.u8);
	// stb r31,5257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5257, ctx.r31.u8);
	// stb r31,5258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5258, ctx.r31.u8);
	// stb r31,5259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5259, ctx.r31.u8);
	// stb r31,5260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5260, ctx.r31.u8);
	// stb r31,5261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5261, ctx.r31.u8);
	// stb r31,5262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5262, ctx.r31.u8);
	// stb r31,5263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5263, ctx.r31.u8);
	// stb r31,5264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5264, ctx.r31.u8);
	// stb r31,5265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5265, ctx.r31.u8);
	// stb r31,5266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5266, ctx.r31.u8);
	// stb r31,5267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5267, ctx.r31.u8);
	// stb r31,5268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5268, ctx.r31.u8);
	// stb r9,5269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5269, ctx.r9.u8);
	// stb r4,5270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5270, ctx.r4.u8);
	// stb r31,5271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5271, ctx.r31.u8);
	// stb r31,5272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5272, ctx.r31.u8);
	// stb r31,5273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5273, ctx.r31.u8);
	// stb r31,5274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5274, ctx.r31.u8);
	// stb r31,5275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5275, ctx.r31.u8);
	// stb r31,5276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5276, ctx.r31.u8);
	// stb r9,5277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5277, ctx.r9.u8);
	// stb r8,5278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5278, ctx.r8.u8);
	// stb r31,5279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5279, ctx.r31.u8);
	// stb r31,5280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5280, ctx.r31.u8);
	// stb r31,5281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5281, ctx.r31.u8);
	// stb r31,5282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5282, ctx.r31.u8);
	// stb r31,5283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5283, ctx.r31.u8);
	// stb r31,5284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5284, ctx.r31.u8);
	// stb r31,5285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5285, ctx.r31.u8);
	// stb r31,5286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5286, ctx.r31.u8);
	// stb r31,5287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5287, ctx.r31.u8);
	// stb r31,5288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5288, ctx.r31.u8);
	// stb r31,5289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5289, ctx.r31.u8);
	// stb r31,5290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5290, ctx.r31.u8);
	// stb r31,5291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5291, ctx.r31.u8);
	// stb r31,5292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5292, ctx.r31.u8);
	// stb r31,5293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5293, ctx.r31.u8);
	// stb r26,5294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5294, ctx.r26.u8);
	// stb r31,5295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5295, ctx.r31.u8);
	// stb r31,5296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5296, ctx.r31.u8);
	// stb r26,5297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5297, ctx.r26.u8);
	// stb r16,5298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5298, ctx.r16.u8);
	// stb r31,5299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5299, ctx.r31.u8);
	// stb r31,5300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5300, ctx.r31.u8);
	// stb r31,5301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5301, ctx.r31.u8);
	// stb r31,5302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5302, ctx.r31.u8);
	// stb r31,5303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5303, ctx.r31.u8);
	// stb r31,5304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5304, ctx.r31.u8);
	// stb r9,5305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5305, ctx.r9.u8);
	// stb r8,5306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5306, ctx.r8.u8);
	// stb r31,5307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5307, ctx.r31.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r31,5308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5308, ctx.r31.u8);
	// stb r31,5309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5309, ctx.r31.u8);
	// stb r31,5310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5310, ctx.r31.u8);
	// stb r31,5311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5311, ctx.r31.u8);
	// stb r31,5312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5312, ctx.r31.u8);
	// stb r11,5342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5342, ctx.r11.u8);
	// li r11,72
	ctx.r11.s64 = 72;
	// stb r31,5313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5313, ctx.r31.u8);
	// stb r31,5314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5314, ctx.r31.u8);
	// stb r31,5315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5315, ctx.r31.u8);
	// stb r31,5316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5316, ctx.r31.u8);
	// stb r31,5317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5317, ctx.r31.u8);
	// stb r31,5318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5318, ctx.r31.u8);
	// stb r31,5319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5319, ctx.r31.u8);
	// stb r31,5320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5320, ctx.r31.u8);
	// stb r31,5321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5321, ctx.r31.u8);
	// stb r31,5322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5322, ctx.r31.u8);
	// stb r31,5323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5323, ctx.r31.u8);
	// stb r31,5324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5324, ctx.r31.u8);
	// stb r3,5325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5325, ctx.r3.u8);
	// stb r21,5326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5326, ctx.r21.u8);
	// stb r31,5327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5327, ctx.r31.u8);
	// stb r31,5328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5328, ctx.r31.u8);
	// stb r31,5329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5329, ctx.r31.u8);
	// stb r31,5330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5330, ctx.r31.u8);
	// stb r31,5331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5331, ctx.r31.u8);
	// stb r31,5332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5332, ctx.r31.u8);
	// stb r7,5333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5333, ctx.r7.u8);
	// stb r17,5334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5334, ctx.r17.u8);
	// stb r31,5335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5335, ctx.r31.u8);
	// stb r31,5336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5336, ctx.r31.u8);
	// stb r31,5337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5337, ctx.r31.u8);
	// stb r31,5338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5338, ctx.r31.u8);
	// stb r31,5339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5339, ctx.r31.u8);
	// stb r31,5340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5340, ctx.r31.u8);
	// stb r3,5341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5341, ctx.r3.u8);
	// stb r31,5343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5343, ctx.r31.u8);
	// stb r31,5344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5344, ctx.r31.u8);
	// stb r31,5345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5345, ctx.r31.u8);
	// stb r31,5346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5346, ctx.r31.u8);
	// stb r31,5347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5347, ctx.r31.u8);
	// stb r31,5348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5348, ctx.r31.u8);
	// stb r31,5349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5349, ctx.r31.u8);
	// stb r7,5350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5350, ctx.r7.u8);
	// stb r31,5351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5351, ctx.r31.u8);
	// stb r31,5352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5352, ctx.r31.u8);
	// stb r31,5353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5353, ctx.r31.u8);
	// stb r31,5354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5354, ctx.r31.u8);
	// stb r31,5355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5355, ctx.r31.u8);
	// stb r31,5356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5356, ctx.r31.u8);
	// stb r18,5357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5357, ctx.r18.u8);
	// stb r11,5358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5358, ctx.r11.u8);
	// stb r31,5359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5359, ctx.r31.u8);
	// stb r31,5360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5360, ctx.r31.u8);
	// stb r31,5361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5361, ctx.r31.u8);
	// stb r31,5362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5362, ctx.r31.u8);
	// stb r31,5363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5363, ctx.r31.u8);
	// stb r31,5364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5364, ctx.r31.u8);
	// stb r7,5365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5365, ctx.r7.u8);
	// stb r7,5366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5366, ctx.r7.u8);
	// stb r31,5367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5367, ctx.r31.u8);
	// stb r31,5368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5368, ctx.r31.u8);
	// stb r31,5369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5369, ctx.r31.u8);
	// stb r31,5370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5370, ctx.r31.u8);
	// stb r31,5371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5371, ctx.r31.u8);
	// stb r31,5372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5372, ctx.r31.u8);
	// stb r24,5373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5373, ctx.r24.u8);
	// stb r22,5374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5374, ctx.r22.u8);
	// stb r31,5375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5375, ctx.r31.u8);
	// stb r31,5376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5376, ctx.r31.u8);
	// stb r31,5377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5377, ctx.r31.u8);
	// stb r31,5378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5378, ctx.r31.u8);
	// stb r31,5379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5379, ctx.r31.u8);
	// stb r31,5380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5380, ctx.r31.u8);
	// stb r31,5381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5381, ctx.r31.u8);
	// stb r6,5382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5382, ctx.r6.u8);
	// stb r31,5383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5383, ctx.r31.u8);
	// stb r31,5384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5384, ctx.r31.u8);
	// stb r31,5385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5385, ctx.r31.u8);
	// stb r31,5386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5386, ctx.r31.u8);
	// stb r31,5387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5387, ctx.r31.u8);
	// stb r31,5388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5388, ctx.r31.u8);
	// stb r31,5389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5389, ctx.r31.u8);
	// stb r31,5390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5390, ctx.r31.u8);
	// stb r31,5391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5391, ctx.r31.u8);
	// stb r31,5392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5392, ctx.r31.u8);
	// stb r7,5393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5393, ctx.r7.u8);
	// stb r24,5394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5394, ctx.r24.u8);
	// stb r31,5395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5395, ctx.r31.u8);
	// stb r31,5396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5396, ctx.r31.u8);
	// stb r31,5397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5397, ctx.r31.u8);
	// stb r31,5398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5398, ctx.r31.u8);
	// stb r31,5399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5399, ctx.r31.u8);
	// stb r31,5400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5400, ctx.r31.u8);
	// stb r24,5401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5401, ctx.r24.u8);
	// stb r22,5402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5402, ctx.r22.u8);
	// stb r31,5403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5403, ctx.r31.u8);
	// stb r31,5404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5404, ctx.r31.u8);
	// stb r31,5405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5405, ctx.r31.u8);
	// stb r31,5406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5406, ctx.r31.u8);
	// stb r31,5407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5407, ctx.r31.u8);
	// stb r31,5408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5408, ctx.r31.u8);
	// stb r31,5409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5409, ctx.r31.u8);
	// stb r6,5410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5410, ctx.r6.u8);
	// stb r31,5411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5411, ctx.r31.u8);
	// stb r31,5412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5412, ctx.r31.u8);
	// stb r31,5413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5413, ctx.r31.u8);
	// stb r31,5414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5414, ctx.r31.u8);
	// stb r31,5415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5415, ctx.r31.u8);
	// stb r31,5416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5416, ctx.r31.u8);
	// stb r31,5417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5417, ctx.r31.u8);
	// stb r31,5418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5418, ctx.r31.u8);
	// stb r31,5419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5419, ctx.r31.u8);
	// stb r31,5420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5420, ctx.r31.u8);
	// stb r7,5421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5421, ctx.r7.u8);
	// stb r14,5422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5422, ctx.r14.u8);
	// stb r31,5423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5423, ctx.r31.u8);
	// stb r31,5424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5424, ctx.r31.u8);
	// stb r31,5425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5425, ctx.r31.u8);
	// stb r31,5426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5426, ctx.r31.u8);
	// stb r31,5427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5427, ctx.r31.u8);
	// stb r31,5428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5428, ctx.r31.u8);
	// stb r7,5429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5429, ctx.r7.u8);
	// stb r23,5430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5430, ctx.r23.u8);
	// stb r31,5431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5431, ctx.r31.u8);
	// stb r31,5432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5432, ctx.r31.u8);
	// stb r31,5433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5433, ctx.r31.u8);
	// stb r31,5434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5434, ctx.r31.u8);
	// stb r31,5435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5435, ctx.r31.u8);
	// stb r31,5436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5436, ctx.r31.u8);
	// stb r31,5437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5437, ctx.r31.u8);
	// stb r6,5438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5438, ctx.r6.u8);
	// stb r31,5439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5439, ctx.r31.u8);
	// stb r31,5440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5440, ctx.r31.u8);
	// stb r31,5441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5441, ctx.r31.u8);
	// stb r31,5442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5442, ctx.r31.u8);
	// stb r31,5443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5443, ctx.r31.u8);
	// stb r31,5444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5444, ctx.r31.u8);
	// stb r31,5445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5445, ctx.r31.u8);
	// stb r31,5446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5446, ctx.r31.u8);
	// stb r31,5447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5447, ctx.r31.u8);
	// stb r31,5448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5448, ctx.r31.u8);
	// stb r7,5449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5449, ctx.r7.u8);
	// stb r28,5450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5450, ctx.r28.u8);
	// stb r31,5451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5451, ctx.r31.u8);
	// stb r31,5452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5452, ctx.r31.u8);
	// stb r31,5453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5453, ctx.r31.u8);
	// stb r31,5454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5454, ctx.r31.u8);
	// stb r31,5455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5455, ctx.r31.u8);
	// stb r31,5456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5456, ctx.r31.u8);
	// stb r29,5457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5457, ctx.r29.u8);
	// stb r30,5458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5458, ctx.r30.u8);
	// stb r31,5459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5459, ctx.r31.u8);
	// stb r31,5460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5460, ctx.r31.u8);
	// stb r31,5461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5461, ctx.r31.u8);
	// stb r31,5462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5462, ctx.r31.u8);
	// stb r31,5463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5463, ctx.r31.u8);
	// stb r31,5464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5464, ctx.r31.u8);
	// stb r31,5465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5465, ctx.r31.u8);
	// stb r6,5466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5466, ctx.r6.u8);
	// stb r31,5467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5467, ctx.r31.u8);
	// stb r31,5468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5468, ctx.r31.u8);
	// stb r31,5469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5469, ctx.r31.u8);
	// stb r31,5470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5470, ctx.r31.u8);
	// stb r31,5471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5471, ctx.r31.u8);
	// stb r31,5472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5472, ctx.r31.u8);
	// stb r31,5473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5473, ctx.r31.u8);
	// stb r31,5474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5474, ctx.r31.u8);
	// stb r31,5475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5475, ctx.r31.u8);
	// stb r31,5476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5476, ctx.r31.u8);
	// stb r26,5477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5477, ctx.r26.u8);
	// stb r25,5478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5478, ctx.r25.u8);
	// stb r31,5479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5479, ctx.r31.u8);
	// stb r31,5480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5480, ctx.r31.u8);
	// stb r31,5481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5481, ctx.r31.u8);
	// stb r31,5482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5482, ctx.r31.u8);
	// stb r31,5483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5483, ctx.r31.u8);
	// stb r31,5484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5484, ctx.r31.u8);
	// stb r9,5485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5485, ctx.r9.u8);
	// stb r8,5486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5486, ctx.r8.u8);
	// stb r31,5487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5487, ctx.r31.u8);
	// stb r31,5488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5488, ctx.r31.u8);
	// stb r31,5489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5489, ctx.r31.u8);
	// stb r31,5490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5490, ctx.r31.u8);
	// stb r31,5491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5491, ctx.r31.u8);
	// stb r31,5492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5492, ctx.r31.u8);
	// stb r31,5493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5493, ctx.r31.u8);
	// stb r31,5494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5494, ctx.r31.u8);
	// stb r31,5495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5495, ctx.r31.u8);
	// stb r31,5496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5496, ctx.r31.u8);
	// stb r31,5497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5497, ctx.r31.u8);
	// stb r31,5498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5498, ctx.r31.u8);
	// stb r31,5499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5499, ctx.r31.u8);
	// stb r31,5500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5500, ctx.r31.u8);
	// stb r31,5501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5501, ctx.r31.u8);
	// stb r31,5502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5502, ctx.r31.u8);
	// stb r31,5503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5503, ctx.r31.u8);
	// stb r31,5504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5504, ctx.r31.u8);
	// stb r3,5505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5505, ctx.r3.u8);
	// stb r28,5506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5506, ctx.r28.u8);
	// stb r31,5507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5507, ctx.r31.u8);
	// stb r31,5508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5508, ctx.r31.u8);
	// stb r31,5509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5509, ctx.r31.u8);
	// stb r31,5510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5510, ctx.r31.u8);
	// stb r31,5511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5511, ctx.r31.u8);
	// stb r31,5512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5512, ctx.r31.u8);
	// stb r4,5513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5513, ctx.r4.u8);
	// stb r27,5514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5514, ctx.r27.u8);
	// stb r31,5515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5515, ctx.r31.u8);
	// stb r31,5516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5516, ctx.r31.u8);
	// stb r31,5517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5517, ctx.r31.u8);
	// stb r31,5518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5518, ctx.r31.u8);
	// stb r31,5519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5519, ctx.r31.u8);
	// stb r31,5520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5520, ctx.r31.u8);
	// stb r31,5521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5521, ctx.r31.u8);
	// stb r6,5522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5522, ctx.r6.u8);
	// stb r31,5523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5523, ctx.r31.u8);
	// stb r31,5524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5524, ctx.r31.u8);
	// stb r31,5525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5525, ctx.r31.u8);
	// stb r31,5526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5526, ctx.r31.u8);
	// stb r5,5527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5527, ctx.r5.u8);
	// stb r5,5528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5528, ctx.r5.u8);
	// stb r5,5529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5529, ctx.r5.u8);
	// stb r5,5530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5530, ctx.r5.u8);
	// stb r31,5531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5531, ctx.r31.u8);
	// stb r31,5532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5532, ctx.r31.u8);
	// stb r9,5533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5533, ctx.r9.u8);
	// stb r17,5534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5534, ctx.r17.u8);
	// stb r31,5535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5535, ctx.r31.u8);
	// stb r31,5536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5536, ctx.r31.u8);
	// stb r31,5537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5537, ctx.r31.u8);
	// stb r31,5538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5538, ctx.r31.u8);
	// stb r31,5539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5539, ctx.r31.u8);
	// stb r31,5540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5540, ctx.r31.u8);
	// stb r9,5541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5541, ctx.r9.u8);
	// stb r8,5542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5542, ctx.r8.u8);
	// stb r31,5543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5543, ctx.r31.u8);
	// stb r31,5544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5544, ctx.r31.u8);
	// stb r31,5545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5545, ctx.r31.u8);
	// stb r31,5546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5546, ctx.r31.u8);
	// stb r31,5547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5547, ctx.r31.u8);
	// stb r31,5548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5548, ctx.r31.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,5549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5549, ctx.r31.u8);
	// stb r31,5550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5550, ctx.r31.u8);
	// stb r31,5551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5551, ctx.r31.u8);
	// stb r31,5552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5552, ctx.r31.u8);
	// stb r31,5553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5553, ctx.r31.u8);
	// stb r31,5554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5554, ctx.r31.u8);
	// stb r31,5555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5555, ctx.r31.u8);
	// stb r31,5556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5556, ctx.r31.u8);
	// stb r31,5557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5557, ctx.r31.u8);
	// stb r31,5558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5558, ctx.r31.u8);
	// stb r31,5559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5559, ctx.r31.u8);
	// stb r31,5560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5560, ctx.r31.u8);
	// stb r9,5561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5561, ctx.r9.u8);
	// stb r11,5562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5562, ctx.r11.u8);
	// stb r31,5563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5563, ctx.r31.u8);
	// stb r31,5564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5564, ctx.r31.u8);
	// stb r31,5565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5565, ctx.r31.u8);
	// stb r31,5566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5566, ctx.r31.u8);
	// stb r31,5567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5567, ctx.r31.u8);
	// stb r31,5568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5568, ctx.r31.u8);
	// stb r9,5569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5569, ctx.r9.u8);
	// stb r8,5570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5570, ctx.r8.u8);
	// stb r31,5571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5571, ctx.r31.u8);
	// stb r31,5572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5572, ctx.r31.u8);
	// stb r31,5573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5573, ctx.r31.u8);
	// stb r31,5574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5574, ctx.r31.u8);
	// stb r31,5575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5575, ctx.r31.u8);
	// stb r31,5576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5576, ctx.r31.u8);
	// stb r31,5577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5577, ctx.r31.u8);
	// stb r31,5578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5578, ctx.r31.u8);
	// stb r31,5579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5579, ctx.r31.u8);
	// stb r31,5580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5580, ctx.r31.u8);
	// stb r31,5581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5581, ctx.r31.u8);
	// stb r31,5582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5582, ctx.r31.u8);
	// stb r31,5583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5583, ctx.r31.u8);
	// stb r31,5584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5584, ctx.r31.u8);
	// stb r31,5585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5585, ctx.r31.u8);
	// stb r31,5586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5586, ctx.r31.u8);
	// stb r31,5587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5587, ctx.r31.u8);
	// stb r31,5588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5588, ctx.r31.u8);
	// stb r26,5589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5589, ctx.r26.u8);
	// stb r10,5590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5590, ctx.r10.u8);
	// stb r31,5591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5591, ctx.r31.u8);
	// stb r31,5592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5592, ctx.r31.u8);
	// stb r31,5593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5593, ctx.r31.u8);
	// stb r31,5594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5594, ctx.r31.u8);
	// stb r31,5595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5595, ctx.r31.u8);
	// stb r31,5596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5596, ctx.r31.u8);
	// stb r9,5597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5597, ctx.r9.u8);
	// stb r8,5598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5598, ctx.r8.u8);
	// stb r31,5599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5599, ctx.r31.u8);
	// stb r31,5600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5600, ctx.r31.u8);
	// stb r31,5601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5601, ctx.r31.u8);
	// stb r31,5602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5602, ctx.r31.u8);
	// stb r31,5603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5603, ctx.r31.u8);
	// stb r31,5604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5604, ctx.r31.u8);
	// stb r31,5605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5605, ctx.r31.u8);
	// stb r31,5606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5606, ctx.r31.u8);
	// stb r31,5607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5607, ctx.r31.u8);
	// stb r31,5608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5608, ctx.r31.u8);
	// stb r31,5609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5609, ctx.r31.u8);
	// stb r31,5610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5610, ctx.r31.u8);
	// stb r31,5611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5611, ctx.r31.u8);
	// stb r31,5612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5612, ctx.r31.u8);
	// stb r31,5613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5613, ctx.r31.u8);
	// stb r31,5614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5614, ctx.r31.u8);
	// stb r31,5615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5615, ctx.r31.u8);
	// stb r31,5616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5616, ctx.r31.u8);
	// stb r26,5617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5617, ctx.r26.u8);
	// stb r15,5618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5618, ctx.r15.u8);
	// stb r31,5619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5619, ctx.r31.u8);
	// stb r31,5620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5620, ctx.r31.u8);
	// stb r31,5621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5621, ctx.r31.u8);
	// stb r31,5622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5622, ctx.r31.u8);
	// stb r31,5623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5623, ctx.r31.u8);
	// stb r31,5624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5624, ctx.r31.u8);
	// stb r9,5625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5625, ctx.r9.u8);
	// stb r8,5626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5626, ctx.r8.u8);
	// stb r31,5627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5627, ctx.r31.u8);
	// stb r31,5628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5628, ctx.r31.u8);
	// stb r31,5629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5629, ctx.r31.u8);
	// stb r31,5630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5630, ctx.r31.u8);
	// stb r31,5631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5631, ctx.r31.u8);
	// stb r31,5632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5632, ctx.r31.u8);
	// stb r31,5633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5633, ctx.r31.u8);
	// stb r31,5634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5634, ctx.r31.u8);
	// stb r31,5635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5635, ctx.r31.u8);
	// stb r31,5636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5636, ctx.r31.u8);
	// stb r31,5637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5637, ctx.r31.u8);
	// stb r31,5638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5638, ctx.r31.u8);
	// stb r31,5639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5639, ctx.r31.u8);
	// stb r31,5640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5640, ctx.r31.u8);
	// stb r31,5641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5641, ctx.r31.u8);
	// stb r31,5642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5642, ctx.r31.u8);
	// stb r31,5643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5643, ctx.r31.u8);
	// stb r31,5644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5644, ctx.r31.u8);
	// stb r17,5645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5645, ctx.r17.u8);
	// stb r19,5646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5646, ctx.r19.u8);
	// stb r31,5647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5647, ctx.r31.u8);
	// stb r31,5648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5648, ctx.r31.u8);
	// stb r31,5649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5649, ctx.r31.u8);
	// stb r31,5650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5650, ctx.r31.u8);
	// stb r31,5651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5651, ctx.r31.u8);
	// stb r31,5652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5652, ctx.r31.u8);
	// stb r29,5653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5653, ctx.r29.u8);
	// stb r30,5654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5654, ctx.r30.u8);
	// stb r31,5655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5655, ctx.r31.u8);
	// stb r31,5656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5656, ctx.r31.u8);
	// stb r31,5657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5657, ctx.r31.u8);
	// stb r31,5658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5658, ctx.r31.u8);
	// stb r31,5659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5659, ctx.r31.u8);
	// stb r31,5660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5660, ctx.r31.u8);
	// stb r31,5661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5661, ctx.r31.u8);
	// stb r6,5662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5662, ctx.r6.u8);
	// stb r31,5663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5663, ctx.r31.u8);
	// stb r31,5664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5664, ctx.r31.u8);
	// stb r31,5665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5665, ctx.r31.u8);
	// stb r31,5666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5666, ctx.r31.u8);
	// stb r31,5667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5667, ctx.r31.u8);
	// stb r31,5668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5668, ctx.r31.u8);
	// stb r31,5669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5669, ctx.r31.u8);
	// stb r31,5670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5670, ctx.r31.u8);
	// stb r31,5671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5671, ctx.r31.u8);
	// stb r31,5672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5672, ctx.r31.u8);
	// stb r26,5673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5673, ctx.r26.u8);
	// stb r20,5674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5674, ctx.r20.u8);
	// stb r31,5675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5675, ctx.r31.u8);
	// stb r31,5676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5676, ctx.r31.u8);
	// stb r31,5677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5677, ctx.r31.u8);
	// stb r31,5678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5678, ctx.r31.u8);
	// stb r31,5679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5679, ctx.r31.u8);
	// stb r31,5680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5680, ctx.r31.u8);
	// stb r9,5681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5681, ctx.r9.u8);
	// stb r8,5682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5682, ctx.r8.u8);
	// stb r31,5683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5683, ctx.r31.u8);
	// stb r31,5684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5684, ctx.r31.u8);
	// stb r31,5685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5685, ctx.r31.u8);
	// stb r31,5686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5686, ctx.r31.u8);
	// stb r31,5687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5687, ctx.r31.u8);
	// stb r31,5688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5688, ctx.r31.u8);
	// stb r31,5689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5689, ctx.r31.u8);
	// stb r31,5690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5690, ctx.r31.u8);
	// stb r31,5691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5691, ctx.r31.u8);
	// stb r31,5692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5692, ctx.r31.u8);
	// stb r31,5693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5693, ctx.r31.u8);
	// stb r31,5694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5694, ctx.r31.u8);
	// stb r31,5695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5695, ctx.r31.u8);
	// stb r31,5696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5696, ctx.r31.u8);
	// stb r31,5697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5697, ctx.r31.u8);
	// stb r31,5698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5698, ctx.r31.u8);
	// stb r31,5699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5699, ctx.r31.u8);
	// stb r31,5700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5700, ctx.r31.u8);
	// stb r9,5701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5701, ctx.r9.u8);
	// stb r4,5702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5702, ctx.r4.u8);
	// stb r31,5703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5703, ctx.r31.u8);
	// stb r31,5704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5704, ctx.r31.u8);
	// stb r31,5705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5705, ctx.r31.u8);
	// stb r31,5706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5706, ctx.r31.u8);
	// stb r31,5707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5707, ctx.r31.u8);
	// stb r31,5708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5708, ctx.r31.u8);
	// stb r9,5709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5709, ctx.r9.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r8,5710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5710, ctx.r8.u8);
	// stb r31,5711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5711, ctx.r31.u8);
	// stb r31,5712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5712, ctx.r31.u8);
	// stb r31,5713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5713, ctx.r31.u8);
	// stb r31,5714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5714, ctx.r31.u8);
	// stb r31,5715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5715, ctx.r31.u8);
	// stb r31,5716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5716, ctx.r31.u8);
	// stb r31,5717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5717, ctx.r31.u8);
	// stb r31,5718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5718, ctx.r31.u8);
	// stb r31,5719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5719, ctx.r31.u8);
	// stb r31,5720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5720, ctx.r31.u8);
	// stb r31,5721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5721, ctx.r31.u8);
	// stb r31,5722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5722, ctx.r31.u8);
	// stb r31,5723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5723, ctx.r31.u8);
	// stb r31,5724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5724, ctx.r31.u8);
	// stb r31,5725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5725, ctx.r31.u8);
	// stb r26,5726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5726, ctx.r26.u8);
	// stb r31,5727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5727, ctx.r31.u8);
	// stb r31,5728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5728, ctx.r31.u8);
	// stb r26,5729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5729, ctx.r26.u8);
	// stb r16,5730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5730, ctx.r16.u8);
	// stb r31,5731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5731, ctx.r31.u8);
	// stb r31,5732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5732, ctx.r31.u8);
	// stb r31,5733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5733, ctx.r31.u8);
	// stb r31,5734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5734, ctx.r31.u8);
	// stb r31,5735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5735, ctx.r31.u8);
	// stb r31,5736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5736, ctx.r31.u8);
	// stb r9,5737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5737, ctx.r9.u8);
	// stb r8,5738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5738, ctx.r8.u8);
	// stb r31,5739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5739, ctx.r31.u8);
	// stb r31,5740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5740, ctx.r31.u8);
	// stb r31,5741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5741, ctx.r31.u8);
	// stb r31,5742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5742, ctx.r31.u8);
	// stb r31,5743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5743, ctx.r31.u8);
	// stb r31,5744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5744, ctx.r31.u8);
	// stb r31,5745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5745, ctx.r31.u8);
	// stb r31,5746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5746, ctx.r31.u8);
	// stb r31,5747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5747, ctx.r31.u8);
	// stb r31,5748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5748, ctx.r31.u8);
	// stb r31,5749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5749, ctx.r31.u8);
	// stb r31,5750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5750, ctx.r31.u8);
	// stb r31,5751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5751, ctx.r31.u8);
	// stb r31,5752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5752, ctx.r31.u8);
	// stb r31,5753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5753, ctx.r31.u8);
	// stb r31,5754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5754, ctx.r31.u8);
	// stb r31,5755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5755, ctx.r31.u8);
	// stb r31,5756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5756, ctx.r31.u8);
	// stb r3,5757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5757, ctx.r3.u8);
	// stb r21,5758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5758, ctx.r21.u8);
	// stb r31,5759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5759, ctx.r31.u8);
	// stb r31,5760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5760, ctx.r31.u8);
	// stb r31,5761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5761, ctx.r31.u8);
	// stb r31,5762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5762, ctx.r31.u8);
	// stb r31,5763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5763, ctx.r31.u8);
	// stb r31,5764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5764, ctx.r31.u8);
	// stb r7,5765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5765, ctx.r7.u8);
	// stb r17,5766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5766, ctx.r17.u8);
	// stb r31,5767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5767, ctx.r31.u8);
	// stb r31,5768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5768, ctx.r31.u8);
	// stb r31,5769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5769, ctx.r31.u8);
	// stb r31,5770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5770, ctx.r31.u8);
	// stb r31,5771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5771, ctx.r31.u8);
	// stb r31,5772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5772, ctx.r31.u8);
	// stb r3,5773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5773, ctx.r3.u8);
	// stb r11,5774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5774, ctx.r11.u8);
	// stb r31,5775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5775, ctx.r31.u8);
	// stb r31,5776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5776, ctx.r31.u8);
	// stb r31,5777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5777, ctx.r31.u8);
	// stb r31,5778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5778, ctx.r31.u8);
	// stb r31,5779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5779, ctx.r31.u8);
	// stb r31,5780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5780, ctx.r31.u8);
	// stb r31,5781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5781, ctx.r31.u8);
	// stb r7,5782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5782, ctx.r7.u8);
	// stb r31,5783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5783, ctx.r31.u8);
	// stb r31,5784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5784, ctx.r31.u8);
	// stb r31,5785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5785, ctx.r31.u8);
	// stb r31,5786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5786, ctx.r31.u8);
	// stb r31,5787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5787, ctx.r31.u8);
	// stb r31,5788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5788, ctx.r31.u8);
	// stb r18,5789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5789, ctx.r18.u8);
	// li r11,73
	ctx.r11.s64 = 73;
	// stb r31,5791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5791, ctx.r31.u8);
	// stb r31,5792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5792, ctx.r31.u8);
	// stb r31,5793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5793, ctx.r31.u8);
	// stb r31,5794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5794, ctx.r31.u8);
	// stb r31,5795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5795, ctx.r31.u8);
	// stb r11,5790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5790, ctx.r11.u8);
	// stb r31,5796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5796, ctx.r31.u8);
	// stb r7,5797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5797, ctx.r7.u8);
	// stb r7,5798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5798, ctx.r7.u8);
	// stb r31,5799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5799, ctx.r31.u8);
	// stb r31,5800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5800, ctx.r31.u8);
	// stb r31,5801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5801, ctx.r31.u8);
	// stb r31,5802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5802, ctx.r31.u8);
	// stb r31,5803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5803, ctx.r31.u8);
	// stb r31,5804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5804, ctx.r31.u8);
	// stb r24,5805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5805, ctx.r24.u8);
	// stb r22,5806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5806, ctx.r22.u8);
	// stb r31,5807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5807, ctx.r31.u8);
	// stb r31,5808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5808, ctx.r31.u8);
	// stb r31,5809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5809, ctx.r31.u8);
	// stb r31,5810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5810, ctx.r31.u8);
	// stb r31,5811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5811, ctx.r31.u8);
	// stb r31,5812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5812, ctx.r31.u8);
	// stb r31,5813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5813, ctx.r31.u8);
	// stb r6,5814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5814, ctx.r6.u8);
	// stb r31,5815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5815, ctx.r31.u8);
	// stb r31,5816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5816, ctx.r31.u8);
	// stb r31,5817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5817, ctx.r31.u8);
	// stb r31,5818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5818, ctx.r31.u8);
	// stb r31,5819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5819, ctx.r31.u8);
	// stb r31,5820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5820, ctx.r31.u8);
	// stb r31,5821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5821, ctx.r31.u8);
	// stb r31,5822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5822, ctx.r31.u8);
	// stb r31,5823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5823, ctx.r31.u8);
	// stb r31,5824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5824, ctx.r31.u8);
	// stb r7,5825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5825, ctx.r7.u8);
	// stb r24,5826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5826, ctx.r24.u8);
	// stb r31,5827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5827, ctx.r31.u8);
	// stb r31,5828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5828, ctx.r31.u8);
	// stb r31,5829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5829, ctx.r31.u8);
	// stb r31,5830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5830, ctx.r31.u8);
	// stb r31,5831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5831, ctx.r31.u8);
	// stb r31,5832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5832, ctx.r31.u8);
	// stb r24,5833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5833, ctx.r24.u8);
	// stb r22,5834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5834, ctx.r22.u8);
	// stb r31,5835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5835, ctx.r31.u8);
	// stb r31,5836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5836, ctx.r31.u8);
	// stb r31,5837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5837, ctx.r31.u8);
	// stb r31,5838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5838, ctx.r31.u8);
	// stb r31,5839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5839, ctx.r31.u8);
	// stb r31,5840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5840, ctx.r31.u8);
	// stb r31,5841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5841, ctx.r31.u8);
	// stb r6,5842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5842, ctx.r6.u8);
	// stb r31,5843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5843, ctx.r31.u8);
	// stb r31,5844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5844, ctx.r31.u8);
	// stb r31,5845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5845, ctx.r31.u8);
	// stb r31,5846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5846, ctx.r31.u8);
	// stb r31,5847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5847, ctx.r31.u8);
	// stb r31,5848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5848, ctx.r31.u8);
	// stb r31,5849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5849, ctx.r31.u8);
	// stb r31,5850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5850, ctx.r31.u8);
	// stb r31,5851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5851, ctx.r31.u8);
	// stb r31,5852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5852, ctx.r31.u8);
	// stb r7,5853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5853, ctx.r7.u8);
	// stb r14,5854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5854, ctx.r14.u8);
	// stb r31,5855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5855, ctx.r31.u8);
	// stb r31,5856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5856, ctx.r31.u8);
	// stb r31,5857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5857, ctx.r31.u8);
	// stb r31,5858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5858, ctx.r31.u8);
	// stb r31,5859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5859, ctx.r31.u8);
	// stb r31,5860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5860, ctx.r31.u8);
	// stb r7,5861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5861, ctx.r7.u8);
	// stb r23,5862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5862, ctx.r23.u8);
	// stb r31,5863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5863, ctx.r31.u8);
	// stb r31,5864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5864, ctx.r31.u8);
	// stb r31,5865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5865, ctx.r31.u8);
	// stb r31,5866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5866, ctx.r31.u8);
	// stb r31,5867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5867, ctx.r31.u8);
	// stb r31,5868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5868, ctx.r31.u8);
	// stb r31,5869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5869, ctx.r31.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r6,5870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5870, ctx.r6.u8);
	// stb r31,5871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5871, ctx.r31.u8);
	// stb r31,5872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5872, ctx.r31.u8);
	// stb r31,5873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5873, ctx.r31.u8);
	// stb r31,5874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5874, ctx.r31.u8);
	// stb r11,5903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5903, ctx.r11.u8);
	// li r11,195
	ctx.r11.s64 = 195;
	// stb r31,5875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5875, ctx.r31.u8);
	// stb r31,5876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5876, ctx.r31.u8);
	// stb r31,5877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5877, ctx.r31.u8);
	// stb r31,5878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5878, ctx.r31.u8);
	// stb r11,5904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5904, ctx.r11.u8);
	// li r11,80
	ctx.r11.s64 = 80;
	// stb r31,5879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5879, ctx.r31.u8);
	// stb r31,5880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5880, ctx.r31.u8);
	// stb r7,5881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5881, ctx.r7.u8);
	// stb r28,5882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5882, ctx.r28.u8);
	// stb r31,5883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5883, ctx.r31.u8);
	// stb r31,5884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5884, ctx.r31.u8);
	// stb r31,5885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5885, ctx.r31.u8);
	// stb r31,5886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5886, ctx.r31.u8);
	// stb r31,5887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5887, ctx.r31.u8);
	// stb r31,5888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5888, ctx.r31.u8);
	// stb r29,5889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5889, ctx.r29.u8);
	// stb r30,5890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5890, ctx.r30.u8);
	// stb r31,5891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5891, ctx.r31.u8);
	// stb r31,5892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5892, ctx.r31.u8);
	// stb r31,5893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5893, ctx.r31.u8);
	// stb r31,5894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5894, ctx.r31.u8);
	// stb r31,5895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5895, ctx.r31.u8);
	// stb r31,5896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5896, ctx.r31.u8);
	// stb r31,5897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5897, ctx.r31.u8);
	// stb r6,5898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5898, ctx.r6.u8);
	// stb r31,5899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5899, ctx.r31.u8);
	// stb r31,5900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5900, ctx.r31.u8);
	// stb r31,5901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5901, ctx.r31.u8);
	// stb r31,5902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5902, ctx.r31.u8);
	// stb r11,5905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5905, ctx.r11.u8);
	// stb r31,5906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5906, ctx.r31.u8);
	// stb r31,5907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5907, ctx.r31.u8);
	// stb r31,5908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5908, ctx.r31.u8);
	// stb r26,5909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5909, ctx.r26.u8);
	// stb r25,5910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5910, ctx.r25.u8);
	// stb r31,5911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5911, ctx.r31.u8);
	// stb r31,5912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5912, ctx.r31.u8);
	// stb r31,5913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5913, ctx.r31.u8);
	// stb r31,5914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5914, ctx.r31.u8);
	// stb r31,5915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5915, ctx.r31.u8);
	// stb r31,5916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5916, ctx.r31.u8);
	// stb r9,5917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5917, ctx.r9.u8);
	// stb r8,5918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5918, ctx.r8.u8);
	// stb r31,5919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5919, ctx.r31.u8);
	// stb r31,5920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5920, ctx.r31.u8);
	// stb r31,5921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5921, ctx.r31.u8);
	// stb r31,5922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5922, ctx.r31.u8);
	// stb r31,5923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5923, ctx.r31.u8);
	// stb r31,5924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5924, ctx.r31.u8);
	// stb r31,5925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5925, ctx.r31.u8);
	// stb r31,5926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5926, ctx.r31.u8);
	// stb r31,5927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5927, ctx.r31.u8);
	// stb r31,5928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5928, ctx.r31.u8);
	// stb r31,5929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5929, ctx.r31.u8);
	// stb r31,5930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5930, ctx.r31.u8);
	// stb r31,5931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5931, ctx.r31.u8);
	// stb r31,5932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5932, ctx.r31.u8);
	// stb r31,5933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5933, ctx.r31.u8);
	// stb r31,5934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5934, ctx.r31.u8);
	// stb r31,5935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5935, ctx.r31.u8);
	// stb r31,5936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5936, ctx.r31.u8);
	// stb r3,5937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5937, ctx.r3.u8);
	// stb r28,5938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5938, ctx.r28.u8);
	// stb r31,5939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5939, ctx.r31.u8);
	// stb r31,5940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5940, ctx.r31.u8);
	// stb r31,5941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5941, ctx.r31.u8);
	// stb r31,5942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5942, ctx.r31.u8);
	// stb r31,5943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5943, ctx.r31.u8);
	// stb r31,5944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5944, ctx.r31.u8);
	// stb r4,5945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5945, ctx.r4.u8);
	// stb r27,5946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5946, ctx.r27.u8);
	// stb r31,5947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5947, ctx.r31.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,5948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5948, ctx.r31.u8);
	// stb r31,5949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5949, ctx.r31.u8);
	// stb r31,5950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5950, ctx.r31.u8);
	// stb r31,5951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5951, ctx.r31.u8);
	// stb r31,5952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5952, ctx.r31.u8);
	// stb r31,5953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5953, ctx.r31.u8);
	// stb r6,5954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5954, ctx.r6.u8);
	// stb r31,5955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5955, ctx.r31.u8);
	// stb r31,5956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5956, ctx.r31.u8);
	// stb r31,5957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5957, ctx.r31.u8);
	// stb r31,5958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5958, ctx.r31.u8);
	// stb r5,5959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5959, ctx.r5.u8);
	// stb r5,5960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5960, ctx.r5.u8);
	// stb r5,5961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5961, ctx.r5.u8);
	// stb r5,5962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5962, ctx.r5.u8);
	// stb r31,5963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5963, ctx.r31.u8);
	// stb r31,5964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5964, ctx.r31.u8);
	// stb r9,5965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5965, ctx.r9.u8);
	// stb r17,5966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5966, ctx.r17.u8);
	// stb r31,5967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5967, ctx.r31.u8);
	// stb r31,5968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5968, ctx.r31.u8);
	// stb r31,5969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5969, ctx.r31.u8);
	// stb r31,5970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5970, ctx.r31.u8);
	// stb r31,5971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5971, ctx.r31.u8);
	// stb r31,5972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5972, ctx.r31.u8);
	// stb r9,5973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5973, ctx.r9.u8);
	// stb r8,5974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5974, ctx.r8.u8);
	// stb r31,5975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5975, ctx.r31.u8);
	// stb r31,5976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5976, ctx.r31.u8);
	// stb r31,5977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5977, ctx.r31.u8);
	// stb r31,5978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5978, ctx.r31.u8);
	// stb r31,5979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5979, ctx.r31.u8);
	// stb r31,5980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5980, ctx.r31.u8);
	// stb r31,5981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5981, ctx.r31.u8);
	// stb r31,5982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5982, ctx.r31.u8);
	// stb r31,5983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5983, ctx.r31.u8);
	// stb r31,5984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5984, ctx.r31.u8);
	// stb r31,5985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5985, ctx.r31.u8);
	// stb r31,5986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5986, ctx.r31.u8);
	// stb r31,5987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5987, ctx.r31.u8);
	// stb r31,5988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5988, ctx.r31.u8);
	// stb r31,5989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5989, ctx.r31.u8);
	// stb r31,5990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5990, ctx.r31.u8);
	// stb r31,5991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5991, ctx.r31.u8);
	// stb r31,5992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5992, ctx.r31.u8);
	// stb r9,5993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5993, ctx.r9.u8);
	// stb r11,5994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5994, ctx.r11.u8);
	// stb r31,5995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5995, ctx.r31.u8);
	// stb r31,5996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5996, ctx.r31.u8);
	// stb r31,5997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5997, ctx.r31.u8);
	// stb r31,5998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5998, ctx.r31.u8);
	// stb r31,5999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 5999, ctx.r31.u8);
	// stb r31,6000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6000, ctx.r31.u8);
	// stb r9,6001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6001, ctx.r9.u8);
	// stb r8,6002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6002, ctx.r8.u8);
	// stb r31,6003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6003, ctx.r31.u8);
	// stb r31,6004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6004, ctx.r31.u8);
	// stb r31,6005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6005, ctx.r31.u8);
	// stb r31,6006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6006, ctx.r31.u8);
	// stb r31,6007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6007, ctx.r31.u8);
	// stb r31,6008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6008, ctx.r31.u8);
	// stb r31,6009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6009, ctx.r31.u8);
	// stb r31,6010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6010, ctx.r31.u8);
	// stb r31,6011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6011, ctx.r31.u8);
	// stb r31,6012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6012, ctx.r31.u8);
	// stb r31,6013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6013, ctx.r31.u8);
	// stb r31,6014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6014, ctx.r31.u8);
	// stb r31,6015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6015, ctx.r31.u8);
	// stb r31,6016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6016, ctx.r31.u8);
	// stb r31,6017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6017, ctx.r31.u8);
	// stb r31,6018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6018, ctx.r31.u8);
	// stb r31,6019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6019, ctx.r31.u8);
	// stb r31,6020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6020, ctx.r31.u8);
	// stb r26,6021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6021, ctx.r26.u8);
	// stb r10,6022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6022, ctx.r10.u8);
	// stb r31,6023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6023, ctx.r31.u8);
	// stb r31,6024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6024, ctx.r31.u8);
	// stb r31,6025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6025, ctx.r31.u8);
	// stb r31,6026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6026, ctx.r31.u8);
	// stb r31,6027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6027, ctx.r31.u8);
	// stb r31,6028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6028, ctx.r31.u8);
	// stb r9,6029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6029, ctx.r9.u8);
	// stb r8,6030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6030, ctx.r8.u8);
	// stb r31,6031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6031, ctx.r31.u8);
	// stb r31,6032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6032, ctx.r31.u8);
	// stb r31,6033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6033, ctx.r31.u8);
	// stb r31,6034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6034, ctx.r31.u8);
	// stb r31,6035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6035, ctx.r31.u8);
	// stb r31,6036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6036, ctx.r31.u8);
	// stb r31,6037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6037, ctx.r31.u8);
	// stb r31,6038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6038, ctx.r31.u8);
	// stb r31,6039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6039, ctx.r31.u8);
	// stb r31,6040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6040, ctx.r31.u8);
	// stb r31,6041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6041, ctx.r31.u8);
	// stb r31,6042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6042, ctx.r31.u8);
	// stb r31,6043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6043, ctx.r31.u8);
	// stb r31,6044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6044, ctx.r31.u8);
	// stb r31,6045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6045, ctx.r31.u8);
	// stb r31,6046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6046, ctx.r31.u8);
	// stb r31,6047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6047, ctx.r31.u8);
	// stb r31,6048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6048, ctx.r31.u8);
	// stb r26,6049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6049, ctx.r26.u8);
	// stb r15,6050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6050, ctx.r15.u8);
	// stb r31,6051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6051, ctx.r31.u8);
	// stb r31,6052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6052, ctx.r31.u8);
	// stb r31,6053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6053, ctx.r31.u8);
	// stb r31,6054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6054, ctx.r31.u8);
	// stb r31,6055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6055, ctx.r31.u8);
	// stb r31,6056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6056, ctx.r31.u8);
	// stb r9,6057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6057, ctx.r9.u8);
	// stb r8,6058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6058, ctx.r8.u8);
	// stb r31,6059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6059, ctx.r31.u8);
	// stb r31,6060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6060, ctx.r31.u8);
	// stb r31,6061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6061, ctx.r31.u8);
	// stb r31,6062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6062, ctx.r31.u8);
	// stb r31,6063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6063, ctx.r31.u8);
	// stb r31,6064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6064, ctx.r31.u8);
	// stb r31,6065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6065, ctx.r31.u8);
	// stb r31,6066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6066, ctx.r31.u8);
	// stb r31,6067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6067, ctx.r31.u8);
	// stb r31,6068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6068, ctx.r31.u8);
	// stb r31,6069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6069, ctx.r31.u8);
	// stb r31,6070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6070, ctx.r31.u8);
	// stb r31,6071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6071, ctx.r31.u8);
	// stb r31,6072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6072, ctx.r31.u8);
	// stb r31,6073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6073, ctx.r31.u8);
	// stb r31,6074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6074, ctx.r31.u8);
	// stb r31,6075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6075, ctx.r31.u8);
	// stb r31,6076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6076, ctx.r31.u8);
	// stb r17,6077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6077, ctx.r17.u8);
	// stb r19,6078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6078, ctx.r19.u8);
	// stb r31,6079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6079, ctx.r31.u8);
	// stb r31,6080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6080, ctx.r31.u8);
	// stb r31,6081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6081, ctx.r31.u8);
	// stb r31,6082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6082, ctx.r31.u8);
	// stb r31,6083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6083, ctx.r31.u8);
	// stb r31,6084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6084, ctx.r31.u8);
	// stb r29,6085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6085, ctx.r29.u8);
	// stb r30,6086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6086, ctx.r30.u8);
	// stb r31,6087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6087, ctx.r31.u8);
	// stb r31,6088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6088, ctx.r31.u8);
	// stb r31,6089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6089, ctx.r31.u8);
	// stb r31,6090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6090, ctx.r31.u8);
	// stb r31,6091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6091, ctx.r31.u8);
	// stb r31,6092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6092, ctx.r31.u8);
	// stb r31,6093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6093, ctx.r31.u8);
	// stb r6,6094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6094, ctx.r6.u8);
	// stb r31,6095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6095, ctx.r31.u8);
	// stb r31,6096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6096, ctx.r31.u8);
	// stb r31,6097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6097, ctx.r31.u8);
	// stb r31,6098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6098, ctx.r31.u8);
	// stb r31,6099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6099, ctx.r31.u8);
	// stb r31,6100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6100, ctx.r31.u8);
	// stb r31,6101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6101, ctx.r31.u8);
	// stb r31,6102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6102, ctx.r31.u8);
	// stb r31,6103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6103, ctx.r31.u8);
	// stb r31,6104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6104, ctx.r31.u8);
	// stb r26,6105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6105, ctx.r26.u8);
	// stb r20,6106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6106, ctx.r20.u8);
	// stb r31,6107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6107, ctx.r31.u8);
	// stb r31,6108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6108, ctx.r31.u8);
	// stb r31,6109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6109, ctx.r31.u8);
	// stb r31,6110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6110, ctx.r31.u8);
	// stb r31,6111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6111, ctx.r31.u8);
	// stb r31,6112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6112, ctx.r31.u8);
	// stb r9,6113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6113, ctx.r9.u8);
	// stb r8,6114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6114, ctx.r8.u8);
	// stb r31,6115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6115, ctx.r31.u8);
	// stb r31,6116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6116, ctx.r31.u8);
	// stb r31,6117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6117, ctx.r31.u8);
	// stb r31,6118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6118, ctx.r31.u8);
	// stb r31,6119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6119, ctx.r31.u8);
	// stb r31,6120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6120, ctx.r31.u8);
	// stb r31,6121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6121, ctx.r31.u8);
	// stb r31,6122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6122, ctx.r31.u8);
	// stb r31,6123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6123, ctx.r31.u8);
	// stb r31,6124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6124, ctx.r31.u8);
	// stb r31,6125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6125, ctx.r31.u8);
	// stb r31,6126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6126, ctx.r31.u8);
	// stb r31,6127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6127, ctx.r31.u8);
	// stb r31,6128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6128, ctx.r31.u8);
	// stb r31,6129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6129, ctx.r31.u8);
	// stb r31,6130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6130, ctx.r31.u8);
	// stb r31,6131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6131, ctx.r31.u8);
	// stb r31,6132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6132, ctx.r31.u8);
	// stb r9,6133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6133, ctx.r9.u8);
	// stb r4,6134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6134, ctx.r4.u8);
	// stb r31,6135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6135, ctx.r31.u8);
	// stb r31,6136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6136, ctx.r31.u8);
	// stb r31,6137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6137, ctx.r31.u8);
	// stb r31,6138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6138, ctx.r31.u8);
	// stb r31,6139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6139, ctx.r31.u8);
	// stb r31,6140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6140, ctx.r31.u8);
	// stb r9,6141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6141, ctx.r9.u8);
	// stb r8,6142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6142, ctx.r8.u8);
	// stb r31,6143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6143, ctx.r31.u8);
	// stb r31,6144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6144, ctx.r31.u8);
	// stb r31,6145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6145, ctx.r31.u8);
	// stb r31,6146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6146, ctx.r31.u8);
	// stb r31,6147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6147, ctx.r31.u8);
	// stb r31,6148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6148, ctx.r31.u8);
	// stb r31,6149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6149, ctx.r31.u8);
	// stb r31,6150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6150, ctx.r31.u8);
	// stb r31,6151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6151, ctx.r31.u8);
	// stb r31,6152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6152, ctx.r31.u8);
	// stb r31,6153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6153, ctx.r31.u8);
	// stb r31,6154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6154, ctx.r31.u8);
	// stb r31,6155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6155, ctx.r31.u8);
	// stb r31,6156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6156, ctx.r31.u8);
	// stb r31,6157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6157, ctx.r31.u8);
	// stb r26,6158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6158, ctx.r26.u8);
	// stb r31,6159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6159, ctx.r31.u8);
	// stb r31,6160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6160, ctx.r31.u8);
	// stb r26,6161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6161, ctx.r26.u8);
	// stb r16,6162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6162, ctx.r16.u8);
	// stb r31,6163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6163, ctx.r31.u8);
	// stb r31,6164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6164, ctx.r31.u8);
	// stb r31,6165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6165, ctx.r31.u8);
	// stb r31,6166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6166, ctx.r31.u8);
	// stb r31,6167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6167, ctx.r31.u8);
	// stb r31,6168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6168, ctx.r31.u8);
	// stb r9,6169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6169, ctx.r9.u8);
	// stb r8,6170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6170, ctx.r8.u8);
	// stb r31,6171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6171, ctx.r31.u8);
	// stb r31,6172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6172, ctx.r31.u8);
	// stb r31,6173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6173, ctx.r31.u8);
	// stb r31,6174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6174, ctx.r31.u8);
	// stb r31,6175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6175, ctx.r31.u8);
	// stb r31,6176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6176, ctx.r31.u8);
	// stb r31,6177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6177, ctx.r31.u8);
	// stb r31,6178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6178, ctx.r31.u8);
	// stb r31,6179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6179, ctx.r31.u8);
	// stb r31,6180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6180, ctx.r31.u8);
	// stb r31,6181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6181, ctx.r31.u8);
	// stb r31,6182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6182, ctx.r31.u8);
	// stb r31,6183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6183, ctx.r31.u8);
	// stb r31,6184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6184, ctx.r31.u8);
	// stb r31,6185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6185, ctx.r31.u8);
	// stb r31,6186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6186, ctx.r31.u8);
	// stb r31,6187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6187, ctx.r31.u8);
	// stb r31,6188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6188, ctx.r31.u8);
	// stb r3,6189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6189, ctx.r3.u8);
	// li r11,75
	ctx.r11.s64 = 75;
	// stb r21,6190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6190, ctx.r21.u8);
	// stb r31,6191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6191, ctx.r31.u8);
	// stb r31,6192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6192, ctx.r31.u8);
	// stb r31,6193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6193, ctx.r31.u8);
	// stb r31,6194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6194, ctx.r31.u8);
	// stb r11,6198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6198, ctx.r11.u8);
	// ld r11,6664(r1)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 6664);
	// stb r31,6195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6195, ctx.r31.u8);
	// stb r31,6196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6196, ctx.r31.u8);
	// stb r18,6197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6197, ctx.r18.u8);
	// stb r31,6199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6199, ctx.r31.u8);
	// stb r11,6206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6206, ctx.r11.u8);
	// li r11,180
	ctx.r11.s64 = 180;
	// stb r31,6200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6200, ctx.r31.u8);
	// stb r31,6201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6201, ctx.r31.u8);
	// stb r31,6202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6202, ctx.r31.u8);
	// stb r31,6203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6203, ctx.r31.u8);
	// stb r11,6214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6214, ctx.r11.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r31,6204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6204, ctx.r31.u8);
	// stb r26,6205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6205, ctx.r26.u8);
	// stb r31,6207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6207, ctx.r31.u8);
	// stb r31,6208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6208, ctx.r31.u8);
	// stb r11,6234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6234, ctx.r11.u8);
	// li r11,76
	ctx.r11.s64 = 76;
	// stb r31,6209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6209, ctx.r31.u8);
	// stb r31,6210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6210, ctx.r31.u8);
	// stb r31,6211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6211, ctx.r31.u8);
	// stb r31,6212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6212, ctx.r31.u8);
	// stb r26,6213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6213, ctx.r26.u8);
	// stb r31,6215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6215, ctx.r31.u8);
	// stb r31,6216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6216, ctx.r31.u8);
	// stb r31,6217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6217, ctx.r31.u8);
	// stb r31,6218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6218, ctx.r31.u8);
	// stb r31,6219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6219, ctx.r31.u8);
	// stb r31,6220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6220, ctx.r31.u8);
	// stb r31,6221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6221, ctx.r31.u8);
	// stb r26,6222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6222, ctx.r26.u8);
	// stb r31,6223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6223, ctx.r31.u8);
	// stb r31,6224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6224, ctx.r31.u8);
	// stb r7,6225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6225, ctx.r7.u8);
	// stb r17,6226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6226, ctx.r17.u8);
	// stb r31,6227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6227, ctx.r31.u8);
	// stb r31,6228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6228, ctx.r31.u8);
	// stb r31,6229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6229, ctx.r31.u8);
	// stb r31,6230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6230, ctx.r31.u8);
	// stb r31,6231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6231, ctx.r31.u8);
	// stb r31,6232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6232, ctx.r31.u8);
	// stb r3,6233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6233, ctx.r3.u8);
	// stb r31,6235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6235, ctx.r31.u8);
	// stb r31,6236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6236, ctx.r31.u8);
	// stb r31,6237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6237, ctx.r31.u8);
	// stb r31,6238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6238, ctx.r31.u8);
	// stb r31,6239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6239, ctx.r31.u8);
	// stb r31,6240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6240, ctx.r31.u8);
	// stb r31,6241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6241, ctx.r31.u8);
	// stb r7,6242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6242, ctx.r7.u8);
	// stb r31,6243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6243, ctx.r31.u8);
	// stb r31,6244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6244, ctx.r31.u8);
	// stb r31,6245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6245, ctx.r31.u8);
	// stb r31,6246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6246, ctx.r31.u8);
	// stb r31,6247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6247, ctx.r31.u8);
	// stb r31,6248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6248, ctx.r31.u8);
	// stb r18,6249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6249, ctx.r18.u8);
	// stb r11,6250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6250, ctx.r11.u8);
	// stb r31,6251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6251, ctx.r31.u8);
	// stb r31,6252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6252, ctx.r31.u8);
	// stb r31,6253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6253, ctx.r31.u8);
	// stb r31,6254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6254, ctx.r31.u8);
	// stb r31,6255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6255, ctx.r31.u8);
	// stb r31,6256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6256, ctx.r31.u8);
	// stb r7,6257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6257, ctx.r7.u8);
	// stb r7,6258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6258, ctx.r7.u8);
	// stb r31,6259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6259, ctx.r31.u8);
	// stb r31,6260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6260, ctx.r31.u8);
	// stb r31,6261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6261, ctx.r31.u8);
	// stb r31,6262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6262, ctx.r31.u8);
	// stb r31,6263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6263, ctx.r31.u8);
	// stb r31,6264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6264, ctx.r31.u8);
	// stb r24,6265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6265, ctx.r24.u8);
	// stb r22,6266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6266, ctx.r22.u8);
	// stb r31,6267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6267, ctx.r31.u8);
	// stb r31,6268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6268, ctx.r31.u8);
	// stb r31,6269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6269, ctx.r31.u8);
	// stb r31,6270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6270, ctx.r31.u8);
	// stb r31,6271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6271, ctx.r31.u8);
	// stb r31,6272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6272, ctx.r31.u8);
	// stb r31,6273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6273, ctx.r31.u8);
	// stb r6,6274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6274, ctx.r6.u8);
	// stb r31,6275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6275, ctx.r31.u8);
	// stb r31,6276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6276, ctx.r31.u8);
	// stb r31,6277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6277, ctx.r31.u8);
	// stb r31,6278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6278, ctx.r31.u8);
	// stb r31,6279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6279, ctx.r31.u8);
	// stb r31,6280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6280, ctx.r31.u8);
	// stb r31,6281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6281, ctx.r31.u8);
	// stb r31,6282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6282, ctx.r31.u8);
	// stb r31,6283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6283, ctx.r31.u8);
	// stb r31,6284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6284, ctx.r31.u8);
	// stb r7,6285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6285, ctx.r7.u8);
	// stb r24,6286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6286, ctx.r24.u8);
	// stb r31,6287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6287, ctx.r31.u8);
	// stb r31,6288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6288, ctx.r31.u8);
	// stb r31,6289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6289, ctx.r31.u8);
	// stb r31,6290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6290, ctx.r31.u8);
	// stb r31,6291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6291, ctx.r31.u8);
	// stb r31,6292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6292, ctx.r31.u8);
	// stb r24,6293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6293, ctx.r24.u8);
	// stb r22,6294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6294, ctx.r22.u8);
	// stb r31,6295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6295, ctx.r31.u8);
	// stb r31,6296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6296, ctx.r31.u8);
	// stb r31,6297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6297, ctx.r31.u8);
	// stb r31,6298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6298, ctx.r31.u8);
	// stb r31,6299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6299, ctx.r31.u8);
	// stb r31,6300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6300, ctx.r31.u8);
	// stb r31,6301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6301, ctx.r31.u8);
	// stb r6,6302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6302, ctx.r6.u8);
	// stb r31,6303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6303, ctx.r31.u8);
	// stb r31,6304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6304, ctx.r31.u8);
	// stb r31,6305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6305, ctx.r31.u8);
	// stb r31,6306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6306, ctx.r31.u8);
	// stb r31,6307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6307, ctx.r31.u8);
	// stb r31,6308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6308, ctx.r31.u8);
	// stb r31,6309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6309, ctx.r31.u8);
	// stb r31,6310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6310, ctx.r31.u8);
	// stb r31,6311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6311, ctx.r31.u8);
	// stb r31,6312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6312, ctx.r31.u8);
	// stb r7,6313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6313, ctx.r7.u8);
	// stb r14,6314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6314, ctx.r14.u8);
	// stb r31,6315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6315, ctx.r31.u8);
	// stb r31,6316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6316, ctx.r31.u8);
	// stb r31,6317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6317, ctx.r31.u8);
	// stb r31,6318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6318, ctx.r31.u8);
	// stb r31,6319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6319, ctx.r31.u8);
	// stb r31,6320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6320, ctx.r31.u8);
	// stb r7,6321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6321, ctx.r7.u8);
	// stb r23,6322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6322, ctx.r23.u8);
	// stb r31,6323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6323, ctx.r31.u8);
	// stb r31,6324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6324, ctx.r31.u8);
	// stb r31,6325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6325, ctx.r31.u8);
	// stb r31,6326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6326, ctx.r31.u8);
	// stb r31,6327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6327, ctx.r31.u8);
	// stb r31,6328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6328, ctx.r31.u8);
	// stb r31,6329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6329, ctx.r31.u8);
	// stb r6,6330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6330, ctx.r6.u8);
	// stb r31,6331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6331, ctx.r31.u8);
	// stb r31,6332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6332, ctx.r31.u8);
	// stb r31,6333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6333, ctx.r31.u8);
	// stb r31,6334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6334, ctx.r31.u8);
	// stb r31,6335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6335, ctx.r31.u8);
	// stb r31,6336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6336, ctx.r31.u8);
	// stb r31,6337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6337, ctx.r31.u8);
	// stb r31,6338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6338, ctx.r31.u8);
	// stb r31,6339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6339, ctx.r31.u8);
	// stb r31,6340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6340, ctx.r31.u8);
	// stb r7,6341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6341, ctx.r7.u8);
	// stb r28,6342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6342, ctx.r28.u8);
	// stb r31,6343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6343, ctx.r31.u8);
	// stb r31,6344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6344, ctx.r31.u8);
	// stb r31,6345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6345, ctx.r31.u8);
	// stb r31,6346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6346, ctx.r31.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,6347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6347, ctx.r31.u8);
	// stb r31,6348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6348, ctx.r31.u8);
	// stb r29,6349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6349, ctx.r29.u8);
	// stb r30,6350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6350, ctx.r30.u8);
	// stb r31,6351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6351, ctx.r31.u8);
	// stb r11,6363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6363, ctx.r11.u8);
	// li r11,156
	ctx.r11.s64 = 156;
	// stb r31,6352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6352, ctx.r31.u8);
	// stb r31,6353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6353, ctx.r31.u8);
	// stb r31,6354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6354, ctx.r31.u8);
	// stb r31,6355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6355, ctx.r31.u8);
	// stb r11,6364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6364, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,6356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6356, ctx.r31.u8);
	// stb r31,6357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6357, ctx.r31.u8);
	// stb r6,6358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6358, ctx.r6.u8);
	// stb r31,6359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6359, ctx.r31.u8);
	// stb r31,6360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6360, ctx.r31.u8);
	// stb r31,6361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6361, ctx.r31.u8);
	// stb r31,6362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6362, ctx.r31.u8);
	// stb r11,6365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6365, ctx.r11.u8);
	// stb r31,6366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6366, ctx.r31.u8);
	// stb r31,6367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6367, ctx.r31.u8);
	// stb r31,6368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6368, ctx.r31.u8);
	// stb r26,6369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6369, ctx.r26.u8);
	// stb r25,6370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6370, ctx.r25.u8);
	// stb r31,6371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6371, ctx.r31.u8);
	// stb r31,6372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6372, ctx.r31.u8);
	// stb r31,6373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6373, ctx.r31.u8);
	// stb r31,6374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6374, ctx.r31.u8);
	// stb r31,6375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6375, ctx.r31.u8);
	// stb r31,6376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6376, ctx.r31.u8);
	// stb r9,6377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6377, ctx.r9.u8);
	// stb r8,6378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6378, ctx.r8.u8);
	// stb r31,6379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6379, ctx.r31.u8);
	// stb r31,6380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6380, ctx.r31.u8);
	// stb r31,6381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6381, ctx.r31.u8);
	// stb r31,6382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6382, ctx.r31.u8);
	// stb r31,6383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6383, ctx.r31.u8);
	// stb r31,6384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6384, ctx.r31.u8);
	// stb r31,6385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6385, ctx.r31.u8);
	// stb r31,6386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6386, ctx.r31.u8);
	// stb r31,6387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6387, ctx.r31.u8);
	// stb r31,6388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6388, ctx.r31.u8);
	// stb r31,6389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6389, ctx.r31.u8);
	// stb r31,6390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6390, ctx.r31.u8);
	// stb r31,6391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6391, ctx.r31.u8);
	// stb r31,6392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6392, ctx.r31.u8);
	// stb r31,6393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6393, ctx.r31.u8);
	// stb r31,6394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6394, ctx.r31.u8);
	// stb r31,6395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6395, ctx.r31.u8);
	// stb r31,6396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6396, ctx.r31.u8);
	// stb r3,6397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6397, ctx.r3.u8);
	// stb r28,6398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6398, ctx.r28.u8);
	// stb r31,6399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6399, ctx.r31.u8);
	// stb r31,6400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6400, ctx.r31.u8);
	// stb r31,6401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6401, ctx.r31.u8);
	// stb r31,6402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6402, ctx.r31.u8);
	// stb r31,6403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6403, ctx.r31.u8);
	// stb r31,6404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6404, ctx.r31.u8);
	// stb r4,6405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6405, ctx.r4.u8);
	// stb r27,6406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6406, ctx.r27.u8);
	// stb r31,6407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6407, ctx.r31.u8);
	// stb r31,6408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6408, ctx.r31.u8);
	// stb r31,6409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6409, ctx.r31.u8);
	// stb r31,6410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6410, ctx.r31.u8);
	// stb r31,6411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6411, ctx.r31.u8);
	// stb r31,6412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6412, ctx.r31.u8);
	// stb r31,6413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6413, ctx.r31.u8);
	// stb r6,6414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6414, ctx.r6.u8);
	// stb r31,6415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6415, ctx.r31.u8);
	// stb r31,6416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6416, ctx.r31.u8);
	// stb r31,6417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6417, ctx.r31.u8);
	// stb r31,6418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6418, ctx.r31.u8);
	// stb r5,6419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6419, ctx.r5.u8);
	// stb r5,6420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6420, ctx.r5.u8);
	// stb r5,6421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6421, ctx.r5.u8);
	// stb r5,6422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6422, ctx.r5.u8);
	// stb r31,6423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6423, ctx.r31.u8);
	// stb r31,6424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6424, ctx.r31.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r9,6425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6425, ctx.r9.u8);
	// stb r17,6426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6426, ctx.r17.u8);
	// stb r31,6427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6427, ctx.r31.u8);
	// stb r31,6428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6428, ctx.r31.u8);
	// stb r31,6429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6429, ctx.r31.u8);
	// stb r31,6430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6430, ctx.r31.u8);
	// stb r31,6431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6431, ctx.r31.u8);
	// stb r31,6432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6432, ctx.r31.u8);
	// stb r9,6433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6433, ctx.r9.u8);
	// stb r8,6434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6434, ctx.r8.u8);
	// stb r31,6435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6435, ctx.r31.u8);
	// stb r31,6436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6436, ctx.r31.u8);
	// stb r31,6437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6437, ctx.r31.u8);
	// stb r31,6438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6438, ctx.r31.u8);
	// stb r31,6439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6439, ctx.r31.u8);
	// stb r31,6440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6440, ctx.r31.u8);
	// stb r31,6441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6441, ctx.r31.u8);
	// stb r31,6442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6442, ctx.r31.u8);
	// stb r31,6443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6443, ctx.r31.u8);
	// stb r31,6444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6444, ctx.r31.u8);
	// stb r31,6445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6445, ctx.r31.u8);
	// stb r31,6446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6446, ctx.r31.u8);
	// stb r31,6447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6447, ctx.r31.u8);
	// stb r31,6448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6448, ctx.r31.u8);
	// stb r31,6449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6449, ctx.r31.u8);
	// stb r31,6450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6450, ctx.r31.u8);
	// stb r31,6451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6451, ctx.r31.u8);
	// stb r31,6452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6452, ctx.r31.u8);
	// stb r9,6453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6453, ctx.r9.u8);
	// stb r11,6454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6454, ctx.r11.u8);
	// stb r31,6455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6455, ctx.r31.u8);
	// stb r31,6456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6456, ctx.r31.u8);
	// stb r31,6457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6457, ctx.r31.u8);
	// stb r31,6458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6458, ctx.r31.u8);
	// stb r31,6459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6459, ctx.r31.u8);
	// stb r31,6460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6460, ctx.r31.u8);
	// stb r9,6461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6461, ctx.r9.u8);
	// stb r8,6462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6462, ctx.r8.u8);
	// stb r31,6463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6463, ctx.r31.u8);
	// stb r31,6464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6464, ctx.r31.u8);
	// stb r31,6465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6465, ctx.r31.u8);
	// stb r31,6466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6466, ctx.r31.u8);
	// stb r31,6467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6467, ctx.r31.u8);
	// stb r31,6468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6468, ctx.r31.u8);
	// stb r31,6469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6469, ctx.r31.u8);
	// stb r31,6470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6470, ctx.r31.u8);
	// stb r31,6471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6471, ctx.r31.u8);
	// stb r31,6472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6472, ctx.r31.u8);
	// stb r31,6473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6473, ctx.r31.u8);
	// stb r31,6474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6474, ctx.r31.u8);
	// stb r31,6475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6475, ctx.r31.u8);
	// stb r31,6476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6476, ctx.r31.u8);
	// stb r31,6477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6477, ctx.r31.u8);
	// stb r31,6478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6478, ctx.r31.u8);
	// stb r31,6479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6479, ctx.r31.u8);
	// stb r31,6480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6480, ctx.r31.u8);
	// stb r26,6481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6481, ctx.r26.u8);
	// stb r10,6482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6482, ctx.r10.u8);
	// stb r31,6483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6483, ctx.r31.u8);
	// stb r31,6484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6484, ctx.r31.u8);
	// stb r31,6485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6485, ctx.r31.u8);
	// stb r31,6486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6486, ctx.r31.u8);
	// stb r31,6487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6487, ctx.r31.u8);
	// stb r31,6488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6488, ctx.r31.u8);
	// stb r9,6489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6489, ctx.r9.u8);
	// stb r8,6490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6490, ctx.r8.u8);
	// stb r31,6491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6491, ctx.r31.u8);
	// stb r31,6492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6492, ctx.r31.u8);
	// stb r31,6493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6493, ctx.r31.u8);
	// stb r31,6494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6494, ctx.r31.u8);
	// stb r31,6495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6495, ctx.r31.u8);
	// stb r31,6496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6496, ctx.r31.u8);
	// stb r31,6497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6497, ctx.r31.u8);
	// stb r31,6498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6498, ctx.r31.u8);
	// stb r31,6499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6499, ctx.r31.u8);
	// stb r31,6500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6500, ctx.r31.u8);
	// stb r31,6501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6501, ctx.r31.u8);
	// stb r31,6502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6502, ctx.r31.u8);
	// stb r31,6503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6503, ctx.r31.u8);
	// stb r31,6504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6504, ctx.r31.u8);
	// stb r31,6505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6505, ctx.r31.u8);
	// stb r31,6506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6506, ctx.r31.u8);
	// stb r31,6507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6507, ctx.r31.u8);
	// stb r31,6508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6508, ctx.r31.u8);
	// stb r26,6509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6509, ctx.r26.u8);
	// stb r15,6510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6510, ctx.r15.u8);
	// stb r31,6511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6511, ctx.r31.u8);
	// stb r31,6512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6512, ctx.r31.u8);
	// stb r31,6513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6513, ctx.r31.u8);
	// stb r31,6514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6514, ctx.r31.u8);
	// stb r31,6515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6515, ctx.r31.u8);
	// stb r31,6516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6516, ctx.r31.u8);
	// stb r9,6517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6517, ctx.r9.u8);
	// stb r8,6518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6518, ctx.r8.u8);
	// stb r31,6519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6519, ctx.r31.u8);
	// stb r31,6520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6520, ctx.r31.u8);
	// stb r31,6521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6521, ctx.r31.u8);
	// stb r31,6522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6522, ctx.r31.u8);
	// stb r31,6523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6523, ctx.r31.u8);
	// stb r31,6524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6524, ctx.r31.u8);
	// stb r31,6525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6525, ctx.r31.u8);
	// stb r31,6526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6526, ctx.r31.u8);
	// stb r31,6527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6527, ctx.r31.u8);
	// stb r31,6528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6528, ctx.r31.u8);
	// stb r31,6529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6529, ctx.r31.u8);
	// stb r31,6530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6530, ctx.r31.u8);
	// stb r31,6531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6531, ctx.r31.u8);
	// stb r31,6532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6532, ctx.r31.u8);
	// stb r31,6533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6533, ctx.r31.u8);
	// stb r31,6534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6534, ctx.r31.u8);
	// stb r31,6535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6535, ctx.r31.u8);
	// stb r31,6536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6536, ctx.r31.u8);
	// stb r17,6537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6537, ctx.r17.u8);
	// stb r19,6538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6538, ctx.r19.u8);
	// stb r31,6539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6539, ctx.r31.u8);
	// stb r31,6540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6540, ctx.r31.u8);
	// stb r31,6541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6541, ctx.r31.u8);
	// stb r31,6542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6542, ctx.r31.u8);
	// stb r31,6543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6543, ctx.r31.u8);
	// stb r31,6544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6544, ctx.r31.u8);
	// stb r29,6545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6545, ctx.r29.u8);
	// stb r30,6546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6546, ctx.r30.u8);
	// stb r31,6547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6547, ctx.r31.u8);
	// stb r31,6548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6548, ctx.r31.u8);
	// stb r31,6549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6549, ctx.r31.u8);
	// stb r31,6550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6550, ctx.r31.u8);
	// stb r31,6551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6551, ctx.r31.u8);
	// stb r31,6552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6552, ctx.r31.u8);
	// stb r31,6553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6553, ctx.r31.u8);
	// stb r6,6554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6554, ctx.r6.u8);
	// stb r31,6555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6555, ctx.r31.u8);
	// stb r31,6556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6556, ctx.r31.u8);
	// stb r31,6557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6557, ctx.r31.u8);
	// stb r31,6558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6558, ctx.r31.u8);
	// stb r31,6559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6559, ctx.r31.u8);
	// stb r31,6560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6560, ctx.r31.u8);
	// stb r31,6561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6561, ctx.r31.u8);
	// stb r31,6562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6562, ctx.r31.u8);
	// stb r31,6563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6563, ctx.r31.u8);
	// stb r31,6564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6564, ctx.r31.u8);
	// stb r26,6565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6565, ctx.r26.u8);
	// stb r20,6566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6566, ctx.r20.u8);
	// stb r31,6567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6567, ctx.r31.u8);
	// stb r31,6568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6568, ctx.r31.u8);
	// stb r31,6569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6569, ctx.r31.u8);
	// stb r31,6570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6570, ctx.r31.u8);
	// stb r31,6571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6571, ctx.r31.u8);
	// stb r31,6572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6572, ctx.r31.u8);
	// stb r9,6573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6573, ctx.r9.u8);
	// stb r8,6574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6574, ctx.r8.u8);
	// stb r31,6575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6575, ctx.r31.u8);
	// stb r31,6576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6576, ctx.r31.u8);
	// stb r31,6577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6577, ctx.r31.u8);
	// stb r31,6578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6578, ctx.r31.u8);
	// stb r31,6579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6579, ctx.r31.u8);
	// stb r31,6580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6580, ctx.r31.u8);
	// stb r31,6581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6581, ctx.r31.u8);
	// stb r31,6582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6582, ctx.r31.u8);
	// stb r31,6583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6583, ctx.r31.u8);
	// stb r31,6584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6584, ctx.r31.u8);
	// stb r31,6585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6585, ctx.r31.u8);
	// lwz r30,6852(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 6852);
	// li r5,6583
	ctx.r5.s64 = 6583;
	// stb r4,6594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6594, ctx.r4.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,6586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6586, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,6587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6587, ctx.r31.u8);
	// stb r31,6588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6588, ctx.r31.u8);
	// stb r31,6589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6589, ctx.r31.u8);
	// stb r31,6590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6590, ctx.r31.u8);
	// stb r31,6591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6591, ctx.r31.u8);
	// stb r31,6592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6592, ctx.r31.u8);
	// stb r9,6593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6593, ctx.r9.u8);
	// stb r31,6595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6595, ctx.r31.u8);
	// stb r31,6596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6596, ctx.r31.u8);
	// stb r31,6597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6597, ctx.r31.u8);
	// stb r31,6598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6598, ctx.r31.u8);
	// stb r31,6599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6599, ctx.r31.u8);
	// stb r31,6600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6600, ctx.r31.u8);
	// stb r9,6601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6601, ctx.r9.u8);
	// stb r8,6602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6602, ctx.r8.u8);
	// stb r31,6603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6603, ctx.r31.u8);
	// stb r31,6604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6604, ctx.r31.u8);
	// stb r31,6605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6605, ctx.r31.u8);
	// stb r31,6606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6606, ctx.r31.u8);
	// stb r31,6607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6607, ctx.r31.u8);
	// stb r31,6608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6608, ctx.r31.u8);
	// stb r31,6609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6609, ctx.r31.u8);
	// stb r31,6610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6610, ctx.r31.u8);
	// stb r31,6611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6611, ctx.r31.u8);
	// stb r31,6612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6612, ctx.r31.u8);
	// stb r31,6613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6613, ctx.r31.u8);
	// stb r31,6614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6614, ctx.r31.u8);
	// stb r31,6615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6615, ctx.r31.u8);
	// stb r31,6616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6616, ctx.r31.u8);
	// stb r31,6617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6617, ctx.r31.u8);
	// stb r26,6618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6618, ctx.r26.u8);
	// stb r31,6619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6619, ctx.r31.u8);
	// stb r31,6620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6620, ctx.r31.u8);
	// stb r26,6621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6621, ctx.r26.u8);
	// stb r16,6622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6622, ctx.r16.u8);
	// stb r31,6623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6623, ctx.r31.u8);
	// stb r31,6624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6624, ctx.r31.u8);
	// stb r31,6625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6625, ctx.r31.u8);
	// stb r31,6626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6626, ctx.r31.u8);
	// stb r31,6627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6627, ctx.r31.u8);
	// stb r31,6628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6628, ctx.r31.u8);
	// stb r9,6629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6629, ctx.r9.u8);
	// stb r8,6630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6630, ctx.r8.u8);
	// stb r31,6631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6631, ctx.r31.u8);
	// stb r31,6632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6632, ctx.r31.u8);
	// stb r31,6633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6633, ctx.r31.u8);
	// stb r31,6634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6634, ctx.r31.u8);
	// stb r31,6635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6635, ctx.r31.u8);
	// stb r31,6636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6636, ctx.r31.u8);
	// stb r31,6637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6637, ctx.r31.u8);
	// stb r31,6638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6638, ctx.r31.u8);
	// stb r31,6639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6639, ctx.r31.u8);
	// stb r31,6640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6640, ctx.r31.u8);
	// stb r31,6641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6641, ctx.r31.u8);
	// stb r31,6642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6642, ctx.r31.u8);
	// stb r31,6643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6643, ctx.r31.u8);
	// stb r31,6644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6644, ctx.r31.u8);
	// stb r31,6645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6645, ctx.r31.u8);
	// stb r31,6646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6646, ctx.r31.u8);
	// stb r31,6647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6647, ctx.r31.u8);
	// stb r31,6648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6648, ctx.r31.u8);
	// stb r3,6649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6649, ctx.r3.u8);
	// stb r21,6650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6650, ctx.r21.u8);
	// stb r31,6651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6651, ctx.r31.u8);
	// stb r31,6652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6652, ctx.r31.u8);
	// stb r31,6653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6653, ctx.r31.u8);
	// stb r31,6654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6654, ctx.r31.u8);
	// stb r31,6655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6655, ctx.r31.u8);
	// stb r31,6656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6656, ctx.r31.u8);
	// stb r3,6657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6657, ctx.r3.u8);
	// stb r21,6658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6658, ctx.r21.u8);
	// stb r31,6659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6659, ctx.r31.u8);
	// stb r31,6660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6660, ctx.r31.u8);
	// stb r31,6661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6661, ctx.r31.u8);
	// stb r31,6662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 6662, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b06418
	ctx.lr = 0x8248C204;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,6832
	ctx.r1.s64 = ctx.r1.s64 + 6832;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C218"))) PPC_WEAK_FUNC(sub_8248C218);
PPC_FUNC_IMPL(__imp__sub_8248C218) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248C220;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32229
	ctx.r10.s64 = -2112159744;
	// addi r4,r10,-27368
	ctx.r4.s64 = ctx.r10.s64 + -27368;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C25C;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,9
	ctx.r9.s64 = 9;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,150
	ctx.r11.s64 = 150;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,95
	ctx.r9.s64 = 95;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248C33C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C350"))) PPC_WEAK_FUNC(sub_8248C350);
PPC_FUNC_IMPL(__imp__sub_8248C350) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248C358;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25496
	ctx.r4.s64 = ctx.r10.s64 + 25496;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C394;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,151
	ctx.r11.s64 = 151;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248C488;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C498"))) PPC_WEAK_FUNC(sub_8248C498);
PPC_FUNC_IMPL(__imp__sub_8248C498) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248C4A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25496
	ctx.r4.s64 = ctx.r10.s64 + 25496;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C4DC;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,152
	ctx.r11.s64 = 152;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,167
	ctx.r11.s64 = 167;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248C5D0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C5E0"))) PPC_WEAK_FUNC(sub_8248C5E0);
PPC_FUNC_IMPL(__imp__sub_8248C5E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248C5E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r29,61
	ctx.r29.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25512
	ctx.r4.s64 = ctx.r10.s64 + 25512;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r29,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r29.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C624;
	sub_822E0818(ctx, base);
	// li r9,249
	ctx.r9.s64 = 249;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,153
	ctx.r10.s64 = 153;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r10,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r10.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r9,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r9.u8);
	// li r9,170
	ctx.r9.s64 = 170;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,246
	ctx.r10.s64 = 246;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r9,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// li r9,42
	ctx.r9.s64 = 42;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r9,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r9.u8);
	// li r9,11
	ctx.r9.s64 = 11;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r9,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r9.u8);
	// li r9,83
	ctx.r9.s64 = 83;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r29,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r29.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r9,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r9.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r10,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r10.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// li r11,12
	ctx.r11.s64 = 12;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248C768;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C778"))) PPC_WEAK_FUNC(sub_8248C778);
PPC_FUNC_IMPL(__imp__sub_8248C778) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248C780;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22632
	ctx.r4.s64 = ctx.r10.s64 + 22632;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C7BC;
	sub_822E0818(ctx, base);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,154
	ctx.r11.s64 = 154;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,5
	ctx.r9.s64 = 5;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,246
	ctx.r11.s64 = 246;
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248C89C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248C8B0"))) PPC_WEAK_FUNC(sub_8248C8B0);
PPC_FUNC_IMPL(__imp__sub_8248C8B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x8248C8B8;
	__savegprlr_14(ctx, base);
	// stwu r1,-1392(r1)
	ea = -1392 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r21,4
	ctx.r3.s64 = ctx.r21.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,1135
	ctx.r9.s64 = 1135;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,25564
	ctx.r4.s64 = ctx.r10.s64 + 25564;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r21)
	PPC_STORE_U32(ctx.r21.u32 + 0, ctx.r11.u32);
	// stw r9,16(r21)
	PPC_STORE_U32(ctx.r21.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248C8F4;
	sub_822E0818(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25540
	ctx.r4.s64 = ctx.r11.s64 + 25540;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,1216
	ctx.r3.s64 = ctx.r1.s64 + 1216;
	// bl 0x8243b750
	ctx.lr = 0x8248C90C;
	sub_8243B750(ctx, base);
	// li r9,216
	ctx.r9.s64 = 216;
	// li r7,225
	ctx.r7.s64 = 225;
	// lwz r11,1216(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1216);
	// li r10,11
	ctx.r10.s64 = 11;
	// lwz r8,1220(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1220);
	// li r30,102
	ctx.r30.s64 = 102;
	// stb r31,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r31.u8);
	// li r28,15
	ctx.r28.s64 = 15;
	// stb r31,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r31.u8);
	// stb r9,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r9.u8);
	// li r9,109
	ctx.r9.s64 = 109;
	// stb r7,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r7.u8);
	// li r7,229
	ctx.r7.s64 = 229;
	// stb r10,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r10.u8);
	// li r10,9
	ctx.r10.s64 = 9;
	// li r14,99
	ctx.r14.s64 = 99;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r6,56
	ctx.r6.s64 = 56;
	// stb r28,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r28.u8);
	// stb r9,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r9.u8);
	// li r9,110
	ctx.r9.s64 = 110;
	// stb r7,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r7.u8);
	// li r17,105
	ctx.r17.s64 = 105;
	// li r7,80
	ctx.r7.s64 = 80;
	// stb r10,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r10.u8);
	// stb r30,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r30.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r9.u8);
	// li r9,22
	ctx.r9.s64 = 22;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r10,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r10.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r10,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r10.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// stb r28,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r28.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r10,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r10.u8);
	// stb r14,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r14.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r10,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r10.u8);
	// stb r30,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r30.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r6,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r6.u8);
	// stb r7,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r7.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r10,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r10.u8);
	// stb r30,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r30.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// stb r17,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r17.u8);
	// stw r11,24(r21)
	PPC_STORE_U32(ctx.r21.u32 + 24, ctx.r11.u32);
	// li r11,103
	ctx.r11.s64 = 103;
	// stw r8,28(r21)
	PPC_STORE_U32(ctx.r21.u32 + 28, ctx.r8.u32);
	// li r15,172
	ctx.r15.s64 = 172;
	// li r5,63
	ctx.r5.s64 = 63;
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// li r25,98
	ctx.r25.s64 = 98;
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// li r7,1
	ctx.r7.s64 = 1;
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r11,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r11.u8);
	// li r16,92
	ctx.r16.s64 = 92;
	// li r11,44
	ctx.r11.s64 = 44;
	// stb r10,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r10.u8);
	// li r23,2
	ctx.r23.s64 = 2;
	// stb r31,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r31.u8);
	// li r8,104
	ctx.r8.s64 = 104;
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// li r19,68
	ctx.r19.s64 = 68;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r20,169
	ctx.r20.s64 = 169;
	// stb r10,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r10.u8);
	// li r26,7
	ctx.r26.s64 = 7;
	// stb r9,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r9.u8);
	// li r22,3
	ctx.r22.s64 = 3;
	// stb r28,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r28.u8);
	// li r4,200
	ctx.r4.s64 = 200;
	// stb r8,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r8.u8);
	// li r24,178
	ctx.r24.s64 = 178;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r18,101
	ctx.r18.s64 = 101;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r3,171
	ctx.r3.s64 = 171;
	// stb r10,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r10.u8);
	// stb r25,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r25.u8);
	// stb r6,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r6.u8);
	// stb r19,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r19.u8);
	// stb r15,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r15.u8);
	// stb r20,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r20.u8);
	// stb r7,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r7.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r10,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r10.u8);
	// stb r16,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r16.u8);
	// stb r9,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r9.u8);
	// stb r6,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r6.u8);
	// stb r5,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r5.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// stb r23,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r23.u8);
	// stb r9,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r9.u8);
	// stb r26,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r26.u8);
	// stb r22,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r22.u8);
	// stb r4,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r4.u8);
	// stb r24,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r24.u8);
	// stb r6,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r6.u8);
	// stb r5,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r5.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r10,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r10.u8);
	// stb r25,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r25.u8);
	// stb r15,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r15.u8);
	// stb r7,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r7.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r10,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r10.u8);
	// stb r16,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r16.u8);
	// stb r6,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r6.u8);
	// stb r5,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r5.u8);
	// stb r11,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r11.u8);
	// stb r23,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r23.u8);
	// stb r9,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r9.u8);
	// stb r9,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r9.u8);
	// stb r28,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r28.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r10,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r10.u8);
	// stb r18,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r18.u8);
	// stb r15,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r15.u8);
	// stb r20,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r20.u8);
	// li r4,30
	ctx.r4.s64 = 30;
	// stb r11,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r11.u8);
	// li r29,64
	ctx.r29.s64 = 64;
	// stb r11,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r11.u8);
	// li r27,97
	ctx.r27.s64 = 97;
	// li r20,190
	ctx.r20.s64 = 190;
	// stb r3,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r3.u8);
	// li r11,100
	ctx.r11.s64 = 100;
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r4,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r4.u8);
	// stb r29,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r29.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r6,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r6.u8);
	// stb r5,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r5.u8);
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r10,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r10.u8);
	// stb r25,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r25.u8);
	// stb r9,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r9.u8);
	// stb r7,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r7.u8);
	// stb r31,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r31.u8);
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r10,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r10.u8);
	// stb r16,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r16.u8);
	// stb r9,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r9.u8);
	// stb r28,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r28.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// stb r10,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r10.u8);
	// stb r27,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r27.u8);
	// stb r6,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r6.u8);
	// stb r19,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r19.u8);
	// stb r15,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r15.u8);
	// stb r7,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r7.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r10,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r10.u8);
	// stb r16,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r16.u8);
	// stb r9,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r9.u8);
	// stb r6,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r6.u8);
	// stb r5,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r5.u8);
	// stb r23,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r23.u8);
	// stb r9,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r9.u8);
	// stb r26,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r26.u8);
	// stb r22,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r22.u8);
	// stb r20,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r20.u8);
	// stb r24,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r24.u8);
	// stb r6,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r6.u8);
	// stb r5,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r5.u8);
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r10,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r10.u8);
	// stb r27,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r27.u8);
	// stb r15,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r15.u8);
	// stb r7,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r7.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r31,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r31.u8);
	// stb r10,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r10.u8);
	// stb r16,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r16.u8);
	// stb r6,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r6.u8);
	// stb r5,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r5.u8);
	// stb r23,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r23.u8);
	// stb r9,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r9.u8);
	// stb r9,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r9.u8);
	// stb r28,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r28.u8);
	// stb r31,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r31.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r10,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r10.u8);
	// stb r11,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r11.u8);
	// stb r15,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r15.u8);
	// stb r3,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r3.u8);
	// stb r4,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r4.u8);
	// stb r29,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r29.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// li r11,215
	ctx.r11.s64 = 215;
	// stb r31,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r31.u8);
	// li r29,110
	ctx.r29.s64 = 110;
	// stb r6,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r6.u8);
	// li r19,212
	ctx.r19.s64 = 212;
	// stb r5,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r5.u8);
	// li r24,38
	ctx.r24.s64 = 38;
	// stb r31,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r31.u8);
	// li r20,91
	ctx.r20.s64 = 91;
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r11,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r11.u8);
	// stb r11,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r11.u8);
	// stb r11,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r11.u8);
	// li r11,93
	ctx.r11.s64 = 93;
	// stb r29,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r29.u8);
	// li r29,213
	ctx.r29.s64 = 213;
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r10,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r10.u8);
	// stb r27,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r27.u8);
	// stb r11,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r11.u8);
	// li r11,174
	ctx.r11.s64 = 174;
	// stb r9,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r9.u8);
	// stb r7,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r7.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r31,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r31.u8);
	// stb r11,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r11.u8);
	// li r11,175
	ctx.r11.s64 = 175;
	// stb r10,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r10.u8);
	// stb r16,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r16.u8);
	// stb r9,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r9.u8);
	// stb r28,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r28.u8);
	// stb r31,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r31.u8);
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// stb r31,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r31.u8);
	// stb r10,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r10.u8);
	// stb r30,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r30.u8);
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// stb r31,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r31.u8);
	// stb r31,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r31.u8);
	// stb r10,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r10.u8);
	// stb r29,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r29.u8);
	// stb r31,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r31.u8);
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// stb r10,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r10.u8);
	// stb r14,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r14.u8);
	// stb r31,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r31.u8);
	// stb r31,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r31.u8);
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r10,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r10.u8);
	// stb r17,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r17.u8);
	// stb r19,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r19.u8);
	// stb r19,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r19.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r31.u8);
	// stb r10,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r10.u8);
	// stb r8,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r8.u8);
	// stb r7,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r7.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r10,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r10.u8);
	// stb r9,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r9.u8);
	// stb r3,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r3.u8);
	// stb r11,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r11.u8);
	// stb r6,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r6.u8);
	// stb r5,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r5.u8);
	// stb r24,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r24.u8);
	// stb r7,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r7.u8);
	// stb r31,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r31.u8);
	// stb r31,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r31.u8);
	// stb r10,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r10.u8);
	// stb r20,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r20.u8);
	// stb r9,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r9.u8);
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// stb r31,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r31.u8);
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r10,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r10.u8);
	// stb r18,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r18.u8);
	// stb r9,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r9.u8);
	// stb r3,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r3.u8);
	// stb r19,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r19.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r19,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r19.u8);
	// li r19,103
	ctx.r19.s64 = 103;
	// stb r24,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r24.u8);
	// li r29,128
	ctx.r29.s64 = 128;
	// li r14,28
	ctx.r14.s64 = 28;
	// stb r7,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r7.u8);
	// li r8,254
	ctx.r8.s64 = 254;
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// li r17,208
	ctx.r17.s64 = 208;
	// stb r31,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r31.u8);
	// stb r19,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r19.u8);
	// li r19,93
	ctx.r19.s64 = 93;
	// li r18,191
	ctx.r18.s64 = 191;
	// stb r10,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r10.u8);
	// li r24,100
	ctx.r24.s64 = 100;
	// stb r20,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r20.u8);
	// stb r14,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r14.u8);
	// stb r11,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r11.u8);
	// stb r19,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r19.u8);
	// li r19,174
	ctx.r19.s64 = 174;
	// stb r11,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r11.u8);
	// stb r8,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r8.u8);
	// stb r17,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r17.u8);
	// stb r4,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r4.u8);
	// stb r19,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r19.u8);
	// li r19,175
	ctx.r19.s64 = 175;
	// stb r18,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r18.u8);
	// stb r29,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r29.u8);
	// stb r31,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r31.u8);
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r4,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r4.u8);
	// stb r5,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r5.u8);
	// stb r29,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r29.u8);
	// stb r31,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r31.u8);
	// stb r31,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r31.u8);
	// stb r9,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r9.u8);
	// stb r9,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r9.u8);
	// stb r9,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r9.u8);
	// stb r9,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r9.u8);
	// stb r9,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r9.u8);
	// stb r31,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r31.u8);
	// stb r31,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r31.u8);
	// stb r31,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r31.u8);
	// stb r10,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r10.u8);
	// stb r7,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r7.u8);
	// stb r31,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r31.u8);
	// stb r31,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r31.u8);
	// stb r10,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r10.u8);
	// stb r9,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r9.u8);
	// stb r3,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r3.u8);
	// stb r19,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r19.u8);
	// stb r6,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r6.u8);
	// stb r5,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r5.u8);
	// stb r7,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r7.u8);
	// stb r31,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r31.u8);
	// stb r31,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r31.u8);
	// stb r10,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r10.u8);
	// stb r20,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r20.u8);
	// stb r9,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r9.u8);
	// stb r31,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r31.u8);
	// stb r31,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r31.u8);
	// stb r31,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r31.u8);
	// stb r10,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r10.u8);
	// stb r24,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r24.u8);
	// stb r9,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r9.u8);
	// stb r3,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r3.u8);
	// stb r7,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r7.u8);
	// stb r31,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r31.u8);
	// stb r31,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r31.u8);
	// stb r10,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r10.u8);
	// stb r20,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r20.u8);
	// stb r14,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r14.u8);
	// stb r11,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r11.u8);
	// stb r11,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r11.u8);
	// stb r8,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r8.u8);
	// stb r17,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r17.u8);
	// stb r4,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r4.u8);
	// stb r18,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r18.u8);
	// stb r29,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r29.u8);
	// stb r4,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r4.u8);
	// li r4,118
	ctx.r4.s64 = 118;
	// stb r29,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r29.u8);
	// li r24,168
	ctx.r24.s64 = 168;
	// li r29,32
	ctx.r29.s64 = 32;
	// stb r31,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r31.u8);
	// li r18,37
	ctx.r18.s64 = 37;
	// stb r31,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r31.u8);
	// li r17,54
	ctx.r17.s64 = 54;
	// stb r5,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r5.u8);
	// stb r4,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r4.u8);
	// li r4,110
	ctx.r4.s64 = 110;
	// li r3,95
	ctx.r3.s64 = 95;
	// stb r31,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r31.u8);
	// stb r31,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r31.u8);
	// stb r9,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r9.u8);
	// stb r9,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r9.u8);
	// stb r4,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r4.u8);
	// li r4,108
	ctx.r4.s64 = 108;
	// stb r9,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r9.u8);
	// stb r9,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r9.u8);
	// stb r9,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r9.u8);
	// stb r9,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r9.u8);
	// stb r4,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r4.u8);
	// li r4,244
	ctx.r4.s64 = 244;
	// stb r9,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r9.u8);
	// stb r28,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r28.u8);
	// stb r17,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r17.u8);
	// stb r31,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r31.u8);
	// stb r4,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r4.u8);
	// li r4,130
	ctx.r4.s64 = 130;
	// stb r31,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r31.u8);
	// stb r31,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r31.u8);
	// stb r29,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r29.u8);
	// stb r24,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r24.u8);
	// stb r4,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r4.u8);
	// stb r4,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r4.u8);
	// stb r4,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r4.u8);
	// li r4,151
	ctx.r4.s64 = 151;
	// stb r18,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r18.u8);
	// stb r28,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r28.u8);
	// stb r31,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r31.u8);
	// stb r31,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r31.u8);
	// stb r4,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r4.u8);
	// li r4,90
	ctx.r4.s64 = 90;
	// stb r31,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r31.u8);
	// stb r10,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r10.u8);
	// stb r3,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r3.u8);
	// stb r14,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r14.u8);
	// stb r4,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r4.u8);
	// li r4,24
	ctx.r4.s64 = 24;
	// stb r11,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r11.u8);
	// stb r11,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r11.u8);
	// stb r8,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r8.u8);
	// stb r31,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r31.u8);
	// stb r31,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r31.u8);
	// stb r31,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r31.u8);
	// stb r10,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r10.u8);
	// stb r31,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r31.u8);
	// stb r31,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r31.u8);
	// stb r31,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r31.u8);
	// stb r10,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r10.u8);
	// stb r30,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r30.u8);
	// stb r31,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r31.u8);
	// stb r31,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r31.u8);
	// stb r31,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r31.u8);
	// stb r10,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r10.u8);
	// stb r31,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r31.u8);
	// stb r31,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r31.u8);
	// stb r31,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r31.u8);
	// stb r29,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r29.u8);
	// stb r24,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r24.u8);
	// stb r9,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r9.u8);
	// stb r26,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r26.u8);
	// stb r7,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r7.u8);
	// stb r7,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r7.u8);
	// stb r31,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r31.u8);
	// stb r31,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r31.u8);
	// stb r10,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r10.u8);
	// stb r18,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r18.u8);
	// stb r9,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r9.u8);
	// li r14,45
	ctx.r14.s64 = 45;
	// stb r27,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r27.u8);
	// li r30,33
	ctx.r30.s64 = 33;
	// stb r4,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r4.u8);
	// li r20,164
	ctx.r20.s64 = 164;
	// stb r31,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r31.u8);
	// li r19,4
	ctx.r19.s64 = 4;
	// stb r31,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r31.u8);
	// li r27,90
	ctx.r27.s64 = 90;
	// stb r31,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r31.u8);
	// stb r14,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r14.u8);
	// li r14,233
	ctx.r14.s64 = 233;
	// stb r30,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r30.u8);
	// li r30,129
	ctx.r30.s64 = 129;
	// stb r20,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r20.u8);
	// li r20,69
	ctx.r20.s64 = 69;
	// stb r31,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r31.u8);
	// stb r31,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r31.u8);
	// stb r14,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r14.u8);
	// li r14,29
	ctx.r14.s64 = 29;
	// stb r30,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r30.u8);
	// li r30,25
	ctx.r30.s64 = 25;
	// stb r20,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r20.u8);
	// li r20,6
	ctx.r20.s64 = 6;
	// stb r31,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r31.u8);
	// stb r31,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r31.u8);
	// stb r14,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r14.u8);
	// li r14,180
	ctx.r14.s64 = 180;
	// stb r30,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r30.u8);
	// stb r30,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r30.u8);
	// li r30,27
	ctx.r30.s64 = 27;
	// stb r31,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r31.u8);
	// stb r9,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r9.u8);
	// stb r14,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r14.u8);
	// li r14,173
	ctx.r14.s64 = 173;
	// stb r31,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r31.u8);
	// stb r30,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r30.u8);
	// li r30,5
	ctx.r30.s64 = 5;
	// stb r19,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r19.u8);
	// stb r7,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r7.u8);
	// stb r14,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r14.u8);
	// li r14,146
	ctx.r14.s64 = 146;
	// stb r11,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r11.u8);
	// stb r30,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r30.u8);
	// stb r30,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r30.u8);
	// stb r11,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r11.u8);
	// stb r8,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r8.u8);
	// stb r31,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r31.u8);
	// stb r20,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r20.u8);
	// stb r19,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r19.u8);
	// stb r7,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r7.u8);
	// stb r11,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r11.u8);
	// stb r11,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r11.u8);
	// stb r11,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r11.u8);
	// stb r9,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r9.u8);
	// stb r9,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r9.u8);
	// stb r4,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r4.u8);
	// stb r31,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r31.u8);
	// stb r6,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r6.u8);
	// stb r5,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r5.u8);
	// stb r14,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r14.u8);
	// stb r31,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r31.u8);
	// stb r31,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r31.u8);
	// stb r31,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r31.u8);
	// stb r10,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r10.u8);
	// stb r25,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r25.u8);
	// stb r31,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r31.u8);
	// stb r31,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r31.u8);
	// stb r31,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r31.u8);
	// stb r10,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r10.u8);
	// stb r9,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r9.u8);
	// stb r6,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r6.u8);
	// stb r5,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r5.u8);
	// stb r7,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r7.u8);
	// stb r31,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r31.u8);
	// stb r31,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r31.u8);
	// stb r10,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r10.u8);
	// stb r27,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r27.u8);
	// stb r9,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r9.u8);
	// stb r6,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r6.u8);
	// stb r5,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r5.u8);
	// stb r4,541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 541, ctx.r4.u8);
	// li r4,20
	ctx.r4.s64 = 20;
	// std r21,1224(r1)
	PPC_STORE_U64(ctx.r1.u32 + 1224, ctx.r21.u64);
	// li r21,42
	ctx.r21.s64 = 42;
	// stb r30,569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 569, ctx.r30.u8);
	// li r30,119
	ctx.r30.s64 = 119;
	// stb r3,560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 560, ctx.r3.u8);
	// li r14,78
	ctx.r14.s64 = 78;
	// stb r3,578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 578, ctx.r3.u8);
	// li r27,23
	ctx.r27.s64 = 23;
	// stb r4,543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 543, ctx.r4.u8);
	// li r4,119
	ctx.r4.s64 = 119;
	// stb r21,561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 561, ctx.r21.u8);
	// li r21,27
	ctx.r21.s64 = 27;
	// stb r30,583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 583, ctx.r30.u8);
	// li r30,166
	ctx.r30.s64 = 166;
	// stb r3,599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 599, ctx.r3.u8);
	// li r3,42
	ctx.r3.s64 = 42;
	// stb r18,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r18.u8);
	// stb r4,544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 544, ctx.r4.u8);
	// li r4,53
	ctx.r4.s64 = 53;
	// stb r9,539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 539, ctx.r9.u8);
	// stb r9,540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 540, ctx.r9.u8);
	// stb r31,542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 542, ctx.r31.u8);
	// stb r11,546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 546, ctx.r11.u8);
	// stb r4,545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 545, ctx.r4.u8);
	// stb r11,547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 547, ctx.r11.u8);
	// stb r8,548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 548, ctx.r8.u8);
	// stb r14,549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 549, ctx.r14.u8);
	// stb r11,550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 550, ctx.r11.u8);
	// stb r11,551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 551, ctx.r11.u8);
	// stb r8,552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 552, ctx.r8.u8);
	// stb r27,553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 553, ctx.r27.u8);
	// stb r31,554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 554, ctx.r31.u8);
	// stb r31,555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 555, ctx.r31.u8);
	// stb r31,556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 556, ctx.r31.u8);
	// stb r31,557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 557, ctx.r31.u8);
	// stb r31,558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 558, ctx.r31.u8);
	// stb r10,559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 559, ctx.r10.u8);
	// stb r9,562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 562, ctx.r9.u8);
	// stb r9,563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 563, ctx.r9.u8);
	// stb r21,564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 564, ctx.r21.u8);
	// stb r31,565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 565, ctx.r31.u8);
	// stb r31,566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 566, ctx.r31.u8);
	// stb r31,567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 567, ctx.r31.u8);
	// stb r10,568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 568, ctx.r10.u8);
	// stb r31,570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 570, ctx.r31.u8);
	// stb r31,571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 571, ctx.r31.u8);
	// stb r31,572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 572, ctx.r31.u8);
	// stb r31,573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 573, ctx.r31.u8);
	// stb r31,574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 574, ctx.r31.u8);
	// stb r31,575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 575, ctx.r31.u8);
	// stb r31,576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 576, ctx.r31.u8);
	// stb r10,577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 577, ctx.r10.u8);
	// stb r9,579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 579, ctx.r9.u8);
	// stb r26,580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 580, ctx.r26.u8);
	// stb r22,581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 581, ctx.r22.u8);
	// stb r14,582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 582, ctx.r14.u8);
	// stb r4,584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 584, ctx.r4.u8);
	// stb r11,585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 585, ctx.r11.u8);
	// stb r11,586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 586, ctx.r11.u8);
	// stb r8,587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 587, ctx.r8.u8);
	// stb r14,588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 588, ctx.r14.u8);
	// stb r11,589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 589, ctx.r11.u8);
	// stb r11,590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 590, ctx.r11.u8);
	// stb r8,591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 591, ctx.r8.u8);
	// stb r27,592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 592, ctx.r27.u8);
	// stb r31,593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 593, ctx.r31.u8);
	// stb r31,594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 594, ctx.r31.u8);
	// stb r31,595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 595, ctx.r31.u8);
	// stb r31,596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 596, ctx.r31.u8);
	// stb r31,597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 597, ctx.r31.u8);
	// stb r10,598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 598, ctx.r10.u8);
	// stb r3,600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 600, ctx.r3.u8);
	// stb r9,601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 601, ctx.r9.u8);
	// stb r28,602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 602, ctx.r28.u8);
	// stb r31,603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 603, ctx.r31.u8);
	// stb r31,604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 604, ctx.r31.u8);
	// stb r31,605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 605, ctx.r31.u8);
	// stb r29,606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 606, ctx.r29.u8);
	// stb r30,607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 607, ctx.r30.u8);
	// stb r24,623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 623, ctx.r24.u8);
	// li r24,200
	ctx.r24.s64 = 200;
	// li r3,75
	ctx.r3.s64 = 75;
	// stb r30,617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 617, ctx.r30.u8);
	// li r30,96
	ctx.r30.s64 = 96;
	// stb r18,608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 608, ctx.r18.u8);
	// li r21,166
	ctx.r21.s64 = 166;
	// stb r26,609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 609, ctx.r26.u8);
	// stb r22,610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 610, ctx.r22.u8);
	// stb r24,634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 634, ctx.r24.u8);
	// li r24,190
	ctx.r24.s64 = 190;
	// stb r3,611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 611, ctx.r3.u8);
	// li r3,150
	ctx.r3.s64 = 150;
	// stb r30,630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 630, ctx.r30.u8);
	// stb r30,640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 640, ctx.r30.u8);
	// li r30,72
	ctx.r30.s64 = 72;
	// stb r21,668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 668, ctx.r21.u8);
	// li r21,168
	ctx.r21.s64 = 168;
	// stb r24,650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 650, ctx.r24.u8);
	// li r24,114
	ctx.r24.s64 = 114;
	// stb r3,612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 612, ctx.r3.u8);
	// stb r3,635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 635, ctx.r3.u8);
	// li r3,107
	ctx.r3.s64 = 107;
	// stb r31,613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 613, ctx.r31.u8);
	// stb r31,614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 614, ctx.r31.u8);
	// stb r24,651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 651, ctx.r24.u8);
	// li r24,16
	ctx.r24.s64 = 16;
	// stb r31,615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 615, ctx.r31.u8);
	// stb r29,616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 616, ctx.r29.u8);
	// stb r17,618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 618, ctx.r17.u8);
	// stb r31,619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 619, ctx.r31.u8);
	// stb r31,620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 620, ctx.r31.u8);
	// stb r31,621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 621, ctx.r31.u8);
	// stb r29,622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 622, ctx.r29.u8);
	// stb r9,624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 624, ctx.r9.u8);
	// stb r28,625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 625, ctx.r28.u8);
	// stb r31,626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 626, ctx.r31.u8);
	// stb r31,627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 627, ctx.r31.u8);
	// stb r31,628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 628, ctx.r31.u8);
	// stb r10,629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 629, ctx.r10.u8);
	// stb r18,631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 631, ctx.r18.u8);
	// stb r26,632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 632, ctx.r26.u8);
	// stb r23,633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 633, ctx.r23.u8);
	// stb r31,636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 636, ctx.r31.u8);
	// stb r31,637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 637, ctx.r31.u8);
	// stb r31,638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 638, ctx.r31.u8);
	// stb r10,639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 639, ctx.r10.u8);
	// stb r17,641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 641, ctx.r17.u8);
	// stb r30,642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 642, ctx.r30.u8);
	// stb r31,643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 643, ctx.r31.u8);
	// stb r31,644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 644, ctx.r31.u8);
	// stb r10,645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 645, ctx.r10.u8);
	// stb r3,646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 646, ctx.r3.u8);
	// stb r9,647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 647, ctx.r9.u8);
	// stb r26,648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 648, ctx.r26.u8);
	// stb r23,649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 649, ctx.r23.u8);
	// stb r4,652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 652, ctx.r4.u8);
	// stb r11,653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 653, ctx.r11.u8);
	// stb r11,654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 654, ctx.r11.u8);
	// stb r8,655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 655, ctx.r8.u8);
	// stb r14,656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 656, ctx.r14.u8);
	// stb r11,657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 657, ctx.r11.u8);
	// stb r11,658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 658, ctx.r11.u8);
	// stb r8,659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 659, ctx.r8.u8);
	// stb r27,660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 660, ctx.r27.u8);
	// stb r31,661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 661, ctx.r31.u8);
	// stb r31,662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 662, ctx.r31.u8);
	// stb r24,663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 663, ctx.r24.u8);
	// stb r31,664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 664, ctx.r31.u8);
	// stb r31,665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 665, ctx.r31.u8);
	// stb r31,666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 666, ctx.r31.u8);
	// stb r29,667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 667, ctx.r29.u8);
	// stb r31,669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 669, ctx.r31.u8);
	// stb r31,670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 670, ctx.r31.u8);
	// stb r31,671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 671, ctx.r31.u8);
	// stb r29,672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 672, ctx.r29.u8);
	// stb r21,673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 673, ctx.r21.u8);
	// stb r4,674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 674, ctx.r4.u8);
	// stb r11,675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 675, ctx.r11.u8);
	// stb r11,676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 676, ctx.r11.u8);
	// stb r8,677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 677, ctx.r8.u8);
	// stb r14,678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 678, ctx.r14.u8);
	// li r14,96
	ctx.r14.s64 = 96;
	// stb r11,679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 679, ctx.r11.u8);
	// stb r11,680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 680, ctx.r11.u8);
	// stb r8,681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 681, ctx.r8.u8);
	// stb r27,682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 682, ctx.r27.u8);
	// stb r14,690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 690, ctx.r14.u8);
	// li r14,161
	ctx.r14.s64 = 161;
	// stb r31,683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 683, ctx.r31.u8);
	// stb r31,684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 684, ctx.r31.u8);
	// stb r24,685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 685, ctx.r24.u8);
	// stb r31,686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 686, ctx.r31.u8);
	// stb r14,697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 697, ctx.r14.u8);
	// li r14,87
	ctx.r14.s64 = 87;
	// stb r31,687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 687, ctx.r31.u8);
	// stb r31,688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 688, ctx.r31.u8);
	// stb r10,689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 689, ctx.r10.u8);
	// stb r30,691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 691, ctx.r30.u8);
	// stb r14,702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 702, ctx.r14.u8);
	// li r14,96
	ctx.r14.s64 = 96;
	// stb r31,692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 692, ctx.r31.u8);
	// stb r31,693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 693, ctx.r31.u8);
	// stb r10,694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 694, ctx.r10.u8);
	// stb r3,695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 695, ctx.r3.u8);
	// stb r14,725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 725, ctx.r14.u8);
	// li r14,38
	ctx.r14.s64 = 38;
	// stb r9,696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 696, ctx.r9.u8);
	// stb r4,698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 698, ctx.r4.u8);
	// stb r11,699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 699, ctx.r11.u8);
	// stb r11,700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 700, ctx.r11.u8);
	// stb r14,731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 731, ctx.r14.u8);
	// li r14,223
	ctx.r14.s64 = 223;
	// stb r8,701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 701, ctx.r8.u8);
	// stb r11,703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 703, ctx.r11.u8);
	// stb r11,704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 704, ctx.r11.u8);
	// stb r8,705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 705, ctx.r8.u8);
	// stb r14,733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 733, ctx.r14.u8);
	// li r14,253
	ctx.r14.s64 = 253;
	// stb r9,706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 706, ctx.r9.u8);
	// stb r31,707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 707, ctx.r31.u8);
	// stb r31,708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 708, ctx.r31.u8);
	// stb r4,709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 709, ctx.r4.u8);
	// stb r14,737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 737, ctx.r14.u8);
	// li r14,96
	ctx.r14.s64 = 96;
	// stb r11,710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 710, ctx.r11.u8);
	// stb r11,711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 711, ctx.r11.u8);
	// stb r8,712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 712, ctx.r8.u8);
	// stb r31,713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 713, ctx.r31.u8);
	// stb r11,714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 714, ctx.r11.u8);
	// stb r11,715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 715, ctx.r11.u8);
	// stb r8,716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 716, ctx.r8.u8);
	// stb r27,717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 717, ctx.r27.u8);
	// stb r31,718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 718, ctx.r31.u8);
	// stb r7,719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 719, ctx.r7.u8);
	// stb r24,720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 720, ctx.r24.u8);
	// stb r31,721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 721, ctx.r31.u8);
	// stb r31,722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 722, ctx.r31.u8);
	// stb r31,723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 723, ctx.r31.u8);
	// stb r10,724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 724, ctx.r10.u8);
	// stb r30,726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 726, ctx.r30.u8);
	// stb r31,727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 727, ctx.r31.u8);
	// stb r31,728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 728, ctx.r31.u8);
	// stb r10,729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 729, ctx.r10.u8);
	// stb r3,730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 730, ctx.r3.u8);
	// stb r9,732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 732, ctx.r9.u8);
	// stb r4,734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 734, ctx.r4.u8);
	// stb r11,735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 735, ctx.r11.u8);
	// stb r11,736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 736, ctx.r11.u8);
	// stb r11,738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 738, ctx.r11.u8);
	// stb r11,739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 739, ctx.r11.u8);
	// stb r11,740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 740, ctx.r11.u8);
	// stb r8,741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 741, ctx.r8.u8);
	// stb r27,742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 742, ctx.r27.u8);
	// stb r31,743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 743, ctx.r31.u8);
	// stb r7,744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 744, ctx.r7.u8);
	// stb r24,745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 745, ctx.r24.u8);
	// stb r31,746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 746, ctx.r31.u8);
	// stb r31,747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 747, ctx.r31.u8);
	// stb r31,748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 748, ctx.r31.u8);
	// stb r10,749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 749, ctx.r10.u8);
	// stb r14,750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 750, ctx.r14.u8);
	// stb r14,787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 787, ctx.r14.u8);
	// li r21,253
	ctx.r21.s64 = 253;
	// li r14,40
	ctx.r14.s64 = 40;
	// stb r30,751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 751, ctx.r30.u8);
	// stb r31,752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 752, ctx.r31.u8);
	// stb r31,753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 753, ctx.r31.u8);
	// stb r10,754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 754, ctx.r10.u8);
	// stb r21,759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 759, ctx.r21.u8);
	// li r21,166
	ctx.r21.s64 = 166;
	// stb r14,791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 791, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r3,755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 755, ctx.r3.u8);
	// stb r4,756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 756, ctx.r4.u8);
	// stb r11,757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 757, ctx.r11.u8);
	// stb r21,772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 772, ctx.r21.u8);
	// li r21,168
	ctx.r21.s64 = 168;
	// stb r14,794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 794, ctx.r14.u8);
	// li r14,154
	ctx.r14.s64 = 154;
	// stb r11,758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 758, ctx.r11.u8);
	// stb r11,760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 760, ctx.r11.u8);
	// stb r11,761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 761, ctx.r11.u8);
	// stb r21,777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 777, ctx.r21.u8);
	// li r21,200
	ctx.r21.s64 = 200;
	// stb r14,795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 795, ctx.r14.u8);
	// li r14,96
	ctx.r14.s64 = 96;
	// stb r11,762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 762, ctx.r11.u8);
	// stb r8,763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 763, ctx.r8.u8);
	// stb r27,764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 764, ctx.r27.u8);
	// stb r21,781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 781, ctx.r21.u8);
	// li r21,163
	ctx.r21.s64 = 163;
	// stb r14,800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 800, ctx.r14.u8);
	// li r14,87
	ctx.r14.s64 = 87;
	// stb r31,765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 765, ctx.r31.u8);
	// stb r31,766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 766, ctx.r31.u8);
	// stb r24,767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 767, ctx.r24.u8);
	// stb r31,768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 768, ctx.r31.u8);
	// stb r31,769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 769, ctx.r31.u8);
	// stb r31,770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 770, ctx.r31.u8);
	// stb r29,771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 771, ctx.r29.u8);
	// stb r31,773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 773, ctx.r31.u8);
	// stb r31,774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 774, ctx.r31.u8);
	// stb r31,775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 775, ctx.r31.u8);
	// stb r29,776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 776, ctx.r29.u8);
	// stb r9,778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 778, ctx.r9.u8);
	// stb r20,779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 779, ctx.r20.u8);
	// stb r23,780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 780, ctx.r23.u8);
	// stb r21,782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 782, ctx.r21.u8);
	// stb r31,783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 783, ctx.r31.u8);
	// stb r31,784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 784, ctx.r31.u8);
	// stb r31,785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 785, ctx.r31.u8);
	// stb r10,786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 786, ctx.r10.u8);
	// stb r9,788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 788, ctx.r9.u8);
	// stb r20,789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 789, ctx.r20.u8);
	// stb r23,790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 790, ctx.r23.u8);
	// stb r26,792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 792, ctx.r26.u8);
	// stb r22,793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 793, ctx.r22.u8);
	// stb r31,796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 796, ctx.r31.u8);
	// stb r31,797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 797, ctx.r31.u8);
	// stb r31,798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 798, ctx.r31.u8);
	// stb r10,799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 799, ctx.r10.u8);
	// stb r17,801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 801, ctx.r17.u8);
	// stb r30,802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 802, ctx.r30.u8);
	// stb r31,803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 803, ctx.r31.u8);
	// stb r31,804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 804, ctx.r31.u8);
	// stb r10,805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 805, ctx.r10.u8);
	// stb r3,806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 806, ctx.r3.u8);
	// stb r9,807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 807, ctx.r9.u8);
	// stb r28,808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 808, ctx.r28.u8);
	// stb r4,809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 809, ctx.r4.u8);
	// stb r11,810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 810, ctx.r11.u8);
	// stb r11,811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 811, ctx.r11.u8);
	// stb r8,812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 812, ctx.r8.u8);
	// stb r14,813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 813, ctx.r14.u8);
	// stb r11,814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 814, ctx.r11.u8);
	// stb r11,815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 815, ctx.r11.u8);
	// stb r8,816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 816, ctx.r8.u8);
	// stb r9,817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 817, ctx.r9.u8);
	// stb r31,818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 818, ctx.r31.u8);
	// stb r31,819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 819, ctx.r31.u8);
	// stb r4,820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 820, ctx.r4.u8);
	// stb r11,821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 821, ctx.r11.u8);
	// li r14,166
	ctx.r14.s64 = 166;
	// stb r11,822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 822, ctx.r11.u8);
	// li r21,168
	ctx.r21.s64 = 168;
	// stb r8,823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 823, ctx.r8.u8);
	// stb r31,824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 824, ctx.r31.u8);
	// stb r11,825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 825, ctx.r11.u8);
	// stb r11,826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 826, ctx.r11.u8);
	// stb r14,836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 836, ctx.r14.u8);
	// stb r14,854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 854, ctx.r14.u8);
	// li r14,168
	ctx.r14.s64 = 168;
	// stb r21,841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 841, ctx.r21.u8);
	// li r21,38
	ctx.r21.s64 = 38;
	// stb r8,827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 827, ctx.r8.u8);
	// stb r27,828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 828, ctx.r27.u8);
	// stb r31,829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 829, ctx.r31.u8);
	// stb r14,859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 859, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r21,842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 842, ctx.r21.u8);
	// li r21,85
	ctx.r21.s64 = 85;
	// stb r7,830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 830, ctx.r7.u8);
	// stb r24,831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 831, ctx.r24.u8);
	// stb r31,832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 832, ctx.r31.u8);
	// stb r14,862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 862, ctx.r14.u8);
	// li r14,154
	ctx.r14.s64 = 154;
	// stb r31,833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 833, ctx.r31.u8);
	// stb r31,834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 834, ctx.r31.u8);
	// stb r29,835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 835, ctx.r29.u8);
	// stb r31,837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 837, ctx.r31.u8);
	// stb r14,863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 863, ctx.r14.u8);
	// li r14,58
	ctx.r14.s64 = 58;
	// stb r31,838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 838, ctx.r31.u8);
	// stb r31,839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 839, ctx.r31.u8);
	// stb r29,840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 840, ctx.r29.u8);
	// stb r21,843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 843, ctx.r21.u8);
	// stb r14,865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 865, ctx.r14.u8);
	// li r14,211
	ctx.r14.s64 = 211;
	// stb r30,844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 844, ctx.r30.u8);
	// stb r31,845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 845, ctx.r31.u8);
	// stb r31,846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 846, ctx.r31.u8);
	// stb r10,847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 847, ctx.r10.u8);
	// stb r14,870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 870, ctx.r14.u8);
	// li r14,58
	ctx.r14.s64 = 58;
	// stb r3,848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 848, ctx.r3.u8);
	// stb r24,849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 849, ctx.r24.u8);
	// stb r31,850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 850, ctx.r31.u8);
	// stb r31,851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 851, ctx.r31.u8);
	// stb r14,872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 872, ctx.r14.u8);
	// li r14,36
	ctx.r14.s64 = 36;
	// stb r31,852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 852, ctx.r31.u8);
	// stb r29,853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 853, ctx.r29.u8);
	// stb r31,855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 855, ctx.r31.u8);
	// stb r31,856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 856, ctx.r31.u8);
	// stb r14,873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 873, ctx.r14.u8);
	// li r14,27
	ctx.r14.s64 = 27;
	// stb r31,857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 857, ctx.r31.u8);
	// stb r29,858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 858, ctx.r29.u8);
	// stb r26,860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 860, ctx.r26.u8);
	// stb r22,861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 861, ctx.r22.u8);
	// stb r14,876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 876, ctx.r14.u8);
	// li r14,224
	ctx.r14.s64 = 224;
	// stb r6,864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 864, ctx.r6.u8);
	// stb r7,866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 866, ctx.r7.u8);
	// stb r11,867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 867, ctx.r11.u8);
	// stb r11,868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 868, ctx.r11.u8);
	// stb r14,881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 881, ctx.r14.u8);
	// li r14,253
	ctx.r14.s64 = 253;
	// stb r11,869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 869, ctx.r11.u8);
	// stb r6,871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 871, ctx.r6.u8);
	// stb r22,874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 874, ctx.r22.u8);
	// stb r9,875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 875, ctx.r9.u8);
	// stb r31,877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 877, ctx.r31.u8);
	// stb r31,878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 878, ctx.r31.u8);
	// stb r31,879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 879, ctx.r31.u8);
	// stb r10,880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 880, ctx.r10.u8);
	// stb r31,882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 882, ctx.r31.u8);
	// stb r31,883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 883, ctx.r31.u8);
	// stb r31,884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 884, ctx.r31.u8);
	// stb r31,885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 885, ctx.r31.u8);
	// stb r4,886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 886, ctx.r4.u8);
	// stb r11,887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 887, ctx.r11.u8);
	// stb r11,888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 888, ctx.r11.u8);
	// li r21,130
	ctx.r21.s64 = 130;
	// stb r14,889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 889, ctx.r14.u8);
	// stb r29,917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 917, ctx.r29.u8);
	// li r14,147
	ctx.r14.s64 = 147;
	// li r29,166
	ctx.r29.s64 = 166;
	// stb r11,890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 890, ctx.r11.u8);
	// stb r11,891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 891, ctx.r11.u8);
	// stb r11,892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 892, ctx.r11.u8);
	// stb r21,929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 929, ctx.r21.u8);
	// stb r21,930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 930, ctx.r21.u8);
	// li r21,154
	ctx.r21.s64 = 154;
	// stb r14,898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 898, ctx.r14.u8);
	// li r14,38
	ctx.r14.s64 = 38;
	// stb r29,918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 918, ctx.r29.u8);
	// li r29,17
	ctx.r29.s64 = 17;
	// stb r8,893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 893, ctx.r8.u8);
	// stb r27,894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 894, ctx.r27.u8);
	// stb r21,931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 931, ctx.r21.u8);
	// li r21,24
	ctx.r21.s64 = 24;
	// stb r14,905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 905, ctx.r14.u8);
	// li r14,163
	ctx.r14.s64 = 163;
	// stb r29,922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 922, ctx.r29.u8);
	// li r29,180
	ctx.r29.s64 = 180;
	// stb r31,895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 895, ctx.r31.u8);
	// stb r31,896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 896, ctx.r31.u8);
	// stb r21,940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 940, ctx.r21.u8);
	// li r21,21
	ctx.r21.s64 = 21;
	// stb r24,897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 897, ctx.r24.u8);
	// stb r17,899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 899, ctx.r17.u8);
	// stb r30,900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 900, ctx.r30.u8);
	// stb r31,901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 901, ctx.r31.u8);
	// stb r21,942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 942, ctx.r21.u8);
	// li r21,44
	ctx.r21.s64 = 44;
	// stb r31,902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 902, ctx.r31.u8);
	// stb r10,903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 903, ctx.r10.u8);
	// stb r3,904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 904, ctx.r3.u8);
	// stb r9,906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 906, ctx.r9.u8);
	// stb r30,907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 907, ctx.r30.u8);
	// stb r31,908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 908, ctx.r31.u8);
	// stb r31,909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 909, ctx.r31.u8);
	// stb r10,910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 910, ctx.r10.u8);
	// stb r3,911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 911, ctx.r3.u8);
	// stb r9,912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 912, ctx.r9.u8);
	// stb r14,913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 913, ctx.r14.u8);
	// stb r31,914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 914, ctx.r31.u8);
	// stb r31,915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 915, ctx.r31.u8);
	// stb r31,916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 916, ctx.r31.u8);
	// stb r9,919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 919, ctx.r9.u8);
	// stb r20,920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 920, ctx.r20.u8);
	// stb r23,921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 921, ctx.r23.u8);
	// stb r20,923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 923, ctx.r20.u8);
	// stb r22,924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 924, ctx.r22.u8);
	// stb r29,925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 925, ctx.r29.u8);
	// stb r26,926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 926, ctx.r26.u8);
	// stb r22,927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 927, ctx.r22.u8);
	// stb r29,928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 928, ctx.r29.u8);
	// stb r17,932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 932, ctx.r17.u8);
	// stb r30,933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 933, ctx.r30.u8);
	// stb r31,934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 934, ctx.r31.u8);
	// stb r31,935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 935, ctx.r31.u8);
	// stb r10,936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 936, ctx.r10.u8);
	// stb r3,937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 937, ctx.r3.u8);
	// stb r18,938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 938, ctx.r18.u8);
	// stb r9,939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 939, ctx.r9.u8);
	// stb r31,941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 941, ctx.r31.u8);
	// stb r29,943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 943, ctx.r29.u8);
	// stb r6,944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 944, ctx.r6.u8);
	// stb r5,945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 945, ctx.r5.u8);
	// stb r31,946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 946, ctx.r31.u8);
	// stb r31,947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 947, ctx.r31.u8);
	// stb r31,948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 948, ctx.r31.u8);
	// stb r10,949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 949, ctx.r10.u8);
	// stb r25,950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 950, ctx.r25.u8);
	// stb r15,951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 951, ctx.r15.u8);
	// stb r7,952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 952, ctx.r7.u8);
	// stb r31,953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 953, ctx.r31.u8);
	// stb r31,954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 954, ctx.r31.u8);
	// stb r10,955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 955, ctx.r10.u8);
	// stb r16,956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 956, ctx.r16.u8);
	// stb r6,957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 957, ctx.r6.u8);
	// stb r5,958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 958, ctx.r5.u8);
	// stb r21,959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 959, ctx.r21.u8);
	// li r21,24
	ctx.r21.s64 = 24;
	// stb r16,980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 980, ctx.r16.u8);
	// li r16,44
	ctx.r16.s64 = 44;
	// stb r23,960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 960, ctx.r23.u8);
	// stb r29,967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 967, ctx.r29.u8);
	// li r29,97
	ctx.r29.s64 = 97;
	// stb r15,975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 975, ctx.r15.u8);
	// li r15,38
	ctx.r15.s64 = 38;
	// stb r21,964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 964, ctx.r21.u8);
	// li r21,21
	ctx.r21.s64 = 21;
	// stb r16,983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 983, ctx.r16.u8);
	// li r16,87
	ctx.r16.s64 = 87;
	// stb r23,984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 984, ctx.r23.u8);
	// li r23,95
	ctx.r23.s64 = 95;
	// stb r9,961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 961, ctx.r9.u8);
	// stb r9,962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 962, ctx.r9.u8);
	// stb r21,966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 966, ctx.r21.u8);
	// li r21,85
	ctx.r21.s64 = 85;
	// stb r9,963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 963, ctx.r9.u8);
	// stb r31,965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 965, ctx.r31.u8);
	// stb r6,968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 968, ctx.r6.u8);
	// stb r5,969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 969, ctx.r5.u8);
	// stb r31,970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 970, ctx.r31.u8);
	// stb r31,971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 971, ctx.r31.u8);
	// stb r31,972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 972, ctx.r31.u8);
	// stb r10,973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 973, ctx.r10.u8);
	// stb r29,974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 974, ctx.r29.u8);
	// stb r7,976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 976, ctx.r7.u8);
	// stb r31,977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 977, ctx.r31.u8);
	// stb r31,978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 978, ctx.r31.u8);
	// stb r10,979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 979, ctx.r10.u8);
	// stb r6,981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 981, ctx.r6.u8);
	// stb r5,982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 982, ctx.r5.u8);
	// stb r9,985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 985, ctx.r9.u8);
	// stb r9,986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 986, ctx.r9.u8);
	// stb r9,987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 987, ctx.r9.u8);
	// stb r28,988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 988, ctx.r28.u8);
	// stb r4,989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 989, ctx.r4.u8);
	// stb r11,990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 990, ctx.r11.u8);
	// stb r11,991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 991, ctx.r11.u8);
	// stb r8,992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 992, ctx.r8.u8);
	// stb r16,993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 993, ctx.r16.u8);
	// stb r11,994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 994, ctx.r11.u8);
	// stb r11,995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 995, ctx.r11.u8);
	// stb r8,996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 996, ctx.r8.u8);
	// stb r9,997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 997, ctx.r9.u8);
	// stb r31,998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 998, ctx.r31.u8);
	// stb r31,999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 999, ctx.r31.u8);
	// stb r4,1000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1000, ctx.r4.u8);
	// stb r11,1001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1001, ctx.r11.u8);
	// stb r11,1002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1002, ctx.r11.u8);
	// stb r8,1003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1003, ctx.r8.u8);
	// stb r31,1004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1004, ctx.r31.u8);
	// stb r11,1005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1005, ctx.r11.u8);
	// stb r11,1006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1006, ctx.r11.u8);
	// stb r8,1007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1007, ctx.r8.u8);
	// stb r27,1008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1008, ctx.r27.u8);
	// stb r31,1009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1009, ctx.r31.u8);
	// stb r7,1010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1010, ctx.r7.u8);
	// stb r31,1011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1011, ctx.r31.u8);
	// stb r31,1012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1012, ctx.r31.u8);
	// stb r31,1013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1013, ctx.r31.u8);
	// stb r10,1014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1014, ctx.r10.u8);
	// stb r23,1015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1015, ctx.r23.u8);
	// stb r15,1016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1016, ctx.r15.u8);
	// stb r21,1017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1017, ctx.r21.u8);
	// stb r30,1018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1018, ctx.r30.u8);
	// stb r31,1019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1019, ctx.r31.u8);
	// stb r31,1020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1020, ctx.r31.u8);
	// stb r10,1021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1021, ctx.r10.u8);
	// stb r3,1022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1022, ctx.r3.u8);
	// stb r31,1023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1023, ctx.r31.u8);
	// stb r31,1024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1024, ctx.r31.u8);
	// stb r31,1025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1025, ctx.r31.u8);
	// stb r10,1026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1026, ctx.r10.u8);
	// stb r23,1027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1027, ctx.r23.u8);
	// stb r14,1028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1028, ctx.r14.u8);
	// stb r31,1029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1029, ctx.r31.u8);
	// stb r31,1030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1030, ctx.r31.u8);
	// stb r31,1031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1031, ctx.r31.u8);
	// stb r29,1033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1033, ctx.r29.u8);
	// li r29,148
	ctx.r29.s64 = 148;
	// stb r10,1032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1032, ctx.r10.u8);
	// stb r9,1034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1034, ctx.r9.u8);
	// stb r20,1035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1035, ctx.r20.u8);
	// stb r31,1036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1036, ctx.r31.u8);
	// stb r29,1037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1037, ctx.r29.u8);
	// li r29,77
	ctx.r29.s64 = 77;
	// stb r14,1038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1038, ctx.r14.u8);
	// stb r31,1039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1039, ctx.r31.u8);
	// stb r31,1040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1040, ctx.r31.u8);
	// stb r31,1041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1041, ctx.r31.u8);
	// stb r29,1047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1047, ctx.r29.u8);
	// li r29,75
	ctx.r29.s64 = 75;
	// stb r10,1042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1042, ctx.r10.u8);
	// stb r25,1043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1043, ctx.r25.u8);
	// stb r9,1044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1044, ctx.r9.u8);
	// stb r20,1045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1045, ctx.r20.u8);
	// stb r29,1057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1057, ctx.r29.u8);
	// li r29,150
	ctx.r29.s64 = 150;
	// stb r31,1046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1046, ctx.r31.u8);
	// stb r28,1048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1048, ctx.r28.u8);
	// stb r31,1049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1049, ctx.r31.u8);
	// stb r31,1050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1050, ctx.r31.u8);
	// stb r29,1058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1058, ctx.r29.u8);
	// li r29,65
	ctx.r29.s64 = 65;
	// stb r31,1051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1051, ctx.r31.u8);
	// stb r10,1052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1052, ctx.r10.u8);
	// stb r25,1053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1053, ctx.r25.u8);
	// stb r18,1054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1054, ctx.r18.u8);
	// stb r29,1073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1073, ctx.r29.u8);
	// li r29,151
	ctx.r29.s64 = 151;
	// stb r26,1055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1055, ctx.r26.u8);
	// stb r19,1056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1056, ctx.r19.u8);
	// stb r31,1059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1059, ctx.r31.u8);
	// stb r31,1060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1060, ctx.r31.u8);
	// stb r31,1061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1061, ctx.r31.u8);
	// stb r10,1062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1062, ctx.r10.u8);
	// stb r25,1063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1063, ctx.r25.u8);
	// stb r17,1064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1064, ctx.r17.u8);
	// stb r30,1065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1065, ctx.r30.u8);
	// stb r31,1066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1066, ctx.r31.u8);
	// stb r31,1067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1067, ctx.r31.u8);
	// stb r10,1068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1068, ctx.r10.u8);
	// stb r3,1069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1069, ctx.r3.u8);
	// stb r9,1070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1070, ctx.r9.u8);
	// stb r26,1071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1071, ctx.r26.u8);
	// stb r19,1072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1072, ctx.r19.u8);
	// stb r29,1074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1074, ctx.r29.u8);
	// stb r4,1075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1075, ctx.r4.u8);
	// stb r11,1076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1076, ctx.r11.u8);
	// stb r11,1077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1077, ctx.r11.u8);
	// stb r8,1078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1078, ctx.r8.u8);
	// stb r16,1079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1079, ctx.r16.u8);
	// stb r11,1080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1080, ctx.r11.u8);
	// stb r11,1081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1081, ctx.r11.u8);
	// stb r8,1082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1082, ctx.r8.u8);
	// stb r9,1083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1083, ctx.r9.u8);
	// stb r31,1084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1084, ctx.r31.u8);
	// stb r31,1085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1085, ctx.r31.u8);
	// stb r4,1086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1086, ctx.r4.u8);
	// stb r11,1087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1087, ctx.r11.u8);
	// stb r11,1088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1088, ctx.r11.u8);
	// stb r8,1089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1089, ctx.r8.u8);
	// stb r31,1090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1090, ctx.r31.u8);
	// stb r11,1091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1091, ctx.r11.u8);
	// stb r11,1092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1092, ctx.r11.u8);
	// stb r8,1093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1093, ctx.r8.u8);
	// stb r27,1094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1094, ctx.r27.u8);
	// stb r31,1095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1095, ctx.r31.u8);
	// stb r31,1096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1096, ctx.r31.u8);
	// stb r24,1097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1097, ctx.r24.u8);
	// stb r31,1098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1098, ctx.r31.u8);
	// stb r31,1099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1099, ctx.r31.u8);
	// stb r31,1100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1100, ctx.r31.u8);
	// stb r10,1101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1101, ctx.r10.u8);
	// stb r25,1102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1102, ctx.r25.u8);
	// stb r30,1103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1103, ctx.r30.u8);
	// stb r31,1104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1104, ctx.r31.u8);
	// stb r31,1105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1105, ctx.r31.u8);
	// stb r10,1106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1106, ctx.r10.u8);
	// li r28,222
	ctx.r28.s64 = 222;
	// stb r11,1112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1112, ctx.r11.u8);
	// stb r11,1113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1113, ctx.r11.u8);
	// stb r11,1115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1115, ctx.r11.u8);
	// stb r11,1116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1116, ctx.r11.u8);
	// stb r11,1117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1117, ctx.r11.u8);
	// stb r28,1110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1110, ctx.r28.u8);
	// li r28,253
	ctx.r28.s64 = 253;
	// stb r11,1136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1136, ctx.r11.u8);
	// stb r11,1137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1137, ctx.r11.u8);
	// stb r11,1140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1140, ctx.r11.u8);
	// stb r11,1141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1141, ctx.r11.u8);
	// stb r11,1147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1147, ctx.r11.u8);
	// stb r11,1148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1148, ctx.r11.u8);
	// stb r11,1151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1151, ctx.r11.u8);
	// stb r11,1152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1152, ctx.r11.u8);
	// li r11,207
	ctx.r11.s64 = 207;
	// stb r3,1107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1107, ctx.r3.u8);
	// stb r15,1108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1108, ctx.r15.u8);
	// stb r9,1109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1109, ctx.r9.u8);
	// stb r4,1111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1111, ctx.r4.u8);
	// stb r28,1114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1114, ctx.r28.u8);
	// stb r8,1118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1118, ctx.r8.u8);
	// stb r27,1119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1119, ctx.r27.u8);
	// stb r31,1120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1120, ctx.r31.u8);
	// stb r7,1121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1121, ctx.r7.u8);
	// stb r24,1122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1122, ctx.r24.u8);
	// stb r31,1123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1123, ctx.r31.u8);
	// stb r31,1124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1124, ctx.r31.u8);
	// stb r31,1125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1125, ctx.r31.u8);
	// stb r10,1126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1126, ctx.r10.u8);
	// stb r25,1127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1127, ctx.r25.u8);
	// stb r30,1128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1128, ctx.r30.u8);
	// stb r31,1129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1129, ctx.r31.u8);
	// stb r31,1130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1130, ctx.r31.u8);
	// stb r10,1131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1131, ctx.r10.u8);
	// stb r3,1132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1132, ctx.r3.u8);
	// stb r6,1133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1133, ctx.r6.u8);
	// stb r5,1134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1134, ctx.r5.u8);
	// stb r4,1135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1135, ctx.r4.u8);
	// stb r8,1138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1138, ctx.r8.u8);
	// stb r16,1139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1139, ctx.r16.u8);
	// stb r8,1142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1142, ctx.r8.u8);
	// stb r9,1143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1143, ctx.r9.u8);
	// stb r31,1144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1144, ctx.r31.u8);
	// stb r31,1145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1145, ctx.r31.u8);
	// stb r4,1146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1146, ctx.r4.u8);
	// stb r8,1149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1149, ctx.r8.u8);
	// stb r31,1150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1150, ctx.r31.u8);
	// stb r8,1153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1153, ctx.r8.u8);
	// stb r27,1154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1154, ctx.r27.u8);
	// stb r31,1155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1155, ctx.r31.u8);
	// stb r31,1156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1156, ctx.r31.u8);
	// stb r24,1157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1157, ctx.r24.u8);
	// stb r31,1158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1158, ctx.r31.u8);
	// stb r31,1159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1159, ctx.r31.u8);
	// stb r31,1160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1160, ctx.r31.u8);
	// stb r10,1161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1161, ctx.r10.u8);
	// stb r25,1162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1162, ctx.r25.u8);
	// stb r30,1163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1163, ctx.r30.u8);
	// stb r31,1164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1164, ctx.r31.u8);
	// stb r31,1165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1165, ctx.r31.u8);
	// stb r10,1166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1166, ctx.r10.u8);
	// stb r3,1167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1167, ctx.r3.u8);
	// stb r9,1168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1168, ctx.r9.u8);
	// stb r14,1169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1169, ctx.r14.u8);
	// stb r31,1170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1170, ctx.r31.u8);
	// stb r31,1171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1171, ctx.r31.u8);
	// stb r31,1172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1172, ctx.r31.u8);
	// stb r10,1173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1173, ctx.r10.u8);
	// stb r25,1174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1174, ctx.r25.u8);
	// stb r9,1175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1175, ctx.r9.u8);
	// stb r20,1176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1176, ctx.r20.u8);
	// stb r22,1177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1177, ctx.r22.u8);
	// stb r11,1178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1178, ctx.r11.u8);
	// stb r26,1179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1179, ctx.r26.u8);
	// stb r19,1180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1180, ctx.r19.u8);
	// stb r25,1181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1181, ctx.r25.u8);
	// stb r29,1182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1182, ctx.r29.u8);
	// stb r17,1183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1183, ctx.r17.u8);
	// stb r30,1184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1184, ctx.r30.u8);
	// li r11,104
	ctx.r11.s64 = 104;
	// ld r21,1224(r1)
	ctx.r21.u64 = PPC_LOAD_U64(ctx.r1.u32 + 1224);
	// stb r3,1188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1188, ctx.r3.u8);
	// li r5,1135
	ctx.r5.s64 = 1135;
	// addi r29,r21,32
	ctx.r29.s64 = ctx.r21.s64 + 32;
	// stb r3,1198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1198, ctx.r3.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,1185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1185, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,1186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1186, ctx.r31.u8);
	// stb r11,1201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1201, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r10,1187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1187, ctx.r10.u8);
	// stb r18,1189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1189, ctx.r18.u8);
	// stb r9,1190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1190, ctx.r9.u8);
	// stb r19,1191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1191, ctx.r19.u8);
	// stb r11,1209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1209, ctx.r11.u8);
	// li r11,106
	ctx.r11.s64 = 106;
	// stb r24,1192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1192, ctx.r24.u8);
	// stb r18,1193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1193, ctx.r18.u8);
	// stb r30,1194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1194, ctx.r30.u8);
	// stb r31,1195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1195, ctx.r31.u8);
	// stb r11,1213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1213, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,1196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1196, ctx.r31.u8);
	// stb r10,1197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1197, ctx.r10.u8);
	// stb r20,1199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1199, ctx.r20.u8);
	// stb r19,1200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1200, ctx.r19.u8);
	// stb r19,1202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1202, ctx.r19.u8);
	// stb r31,1203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1203, ctx.r31.u8);
	// stb r31,1204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1204, ctx.r31.u8);
	// stb r31,1205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1205, ctx.r31.u8);
	// stb r10,1206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1206, ctx.r10.u8);
	// stb r23,1207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1207, ctx.r23.u8);
	// stb r19,1208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1208, ctx.r19.u8);
	// stb r31,1210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1210, ctx.r31.u8);
	// stb r31,1211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1211, ctx.r31.u8);
	// stb r10,1212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1212, ctx.r10.u8);
	// stb r11,1214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1214, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248DD9C;
	sub_82B06418(ctx, base);
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// stw r29,20(r21)
	PPC_STORE_U32(ctx.r21.u32 + 20, ctx.r29.u32);
	// addi r1,r1,1392
	ctx.r1.s64 = ctx.r1.s64 + 1392;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248DDB0"))) PPC_WEAK_FUNC(sub_8248DDB0);
PPC_FUNC_IMPL(__imp__sub_8248DDB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248DDB8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r31,r29,8
	ctx.r31.s64 = ctx.r29.s64 + 8;
	// addi r30,r29,20
	ctx.r30.s64 = ctx.r29.s64 + 20;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// addi r4,r10,26132
	ctx.r4.s64 = ctx.r10.s64 + 26132;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r11.u32);
	// bl 0x8243b750
	ctx.lr = 0x8248DE04;
	sub_8243B750(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,26072
	ctx.r4.s64 = ctx.r11.s64 + 26072;
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stw r9,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248DE24;
	sub_822E0818(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DE30;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248de4c
	if (ctx.cr6.eq) goto loc_8248DE4C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26056
	ctx.r4.s64 = ctx.r11.s64 + 26056;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DE4C;
	sub_8243B750(ctx, base);
loc_8248DE4C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DE58;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248de74
	if (ctx.cr6.eq) goto loc_8248DE74;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26036
	ctx.r4.s64 = ctx.r11.s64 + 26036;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DE74;
	sub_8243B750(ctx, base);
loc_8248DE74:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DE80;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248de9c
	if (ctx.cr6.eq) goto loc_8248DE9C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26016
	ctx.r4.s64 = ctx.r11.s64 + 26016;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DE9C;
	sub_8243B750(ctx, base);
loc_8248DE9C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DEA8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248dec4
	if (ctx.cr6.eq) goto loc_8248DEC4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25992
	ctx.r4.s64 = ctx.r11.s64 + 25992;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DEC4;
	sub_8243B750(ctx, base);
loc_8248DEC4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DED0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248deec
	if (ctx.cr6.eq) goto loc_8248DEEC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25968
	ctx.r4.s64 = ctx.r11.s64 + 25968;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DEEC;
	sub_8243B750(ctx, base);
loc_8248DEEC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DEF8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248df14
	if (ctx.cr6.eq) goto loc_8248DF14;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25944
	ctx.r4.s64 = ctx.r11.s64 + 25944;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DF14;
	sub_8243B750(ctx, base);
loc_8248DF14:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DF20;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248df3c
	if (ctx.cr6.eq) goto loc_8248DF3C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25920
	ctx.r4.s64 = ctx.r11.s64 + 25920;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DF3C;
	sub_8243B750(ctx, base);
loc_8248DF3C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DF48;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248df64
	if (ctx.cr6.eq) goto loc_8248DF64;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25892
	ctx.r4.s64 = ctx.r11.s64 + 25892;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DF64;
	sub_8243B750(ctx, base);
loc_8248DF64:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DF70;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248df8c
	if (ctx.cr6.eq) goto loc_8248DF8C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25864
	ctx.r4.s64 = ctx.r11.s64 + 25864;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DF8C;
	sub_8243B750(ctx, base);
loc_8248DF8C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DF98;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248dfb4
	if (ctx.cr6.eq) goto loc_8248DFB4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25840
	ctx.r4.s64 = ctx.r11.s64 + 25840;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DFB4;
	sub_8243B750(ctx, base);
loc_8248DFB4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DFC0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248dfdc
	if (ctx.cr6.eq) goto loc_8248DFDC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25816
	ctx.r4.s64 = ctx.r11.s64 + 25816;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248DFDC;
	sub_8243B750(ctx, base);
loc_8248DFDC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248DFE8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e004
	if (ctx.cr6.eq) goto loc_8248E004;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25792
	ctx.r4.s64 = ctx.r11.s64 + 25792;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E004;
	sub_8243B750(ctx, base);
loc_8248E004:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E010;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e02c
	if (ctx.cr6.eq) goto loc_8248E02C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25768
	ctx.r4.s64 = ctx.r11.s64 + 25768;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E02C;
	sub_8243B750(ctx, base);
loc_8248E02C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E038;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e054
	if (ctx.cr6.eq) goto loc_8248E054;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25748
	ctx.r4.s64 = ctx.r11.s64 + 25748;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E054;
	sub_8243B750(ctx, base);
loc_8248E054:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E060;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e07c
	if (ctx.cr6.eq) goto loc_8248E07C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25732
	ctx.r4.s64 = ctx.r11.s64 + 25732;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E07C;
	sub_8243B750(ctx, base);
loc_8248E07C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E088;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e0a4
	if (ctx.cr6.eq) goto loc_8248E0A4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25712
	ctx.r4.s64 = ctx.r11.s64 + 25712;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E0A4;
	sub_8243B750(ctx, base);
loc_8248E0A4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E0B0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e0cc
	if (ctx.cr6.eq) goto loc_8248E0CC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25696
	ctx.r4.s64 = ctx.r11.s64 + 25696;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E0CC;
	sub_8243B750(ctx, base);
loc_8248E0CC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E0D8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e0f4
	if (ctx.cr6.eq) goto loc_8248E0F4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25672
	ctx.r4.s64 = ctx.r11.s64 + 25672;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E0F4;
	sub_8243B750(ctx, base);
loc_8248E0F4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E100;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e11c
	if (ctx.cr6.eq) goto loc_8248E11C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25656
	ctx.r4.s64 = ctx.r11.s64 + 25656;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E11C;
	sub_8243B750(ctx, base);
loc_8248E11C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E128;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e144
	if (ctx.cr6.eq) goto loc_8248E144;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25640
	ctx.r4.s64 = ctx.r11.s64 + 25640;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E144;
	sub_8243B750(ctx, base);
loc_8248E144:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E150;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e16c
	if (ctx.cr6.eq) goto loc_8248E16C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25624
	ctx.r4.s64 = ctx.r11.s64 + 25624;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E16C;
	sub_8243B750(ctx, base);
loc_8248E16C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E178;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e194
	if (ctx.cr6.eq) goto loc_8248E194;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,25612
	ctx.r4.s64 = ctx.r11.s64 + 25612;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E194;
	sub_8243B750(ctx, base);
loc_8248E194:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248E1A0"))) PPC_WEAK_FUNC(sub_8248E1A0);
PPC_FUNC_IMPL(__imp__sub_8248E1A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248E1A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r31,r29,8
	ctx.r31.s64 = ctx.r29.s64 + 8;
	// addi r30,r29,20
	ctx.r30.s64 = ctx.r29.s64 + 20;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// addi r4,r10,26372
	ctx.r4.s64 = ctx.r10.s64 + 26372;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r11.u32);
	// bl 0x8243b750
	ctx.lr = 0x8248E1F4;
	sub_8243B750(ctx, base);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,26340
	ctx.r4.s64 = ctx.r11.s64 + 26340;
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stw r9,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E214;
	sub_822E0818(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E220;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e23c
	if (ctx.cr6.eq) goto loc_8248E23C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26320
	ctx.r4.s64 = ctx.r11.s64 + 26320;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E23C;
	sub_8243B750(ctx, base);
loc_8248E23C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E248;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e264
	if (ctx.cr6.eq) goto loc_8248E264;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26296
	ctx.r4.s64 = ctx.r11.s64 + 26296;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E264;
	sub_8243B750(ctx, base);
loc_8248E264:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E270;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e28c
	if (ctx.cr6.eq) goto loc_8248E28C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26280
	ctx.r4.s64 = ctx.r11.s64 + 26280;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E28C;
	sub_8243B750(ctx, base);
loc_8248E28C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E298;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e2b4
	if (ctx.cr6.eq) goto loc_8248E2B4;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26260
	ctx.r4.s64 = ctx.r11.s64 + 26260;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E2B4;
	sub_8243B750(ctx, base);
loc_8248E2B4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E2C0;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e2dc
	if (ctx.cr6.eq) goto loc_8248E2DC;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26240
	ctx.r4.s64 = ctx.r11.s64 + 26240;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E2DC;
	sub_8243B750(ctx, base);
loc_8248E2DC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E2E8;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e304
	if (ctx.cr6.eq) goto loc_8248E304;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26220
	ctx.r4.s64 = ctx.r11.s64 + 26220;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E304;
	sub_8243B750(ctx, base);
loc_8248E304:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E310;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e32c
	if (ctx.cr6.eq) goto loc_8248E32C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26200
	ctx.r4.s64 = ctx.r11.s64 + 26200;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E32C;
	sub_8243B750(ctx, base);
loc_8248E32C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E338;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e354
	if (ctx.cr6.eq) goto loc_8248E354;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26180
	ctx.r4.s64 = ctx.r11.s64 + 26180;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E354;
	sub_8243B750(ctx, base);
loc_8248E354:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x829dfa80
	ctx.lr = 0x8248E360;
	sub_829DFA80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x8248e37c
	if (ctx.cr6.eq) goto loc_8248E37C;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,26164
	ctx.r4.s64 = ctx.r11.s64 + 26164;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x8243b750
	ctx.lr = 0x8248E37C;
	sub_8243B750(ctx, base);
loc_8248E37C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248E388"))) PPC_WEAK_FUNC(sub_8248E388);
PPC_FUNC_IMPL(__imp__sub_8248E388) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248E390;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26388
	ctx.r4.s64 = ctx.r10.s64 + 26388;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E3CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,56
	ctx.r11.s64 = 56;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248E4A4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248E4B8"))) PPC_WEAK_FUNC(sub_8248E4B8);
PPC_FUNC_IMPL(__imp__sub_8248E4B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248E4C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26400
	ctx.r4.s64 = ctx.r10.s64 + 26400;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E4FC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,57
	ctx.r11.s64 = 57;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,51
	ctx.r11.s64 = 51;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248E5E4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248E5F8"))) PPC_WEAK_FUNC(sub_8248E5F8);
PPC_FUNC_IMPL(__imp__sub_8248E5F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248E600;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26424
	ctx.r4.s64 = ctx.r10.s64 + 26424;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E63C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,60
	ctx.r11.s64 = 60;
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r10,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r10.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248E738;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248E748"))) PPC_WEAK_FUNC(sub_8248E748);
PPC_FUNC_IMPL(__imp__sub_8248E748) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,61
	ctx.r9.s64 = 61;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26440
	ctx.r4.s64 = ctx.r10.s64 + 26440;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E794;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,11
	ctx.r10.s64 = 11;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,59
	ctx.r11.s64 = 59;
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,53
	ctx.r11.s64 = 53;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,13
	ctx.r11.s64 = 13;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r11,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r10,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r10.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r11,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r11.u8);
	// li r11,245
	ctx.r11.s64 = 245;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248E8D8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_8248E8F8"))) PPC_WEAK_FUNC(sub_8248E8F8);
PPC_FUNC_IMPL(__imp__sub_8248E8F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248E900;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26452
	ctx.r4.s64 = ctx.r10.s64 + 26452;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248E93C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,60
	ctx.r11.s64 = 60;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248EA2C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248EA40"))) PPC_WEAK_FUNC(sub_8248EA40);
PPC_FUNC_IMPL(__imp__sub_8248EA40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248EA48;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26464
	ctx.r4.s64 = ctx.r10.s64 + 26464;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248EA84;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,55
	ctx.r9.s64 = 55;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248EB7C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248EB90"))) PPC_WEAK_FUNC(sub_8248EB90);
PPC_FUNC_IMPL(__imp__sub_8248EB90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248EB98;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26472
	ctx.r4.s64 = ctx.r10.s64 + 26472;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248EBD4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,62
	ctx.r11.s64 = 62;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,56
	ctx.r9.s64 = 56;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,133
	ctx.r11.s64 = 133;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248ECCC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248ECE0"))) PPC_WEAK_FUNC(sub_8248ECE0);
PPC_FUNC_IMPL(__imp__sub_8248ECE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248ECE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26492
	ctx.r4.s64 = ctx.r10.s64 + 26492;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248ED24;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,63
	ctx.r11.s64 = 63;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,57
	ctx.r9.s64 = 57;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,86
	ctx.r11.s64 = 86;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248EE1C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248EE30"))) PPC_WEAK_FUNC(sub_8248EE30);
PPC_FUNC_IMPL(__imp__sub_8248EE30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x8248EE38;
	__savegprlr_14(ctx, base);
	// stwu r1,-592(r1)
	ea = -592 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,359
	ctx.r9.s64 = 359;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26500
	ctx.r4.s64 = ctx.r10.s64 + 26500;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248EE74;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,140
	ctx.r10.s64 = 140;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,24
	ctx.r9.s64 = 24;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r6,58
	ctx.r6.s64 = 58;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r19,69
	ctx.r19.s64 = 69;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r9,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// li r28,249
	ctx.r28.s64 = 249;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r15,54
	ctx.r15.s64 = 54;
	// stb r19,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r19.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// li r8,199
	ctx.r8.s64 = 199;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// li r16,44
	ctx.r16.s64 = 44;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// li r5,15
	ctx.r5.s64 = 15;
	// stb r28,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r28.u8);
	// li r23,46
	ctx.r23.s64 = 46;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r15,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r15.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r11.u8);
	// stb r11,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r11.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r10,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r10.u8);
	// stb r6,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r6.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r9,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r9.u8);
	// stb r8,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r8.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r9,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r9.u8);
	// stb r16,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r16.u8);
	// stb r5,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r5.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r10,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r10.u8);
	// stb r6,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r6.u8);
	// stb r23,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r23.u8);
	// li r8,127
	ctx.r8.s64 = 127;
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// li r4,150
	ctx.r4.s64 = 150;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r7,4
	ctx.r7.s64 = 4;
	// stb r11,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r11.u8);
	// li r17,86
	ctx.r17.s64 = 86;
	// stb r11,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r11.u8);
	// li r29,25
	ctx.r29.s64 = 25;
	// stb r28,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r28.u8);
	// stb r8,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r8.u8);
	// li r8,142
	ctx.r8.s64 = 142;
	// stb r4,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r4.u8);
	// li r3,28
	ctx.r3.s64 = 28;
	// li r26,5
	ctx.r26.s64 = 5;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// li r25,7
	ctx.r25.s64 = 7;
	// stb r17,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r17.u8);
	// li r18,114
	ctx.r18.s64 = 114;
	// stb r29,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r29.u8);
	// stb r8,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r8.u8);
	// li r8,22
	ctx.r8.s64 = 22;
	// li r20,247
	ctx.r20.s64 = 247;
	// stb r3,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r3.u8);
	// li r21,42
	ctx.r21.s64 = 42;
	// stb r26,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r26.u8);
	// li r22,139
	ctx.r22.s64 = 139;
	// stb r7,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r7.u8);
	// li r4,38
	ctx.r4.s64 = 38;
	// stb r9,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r9.u8);
	// li r27,11
	ctx.r27.s64 = 11;
	// stb r8,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r8.u8);
	// li r24,57
	ctx.r24.s64 = 57;
	// stb r11,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r11.u8);
	// li r14,85
	ctx.r14.s64 = 85;
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// stb r20,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r20.u8);
	// stb r25,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r25.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r23,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r23.u8);
	// stb r18,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r18.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r10,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r10.u8);
	// stb r6,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r6.u8);
	// stb r21,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r21.u8);
	// stb r8,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r8.u8);
	// stb r3,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r3.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// stb r11,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r11.u8);
	// stb r28,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r28.u8);
	// stb r22,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r22.u8);
	// stb r4,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r4.u8);
	// stb r8,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r8.u8);
	// stb r7,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r7.u8);
	// stb r27,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r27.u8);
	// stb r5,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r5.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r10,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r10.u8);
	// stb r24,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r24.u8);
	// stb r29,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r29.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r10,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r10.u8);
	// stb r6,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r6.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r26,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r26.u8);
	// stb r7,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r7.u8);
	// stb r9,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r9.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r14,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r14.u8);
	// stb r16,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r16.u8);
	// stb r25,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r25.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r17,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r17.u8);
	// stb r18,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r18.u8);
	// stb r25,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r25.u8);
	// li r25,111
	ctx.r25.s64 = 111;
	// stb r4,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r4.u8);
	// li r18,36
	ctx.r18.s64 = 36;
	// stb r4,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r4.u8);
	// li r4,151
	ctx.r4.s64 = 151;
	// stb r24,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r24.u8);
	// li r24,56
	ctx.r24.s64 = 56;
	// stb r22,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r22.u8);
	// li r16,14
	ctx.r16.s64 = 14;
	// stb r25,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r25.u8);
	// li r25,154
	ctx.r25.s64 = 154;
	// stb r18,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r18.u8);
	// li r18,177
	ctx.r18.s64 = 177;
	// stb r22,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r22.u8);
	// li r22,16
	ctx.r22.s64 = 16;
	// stb r4,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r4.u8);
	// li r4,37
	ctx.r4.s64 = 37;
	// stb r15,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r15.u8);
	// li r15,178
	ctx.r15.s64 = 178;
	// stb r25,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r25.u8);
	// li r25,53
	ctx.r25.s64 = 53;
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r10,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r10.u8);
	// stb r21,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r21.u8);
	// stb r8,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r8.u8);
	// stb r3,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r3.u8);
	// stb r11,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r11.u8);
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r11.u8);
	// stb r28,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r28.u8);
	// stb r8,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r8.u8);
	// stb r7,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r7.u8);
	// stb r27,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r27.u8);
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r24,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r24.u8);
	// stb r6,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r6.u8);
	// stb r9,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r9.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r10,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r10.u8);
	// stb r25,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r25.u8);
	// stb r24,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r24.u8);
	// stb r6,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r6.u8);
	// stb r29,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r29.u8);
	// stb r8,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r8.u8);
	// stb r3,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r3.u8);
	// stb r11,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r11.u8);
	// stb r11,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r11.u8);
	// stb r28,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r28.u8);
	// stb r8,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r8.u8);
	// stb r7,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r7.u8);
	// stb r27,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r27.u8);
	// stb r5,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r5.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r10,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r10.u8);
	// stb r24,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r24.u8);
	// stb r19,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r19.u8);
	// stb r25,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r25.u8);
	// stb r11,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r11.u8);
	// stb r11,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r11.u8);
	// stb r11,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r11.u8);
	// stb r15,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r15.u8);
	// stb r11,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r11.u8);
	// stb r11,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r11.u8);
	// stb r20,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r20.u8);
	// stb r16,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r16.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r22,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r22.u8);
	// stb r4,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r4.u8);
	// stb r9,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r9.u8);
	// stb r11,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r11.u8);
	// stb r11,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r11.u8);
	// stb r11,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r11.u8);
	// stb r18,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r18.u8);
	// stb r4,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r4.u8);
	// stb r8,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r8.u8);
	// stb r23,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r23.u8);
	// li r17,45
	ctx.r17.s64 = 45;
	// stb r23,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r23.u8);
	// li r23,253
	ctx.r23.s64 = 253;
	// stb r22,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r22.u8);
	// li r14,99
	ctx.r14.s64 = 99;
	// stb r20,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r20.u8);
	// li r20,43
	ctx.r20.s64 = 43;
	// stb r22,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r22.u8);
	// li r22,250
	ctx.r22.s64 = 250;
	// stb r18,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r18.u8);
	// li r18,27
	ctx.r18.s64 = 27;
	// stb r23,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r23.u8);
	// li r23,67
	ctx.r23.s64 = 67;
	// stb r21,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r21.u8);
	// li r21,66
	ctx.r21.s64 = 66;
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r17,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r17.u8);
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r23,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r23.u8);
	// li r23,55
	ctx.r23.s64 = 55;
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r14,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r14.u8);
	// stb r7,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r7.u8);
	// stb r29,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r29.u8);
	// stb r11,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r11.u8);
	// stb r11,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r11.u8);
	// stb r4,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r4.u8);
	// stb r25,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r25.u8);
	// stb r11,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r11.u8);
	// stb r11,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r11.u8);
	// stb r11,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r11.u8);
	// stb r15,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r15.u8);
	// stb r11,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r11.u8);
	// stb r11,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r11.u8);
	// stb r16,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r16.u8);
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// stb r4,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r4.u8);
	// stb r9,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r9.u8);
	// stb r11,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r11.u8);
	// stb r11,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r11.u8);
	// stb r11,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r11.u8);
	// stb r31,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r31.u8);
	// stb r27,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r27.u8);
	// stb r7,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r7.u8);
	// stb r18,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r18.u8);
	// stb r31,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r31.u8);
	// stb r31,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r31.u8);
	// stb r31,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r31.u8);
	// stb r20,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r20.u8);
	// stb r22,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r22.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r31.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r31,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r31.u8);
	// stb r8,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r8.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r9,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r9.u8);
	// stb r5,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r5.u8);
	// stb r31,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r31.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r31,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r31.u8);
	// stb r10,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r10.u8);
	// stb r23,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r23.u8);
	// stb r3,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r3.u8);
	// stb r31,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r31.u8);
	// stb r31,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r31.u8);
	// stb r10,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r10.u8);
	// stb r21,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r21.u8);
	// stb r9,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r9.u8);
	// stb r31,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r31.u8);
	// stb r31,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r31.u8);
	// stb r10,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r10.u8);
	// stb r25,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r25.u8);
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r31,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r31.u8);
	// stb r31,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r31.u8);
	// stb r10,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r10.u8);
	// stb r24,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r24.u8);
	// stb r8,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r8.u8);
	// stb r6,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r6.u8);
	// li r25,51
	ctx.r25.s64 = 51;
	// stb r6,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r6.u8);
	// li r6,74
	ctx.r6.s64 = 74;
	// stb r5,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r5.u8);
	// li r24,30
	ctx.r24.s64 = 30;
	// stb r5,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r5.u8);
	// li r5,61
	ctx.r5.s64 = 61;
	// stb r4,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r4.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r25,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r25.u8);
	// addi r25,r30,24
	ctx.r25.s64 = ctx.r30.s64 + 24;
	// stb r6,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r6.u8);
	// li r6,52
	ctx.r6.s64 = 52;
	// stb r9,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r9.u8);
	// stb r5,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r5.u8);
	// li r5,23
	ctx.r5.s64 = 23;
	// stb r31,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r31.u8);
	// stb r31,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r31.u8);
	// stb r6,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r6.u8);
	// li r6,191
	ctx.r6.s64 = 191;
	// stb r10,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r10.u8);
	// stb r5,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r5.u8);
	// li r5,359
	ctx.r5.s64 = 359;
	// stb r24,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r24.u8);
	// stb r31,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r31.u8);
	// stb r6,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r6.u8);
	// li r6,128
	ctx.r6.s64 = 128;
	// stb r31,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r31.u8);
	// stb r31,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r31.u8);
	// stb r31,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r31.u8);
	// stb r29,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r29.u8);
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r31,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r31.u8);
	// stb r31,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r31.u8);
	// stb r10,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r10.u8);
	// stb r31,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r31.u8);
	// stb r26,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r26.u8);
	// stb r7,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r7.u8);
	// stb r9,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r9.u8);
	// stb r31,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r31.u8);
	// stb r31,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r31.u8);
	// stb r10,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r10.u8);
	// stb r29,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r29.u8);
	// stb r31,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r31.u8);
	// stb r31,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r31.u8);
	// stb r31,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r31.u8);
	// stb r10,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r10.u8);
	// stb r31,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r31.u8);
	// stb r20,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r20.u8);
	// stb r31,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r31.u8);
	// stb r18,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r18.u8);
	// stb r31,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r31.u8);
	// stb r31,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r31.u8);
	// stb r31,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r31.u8);
	// stb r22,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r22.u8);
	// stb r31,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r31.u8);
	// stb r31,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r31.u8);
	// stb r31,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r31.u8);
	// stb r31,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r31.u8);
	// stb r31,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r31.u8);
	// stb r31,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r31.u8);
	// stb r31,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r31.u8);
	// stb r10,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r10.u8);
	// stb r23,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r23.u8);
	// stb r19,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r19.u8);
	// stb r17,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r17.u8);
	// stb r9,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r9.u8);
	// stb r31,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r31.u8);
	// stb r31,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r31.u8);
	// stb r10,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r10.u8);
	// stb r31,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r31.u8);
	// stb r26,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r26.u8);
	// stb r24,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r24.u8);
	// stb r6,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r6.u8);
	// stb r31,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r31.u8);
	// stb r31,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r31.u8);
	// stb r31,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r31.u8);
	// stb r26,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r26.u8);
	// stb r24,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r24.u8);
	// stb r31,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r31.u8);
	// stb r11,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r11.u8);
	// stb r11,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r11.u8);
	// li r11,140
	ctx.r11.s64 = 140;
	// stb r10,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r10.u8);
	// li r10,8
	ctx.r10.s64 = 8;
	// stb r3,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r3.u8);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// stb r31,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r31.u8);
	// stb r31,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r31.u8);
	// stb r11,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r31.u8);
	// stb r31,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r31.u8);
	// stb r31,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r31.u8);
	// stb r31,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r31.u8);
	// stb r11,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r23,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r23.u8);
	// stb r8,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r8.u8);
	// stb r28,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r28.u8);
	// stb r8,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r8.u8);
	// stb r7,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r7.u8);
	// stb r27,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r27.u8);
	// stb r31,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r31.u8);
	// stb r31,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r31.u8);
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r31,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r31.u8);
	// stb r11,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r11.u8);
	// stb r10,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r10.u8);
	// stb r11,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r11.u8);
	// stb r31,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r31.u8);
	// stb r31,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r31.u8);
	// stb r9,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r9.u8);
	// stb r29,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r29.u8);
	// stb r31,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r31.u8);
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r31,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r31.u8);
	// stb r31,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248F52C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r25,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r25.u32);
	// addi r1,r1,592
	ctx.r1.s64 = ctx.r1.s64 + 592;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248F540"))) PPC_WEAK_FUNC(sub_8248F540);
PPC_FUNC_IMPL(__imp__sub_8248F540) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248F548;
	__savegprlr_29(ctx, base);
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,240
	ctx.r9.s64 = 240;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26512
	ctx.r4.s64 = ctx.r10.s64 + 26512;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248F584;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,170
	ctx.r10.s64 = 170;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,65
	ctx.r11.s64 = 65;
	// stb r10,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r10.u8);
	// li r10,169
	ctx.r10.s64 = 169;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// li r10,168
	ctx.r10.s64 = 168;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// li r10,167
	ctx.r10.s64 = 167;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,27
	ctx.r11.s64 = 27;
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r11,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r11.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r10,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r10.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// li r10,166
	ctx.r10.s64 = 166;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r11,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r11.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r10,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r10.u8);
	// li r10,165
	ctx.r10.s64 = 165;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r10,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r10.u8);
	// li r10,171
	ctx.r10.s64 = 171;
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r11,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r11.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r10,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r10.u8);
	// li r10,172
	ctx.r10.s64 = 172;
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r10,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r10.u8);
	// li r10,174
	ctx.r10.s64 = 174;
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r10,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r10.u8);
	// li r10,173
	ctx.r10.s64 = 173;
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// stb r10,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r10.u8);
	// li r10,162
	ctx.r10.s64 = 162;
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r10,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r10.u8);
	// li r10,161
	ctx.r10.s64 = 161;
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r11,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r11.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r10,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r10.u8);
	// li r10,160
	ctx.r10.s64 = 160;
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r11,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r11.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r11,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r11.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r31,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r31.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r11,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r11.u8);
	// stb r10,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r10.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// li r10,155
	ctx.r10.s64 = 155;
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// stb r11,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r11.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r10,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r10.u8);
	// li r10,153
	ctx.r10.s64 = 153;
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r10,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r10.u8);
	// li r10,150
	ctx.r10.s64 = 150;
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r11,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r11.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r10,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r10.u8);
	// li r10,151
	ctx.r10.s64 = 151;
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r31,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r31.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r10,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r10.u8);
	// li r10,154
	ctx.r10.s64 = 154;
	// stb r11,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r11.u8);
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r10,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r10.u8);
	// li r10,156
	ctx.r10.s64 = 156;
	// stb r31,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r31.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r11,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r11.u8);
	// stb r10,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r10.u8);
	// li r10,149
	ctx.r10.s64 = 149;
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r31,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r31.u8);
	// stb r10,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r10.u8);
	// li r10,148
	ctx.r10.s64 = 148;
	// stb r31,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r31.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r11,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r11.u8);
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r10,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r10.u8);
	// li r10,152
	ctx.r10.s64 = 152;
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r31.u8);
	// stb r31,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r31.u8);
	// stb r31,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r31.u8);
	// stb r11,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r11.u8);
	// stb r31,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r31.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r31,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r31.u8);
	// stb r31,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r31.u8);
	// stb r31,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r31.u8);
	// stb r11,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r11.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// stb r31,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r31.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r31,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r31.u8);
	// stb r11,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r11.u8);
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r31,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r31.u8);
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r11,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r11.u8);
	// stb r10,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r10.u8);
	// stb r31,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r31.u8);
	// stb r31,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r31.u8);
	// stb r31,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r31.u8);
	// li r10,157
	ctx.r10.s64 = 157;
	// stb r11,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r11.u8);
	// stb r11,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r11.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r11,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r11.u8);
	// li r5,240
	ctx.r5.s64 = 240;
	// stb r11,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r11.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r11,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r11.u8);
	// li r11,164
	ctx.r11.s64 = 164;
	// stb r10,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r10.u8);
	// li r10,163
	ctx.r10.s64 = 163;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r31.u8);
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// stb r31,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r31.u8);
	// stb r31,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r31.u8);
	// stb r10,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r10.u8);
	// li r10,158
	ctx.r10.s64 = 158;
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// stb r31,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r31.u8);
	// stb r31,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r31.u8);
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// stb r10,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r10.u8);
	// li r10,159
	ctx.r10.s64 = 159;
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// stb r31,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r31.u8);
	// stb r31,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r31.u8);
	// stb r31,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r31.u8);
	// stb r31,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r31.u8);
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r31,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r31.u8);
	// stb r31,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r31.u8);
	// stb r31,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r31.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r10,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r10.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r31,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r31.u8);
	// stb r31,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r31.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r31,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r31.u8);
	// stb r11,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r11.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r31,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r31.u8);
	// stb r31,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r31.u8);
	// stb r31,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248F9E4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248F9F8"))) PPC_WEAK_FUNC(sub_8248F9F8);
PPC_FUNC_IMPL(__imp__sub_8248F9F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248FA00;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26544
	ctx.r4.s64 = ctx.r10.s64 + 26544;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248FA3C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,85
	ctx.r9.s64 = 85;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,66
	ctx.r11.s64 = 66;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,43
	ctx.r9.s64 = 43;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,253
	ctx.r11.s64 = 253;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,76
	ctx.r11.s64 = 76;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248FB38;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248FB48"))) PPC_WEAK_FUNC(sub_8248FB48);
PPC_FUNC_IMPL(__imp__sub_8248FB48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248FB50;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26492
	ctx.r4.s64 = ctx.r10.s64 + 26492;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248FB8C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,67
	ctx.r11.s64 = 67;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,86
	ctx.r11.s64 = 86;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248FC7C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248FC90"))) PPC_WEAK_FUNC(sub_8248FC90);
PPC_FUNC_IMPL(__imp__sub_8248FC90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248FC98;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22632
	ctx.r4.s64 = ctx.r10.s64 + 22632;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248FCD4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,68
	ctx.r11.s64 = 68;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,62
	ctx.r9.s64 = 62;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,5
	ctx.r9.s64 = 5;
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248FDD4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248FDE8"))) PPC_WEAK_FUNC(sub_8248FDE8);
PPC_FUNC_IMPL(__imp__sub_8248FDE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248FDF0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26576
	ctx.r4.s64 = ctx.r10.s64 + 26576;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248FE2C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,63
	ctx.r9.s64 = 63;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8248FF24;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_8248FF38"))) PPC_WEAK_FUNC(sub_8248FF38);
PPC_FUNC_IMPL(__imp__sub_8248FF38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x8248FF40;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26584
	ctx.r4.s64 = ctx.r10.s64 + 26584;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8248FF7C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,69
	ctx.r9.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,128
	ctx.r8.s64 = 128;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,60
	ctx.r11.s64 = 60;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r8,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r8.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82490074;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82490088"))) PPC_WEAK_FUNC(sub_82490088);
PPC_FUNC_IMPL(__imp__sub_82490088) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82490090;
	__savegprlr_14(ctx, base);
	// stwu r1,-1104(r1)
	ea = -1104 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r16,r3
	ctx.r16.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r16,4
	ctx.r3.s64 = ctx.r16.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,851
	ctx.r9.s64 = 851;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26596
	ctx.r4.s64 = ctx.r10.s64 + 26596;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r16)
	PPC_STORE_U32(ctx.r16.u32 + 0, ctx.r11.u32);
	// stw r9,16(r16)
	PPC_STORE_U32(ctx.r16.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824900CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,66
	ctx.r10.s64 = 66;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r7,232
	ctx.r7.s64 = 232;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r26,5
	ctx.r26.s64 = 5;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r27,3
	ctx.r27.s64 = 3;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,71
	ctx.r11.s64 = 71;
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// li r10,90
	ctx.r10.s64 = 90;
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r3,10
	ctx.r3.s64 = 10;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r10,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r10.u8);
	// li r10,24
	ctx.r10.s64 = 24;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r7,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r7.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,59
	ctx.r11.s64 = 59;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,65
	ctx.r11.s64 = 65;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r7,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r7.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r26,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r26.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r27,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r27.u8);
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// stb r26,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r26.u8);
	// stb r9,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r9.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r7,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r7.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r3,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r3.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// li r10,15
	ctx.r10.s64 = 15;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// li r5,247
	ctx.r5.s64 = 247;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r11,179
	ctx.r11.s64 = 179;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// li r6,255
	ctx.r6.s64 = 255;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r25,62
	ctx.r25.s64 = 62;
	// stb r7,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r7.u8);
	// stb r10,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r10.u8);
	// li r10,46
	ctx.r10.s64 = 46;
	// stb r5,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r5.u8);
	// li r5,150
	ctx.r5.s64 = 150;
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// li r29,25
	ctx.r29.s64 = 25;
	// li r8,22
	ctx.r8.s64 = 22;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r25,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r25.u8);
	// stb r10,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r10.u8);
	// li r10,86
	ctx.r10.s64 = 86;
	// stb r5,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r5.u8);
	// li r5,7
	ctx.r5.s64 = 7;
	// li r28,176
	ctx.r28.s64 = 176;
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// li r17,119
	ctx.r17.s64 = 119;
	// stb r29,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r29.u8);
	// li r18,42
	ctx.r18.s64 = 42;
	// stb r11,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r11.u8);
	// stb r10,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r10.u8);
	// li r10,127
	ctx.r10.s64 = 127;
	// li r4,81
	ctx.r4.s64 = 81;
	// stb r6,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r6.u8);
	// li r24,154
	ctx.r24.s64 = 154;
	// stb r6,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r6.u8);
	// li r19,11
	ctx.r19.s64 = 11;
	// stb r8,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r8.u8);
	// li r30,27
	ctx.r30.s64 = 27;
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r10,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r10.u8);
	// li r10,28
	ctx.r10.s64 = 28;
	// stb r26,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r26.u8);
	// stb r9,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r9.u8);
	// stb r6,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r6.u8);
	// stb r6,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r6.u8);
	// stb r10,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r10.u8);
	// li r10,249
	ctx.r10.s64 = 249;
	// stb r5,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r5.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r28,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r28.u8);
	// stb r17,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r17.u8);
	// stb r10,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r10.u8);
	// li r10,142
	ctx.r10.s64 = 142;
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r7,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r7.u8);
	// stb r10,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r10.u8);
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r25,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r25.u8);
	// stb r18,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r18.u8);
	// stb r8,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r8.u8);
	// stb r5,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r5.u8);
	// stb r10,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r10.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r4,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r4.u8);
	// stb r24,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r24.u8);
	// stb r29,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r29.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r7,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r7.u8);
	// stb r25,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r25.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r19,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r19.u8);
	// stb r10,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r10.u8);
	// stb r30,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r30.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// li r23,217
	ctx.r23.s64 = 217;
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// li r4,38
	ctx.r4.s64 = 38;
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// li r15,99
	ctx.r15.s64 = 99;
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// li r22,173
	ctx.r22.s64 = 173;
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r8,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r8.u8);
	// stb r23,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r23.u8);
	// stb r4,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r4.u8);
	// li r4,51
	ctx.r4.s64 = 51;
	// stb r23,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r23.u8);
	// li r23,220
	ctx.r23.s64 = 220;
	// stb r15,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r15.u8);
	// stb r8,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r8.u8);
	// stb r10,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r10.u8);
	// stb r4,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r4.u8);
	// li r4,6
	ctx.r4.s64 = 6;
	// stb r23,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r23.u8);
	// li r23,167
	ctx.r23.s64 = 167;
	// stb r11,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r11.u8);
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r28,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r28.u8);
	// stb r4,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r4.u8);
	// stb r5,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r5.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// stb r22,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r22.u8);
	// stb r24,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r24.u8);
	// stb r29,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r29.u8);
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r7,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r7.u8);
	// stb r25,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r25.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r19,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r19.u8);
	// stb r10,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r10.u8);
	// stb r30,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r30.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r15,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r15.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r31,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r31.u8);
	// stb r31,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r31.u8);
	// stb r8,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r8.u8);
	// stb r29,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r29.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r31,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r31.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r7,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r7.u8);
	// stb r25,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r25.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r19,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r19.u8);
	// stb r10,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r10.u8);
	// stb r30,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r30.u8);
	// stb r31,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r31.u8);
	// stb r31,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r31.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r15,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r15.u8);
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r31.u8);
	// stb r8,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r8.u8);
	// stb r8,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r8.u8);
	// stb r5,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r5.u8);
	// stb r31,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r31.u8);
	// stb r23,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r23.u8);
	// stb r24,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r24.u8);
	// stb r29,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r29.u8);
	// stb r29,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r29.u8);
	// stb r31,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r31.u8);
	// stb r31,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r31.u8);
	// stb r31,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r31.u8);
	// stb r7,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r7.u8);
	// stb r25,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r25.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r19,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r19.u8);
	// stb r30,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r30.u8);
	// li r30,44
	ctx.r30.s64 = 44;
	// stb r28,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r28.u8);
	// li r28,55
	ctx.r28.s64 = 55;
	// li r23,52
	ctx.r23.s64 = 52;
	// stb r10,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r10.u8);
	// li r20,248
	ctx.r20.s64 = 248;
	// stb r31,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r31.u8);
	// li r21,37
	ctx.r21.s64 = 37;
	// stb r31,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r31.u8);
	// stb r30,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r30.u8);
	// li r30,246
	ctx.r30.s64 = 246;
	// stb r28,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r28.u8);
	// li r28,243
	ctx.r28.s64 = 243;
	// li r22,14
	ctx.r22.s64 = 14;
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r30,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r30.u8);
	// li r30,53
	ctx.r30.s64 = 53;
	// stb r28,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r28.u8);
	// li r28,240
	ctx.r28.s64 = 240;
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r8,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r8.u8);
	// stb r30,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r30.u8);
	// li r30,170
	ctx.r30.s64 = 170;
	// stb r31,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r31.u8);
	// stb r26,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r26.u8);
	// stb r10,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r10.u8);
	// stb r9,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r9.u8);
	// stb r30,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r30.u8);
	// li r30,54
	ctx.r30.s64 = 54;
	// stb r6,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r6.u8);
	// stb r6,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r6.u8);
	// stb r20,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r20.u8);
	// stb r23,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r23.u8);
	// stb r30,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r30.u8);
	// li r30,187
	ctx.r30.s64 = 187;
	// stb r21,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r21.u8);
	// stb r8,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r8.u8);
	// stb r10,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r10.u8);
	// stb r11,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r11.u8);
	// stb r30,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r30.u8);
	// li r30,102
	ctx.r30.s64 = 102;
	// stb r4,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r4.u8);
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// stb r10,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r10.u8);
	// stb r11,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r11.u8);
	// stb r30,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r30.u8);
	// li r30,195
	ctx.r30.s64 = 195;
	// stb r4,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r4.u8);
	// stb r31,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r31.u8);
	// stb r10,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r10.u8);
	// stb r11,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r11.u8);
	// stb r30,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r30.u8);
	// li r30,2
	ctx.r30.s64 = 2;
	// stb r23,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r23.u8);
	// stb r4,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r4.u8);
	// stb r27,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r27.u8);
	// stb r22,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r22.u8);
	// stb r3,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r3.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r11,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r11.u8);
	// stb r9,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r9.u8);
	// stb r10,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r10.u8);
	// stb r11,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r11.u8);
	// stb r3,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r3.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r11,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r11.u8);
	// stb r30,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r30.u8);
	// stb r10,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r10.u8);
	// stb r11,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r11.u8);
	// stb r3,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r3.u8);
	// stb r31,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r31.u8);
	// stb r11,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r11.u8);
	// stb r27,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r27.u8);
	// stb r5,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r5.u8);
	// stb r31,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r31.u8);
	// stb r28,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r28.u8);
	// stb r17,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r17.u8);
	// li r14,237
	ctx.r14.s64 = 237;
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// li r28,64
	ctx.r28.s64 = 64;
	// stb r31,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r31.u8);
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r7,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r7.u8);
	// stb r18,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r18.u8);
	// stb r14,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r28,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r28.u8);
	// stb r8,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r8.u8);
	// stb r5,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r5.u8);
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// stb r14,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r14.u8);
	// li r14,240
	ctx.r14.s64 = 240;
	// stb r24,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r24.u8);
	// stb r29,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r29.u8);
	// stb r31,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r31.u8);
	// stb r31,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r31.u8);
	// stb r14,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r14.u8);
	// li r14,35
	ctx.r14.s64 = 35;
	// stb r31,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r31.u8);
	// stb r7,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r7.u8);
	// stb r28,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r28.u8);
	// stb r31,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r31.u8);
	// stb r14,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r14.u8);
	// li r14,32
	ctx.r14.s64 = 32;
	// stb r26,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r26.u8);
	// stb r10,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r10.u8);
	// stb r9,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r9.u8);
	// stb r6,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r6.u8);
	// stb r14,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r14.u8);
	// li r14,29
	ctx.r14.s64 = 29;
	// stb r6,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r6.u8);
	// stb r20,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r20.u8);
	// stb r23,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r23.u8);
	// stb r21,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r21.u8);
	// stb r8,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r8.u8);
	// stb r10,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r10.u8);
	// stb r11,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r11.u8);
	// stb r4,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r4.u8);
	// stb r31,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r31.u8);
	// stb r10,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r10.u8);
	// stb r11,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r11.u8);
	// stb r28,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r28.u8);
	// stb r4,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r4.u8);
	// stb r27,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r27.u8);
	// stb r22,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r22.u8);
	// stb r3,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r3.u8);
	// stb r9,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r9.u8);
	// stb r11,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r11.u8);
	// stb r10,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r10.u8);
	// stb r5,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r5.u8);
	// stb r9,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r9.u8);
	// stb r17,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r17.u8);
	// stb r31,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r31.u8);
	// stb r31,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r31.u8);
	// stb r31,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r31.u8);
	// stb r7,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r7.u8);
	// stb r28,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r28.u8);
	// stb r18,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r18.u8);
	// stb r8,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r8.u8);
	// stb r5,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r5.u8);
	// stb r9,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r9.u8);
	// stb r14,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r14.u8);
	// stb r24,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r24.u8);
	// stb r29,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r29.u8);
	// stb r31,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r31.u8);
	// stb r31,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r31.u8);
	// stb r31,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r31.u8);
	// stb r7,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r7.u8);
	// stb r28,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r28.u8);
	// stb r31,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r31.u8);
	// stb r26,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r26.u8);
	// stb r10,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r10.u8);
	// stb r9,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r9.u8);
	// stb r6,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r6.u8);
	// stb r6,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r6.u8);
	// stb r20,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r20.u8);
	// stb r23,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r23.u8);
	// stb r21,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r21.u8);
	// li r14,67
	ctx.r14.s64 = 67;
	// std r16,936(r1)
	PPC_STORE_U64(ctx.r1.u32 + 936, ctx.r16.u64);
	// li r16,77
	ctx.r16.s64 = 77;
	// stb r8,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r8.u8);
	// stb r10,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r10.u8);
	// stb r11,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r11.u8);
	// stb r4,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r4.u8);
	// stb r14,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r14.u8);
	// li r14,32
	ctx.r14.s64 = 32;
	// stb r16,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r16.u8);
	// li r16,69
	ctx.r16.s64 = 69;
	// stb r9,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r9.u8);
	// stb r10,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r10.u8);
	// stb r11,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r11.u8);
	// stb r14,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r14.u8);
	// li r14,65
	ctx.r14.s64 = 65;
	// stb r4,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r4.u8);
	// stb r27,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r27.u8);
	// stb r22,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r22.u8);
	// stb r3,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r3.u8);
	// stb r14,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r14.u8);
	// li r14,83
	ctx.r14.s64 = 83;
	// stb r9,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r9.u8);
	// stb r11,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r11.u8);
	// stb r26,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r26.u8);
	// stb r5,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r5.u8);
	// stb r14,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r14.u8);
	// li r14,80
	ctx.r14.s64 = 80;
	// stb r9,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r9.u8);
	// stb r17,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r17.u8);
	// stb r31,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r31.u8);
	// stb r31,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r31.u8);
	// stb r14,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r14.u8);
	// stb r14,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r14.u8);
	// li r14,68
	ctx.r14.s64 = 68;
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r7,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r7.u8);
	// stb r28,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r28.u8);
	// stb r18,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r18.u8);
	// stb r14,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r14.u8);
	// li r14,91
	ctx.r14.s64 = 91;
	// stb r8,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r8.u8);
	// stb r5,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r5.u8);
	// stb r9,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r9.u8);
	// stb r24,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r24.u8);
	// stb r14,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r14.u8);
	// li r14,60
	ctx.r14.s64 = 60;
	// stb r29,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r29.u8);
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r31,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r31.u8);
	// stb r31,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r31.u8);
	// stb r7,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r7.u8);
	// stb r28,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r28.u8);
	// stb r31,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r31.u8);
	// stb r26,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r26.u8);
	// stb r10,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r10.u8);
	// stb r9,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r9.u8);
	// stb r6,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r6.u8);
	// stb r6,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r6.u8);
	// stb r20,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r20.u8);
	// stb r23,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r23.u8);
	// stb r21,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r21.u8);
	// stb r8,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r8.u8);
	// stb r10,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r10.u8);
	// stb r11,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r11.u8);
	// stb r16,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r16.u8);
	// stb r4,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r4.u8);
	// stb r9,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r9.u8);
	// stb r10,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r10.u8);
	// stb r11,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r11.u8);
	// stb r4,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r4.u8);
	// stb r27,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r27.u8);
	// stb r22,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r22.u8);
	// stb r3,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r3.u8);
	// stb r9,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r9.u8);
	// stb r11,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r11.u8);
	// stb r4,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r4.u8);
	// stb r10,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r10.u8);
	// stb r11,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r11.u8);
	// stb r14,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r14.u8);
	// stb r3,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r3.u8);
	// li r14,139
	ctx.r14.s64 = 139;
	// stb r9,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r9.u8);
	// stb r11,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r11.u8);
	// stb r5,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r5.u8);
	// stb r5,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r5.u8);
	// stb r9,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r9.u8);
	// stb r14,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r14.u8);
	// li r14,136
	ctx.r14.s64 = 136;
	// stb r17,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r17.u8);
	// stb r31,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r31.u8);
	// stb r31,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r31.u8);
	// stb r31,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r31.u8);
	// stb r14,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r14.u8);
	// li r14,133
	ctx.r14.s64 = 133;
	// stb r7,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r7.u8);
	// stb r28,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r28.u8);
	// stb r18,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r18.u8);
	// stb r8,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r8.u8);
	// stb r14,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r14.u8);
	// li r14,136
	ctx.r14.s64 = 136;
	// stb r5,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r5.u8);
	// stb r9,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r9.u8);
	// stb r24,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r24.u8);
	// stb r29,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r29.u8);
	// stb r14,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r14.u8);
	// li r14,61
	ctx.r14.s64 = 61;
	// stb r31,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r31.u8);
	// stb r31,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r31.u8);
	// stb r31,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r31.u8);
	// stb r7,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r7.u8);
	// stb r14,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r14.u8);
	// li r14,187
	ctx.r14.s64 = 187;
	// stb r28,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r28.u8);
	// stb r31,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r31.u8);
	// stb r26,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r26.u8);
	// stb r10,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r10.u8);
	// stb r14,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r14.u8);
	// li r14,8
	ctx.r14.s64 = 8;
	// stb r9,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r9.u8);
	// stb r6,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r6.u8);
	// stb r6,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r6.u8);
	// stb r20,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r20.u8);
	// stb r14,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r14.u8);
	// li r14,184
	ctx.r14.s64 = 184;
	// stb r23,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r23.u8);
	// stb r21,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r21.u8);
	// stb r8,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r8.u8);
	// stb r10,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r10.u8);
	// stb r14,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r14.u8);
	// li r14,181
	ctx.r14.s64 = 181;
	// stb r11,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r11.u8);
	// stb r25,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r25.u8);
	// stb r4,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r4.u8);
	// stb r9,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r9.u8);
	// stb r10,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r10.u8);
	// stb r11,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r11.u8);
	// stb r4,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r4.u8);
	// stb r27,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r27.u8);
	// stb r22,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r22.u8);
	// stb r3,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r3.u8);
	// stb r9,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r9.u8);
	// stb r11,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r11.u8);
	// stb r5,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r5.u8);
	// stb r9,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r9.u8);
	// stb r17,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r17.u8);
	// stb r31,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r31.u8);
	// stb r31,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r31.u8);
	// stb r31,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r31.u8);
	// stb r7,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r7.u8);
	// stb r28,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r28.u8);
	// stb r18,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r18.u8);
	// stb r8,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r8.u8);
	// stb r5,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r5.u8);
	// stb r9,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r9.u8);
	// stb r14,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r14.u8);
	// stb r24,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r24.u8);
	// stb r29,539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 539, ctx.r29.u8);
	// stb r31,540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 540, ctx.r31.u8);
	// stb r31,541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 541, ctx.r31.u8);
	// stb r31,542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 542, ctx.r31.u8);
	// stb r7,543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 543, ctx.r7.u8);
	// li r14,57
	ctx.r14.s64 = 57;
	// stb r28,544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 544, ctx.r28.u8);
	// stb r31,545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 545, ctx.r31.u8);
	// stb r26,546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 546, ctx.r26.u8);
	// stb r10,547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 547, ctx.r10.u8);
	// stb r9,548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 548, ctx.r9.u8);
	// stb r14,557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 557, ctx.r14.u8);
	// li r14,184
	ctx.r14.s64 = 184;
	// stb r6,549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 549, ctx.r6.u8);
	// stb r6,550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 550, ctx.r6.u8);
	// stb r20,551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 551, ctx.r20.u8);
	// stb r23,552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 552, ctx.r23.u8);
	// stb r14,560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 560, ctx.r14.u8);
	// li r14,56
	ctx.r14.s64 = 56;
	// stb r21,553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 553, ctx.r21.u8);
	// stb r8,554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 554, ctx.r8.u8);
	// stb r10,555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 555, ctx.r10.u8);
	// stb r11,556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 556, ctx.r11.u8);
	// stb r14,563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 563, ctx.r14.u8);
	// li r14,235
	ctx.r14.s64 = 235;
	// stb r4,558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 558, ctx.r4.u8);
	// stb r9,559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 559, ctx.r9.u8);
	// stb r10,561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 561, ctx.r10.u8);
	// stb r11,562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 562, ctx.r11.u8);
	// stb r14,569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 569, ctx.r14.u8);
	// li r14,9
	ctx.r14.s64 = 9;
	// stb r4,564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 564, ctx.r4.u8);
	// stb r27,565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 565, ctx.r27.u8);
	// stb r22,566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 566, ctx.r22.u8);
	// stb r3,567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 567, ctx.r3.u8);
	// stb r14,571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 571, ctx.r14.u8);
	// li r14,229
	ctx.r14.s64 = 229;
	// stb r9,568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 568, ctx.r9.u8);
	// stb r11,570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 570, ctx.r11.u8);
	// stb r5,572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 572, ctx.r5.u8);
	// stb r9,573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 573, ctx.r9.u8);
	// stb r14,585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 585, ctx.r14.u8);
	// li r14,59
	ctx.r14.s64 = 59;
	// stb r7,574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 574, ctx.r7.u8);
	// stb r17,575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 575, ctx.r17.u8);
	// stb r31,576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 576, ctx.r31.u8);
	// stb r31,577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 577, ctx.r31.u8);
	// stb r14,605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 605, ctx.r14.u8);
	// li r14,58
	ctx.r14.s64 = 58;
	// stb r31,578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 578, ctx.r31.u8);
	// stb r7,579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 579, ctx.r7.u8);
	// stb r28,580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 580, ctx.r28.u8);
	// stb r18,581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 581, ctx.r18.u8);
	// stb r8,582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 582, ctx.r8.u8);
	// stb r5,583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 583, ctx.r5.u8);
	// stb r9,584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 584, ctx.r9.u8);
	// stb r24,586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 586, ctx.r24.u8);
	// stb r29,587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 587, ctx.r29.u8);
	// stb r31,588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 588, ctx.r31.u8);
	// stb r31,589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 589, ctx.r31.u8);
	// stb r31,590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 590, ctx.r31.u8);
	// stb r7,591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 591, ctx.r7.u8);
	// stb r28,592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 592, ctx.r28.u8);
	// stb r31,593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 593, ctx.r31.u8);
	// stb r26,594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 594, ctx.r26.u8);
	// stb r10,595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 595, ctx.r10.u8);
	// stb r9,596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 596, ctx.r9.u8);
	// stb r6,597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 597, ctx.r6.u8);
	// stb r6,598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 598, ctx.r6.u8);
	// stb r20,599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 599, ctx.r20.u8);
	// stb r23,600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 600, ctx.r23.u8);
	// stb r21,601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 601, ctx.r21.u8);
	// stb r8,602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 602, ctx.r8.u8);
	// stb r10,603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 603, ctx.r10.u8);
	// stb r11,604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 604, ctx.r11.u8);
	// stb r4,606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 606, ctx.r4.u8);
	// stb r9,607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 607, ctx.r9.u8);
	// stb r7,608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 608, ctx.r7.u8);
	// stb r10,609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 609, ctx.r10.u8);
	// stb r11,610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 610, ctx.r11.u8);
	// stb r14,611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 611, ctx.r14.u8);
	// stb r4,612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 612, ctx.r4.u8);
	// stb r27,613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 613, ctx.r27.u8);
	// stb r22,614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 614, ctx.r22.u8);
	// stb r3,615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 615, ctx.r3.u8);
	// stb r9,616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 616, ctx.r9.u8);
	// li r14,243
	ctx.r14.s64 = 243;
	// stb r11,618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 618, ctx.r11.u8);
	// stb r3,619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 619, ctx.r3.u8);
	// stb r10,620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 620, ctx.r10.u8);
	// stb r11,621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 621, ctx.r11.u8);
	// stb r3,623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 623, ctx.r3.u8);
	// stb r14,617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 617, ctx.r14.u8);
	// li r14,71
	ctx.r14.s64 = 71;
	// stb r9,624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 624, ctx.r9.u8);
	// stb r11,626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 626, ctx.r11.u8);
	// stb r19,627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 627, ctx.r19.u8);
	// stb r10,628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 628, ctx.r10.u8);
	// stb r14,622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 622, ctx.r14.u8);
	// li r14,251
	ctx.r14.s64 = 251;
	// stb r11,629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 629, ctx.r11.u8);
	// stb r3,631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 631, ctx.r3.u8);
	// stb r30,632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 632, ctx.r30.u8);
	// stb r11,634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 634, ctx.r11.u8);
	// stb r14,625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 625, ctx.r14.u8);
	// li r14,70
	ctx.r14.s64 = 70;
	// stb r31,637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 637, ctx.r31.u8);
	// stb r31,638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 638, ctx.r31.u8);
	// stb r31,639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 639, ctx.r31.u8);
	// stb r7,640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 640, ctx.r7.u8);
	// stb r14,630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 630, ctx.r14.u8);
	// li r14,134
	ctx.r14.s64 = 134;
	// stb r25,641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 641, ctx.r25.u8);
	// stb r31,643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 643, ctx.r31.u8);
	// stb r31,644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 644, ctx.r31.u8);
	// stb r29,647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 647, ctx.r29.u8);
	// stb r14,633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 633, ctx.r14.u8);
	// li r14,12
	ctx.r14.s64 = 12;
	// stb r6,649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 649, ctx.r6.u8);
	// stb r6,650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 650, ctx.r6.u8);
	// stb r8,653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 653, ctx.r8.u8);
	// stb r31,654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 654, ctx.r31.u8);
	// stb r14,635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 635, ctx.r14.u8);
	// li r14,15
	ctx.r14.s64 = 15;
	// stb r26,655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 655, ctx.r26.u8);
	// stb r10,656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 656, ctx.r10.u8);
	// stb r9,657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 657, ctx.r9.u8);
	// stb r6,658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 658, ctx.r6.u8);
	// stb r14,636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 636, ctx.r14.u8);
	// li r14,46
	ctx.r14.s64 = 46;
	// stb r6,659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 659, ctx.r6.u8);
	// stb r5,662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 662, ctx.r5.u8);
	// stb r30,663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 663, ctx.r30.u8);
	// stb r17,666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 666, ctx.r17.u8);
	// stb r14,642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 642, ctx.r14.u8);
	// li r14,86
	ctx.r14.s64 = 86;
	// stb r31,667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 667, ctx.r31.u8);
	// stb r31,668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 668, ctx.r31.u8);
	// stb r31,669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 669, ctx.r31.u8);
	// stb r7,670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 670, ctx.r7.u8);
	// stb r14,645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 645, ctx.r14.u8);
	// li r14,127
	ctx.r14.s64 = 127;
	// stb r25,671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 671, ctx.r25.u8);
	// stb r18,672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 672, ctx.r18.u8);
	// stb r8,673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 673, ctx.r8.u8);
	// stb r31,675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 675, ctx.r31.u8);
	// stb r14,646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 646, ctx.r14.u8);
	// li r14,28
	ctx.r14.s64 = 28;
	// stb r14,648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 648, ctx.r14.u8);
	// li r14,249
	ctx.r14.s64 = 249;
	// stb r14,651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 651, ctx.r14.u8);
	// li r14,142
	ctx.r14.s64 = 142;
	// stb r14,652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 652, ctx.r14.u8);
	// li r14,247
	ctx.r14.s64 = 247;
	// stb r14,660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 660, ctx.r14.u8);
	// li r14,150
	ctx.r14.s64 = 150;
	// stb r14,661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 661, ctx.r14.u8);
	// li r14,87
	ctx.r14.s64 = 87;
	// stb r14,664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 664, ctx.r14.u8);
	// li r14,130
	ctx.r14.s64 = 130;
	// stb r14,665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 665, ctx.r14.u8);
	// li r14,24
	ctx.r14.s64 = 24;
	// stb r14,674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 674, ctx.r14.u8);
	// li r14,43
	ctx.r14.s64 = 43;
	// stb r14,676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 676, ctx.r14.u8);
	// li r14,150
	ctx.r14.s64 = 150;
	// stb r14,677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 677, ctx.r14.u8);
	// li r14,27
	ctx.r14.s64 = 27;
	// stb r25,683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 683, ctx.r25.u8);
	// stb r25,703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 703, ctx.r25.u8);
	// li r16,217
	ctx.r16.s64 = 217;
	// stb r25,733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 733, ctx.r25.u8);
	// li r25,27
	ctx.r25.s64 = 27;
	// stb r29,678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 678, ctx.r29.u8);
	// stb r31,679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 679, ctx.r31.u8);
	// stb r14,687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 687, ctx.r14.u8);
	// stb r14,707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 707, ctx.r14.u8);
	// li r14,220
	ctx.r14.s64 = 220;
	// stb r25,737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 737, ctx.r25.u8);
	// li r25,44
	ctx.r25.s64 = 44;
	// stb r31,680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 680, ctx.r31.u8);
	// stb r31,681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 681, ctx.r31.u8);
	// stb r7,682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 682, ctx.r7.u8);
	// stb r14,712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 712, ctx.r14.u8);
	// li r14,108
	ctx.r14.s64 = 108;
	// stb r25,741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 741, ctx.r25.u8);
	// li r25,246
	ctx.r25.s64 = 246;
	// stb r31,684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 684, ctx.r31.u8);
	// stb r19,685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 685, ctx.r19.u8);
	// stb r10,686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 686, ctx.r10.u8);
	// stb r14,722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 722, ctx.r14.u8);
	// li r14,128
	ctx.r14.s64 = 128;
	// stb r31,688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 688, ctx.r31.u8);
	// stb r31,689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 689, ctx.r31.u8);
	// stb r31,690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 690, ctx.r31.u8);
	// stb r15,691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 691, ctx.r15.u8);
	// stb r16,692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 692, ctx.r16.u8);
	// stb r31,693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 693, ctx.r31.u8);
	// stb r31,694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 694, ctx.r31.u8);
	// stb r31,695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 695, ctx.r31.u8);
	// stb r31,696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 696, ctx.r31.u8);
	// stb r8,697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 697, ctx.r8.u8);
	// stb r29,698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 698, ctx.r29.u8);
	// stb r31,699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 699, ctx.r31.u8);
	// stb r31,700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 700, ctx.r31.u8);
	// stb r31,701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 701, ctx.r31.u8);
	// stb r7,702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 702, ctx.r7.u8);
	// stb r31,704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 704, ctx.r31.u8);
	// stb r19,705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 705, ctx.r19.u8);
	// stb r10,706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 706, ctx.r10.u8);
	// stb r31,708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 708, ctx.r31.u8);
	// stb r31,709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 709, ctx.r31.u8);
	// stb r31,710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 710, ctx.r31.u8);
	// stb r15,711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 711, ctx.r15.u8);
	// stb r31,713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 713, ctx.r31.u8);
	// stb r31,714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 714, ctx.r31.u8);
	// stb r31,715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 715, ctx.r31.u8);
	// stb r31,716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 716, ctx.r31.u8);
	// stb r8,717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 717, ctx.r8.u8);
	// stb r8,718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 718, ctx.r8.u8);
	// stb r8,719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 719, ctx.r8.u8);
	// stb r10,720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 720, ctx.r10.u8);
	// stb r11,721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 721, ctx.r11.u8);
	// stb r5,723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 723, ctx.r5.u8);
	// stb r30,724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 724, ctx.r30.u8);
	// stb r14,725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 725, ctx.r14.u8);
	// stb r24,726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 726, ctx.r24.u8);
	// stb r29,727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 727, ctx.r29.u8);
	// stb r29,728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 728, ctx.r29.u8);
	// stb r31,729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 729, ctx.r31.u8);
	// stb r31,730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 730, ctx.r31.u8);
	// stb r31,731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 731, ctx.r31.u8);
	// stb r7,732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 732, ctx.r7.u8);
	// stb r31,734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 734, ctx.r31.u8);
	// stb r19,735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 735, ctx.r19.u8);
	// stb r10,736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 736, ctx.r10.u8);
	// stb r31,738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 738, ctx.r31.u8);
	// stb r31,739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 739, ctx.r31.u8);
	// stb r31,740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 740, ctx.r31.u8);
	// stb r25,742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 742, ctx.r25.u8);
	// stb r31,743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 743, ctx.r31.u8);
	// stb r31,744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 744, ctx.r31.u8);
	// stb r31,745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 745, ctx.r31.u8);
	// stb r31,746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 746, ctx.r31.u8);
	// stb r8,747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 747, ctx.r8.u8);
	// stb r31,748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 748, ctx.r31.u8);
	// stb r26,749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 749, ctx.r26.u8);
	// stb r10,750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 750, ctx.r10.u8);
	// stb r9,751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 751, ctx.r9.u8);
	// li r25,73
	ctx.r25.s64 = 73;
	// stb r9,799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 799, ctx.r9.u8);
	// li r9,77
	ctx.r9.s64 = 77;
	// stb r5,775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 775, ctx.r5.u8);
	// li r14,24
	ctx.r14.s64 = 24;
	// stb r5,786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 786, ctx.r5.u8);
	// li r5,176
	ctx.r5.s64 = 176;
	// stb r6,752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 752, ctx.r6.u8);
	// stb r25,760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 760, ctx.r25.u8);
	// li r25,131
	ctx.r25.s64 = 131;
	// stb r9,808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 808, ctx.r9.u8);
	// li r9,78
	ctx.r9.s64 = 78;
	// stb r6,753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 753, ctx.r6.u8);
	// stb r20,754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 754, ctx.r20.u8);
	// stb r23,755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 755, ctx.r23.u8);
	// stb r25,763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 763, ctx.r25.u8);
	// li r25,72
	ctx.r25.s64 = 72;
	// stb r9,814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 814, ctx.r9.u8);
	// li r9,187
	ctx.r9.s64 = 187;
	// stb r21,756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 756, ctx.r21.u8);
	// stb r8,757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 757, ctx.r8.u8);
	// stb r10,758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 758, ctx.r10.u8);
	// stb r25,766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 766, ctx.r25.u8);
	// li r25,179
	ctx.r25.s64 = 179;
	// stb r9,817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 817, ctx.r9.u8);
	// li r9,13
	ctx.r9.s64 = 13;
	// stb r11,759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 759, ctx.r11.u8);
	// stb r4,761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 761, ctx.r4.u8);
	// stb r30,762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 762, ctx.r30.u8);
	// stb r10,764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 764, ctx.r10.u8);
	// stb r11,765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 765, ctx.r11.u8);
	// stb r4,767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 767, ctx.r4.u8);
	// stb r27,768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 768, ctx.r27.u8);
	// stb r22,769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 769, ctx.r22.u8);
	// stb r3,770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 770, ctx.r3.u8);
	// stb r30,771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 771, ctx.r30.u8);
	// stb r25,772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 772, ctx.r25.u8);
	// stb r11,773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 773, ctx.r11.u8);
	// stb r14,774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 774, ctx.r14.u8);
	// stb r30,776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 776, ctx.r30.u8);
	// stb r25,777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 777, ctx.r25.u8);
	// stb r17,778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 778, ctx.r17.u8);
	// stb r31,779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 779, ctx.r31.u8);
	// stb r31,780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 780, ctx.r31.u8);
	// stb r31,781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 781, ctx.r31.u8);
	// stb r7,782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 782, ctx.r7.u8);
	// stb r28,783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 783, ctx.r28.u8);
	// stb r18,784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 784, ctx.r18.u8);
	// stb r8,785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 785, ctx.r8.u8);
	// stb r30,787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 787, ctx.r30.u8);
	// stb r5,788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 788, ctx.r5.u8);
	// stb r24,789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 789, ctx.r24.u8);
	// stb r29,790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 790, ctx.r29.u8);
	// stb r31,791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 791, ctx.r31.u8);
	// stb r31,792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 792, ctx.r31.u8);
	// stb r31,793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 793, ctx.r31.u8);
	// stb r7,794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 794, ctx.r7.u8);
	// stb r28,795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 795, ctx.r28.u8);
	// stb r31,796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 796, ctx.r31.u8);
	// stb r26,797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 797, ctx.r26.u8);
	// stb r10,798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 798, ctx.r10.u8);
	// stb r6,800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 800, ctx.r6.u8);
	// stb r6,801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 801, ctx.r6.u8);
	// stb r20,802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 802, ctx.r20.u8);
	// stb r23,803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 803, ctx.r23.u8);
	// stb r21,804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 804, ctx.r21.u8);
	// stb r8,805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 805, ctx.r8.u8);
	// stb r10,806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 806, ctx.r10.u8);
	// stb r11,807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 807, ctx.r11.u8);
	// stb r4,809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 809, ctx.r4.u8);
	// stb r30,810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 810, ctx.r30.u8);
	// stb r25,811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 811, ctx.r25.u8);
	// stb r10,812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 812, ctx.r10.u8);
	// stb r11,813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 813, ctx.r11.u8);
	// stb r3,815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 815, ctx.r3.u8);
	// stb r30,816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 816, ctx.r30.u8);
	// stb r11,818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 818, ctx.r11.u8);
	// stb r9,819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 819, ctx.r9.u8);
	// stb r10,820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 820, ctx.r10.u8);
	// stb r11,821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 821, ctx.r11.u8);
	// li r9,82
	ctx.r9.s64 = 82;
	// ld r16,936(r1)
	ctx.r16.u64 = PPC_LOAD_U64(ctx.r1.u32 + 936);
	// stb r3,823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 823, ctx.r3.u8);
	// li r5,851
	ctx.r5.s64 = 851;
	// stb r30,824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 824, ctx.r30.u8);
	// addi r29,r16,24
	ctx.r29.s64 = ctx.r16.s64 + 24;
	// stb r11,826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 826, ctx.r11.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r22,827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 827, ctx.r22.u8);
	// stb r9,822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 822, ctx.r9.u8);
	// li r9,195
	ctx.r9.s64 = 195;
	// stb r10,828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 828, ctx.r10.u8);
	// stb r11,829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 829, ctx.r11.u8);
	// stb r3,831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 831, ctx.r3.u8);
	// stb r30,832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 832, ctx.r30.u8);
	// stb r9,825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 825, ctx.r9.u8);
	// li r9,90
	ctx.r9.s64 = 90;
	// stb r11,834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 834, ctx.r11.u8);
	// stb r10,836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 836, ctx.r10.u8);
	// stb r11,837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 837, ctx.r11.u8);
	// stb r3,839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 839, ctx.r3.u8);
	// stb r9,830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 830, ctx.r9.u8);
	// li r9,203
	ctx.r9.s64 = 203;
	// stb r30,840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 840, ctx.r30.u8);
	// stb r11,842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 842, ctx.r11.u8);
	// stb r10,844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 844, ctx.r10.u8);
	// stb r11,845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 845, ctx.r11.u8);
	// stb r9,833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 833, ctx.r9.u8);
	// li r9,15
	ctx.r9.s64 = 15;
	// stb r3,847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 847, ctx.r3.u8);
	// stb r30,848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 848, ctx.r30.u8);
	// stb r11,850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 850, ctx.r11.u8);
	// stb r10,852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 852, ctx.r10.u8);
	// stb r9,835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 835, ctx.r9.u8);
	// li r9,91
	ctx.r9.s64 = 91;
	// stb r11,853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 853, ctx.r11.u8);
	// stb r3,855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 855, ctx.r3.u8);
	// stb r30,856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 856, ctx.r30.u8);
	// stb r11,858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 858, ctx.r11.u8);
	// stb r9,838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 838, ctx.r9.u8);
	// li r9,211
	ctx.r9.s64 = 211;
	// stb r10,860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 860, ctx.r10.u8);
	// stb r11,861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 861, ctx.r11.u8);
	// stb r3,863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 863, ctx.r3.u8);
	// stb r30,864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 864, ctx.r30.u8);
	// stb r9,841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 841, ctx.r9.u8);
	// li r9,16
	ctx.r9.s64 = 16;
	// stb r11,866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 866, ctx.r11.u8);
	// stb r10,868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 868, ctx.r10.u8);
	// stb r11,869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 869, ctx.r11.u8);
	// stb r3,871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 871, ctx.r3.u8);
	// stb r9,843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 843, ctx.r9.u8);
	// li r9,92
	ctx.r9.s64 = 92;
	// stb r30,872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 872, ctx.r30.u8);
	// stb r11,874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 874, ctx.r11.u8);
	// stb r10,876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 876, ctx.r10.u8);
	// stb r11,877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 877, ctx.r11.u8);
	// stb r9,846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 846, ctx.r9.u8);
	// li r9,219
	ctx.r9.s64 = 219;
	// stb r9,849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 849, ctx.r9.u8);
	// li r9,17
	ctx.r9.s64 = 17;
	// stb r9,851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 851, ctx.r9.u8);
	// li r9,93
	ctx.r9.s64 = 93;
	// stb r9,854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 854, ctx.r9.u8);
	// li r9,227
	ctx.r9.s64 = 227;
	// stb r9,857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 857, ctx.r9.u8);
	// li r9,18
	ctx.r9.s64 = 18;
	// stb r9,859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 859, ctx.r9.u8);
	// li r9,94
	ctx.r9.s64 = 94;
	// stb r9,862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 862, ctx.r9.u8);
	// li r9,235
	ctx.r9.s64 = 235;
	// stb r9,865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 865, ctx.r9.u8);
	// li r9,19
	ctx.r9.s64 = 19;
	// stb r9,867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 867, ctx.r9.u8);
	// li r9,95
	ctx.r9.s64 = 95;
	// stb r9,870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 870, ctx.r9.u8);
	// li r9,243
	ctx.r9.s64 = 243;
	// stb r9,873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 873, ctx.r9.u8);
	// li r9,20
	ctx.r9.s64 = 20;
	// stb r9,875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 875, ctx.r9.u8);
	// li r9,96
	ctx.r9.s64 = 96;
	// stb r9,878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 878, ctx.r9.u8);
	// li r9,251
	ctx.r9.s64 = 251;
	// stb r11,882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 882, ctx.r11.u8);
	// stb r11,885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 885, ctx.r11.u8);
	// stb r11,890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 890, ctx.r11.u8);
	// stb r11,893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 893, ctx.r11.u8);
	// stb r11,898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 898, ctx.r11.u8);
	// stb r11,901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 901, ctx.r11.u8);
	// stb r11,907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 907, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// stb r9,881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 881, ctx.r9.u8);
	// li r9,21
	ctx.r9.s64 = 21;
	// stb r3,879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 879, ctx.r3.u8);
	// stb r3,887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 887, ctx.r3.u8);
	// stb r3,895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 895, ctx.r3.u8);
	// stb r11,908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 908, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r9,883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 883, ctx.r9.u8);
	// li r9,97
	ctx.r9.s64 = 97;
	// stb r3,903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 903, ctx.r3.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r30,880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 880, ctx.r30.u8);
	// stb r10,884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 884, ctx.r10.u8);
	// stb r11,910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 910, ctx.r11.u8);
	// li r11,63
	ctx.r11.s64 = 63;
	// stb r9,886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 886, ctx.r9.u8);
	// li r9,23
	ctx.r9.s64 = 23;
	// stb r27,888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 888, ctx.r27.u8);
	// stb r27,889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 889, ctx.r27.u8);
	// stb r8,891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 891, ctx.r8.u8);
	// stb r11,914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 914, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r9,899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 899, ctx.r9.u8);
	// li r9,103
	ctx.r9.s64 = 103;
	// stb r10,892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 892, ctx.r10.u8);
	// stb r15,894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 894, ctx.r15.u8);
	// stb r27,896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 896, ctx.r27.u8);
	// stb r11,915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 915, ctx.r11.u8);
	// li r11,136
	ctx.r11.s64 = 136;
	// stb r19,897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 897, ctx.r19.u8);
	// stb r10,900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 900, ctx.r10.u8);
	// stb r9,902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 902, ctx.r9.u8);
	// stb r6,904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 904, ctx.r6.u8);
	// stb r6,905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 905, ctx.r6.u8);
	// stb r10,906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 906, ctx.r10.u8);
	// stb r10,909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 909, ctx.r10.u8);
	// stb r31,911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 911, ctx.r31.u8);
	// stb r31,912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 912, ctx.r31.u8);
	// stb r7,913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 913, ctx.r7.u8);
	// stb r31,916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 916, ctx.r31.u8);
	// stb r31,917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 917, ctx.r31.u8);
	// stb r31,918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 918, ctx.r31.u8);
	// stb r31,919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 919, ctx.r31.u8);
	// stb r10,920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 920, ctx.r10.u8);
	// stb r31,921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 921, ctx.r31.u8);
	// stb r27,922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 922, ctx.r27.u8);
	// stb r31,923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 923, ctx.r31.u8);
	// stb r31,924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 924, ctx.r31.u8);
	// stb r15,925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 925, ctx.r15.u8);
	// stb r11,926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 926, ctx.r11.u8);
	// stb r31,927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 927, ctx.r31.u8);
	// stb r31,928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 928, ctx.r31.u8);
	// stb r31,929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 929, ctx.r31.u8);
	// stb r31,930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 930, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824910C8;
	sub_82B06418(ctx, base);
	// mr r3,r16
	ctx.r3.u64 = ctx.r16.u64;
	// stw r29,20(r16)
	PPC_STORE_U32(ctx.r16.u32 + 20, ctx.r29.u32);
	// addi r1,r1,1104
	ctx.r1.s64 = ctx.r1.s64 + 1104;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824910D8"))) PPC_WEAK_FUNC(sub_824910D8);
PPC_FUNC_IMPL(__imp__sub_824910D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,143
	ctx.r9.s64 = 143;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26608
	ctx.r4.s64 = ctx.r10.s64 + 26608;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82491124;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,66
	ctx.r9.s64 = 66;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// li r8,2
	ctx.r8.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,72
	ctx.r11.s64 = 72;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r8,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r8.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r11.u8);
	// li r8,3
	ctx.r8.s64 = 3;
	// stb r11,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// li r7,136
	ctx.r7.s64 = 136;
	// stb r9,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r8,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r8.u8);
	// li r8,99
	ctx.r8.s64 = 99;
	// stb r11,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r7,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r7.u8);
	// li r7,25
	ctx.r7.s64 = 25;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r8,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r8.u8);
	// stb r8,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r8.u8);
	// li r8,245
	ctx.r8.s64 = 245;
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r7,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r7.u8);
	// li r7,59
	ctx.r7.s64 = 59;
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r8,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r8.u8);
	// li r8,54
	ctx.r8.s64 = 54;
	// stb r11,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r8,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r8.u8);
	// li r8,8
	ctx.r8.s64 = 8;
	// stb r11,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r10,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r10.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r8,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r8.u8);
	// li r8,146
	ctx.r8.s64 = 146;
	// stb r11,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r9,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r9.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r10,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r10.u8);
	// stb r7,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r7.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r10,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r10.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r8,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r8.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r9,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r9.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r11,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r11.u8);
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// li r11,68
	ctx.r11.s64 = 68;
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// li r5,143
	ctx.r5.s64 = 143;
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// addi r31,r30,24
	ctx.r31.s64 = ctx.r30.s64 + 24;
	// stb r10,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r10.u8);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824913D8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_824913F8"))) PPC_WEAK_FUNC(sub_824913F8);
PPC_FUNC_IMPL(__imp__sub_824913F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82491400;
	__savegprlr_14(ctx, base);
	// stwu r1,-1344(r1)
	ea = -1344 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r29,4
	ctx.r3.s64 = ctx.r29.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,1104
	ctx.r9.s64 = 1104;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26640
	ctx.r4.s64 = ctx.r10.s64 + 26640;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// stw r9,16(r29)
	PPC_STORE_U32(ctx.r29.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249143C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r5,1
	ctx.r5.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r27,100
	ctx.r27.s64 = 100;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,14
	ctx.r10.s64 = 14;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r8,58
	ctx.r8.s64 = 58;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,73
	ctx.r11.s64 = 73;
	// stb r5,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r5.u8);
	// stb r27,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r27.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,17
	ctx.r11.s64 = 17;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r11.u8);
	// li r11,36
	ctx.r11.s64 = 36;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r11.u8);
	// li r11,25
	ctx.r11.s64 = 25;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r5,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r5.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// li r11,13
	ctx.r11.s64 = 13;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,55
	ctx.r11.s64 = 55;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r11,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r10,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r10.u8);
	// stb r8,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r8.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r31.u8);
	// stb r31,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r31.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r5,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r5.u8);
	// li r4,8
	ctx.r4.s64 = 8;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r20,143
	ctx.r20.s64 = 143;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// li r28,2
	ctx.r28.s64 = 2;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// li r15,10
	ctx.r15.s64 = 10;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r11.u8);
	// li r11,72
	ctx.r11.s64 = 72;
	// li r18,29
	ctx.r18.s64 = 29;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// li r9,63
	ctx.r9.s64 = 63;
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// li r14,74
	ctx.r14.s64 = 74;
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r15,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r15.u8);
	// stb r11,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r11.u8);
	// li r11,190
	ctx.r11.s64 = 190;
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r10,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r10.u8);
	// stb r8,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r8.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r11,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r11.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r4,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r4.u8);
	// stb r20,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r20.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r28,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r28.u8);
	// stb r18,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r18.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r28,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r28.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r9,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r9.u8);
	// stb r14,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r14.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r31,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r31.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r31,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r31.u8);
	// stb r4,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r4.u8);
	// stb r20,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r20.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// li r7,83
	ctx.r7.s64 = 83;
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// li r30,101
	ctx.r30.s64 = 101;
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// li r21,99
	ctx.r21.s64 = 99;
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r31.u8);
	// li r26,89
	ctx.r26.s64 = 89;
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r7,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r7.u8);
	// li r7,117
	ctx.r7.s64 = 117;
	// li r22,12
	ctx.r22.s64 = 12;
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r11,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r11.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r7,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r7.u8);
	// li r7,71
	ctx.r7.s64 = 71;
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r9,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r9.u8);
	// stb r9,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r9.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r31,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r31.u8);
	// stb r31,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r31.u8);
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r26,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r26.u8);
	// stb r28,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r28.u8);
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r31,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r31.u8);
	// stb r10,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r10.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r31,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r31.u8);
	// stb r31,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r31.u8);
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r31.u8);
	// stb r15,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r15.u8);
	// stb r21,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r21.u8);
	// stb r21,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r21.u8);
	// stb r30,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r30.u8);
	// stb r30,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r30.u8);
	// stb r27,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r27.u8);
	// stb r30,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r30.u8);
	// stb r27,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r27.u8);
	// stb r31,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r31.u8);
	// stb r31,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r31.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r22,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r22.u8);
	// stb r7,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r7.u8);
	// stb r31,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r31.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r31,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r31.u8);
	// stb r31,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r31.u8);
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r10,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r10.u8);
	// stb r8,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r8.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r31,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r31.u8);
	// stb r31,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r31.u8);
	// stb r31,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r31.u8);
	// stb r31,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r31.u8);
	// stb r31,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r31.u8);
	// stb r31,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r31.u8);
	// li r23,11
	ctx.r23.s64 = 11;
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// li r7,31
	ctx.r7.s64 = 31;
	// stb r31,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r31.u8);
	// li r16,67
	ctx.r16.s64 = 67;
	// stb r31,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r31.u8);
	// li r3,70
	ctx.r3.s64 = 70;
	// stb r31,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r31.u8);
	// li r19,130
	ctx.r19.s64 = 130;
	// stb r31,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r31.u8);
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// stb r31,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r31.u8);
	// stb r31,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r31.u8);
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// stb r23,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r23.u8);
	// stb r18,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r18.u8);
	// stb r31,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r31.u8);
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// stb r31,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r31.u8);
	// stb r31,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r31.u8);
	// stb r31,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r31.u8);
	// stb r10,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r10.u8);
	// stb r8,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r8.u8);
	// stb r31,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r31.u8);
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r31,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r31.u8);
	// stb r31,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r31.u8);
	// stb r31,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r31.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r31.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r31,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r31.u8);
	// stb r31,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r31.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r31,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r31.u8);
	// stb r31,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r31.u8);
	// stb r31,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r31.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r23,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r23.u8);
	// stb r7,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r7.u8);
	// stb r31,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r31.u8);
	// stb r31,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r31.u8);
	// stb r31,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r31.u8);
	// stb r31,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r31.u8);
	// stb r31,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r31.u8);
	// stb r31,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r31.u8);
	// stb r10,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r10.u8);
	// stb r8,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r8.u8);
	// stb r31,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r31.u8);
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// stb r31,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r31.u8);
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r31,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r31.u8);
	// stb r31,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r31.u8);
	// stb r31,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r31.u8);
	// stb r31,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r31.u8);
	// stb r31,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r31.u8);
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// stb r31,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r31.u8);
	// stb r31,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r31.u8);
	// stb r31,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r31.u8);
	// stb r31,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r31.u8);
	// stb r31,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r31.u8);
	// stb r31,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r31.u8);
	// stb r31,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r31.u8);
	// stb r31,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r31.u8);
	// stb r9,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r9.u8);
	// stb r16,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r16.u8);
	// stb r31,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r31.u8);
	// stb r31,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r31.u8);
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r31,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r31.u8);
	// stb r31,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r31.u8);
	// stb r31,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r31.u8);
	// stb r3,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r3.u8);
	// stb r19,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r19.u8);
	// stb r31,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r31.u8);
	// li r7,28
	ctx.r7.s64 = 28;
	// stb r31,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r31.u8);
	// li r17,33
	ctx.r17.s64 = 33;
	// stb r31,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r31.u8);
	// li r24,53
	ctx.r24.s64 = 53;
	// stb r31,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r31.u8);
	// stb r31,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r31.u8);
	// stb r31,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r31.u8);
	// stb r7,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r7.u8);
	// li r7,39
	ctx.r7.s64 = 39;
	// stb r31,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r31.u8);
	// stb r11,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r11.u8);
	// stb r31,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r31.u8);
	// stb r31,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r31.u8);
	// stb r7,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r7.u8);
	// li r7,120
	ctx.r7.s64 = 120;
	// stb r31,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r31.u8);
	// stb r31,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r31.u8);
	// stb r31,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r31.u8);
	// stb r31,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r31.u8);
	// stb r7,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r7.u8);
	// li r7,52
	ctx.r7.s64 = 52;
	// stb r31,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r31.u8);
	// stb r31,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r31.u8);
	// stb r31,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r31.u8);
	// stb r31,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r31.u8);
	// stb r7,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r7.u8);
	// li r7,97
	ctx.r7.s64 = 97;
	// stb r5,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r5.u8);
	// stb r31,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r31.u8);
	// stb r31,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r31.u8);
	// stb r31,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r31.u8);
	// stb r31,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r31.u8);
	// stb r31,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r31.u8);
	// stb r31,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r31.u8);
	// stb r31,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r31.u8);
	// stb r31,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r31.u8);
	// stb r31,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r31.u8);
	// stb r31,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r31.u8);
	// stb r31,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r31.u8);
	// stb r31,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r31.u8);
	// stb r31,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r31.u8);
	// stb r11,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r11.u8);
	// stb r31,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r31.u8);
	// stb r31,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r31.u8);
	// stb r31,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r31.u8);
	// stb r31,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r31.u8);
	// stb r31,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r31.u8);
	// stb r31,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r31.u8);
	// stb r31,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r31.u8);
	// stb r31,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r31.u8);
	// stb r31,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r31.u8);
	// stb r31,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r31.u8);
	// stb r17,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r17.u8);
	// stb r31,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r31.u8);
	// stb r31,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r31.u8);
	// stb r31,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r31.u8);
	// stb r31,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r31.u8);
	// stb r31,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r31.u8);
	// stb r31,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r31.u8);
	// stb r24,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r24.u8);
	// stb r7,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r7.u8);
	// stb r31,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r31.u8);
	// stb r31,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r31.u8);
	// stb r31,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r31.u8);
	// stb r31,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r31.u8);
	// stb r31,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r31.u8);
	// stb r31,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r31.u8);
	// stb r31,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r31.u8);
	// stb r11,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r11.u8);
	// stb r31,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r31.u8);
	// stb r31,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r31.u8);
	// stb r31,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r31.u8);
	// stb r31,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r31.u8);
	// stb r31,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r31.u8);
	// stb r31,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r31.u8);
	// stb r31,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r31.u8);
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r31,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r31.u8);
	// stb r31,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r31.u8);
	// stb r22,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r22.u8);
	// li r25,69
	ctx.r25.s64 = 69;
	// stb r27,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r27.u8);
	// li r6,77
	ctx.r6.s64 = 77;
	// stb r31,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r31.u8);
	// stb r31,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r31.u8);
	// stb r31,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r31.u8);
	// stb r31,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r31.u8);
	// stb r31,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r31.u8);
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r10,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r10.u8);
	// stb r8,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r8.u8);
	// stb r31,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r31.u8);
	// stb r31,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r31.u8);
	// stb r31,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r31.u8);
	// stb r31,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r31.u8);
	// stb r31,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r31.u8);
	// stb r31,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r31.u8);
	// stb r31,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r31.u8);
	// stb r31,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r31.u8);
	// stb r31,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r31.u8);
	// stb r31,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r31.u8);
	// stb r31,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r31.u8);
	// stb r31,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r31.u8);
	// stb r31,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r31.u8);
	// stb r31,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r31.u8);
	// stb r31,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r31.u8);
	// stb r31,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r31.u8);
	// stb r31,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r31.u8);
	// stb r31,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r31.u8);
	// stb r25,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r25.u8);
	// stb r6,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r6.u8);
	// stb r31,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r31.u8);
	// stb r31,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r31.u8);
	// stb r31,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r31.u8);
	// stb r31,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r31.u8);
	// stb r31,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r31.u8);
	// stb r31,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r31.u8);
	// stb r9,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r9.u8);
	// stb r14,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r14.u8);
	// stb r31,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r31.u8);
	// stb r31,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r31.u8);
	// stb r31,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r31.u8);
	// stb r31,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r31.u8);
	// stb r31,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r31.u8);
	// stb r31,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r31.u8);
	// stb r4,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r4.u8);
	// stb r20,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r20.u8);
	// stb r31,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r31.u8);
	// stb r31,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r31.u8);
	// stb r31,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r31.u8);
	// stb r31,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r31.u8);
	// stb r31,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r31.u8);
	// stb r31,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r31.u8);
	// stb r31,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r31.u8);
	// stb r11,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r11.u8);
	// stb r31,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r31.u8);
	// stb r31,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r31.u8);
	// stb r31,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r31.u8);
	// stb r31,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r31.u8);
	// stb r31,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r31.u8);
	// stb r31,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r31.u8);
	// stb r31,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r31.u8);
	// stb r31,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r31.u8);
	// stb r31,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r31.u8);
	// stb r31,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r31.u8);
	// stb r9,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r9.u8);
	// stb r9,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r9.u8);
	// stb r31,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r31.u8);
	// stb r31,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r31.u8);
	// stb r31,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r31.u8);
	// stb r31,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r31.u8);
	// stb r31,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r31.u8);
	// stb r31,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r31.u8);
	// stb r26,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r26.u8);
	// stb r28,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r28.u8);
	// stb r31,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r31.u8);
	// stb r31,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r31.u8);
	// stb r31,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r31.u8);
	// stb r31,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r31.u8);
	// stb r31,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r31.u8);
	// stb r31,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r31.u8);
	// li r14,7
	ctx.r14.s64 = 7;
	// stb r23,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r23.u8);
	// stb r23,556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 556, ctx.r23.u8);
	// stb r23,584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 584, ctx.r23.u8);
	// li r23,31
	ctx.r23.s64 = 31;
	// stb r31,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r31.u8);
	// stb r31,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r31.u8);
	// stb r14,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r14.u8);
	// li r14,105
	ctx.r14.s64 = 105;
	// stb r31,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r31.u8);
	// stb r31,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r31.u8);
	// stb r31,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r31.u8);
	// stb r31,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r31.u8);
	// stb r14,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r14.u8);
	// li r14,108
	ctx.r14.s64 = 108;
	// stb r31,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r31.u8);
	// stb r31,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r31.u8);
	// stb r3,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r3.u8);
	// stb r7,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r7.u8);
	// stb r14,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r14.u8);
	// li r14,71
	ctx.r14.s64 = 71;
	// stb r30,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r30.u8);
	// stb r27,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r27.u8);
	// stb r31,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r31.u8);
	// stb r31,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r31.u8);
	// stb r31,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r31.u8);
	// stb r22,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r22.u8);
	// stb r14,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r14.u8);
	// stb r31,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r31.u8);
	// stb r31,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r31.u8);
	// stb r31,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r31.u8);
	// stb r31,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r31.u8);
	// stb r31,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r31.u8);
	// stb r31,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r31.u8);
	// stb r10,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r10.u8);
	// stb r8,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r8.u8);
	// stb r31,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r31.u8);
	// stb r31,539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 539, ctx.r31.u8);
	// stb r31,540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 540, ctx.r31.u8);
	// stb r31,541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 541, ctx.r31.u8);
	// stb r31,542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 542, ctx.r31.u8);
	// stb r31,543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 543, ctx.r31.u8);
	// stb r31,544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 544, ctx.r31.u8);
	// stb r31,545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 545, ctx.r31.u8);
	// stb r31,546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 546, ctx.r31.u8);
	// stb r31,547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 547, ctx.r31.u8);
	// stb r31,548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 548, ctx.r31.u8);
	// stb r31,549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 549, ctx.r31.u8);
	// stb r31,550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 550, ctx.r31.u8);
	// stb r31,551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 551, ctx.r31.u8);
	// stb r31,552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 552, ctx.r31.u8);
	// stb r31,553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 553, ctx.r31.u8);
	// stb r31,554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 554, ctx.r31.u8);
	// stb r31,555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 555, ctx.r31.u8);
	// stb r18,557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 557, ctx.r18.u8);
	// stb r31,558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 558, ctx.r31.u8);
	// stb r31,559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 559, ctx.r31.u8);
	// stb r31,560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 560, ctx.r31.u8);
	// stb r31,561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 561, ctx.r31.u8);
	// stb r31,562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 562, ctx.r31.u8);
	// stb r31,563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 563, ctx.r31.u8);
	// stb r10,564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 564, ctx.r10.u8);
	// stb r8,565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 565, ctx.r8.u8);
	// stb r31,566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 566, ctx.r31.u8);
	// stb r31,567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 567, ctx.r31.u8);
	// stb r31,568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 568, ctx.r31.u8);
	// stb r31,569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 569, ctx.r31.u8);
	// stb r31,570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 570, ctx.r31.u8);
	// stb r31,571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 571, ctx.r31.u8);
	// stb r31,572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 572, ctx.r31.u8);
	// stb r31,573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 573, ctx.r31.u8);
	// stb r31,574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 574, ctx.r31.u8);
	// stb r31,575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 575, ctx.r31.u8);
	// stb r31,576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 576, ctx.r31.u8);
	// stb r31,577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 577, ctx.r31.u8);
	// stb r31,578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 578, ctx.r31.u8);
	// stb r31,579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 579, ctx.r31.u8);
	// stb r31,580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 580, ctx.r31.u8);
	// stb r31,581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 581, ctx.r31.u8);
	// stb r31,582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 582, ctx.r31.u8);
	// stb r31,583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 583, ctx.r31.u8);
	// stb r23,585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 585, ctx.r23.u8);
	// li r23,28
	ctx.r23.s64 = 28;
	// stb r31,586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 586, ctx.r31.u8);
	// stb r31,587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 587, ctx.r31.u8);
	// stb r31,588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 588, ctx.r31.u8);
	// stb r31,589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 589, ctx.r31.u8);
	// stb r23,641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 641, ctx.r23.u8);
	// li r23,39
	ctx.r23.s64 = 39;
	// stb r31,590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 590, ctx.r31.u8);
	// stb r31,591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 591, ctx.r31.u8);
	// stb r10,592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 592, ctx.r10.u8);
	// stb r8,593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 593, ctx.r8.u8);
	// stb r23,648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 648, ctx.r23.u8);
	// li r23,120
	ctx.r23.s64 = 120;
	// stb r31,594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 594, ctx.r31.u8);
	// stb r31,595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 595, ctx.r31.u8);
	// stb r31,596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 596, ctx.r31.u8);
	// stb r31,597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 597, ctx.r31.u8);
	// stb r31,598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 598, ctx.r31.u8);
	// stb r31,599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 599, ctx.r31.u8);
	// stb r31,600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 600, ctx.r31.u8);
	// stb r31,601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 601, ctx.r31.u8);
	// stb r31,602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 602, ctx.r31.u8);
	// stb r31,603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 603, ctx.r31.u8);
	// stb r31,604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 604, ctx.r31.u8);
	// stb r31,605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 605, ctx.r31.u8);
	// stb r31,606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 606, ctx.r31.u8);
	// stb r31,607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 607, ctx.r31.u8);
	// stb r31,608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 608, ctx.r31.u8);
	// stb r31,609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 609, ctx.r31.u8);
	// stb r31,610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 610, ctx.r31.u8);
	// stb r31,611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 611, ctx.r31.u8);
	// stb r9,612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 612, ctx.r9.u8);
	// stb r16,613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 613, ctx.r16.u8);
	// stb r31,614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 614, ctx.r31.u8);
	// stb r31,615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 615, ctx.r31.u8);
	// stb r31,616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 616, ctx.r31.u8);
	// stb r31,617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 617, ctx.r31.u8);
	// stb r31,618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 618, ctx.r31.u8);
	// stb r31,619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 619, ctx.r31.u8);
	// stb r3,620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 620, ctx.r3.u8);
	// stb r19,621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 621, ctx.r19.u8);
	// stb r31,622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 622, ctx.r31.u8);
	// stb r31,623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 623, ctx.r31.u8);
	// stb r31,624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 624, ctx.r31.u8);
	// stb r31,625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 625, ctx.r31.u8);
	// stb r31,626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 626, ctx.r31.u8);
	// stb r31,627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 627, ctx.r31.u8);
	// stb r31,628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 628, ctx.r31.u8);
	// stb r11,629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 629, ctx.r11.u8);
	// stb r31,630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 630, ctx.r31.u8);
	// stb r31,631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 631, ctx.r31.u8);
	// stb r31,632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 632, ctx.r31.u8);
	// stb r31,633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 633, ctx.r31.u8);
	// stb r31,634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 634, ctx.r31.u8);
	// stb r31,635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 635, ctx.r31.u8);
	// stb r31,636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 636, ctx.r31.u8);
	// stb r31,637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 637, ctx.r31.u8);
	// stb r31,638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 638, ctx.r31.u8);
	// stb r31,639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 639, ctx.r31.u8);
	// stb r5,640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 640, ctx.r5.u8);
	// stb r31,642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 642, ctx.r31.u8);
	// stb r31,643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 643, ctx.r31.u8);
	// stb r31,644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 644, ctx.r31.u8);
	// stb r31,645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 645, ctx.r31.u8);
	// stb r31,646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 646, ctx.r31.u8);
	// stb r31,647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 647, ctx.r31.u8);
	// stb r23,649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 649, ctx.r23.u8);
	// stb r31,650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 650, ctx.r31.u8);
	// stb r31,651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 651, ctx.r31.u8);
	// stb r31,652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 652, ctx.r31.u8);
	// stb r31,653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 653, ctx.r31.u8);
	// stb r31,654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 654, ctx.r31.u8);
	// stb r31,655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 655, ctx.r31.u8);
	// stb r31,656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 656, ctx.r31.u8);
	// stb r11,657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 657, ctx.r11.u8);
	// stb r31,658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 658, ctx.r31.u8);
	// stb r31,659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 659, ctx.r31.u8);
	// stb r31,660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 660, ctx.r31.u8);
	// stb r31,661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 661, ctx.r31.u8);
	// stb r31,662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 662, ctx.r31.u8);
	// li r23,52
	ctx.r23.s64 = 52;
	// stb r31,663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 663, ctx.r31.u8);
	// stb r31,664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 664, ctx.r31.u8);
	// stb r31,665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 665, ctx.r31.u8);
	// stb r31,666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 666, ctx.r31.u8);
	// stb r31,667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 667, ctx.r31.u8);
	// stb r23,669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 669, ctx.r23.u8);
	// li r23,95
	ctx.r23.s64 = 95;
	// stb r17,668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 668, ctx.r17.u8);
	// stb r31,670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 670, ctx.r31.u8);
	// stb r31,671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 671, ctx.r31.u8);
	// stb r31,672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 672, ctx.r31.u8);
	// stb r23,732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 732, ctx.r23.u8);
	// li r23,209
	ctx.r23.s64 = 209;
	// stb r31,673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 673, ctx.r31.u8);
	// stb r31,674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 674, ctx.r31.u8);
	// stb r31,675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 675, ctx.r31.u8);
	// stb r24,676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 676, ctx.r24.u8);
	// stb r7,677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 677, ctx.r7.u8);
	// stb r31,678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 678, ctx.r31.u8);
	// stb r31,679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 679, ctx.r31.u8);
	// stb r31,680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 680, ctx.r31.u8);
	// stb r31,681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 681, ctx.r31.u8);
	// stb r31,682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 682, ctx.r31.u8);
	// stb r31,683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 683, ctx.r31.u8);
	// stb r31,684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 684, ctx.r31.u8);
	// stb r11,685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 685, ctx.r11.u8);
	// stb r31,686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 686, ctx.r31.u8);
	// stb r31,687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 687, ctx.r31.u8);
	// stb r31,688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 688, ctx.r31.u8);
	// stb r31,689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 689, ctx.r31.u8);
	// stb r31,690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 690, ctx.r31.u8);
	// stb r31,691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 691, ctx.r31.u8);
	// stb r31,692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 692, ctx.r31.u8);
	// stb r31,693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 693, ctx.r31.u8);
	// stb r31,694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 694, ctx.r31.u8);
	// stb r31,695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 695, ctx.r31.u8);
	// stb r22,696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 696, ctx.r22.u8);
	// stb r27,697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 697, ctx.r27.u8);
	// stb r31,698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 698, ctx.r31.u8);
	// stb r31,699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 699, ctx.r31.u8);
	// stb r31,700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 700, ctx.r31.u8);
	// stb r31,701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 701, ctx.r31.u8);
	// stb r31,702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 702, ctx.r31.u8);
	// stb r31,703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 703, ctx.r31.u8);
	// stb r10,704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 704, ctx.r10.u8);
	// stb r8,705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 705, ctx.r8.u8);
	// stb r31,706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 706, ctx.r31.u8);
	// stb r31,707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 707, ctx.r31.u8);
	// stb r31,708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 708, ctx.r31.u8);
	// stb r31,709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 709, ctx.r31.u8);
	// stb r31,710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 710, ctx.r31.u8);
	// stb r31,711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 711, ctx.r31.u8);
	// stb r31,712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 712, ctx.r31.u8);
	// stb r31,713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 713, ctx.r31.u8);
	// stb r31,714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 714, ctx.r31.u8);
	// stb r31,715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 715, ctx.r31.u8);
	// stb r31,716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 716, ctx.r31.u8);
	// stb r31,717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 717, ctx.r31.u8);
	// stb r31,718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 718, ctx.r31.u8);
	// stb r31,719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 719, ctx.r31.u8);
	// stb r31,720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 720, ctx.r31.u8);
	// stb r31,721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 721, ctx.r31.u8);
	// stb r31,722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 722, ctx.r31.u8);
	// stb r31,723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 723, ctx.r31.u8);
	// stb r25,724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 724, ctx.r25.u8);
	// stb r6,725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 725, ctx.r6.u8);
	// stb r31,726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 726, ctx.r31.u8);
	// stb r31,727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 727, ctx.r31.u8);
	// stb r31,728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 728, ctx.r31.u8);
	// stb r31,729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 729, ctx.r31.u8);
	// stb r31,730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 730, ctx.r31.u8);
	// stb r31,731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 731, ctx.r31.u8);
	// stb r23,733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 733, ctx.r23.u8);
	// stb r31,734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 734, ctx.r31.u8);
	// stb r31,735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 735, ctx.r31.u8);
	// stb r31,736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 736, ctx.r31.u8);
	// stb r31,737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 737, ctx.r31.u8);
	// stb r31,738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 738, ctx.r31.u8);
	// stb r31,739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 739, ctx.r31.u8);
	// stb r4,740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 740, ctx.r4.u8);
	// li r23,37
	ctx.r23.s64 = 37;
	// stb r20,741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 741, ctx.r20.u8);
	// li r18,255
	ctx.r18.s64 = 255;
	// stb r31,742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 742, ctx.r31.u8);
	// li r14,66
	ctx.r14.s64 = 66;
	// stb r31,743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 743, ctx.r31.u8);
	// stb r31,744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 744, ctx.r31.u8);
	// stb r31,745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 745, ctx.r31.u8);
	// stb r23,760(r1)
	PPC_STORE_U8(ctx.r1.u32 + 760, ctx.r23.u8);
	// li r23,253
	ctx.r23.s64 = 253;
	// stb r31,746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 746, ctx.r31.u8);
	// stb r31,747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 747, ctx.r31.u8);
	// stb r5,748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 748, ctx.r5.u8);
	// stb r6,749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 749, ctx.r6.u8);
	// stb r23,784(r1)
	PPC_STORE_U8(ctx.r1.u32 + 784, ctx.r23.u8);
	// li r23,68
	ctx.r23.s64 = 68;
	// stb r31,750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 750, ctx.r31.u8);
	// stb r31,751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 751, ctx.r31.u8);
	// stb r31,752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 752, ctx.r31.u8);
	// stb r31,753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 753, ctx.r31.u8);
	// stb r31,754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 754, ctx.r31.u8);
	// stb r31,755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 755, ctx.r31.u8);
	// stb r31,756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 756, ctx.r31.u8);
	// stb r5,757(r1)
	PPC_STORE_U8(ctx.r1.u32 + 757, ctx.r5.u8);
	// stb r31,758(r1)
	PPC_STORE_U8(ctx.r1.u32 + 758, ctx.r31.u8);
	// stb r31,759(r1)
	PPC_STORE_U8(ctx.r1.u32 + 759, ctx.r31.u8);
	// stb r14,761(r1)
	PPC_STORE_U8(ctx.r1.u32 + 761, ctx.r14.u8);
	// stb r31,762(r1)
	PPC_STORE_U8(ctx.r1.u32 + 762, ctx.r31.u8);
	// stb r31,763(r1)
	PPC_STORE_U8(ctx.r1.u32 + 763, ctx.r31.u8);
	// stb r31,764(r1)
	PPC_STORE_U8(ctx.r1.u32 + 764, ctx.r31.u8);
	// stb r31,765(r1)
	PPC_STORE_U8(ctx.r1.u32 + 765, ctx.r31.u8);
	// stb r31,766(r1)
	PPC_STORE_U8(ctx.r1.u32 + 766, ctx.r31.u8);
	// stb r31,767(r1)
	PPC_STORE_U8(ctx.r1.u32 + 767, ctx.r31.u8);
	// stb r3,768(r1)
	PPC_STORE_U8(ctx.r1.u32 + 768, ctx.r3.u8);
	// stb r19,769(r1)
	PPC_STORE_U8(ctx.r1.u32 + 769, ctx.r19.u8);
	// stb r31,770(r1)
	PPC_STORE_U8(ctx.r1.u32 + 770, ctx.r31.u8);
	// stb r31,771(r1)
	PPC_STORE_U8(ctx.r1.u32 + 771, ctx.r31.u8);
	// stb r31,772(r1)
	PPC_STORE_U8(ctx.r1.u32 + 772, ctx.r31.u8);
	// stb r31,773(r1)
	PPC_STORE_U8(ctx.r1.u32 + 773, ctx.r31.u8);
	// stb r31,774(r1)
	PPC_STORE_U8(ctx.r1.u32 + 774, ctx.r31.u8);
	// stb r31,775(r1)
	PPC_STORE_U8(ctx.r1.u32 + 775, ctx.r31.u8);
	// stb r31,776(r1)
	PPC_STORE_U8(ctx.r1.u32 + 776, ctx.r31.u8);
	// stb r11,777(r1)
	PPC_STORE_U8(ctx.r1.u32 + 777, ctx.r11.u8);
	// stb r31,778(r1)
	PPC_STORE_U8(ctx.r1.u32 + 778, ctx.r31.u8);
	// stb r31,779(r1)
	PPC_STORE_U8(ctx.r1.u32 + 779, ctx.r31.u8);
	// stb r31,780(r1)
	PPC_STORE_U8(ctx.r1.u32 + 780, ctx.r31.u8);
	// stb r31,781(r1)
	PPC_STORE_U8(ctx.r1.u32 + 781, ctx.r31.u8);
	// stb r18,782(r1)
	PPC_STORE_U8(ctx.r1.u32 + 782, ctx.r18.u8);
	// stb r18,783(r1)
	PPC_STORE_U8(ctx.r1.u32 + 783, ctx.r18.u8);
	// stb r16,785(r1)
	PPC_STORE_U8(ctx.r1.u32 + 785, ctx.r16.u8);
	// stb r31,786(r1)
	PPC_STORE_U8(ctx.r1.u32 + 786, ctx.r31.u8);
	// stb r31,787(r1)
	PPC_STORE_U8(ctx.r1.u32 + 787, ctx.r31.u8);
	// stb r9,788(r1)
	PPC_STORE_U8(ctx.r1.u32 + 788, ctx.r9.u8);
	// stb r23,789(r1)
	PPC_STORE_U8(ctx.r1.u32 + 789, ctx.r23.u8);
	// stb r31,790(r1)
	PPC_STORE_U8(ctx.r1.u32 + 790, ctx.r31.u8);
	// stb r31,791(r1)
	PPC_STORE_U8(ctx.r1.u32 + 791, ctx.r31.u8);
	// stb r31,792(r1)
	PPC_STORE_U8(ctx.r1.u32 + 792, ctx.r31.u8);
	// stb r31,793(r1)
	PPC_STORE_U8(ctx.r1.u32 + 793, ctx.r31.u8);
	// stb r31,794(r1)
	PPC_STORE_U8(ctx.r1.u32 + 794, ctx.r31.u8);
	// stb r31,795(r1)
	PPC_STORE_U8(ctx.r1.u32 + 795, ctx.r31.u8);
	// stb r4,796(r1)
	PPC_STORE_U8(ctx.r1.u32 + 796, ctx.r4.u8);
	// stb r20,797(r1)
	PPC_STORE_U8(ctx.r1.u32 + 797, ctx.r20.u8);
	// stb r31,798(r1)
	PPC_STORE_U8(ctx.r1.u32 + 798, ctx.r31.u8);
	// stb r31,799(r1)
	PPC_STORE_U8(ctx.r1.u32 + 799, ctx.r31.u8);
	// stb r31,800(r1)
	PPC_STORE_U8(ctx.r1.u32 + 800, ctx.r31.u8);
	// stb r31,801(r1)
	PPC_STORE_U8(ctx.r1.u32 + 801, ctx.r31.u8);
	// stb r31,802(r1)
	PPC_STORE_U8(ctx.r1.u32 + 802, ctx.r31.u8);
	// stb r31,803(r1)
	PPC_STORE_U8(ctx.r1.u32 + 803, ctx.r31.u8);
	// stb r31,804(r1)
	PPC_STORE_U8(ctx.r1.u32 + 804, ctx.r31.u8);
	// stb r11,805(r1)
	PPC_STORE_U8(ctx.r1.u32 + 805, ctx.r11.u8);
	// stb r31,806(r1)
	PPC_STORE_U8(ctx.r1.u32 + 806, ctx.r31.u8);
	// stb r31,807(r1)
	PPC_STORE_U8(ctx.r1.u32 + 807, ctx.r31.u8);
	// stb r31,808(r1)
	PPC_STORE_U8(ctx.r1.u32 + 808, ctx.r31.u8);
	// stb r31,809(r1)
	PPC_STORE_U8(ctx.r1.u32 + 809, ctx.r31.u8);
	// stb r31,810(r1)
	PPC_STORE_U8(ctx.r1.u32 + 810, ctx.r31.u8);
	// stb r31,811(r1)
	PPC_STORE_U8(ctx.r1.u32 + 811, ctx.r31.u8);
	// stb r31,812(r1)
	PPC_STORE_U8(ctx.r1.u32 + 812, ctx.r31.u8);
	// stb r31,813(r1)
	PPC_STORE_U8(ctx.r1.u32 + 813, ctx.r31.u8);
	// stb r31,814(r1)
	PPC_STORE_U8(ctx.r1.u32 + 814, ctx.r31.u8);
	// stb r31,815(r1)
	PPC_STORE_U8(ctx.r1.u32 + 815, ctx.r31.u8);
	// stb r9,816(r1)
	PPC_STORE_U8(ctx.r1.u32 + 816, ctx.r9.u8);
	// li r20,9
	ctx.r20.s64 = 9;
	// stb r9,817(r1)
	PPC_STORE_U8(ctx.r1.u32 + 817, ctx.r9.u8);
	// stb r9,849(r1)
	PPC_STORE_U8(ctx.r1.u32 + 849, ctx.r9.u8);
	// li r9,155
	ctx.r9.s64 = 155;
	// li r16,19
	ctx.r16.s64 = 19;
	// stb r31,818(r1)
	PPC_STORE_U8(ctx.r1.u32 + 818, ctx.r31.u8);
	// stb r31,819(r1)
	PPC_STORE_U8(ctx.r1.u32 + 819, ctx.r31.u8);
	// stb r31,820(r1)
	PPC_STORE_U8(ctx.r1.u32 + 820, ctx.r31.u8);
	// stb r20,833(r1)
	PPC_STORE_U8(ctx.r1.u32 + 833, ctx.r20.u8);
	// li r20,5
	ctx.r20.s64 = 5;
	// stb r31,821(r1)
	PPC_STORE_U8(ctx.r1.u32 + 821, ctx.r31.u8);
	// stb r31,822(r1)
	PPC_STORE_U8(ctx.r1.u32 + 822, ctx.r31.u8);
	// stb r31,823(r1)
	PPC_STORE_U8(ctx.r1.u32 + 823, ctx.r31.u8);
	// stb r26,824(r1)
	PPC_STORE_U8(ctx.r1.u32 + 824, ctx.r26.u8);
	// stb r20,841(r1)
	PPC_STORE_U8(ctx.r1.u32 + 841, ctx.r20.u8);
	// li r20,84
	ctx.r20.s64 = 84;
	// stb r28,825(r1)
	PPC_STORE_U8(ctx.r1.u32 + 825, ctx.r28.u8);
	// stb r31,826(r1)
	PPC_STORE_U8(ctx.r1.u32 + 826, ctx.r31.u8);
	// stb r31,827(r1)
	PPC_STORE_U8(ctx.r1.u32 + 827, ctx.r31.u8);
	// stb r31,828(r1)
	PPC_STORE_U8(ctx.r1.u32 + 828, ctx.r31.u8);
	// stb r20,842(r1)
	PPC_STORE_U8(ctx.r1.u32 + 842, ctx.r20.u8);
	// li r20,109
	ctx.r20.s64 = 109;
	// stb r31,829(r1)
	PPC_STORE_U8(ctx.r1.u32 + 829, ctx.r31.u8);
	// stb r31,830(r1)
	PPC_STORE_U8(ctx.r1.u32 + 830, ctx.r31.u8);
	// stb r31,831(r1)
	PPC_STORE_U8(ctx.r1.u32 + 831, ctx.r31.u8);
	// stb r31,832(r1)
	PPC_STORE_U8(ctx.r1.u32 + 832, ctx.r31.u8);
	// stb r20,845(r1)
	PPC_STORE_U8(ctx.r1.u32 + 845, ctx.r20.u8);
	// li r20,79
	ctx.r20.s64 = 79;
	// stb r31,834(r1)
	PPC_STORE_U8(ctx.r1.u32 + 834, ctx.r31.u8);
	// stb r31,835(r1)
	PPC_STORE_U8(ctx.r1.u32 + 835, ctx.r31.u8);
	// stb r31,836(r1)
	PPC_STORE_U8(ctx.r1.u32 + 836, ctx.r31.u8);
	// stb r31,837(r1)
	PPC_STORE_U8(ctx.r1.u32 + 837, ctx.r31.u8);
	// stb r31,838(r1)
	PPC_STORE_U8(ctx.r1.u32 + 838, ctx.r31.u8);
	// stb r31,839(r1)
	PPC_STORE_U8(ctx.r1.u32 + 839, ctx.r31.u8);
	// stb r31,840(r1)
	PPC_STORE_U8(ctx.r1.u32 + 840, ctx.r31.u8);
	// stb r30,843(r1)
	PPC_STORE_U8(ctx.r1.u32 + 843, ctx.r30.u8);
	// stb r7,844(r1)
	PPC_STORE_U8(ctx.r1.u32 + 844, ctx.r7.u8);
	// stb r31,846(r1)
	PPC_STORE_U8(ctx.r1.u32 + 846, ctx.r31.u8);
	// stb r31,847(r1)
	PPC_STORE_U8(ctx.r1.u32 + 847, ctx.r31.u8);
	// stb r31,848(r1)
	PPC_STORE_U8(ctx.r1.u32 + 848, ctx.r31.u8);
	// stb r20,850(r1)
	PPC_STORE_U8(ctx.r1.u32 + 850, ctx.r20.u8);
	// stb r31,851(r1)
	PPC_STORE_U8(ctx.r1.u32 + 851, ctx.r31.u8);
	// stb r31,852(r1)
	PPC_STORE_U8(ctx.r1.u32 + 852, ctx.r31.u8);
	// stb r31,853(r1)
	PPC_STORE_U8(ctx.r1.u32 + 853, ctx.r31.u8);
	// stb r31,854(r1)
	PPC_STORE_U8(ctx.r1.u32 + 854, ctx.r31.u8);
	// stb r31,855(r1)
	PPC_STORE_U8(ctx.r1.u32 + 855, ctx.r31.u8);
	// stb r31,856(r1)
	PPC_STORE_U8(ctx.r1.u32 + 856, ctx.r31.u8);
	// stb r23,857(r1)
	PPC_STORE_U8(ctx.r1.u32 + 857, ctx.r23.u8);
	// stb r9,858(r1)
	PPC_STORE_U8(ctx.r1.u32 + 858, ctx.r9.u8);
	// stb r31,859(r1)
	PPC_STORE_U8(ctx.r1.u32 + 859, ctx.r31.u8);
	// stb r31,860(r1)
	PPC_STORE_U8(ctx.r1.u32 + 860, ctx.r31.u8);
	// stb r31,861(r1)
	PPC_STORE_U8(ctx.r1.u32 + 861, ctx.r31.u8);
	// stb r31,862(r1)
	PPC_STORE_U8(ctx.r1.u32 + 862, ctx.r31.u8);
	// stb r31,863(r1)
	PPC_STORE_U8(ctx.r1.u32 + 863, ctx.r31.u8);
	// stb r31,864(r1)
	PPC_STORE_U8(ctx.r1.u32 + 864, ctx.r31.u8);
	// stb r31,865(r1)
	PPC_STORE_U8(ctx.r1.u32 + 865, ctx.r31.u8);
	// stb r4,866(r1)
	PPC_STORE_U8(ctx.r1.u32 + 866, ctx.r4.u8);
	// stb r31,867(r1)
	PPC_STORE_U8(ctx.r1.u32 + 867, ctx.r31.u8);
	// stb r31,868(r1)
	PPC_STORE_U8(ctx.r1.u32 + 868, ctx.r31.u8);
	// stb r31,869(r1)
	PPC_STORE_U8(ctx.r1.u32 + 869, ctx.r31.u8);
	// stb r31,870(r1)
	PPC_STORE_U8(ctx.r1.u32 + 870, ctx.r31.u8);
	// stb r31,871(r1)
	PPC_STORE_U8(ctx.r1.u32 + 871, ctx.r31.u8);
	// stb r31,872(r1)
	PPC_STORE_U8(ctx.r1.u32 + 872, ctx.r31.u8);
	// stb r25,873(r1)
	PPC_STORE_U8(ctx.r1.u32 + 873, ctx.r25.u8);
	// stb r6,874(r1)
	PPC_STORE_U8(ctx.r1.u32 + 874, ctx.r6.u8);
	// stb r31,875(r1)
	PPC_STORE_U8(ctx.r1.u32 + 875, ctx.r31.u8);
	// stb r31,876(r1)
	PPC_STORE_U8(ctx.r1.u32 + 876, ctx.r31.u8);
	// stb r31,877(r1)
	PPC_STORE_U8(ctx.r1.u32 + 877, ctx.r31.u8);
	// stb r31,878(r1)
	PPC_STORE_U8(ctx.r1.u32 + 878, ctx.r31.u8);
	// stb r31,879(r1)
	PPC_STORE_U8(ctx.r1.u32 + 879, ctx.r31.u8);
	// stb r31,880(r1)
	PPC_STORE_U8(ctx.r1.u32 + 880, ctx.r31.u8);
	// stb r6,881(r1)
	PPC_STORE_U8(ctx.r1.u32 + 881, ctx.r6.u8);
	// stb r16,882(r1)
	PPC_STORE_U8(ctx.r1.u32 + 882, ctx.r16.u8);
	// stb r31,883(r1)
	PPC_STORE_U8(ctx.r1.u32 + 883, ctx.r31.u8);
	// stb r31,884(r1)
	PPC_STORE_U8(ctx.r1.u32 + 884, ctx.r31.u8);
	// stb r31,885(r1)
	PPC_STORE_U8(ctx.r1.u32 + 885, ctx.r31.u8);
	// stb r31,886(r1)
	PPC_STORE_U8(ctx.r1.u32 + 886, ctx.r31.u8);
	// stb r31,887(r1)
	PPC_STORE_U8(ctx.r1.u32 + 887, ctx.r31.u8);
	// stb r31,888(r1)
	PPC_STORE_U8(ctx.r1.u32 + 888, ctx.r31.u8);
	// stb r23,889(r1)
	PPC_STORE_U8(ctx.r1.u32 + 889, ctx.r23.u8);
	// stb r9,890(r1)
	PPC_STORE_U8(ctx.r1.u32 + 890, ctx.r9.u8);
	// li r9,90
	ctx.r9.s64 = 90;
	// stb r4,898(r1)
	PPC_STORE_U8(ctx.r1.u32 + 898, ctx.r4.u8);
	// li r4,35
	ctx.r4.s64 = 35;
	// stb r31,891(r1)
	PPC_STORE_U8(ctx.r1.u32 + 891, ctx.r31.u8);
	// stb r31,892(r1)
	PPC_STORE_U8(ctx.r1.u32 + 892, ctx.r31.u8);
	// stb r31,893(r1)
	PPC_STORE_U8(ctx.r1.u32 + 893, ctx.r31.u8);
	// stb r31,894(r1)
	PPC_STORE_U8(ctx.r1.u32 + 894, ctx.r31.u8);
	// stb r9,905(r1)
	PPC_STORE_U8(ctx.r1.u32 + 905, ctx.r9.u8);
	// li r9,201
	ctx.r9.s64 = 201;
	// stb r31,895(r1)
	PPC_STORE_U8(ctx.r1.u32 + 895, ctx.r31.u8);
	// stb r31,896(r1)
	PPC_STORE_U8(ctx.r1.u32 + 896, ctx.r31.u8);
	// stb r31,897(r1)
	PPC_STORE_U8(ctx.r1.u32 + 897, ctx.r31.u8);
	// stb r31,899(r1)
	PPC_STORE_U8(ctx.r1.u32 + 899, ctx.r31.u8);
	// stb r9,906(r1)
	PPC_STORE_U8(ctx.r1.u32 + 906, ctx.r9.u8);
	// li r9,17
	ctx.r9.s64 = 17;
	// stb r31,900(r1)
	PPC_STORE_U8(ctx.r1.u32 + 900, ctx.r31.u8);
	// stb r31,901(r1)
	PPC_STORE_U8(ctx.r1.u32 + 901, ctx.r31.u8);
	// stb r31,902(r1)
	PPC_STORE_U8(ctx.r1.u32 + 902, ctx.r31.u8);
	// stb r31,903(r1)
	PPC_STORE_U8(ctx.r1.u32 + 903, ctx.r31.u8);
	// stb r31,904(r1)
	PPC_STORE_U8(ctx.r1.u32 + 904, ctx.r31.u8);
	// stb r31,907(r1)
	PPC_STORE_U8(ctx.r1.u32 + 907, ctx.r31.u8);
	// stb r31,908(r1)
	PPC_STORE_U8(ctx.r1.u32 + 908, ctx.r31.u8);
	// stb r31,909(r1)
	PPC_STORE_U8(ctx.r1.u32 + 909, ctx.r31.u8);
	// stb r31,910(r1)
	PPC_STORE_U8(ctx.r1.u32 + 910, ctx.r31.u8);
	// stb r31,911(r1)
	PPC_STORE_U8(ctx.r1.u32 + 911, ctx.r31.u8);
	// stb r31,912(r1)
	PPC_STORE_U8(ctx.r1.u32 + 912, ctx.r31.u8);
	// stb r9,913(r1)
	PPC_STORE_U8(ctx.r1.u32 + 913, ctx.r9.u8);
	// stb r4,914(r1)
	PPC_STORE_U8(ctx.r1.u32 + 914, ctx.r4.u8);
	// stb r31,915(r1)
	PPC_STORE_U8(ctx.r1.u32 + 915, ctx.r31.u8);
	// stb r31,916(r1)
	PPC_STORE_U8(ctx.r1.u32 + 916, ctx.r31.u8);
	// stb r31,917(r1)
	PPC_STORE_U8(ctx.r1.u32 + 917, ctx.r31.u8);
	// stb r31,918(r1)
	PPC_STORE_U8(ctx.r1.u32 + 918, ctx.r31.u8);
	// stb r31,919(r1)
	PPC_STORE_U8(ctx.r1.u32 + 919, ctx.r31.u8);
	// stb r31,920(r1)
	PPC_STORE_U8(ctx.r1.u32 + 920, ctx.r31.u8);
	// stb r10,921(r1)
	PPC_STORE_U8(ctx.r1.u32 + 921, ctx.r10.u8);
	// stb r8,922(r1)
	PPC_STORE_U8(ctx.r1.u32 + 922, ctx.r8.u8);
	// stb r31,923(r1)
	PPC_STORE_U8(ctx.r1.u32 + 923, ctx.r31.u8);
	// stb r31,924(r1)
	PPC_STORE_U8(ctx.r1.u32 + 924, ctx.r31.u8);
	// stb r31,925(r1)
	PPC_STORE_U8(ctx.r1.u32 + 925, ctx.r31.u8);
	// stb r31,926(r1)
	PPC_STORE_U8(ctx.r1.u32 + 926, ctx.r31.u8);
	// stb r31,927(r1)
	PPC_STORE_U8(ctx.r1.u32 + 927, ctx.r31.u8);
	// stb r31,928(r1)
	PPC_STORE_U8(ctx.r1.u32 + 928, ctx.r31.u8);
	// stb r31,929(r1)
	PPC_STORE_U8(ctx.r1.u32 + 929, ctx.r31.u8);
	// stb r31,930(r1)
	PPC_STORE_U8(ctx.r1.u32 + 930, ctx.r31.u8);
	// stb r31,931(r1)
	PPC_STORE_U8(ctx.r1.u32 + 931, ctx.r31.u8);
	// stb r31,932(r1)
	PPC_STORE_U8(ctx.r1.u32 + 932, ctx.r31.u8);
	// stb r31,933(r1)
	PPC_STORE_U8(ctx.r1.u32 + 933, ctx.r31.u8);
	// stb r31,934(r1)
	PPC_STORE_U8(ctx.r1.u32 + 934, ctx.r31.u8);
	// stb r31,935(r1)
	PPC_STORE_U8(ctx.r1.u32 + 935, ctx.r31.u8);
	// stb r31,936(r1)
	PPC_STORE_U8(ctx.r1.u32 + 936, ctx.r31.u8);
	// stb r31,937(r1)
	PPC_STORE_U8(ctx.r1.u32 + 937, ctx.r31.u8);
	// stb r31,938(r1)
	PPC_STORE_U8(ctx.r1.u32 + 938, ctx.r31.u8);
	// stb r31,939(r1)
	PPC_STORE_U8(ctx.r1.u32 + 939, ctx.r31.u8);
	// stb r31,940(r1)
	PPC_STORE_U8(ctx.r1.u32 + 940, ctx.r31.u8);
	// stb r22,941(r1)
	PPC_STORE_U8(ctx.r1.u32 + 941, ctx.r22.u8);
	// stb r27,942(r1)
	PPC_STORE_U8(ctx.r1.u32 + 942, ctx.r27.u8);
	// stb r31,943(r1)
	PPC_STORE_U8(ctx.r1.u32 + 943, ctx.r31.u8);
	// stb r31,944(r1)
	PPC_STORE_U8(ctx.r1.u32 + 944, ctx.r31.u8);
	// stb r31,945(r1)
	PPC_STORE_U8(ctx.r1.u32 + 945, ctx.r31.u8);
	// stb r31,946(r1)
	PPC_STORE_U8(ctx.r1.u32 + 946, ctx.r31.u8);
	// stb r31,947(r1)
	PPC_STORE_U8(ctx.r1.u32 + 947, ctx.r31.u8);
	// stb r31,948(r1)
	PPC_STORE_U8(ctx.r1.u32 + 948, ctx.r31.u8);
	// stb r10,949(r1)
	PPC_STORE_U8(ctx.r1.u32 + 949, ctx.r10.u8);
	// stb r8,950(r1)
	PPC_STORE_U8(ctx.r1.u32 + 950, ctx.r8.u8);
	// stb r31,951(r1)
	PPC_STORE_U8(ctx.r1.u32 + 951, ctx.r31.u8);
	// stb r31,952(r1)
	PPC_STORE_U8(ctx.r1.u32 + 952, ctx.r31.u8);
	// stb r31,953(r1)
	PPC_STORE_U8(ctx.r1.u32 + 953, ctx.r31.u8);
	// stb r31,954(r1)
	PPC_STORE_U8(ctx.r1.u32 + 954, ctx.r31.u8);
	// stb r31,955(r1)
	PPC_STORE_U8(ctx.r1.u32 + 955, ctx.r31.u8);
	// stb r31,956(r1)
	PPC_STORE_U8(ctx.r1.u32 + 956, ctx.r31.u8);
	// stb r31,957(r1)
	PPC_STORE_U8(ctx.r1.u32 + 957, ctx.r31.u8);
	// stb r31,958(r1)
	PPC_STORE_U8(ctx.r1.u32 + 958, ctx.r31.u8);
	// stb r31,959(r1)
	PPC_STORE_U8(ctx.r1.u32 + 959, ctx.r31.u8);
	// stb r31,960(r1)
	PPC_STORE_U8(ctx.r1.u32 + 960, ctx.r31.u8);
	// stb r31,961(r1)
	PPC_STORE_U8(ctx.r1.u32 + 961, ctx.r31.u8);
	// stb r31,962(r1)
	PPC_STORE_U8(ctx.r1.u32 + 962, ctx.r31.u8);
	// stb r31,963(r1)
	PPC_STORE_U8(ctx.r1.u32 + 963, ctx.r31.u8);
	// stb r31,964(r1)
	PPC_STORE_U8(ctx.r1.u32 + 964, ctx.r31.u8);
	// stb r31,965(r1)
	PPC_STORE_U8(ctx.r1.u32 + 965, ctx.r31.u8);
	// stb r31,966(r1)
	PPC_STORE_U8(ctx.r1.u32 + 966, ctx.r31.u8);
	// stb r31,967(r1)
	PPC_STORE_U8(ctx.r1.u32 + 967, ctx.r31.u8);
	// li r8,244
	ctx.r8.s64 = 244;
	// stb r31,968(r1)
	PPC_STORE_U8(ctx.r1.u32 + 968, ctx.r31.u8);
	// li r23,65
	ctx.r23.s64 = 65;
	// stb r14,969(r1)
	PPC_STORE_U8(ctx.r1.u32 + 969, ctx.r14.u8);
	// stb r31,971(r1)
	PPC_STORE_U8(ctx.r1.u32 + 971, ctx.r31.u8);
	// stb r31,972(r1)
	PPC_STORE_U8(ctx.r1.u32 + 972, ctx.r31.u8);
	// stb r31,973(r1)
	PPC_STORE_U8(ctx.r1.u32 + 973, ctx.r31.u8);
	// stb r8,970(r1)
	PPC_STORE_U8(ctx.r1.u32 + 970, ctx.r8.u8);
	// li r8,194
	ctx.r8.s64 = 194;
	// stb r31,974(r1)
	PPC_STORE_U8(ctx.r1.u32 + 974, ctx.r31.u8);
	// stb r31,975(r1)
	PPC_STORE_U8(ctx.r1.u32 + 975, ctx.r31.u8);
	// stb r31,976(r1)
	PPC_STORE_U8(ctx.r1.u32 + 976, ctx.r31.u8);
	// stb r24,977(r1)
	PPC_STORE_U8(ctx.r1.u32 + 977, ctx.r24.u8);
	// stb r8,998(r1)
	PPC_STORE_U8(ctx.r1.u32 + 998, ctx.r8.u8);
	// li r8,51
	ctx.r8.s64 = 51;
	// stb r7,978(r1)
	PPC_STORE_U8(ctx.r1.u32 + 978, ctx.r7.u8);
	// stb r31,979(r1)
	PPC_STORE_U8(ctx.r1.u32 + 979, ctx.r31.u8);
	// stb r31,980(r1)
	PPC_STORE_U8(ctx.r1.u32 + 980, ctx.r31.u8);
	// stb r31,981(r1)
	PPC_STORE_U8(ctx.r1.u32 + 981, ctx.r31.u8);
	// stb r31,982(r1)
	PPC_STORE_U8(ctx.r1.u32 + 982, ctx.r31.u8);
	// stb r31,983(r1)
	PPC_STORE_U8(ctx.r1.u32 + 983, ctx.r31.u8);
	// stb r31,984(r1)
	PPC_STORE_U8(ctx.r1.u32 + 984, ctx.r31.u8);
	// stb r31,985(r1)
	PPC_STORE_U8(ctx.r1.u32 + 985, ctx.r31.u8);
	// stb r11,986(r1)
	PPC_STORE_U8(ctx.r1.u32 + 986, ctx.r11.u8);
	// stb r31,987(r1)
	PPC_STORE_U8(ctx.r1.u32 + 987, ctx.r31.u8);
	// stb r31,988(r1)
	PPC_STORE_U8(ctx.r1.u32 + 988, ctx.r31.u8);
	// stb r31,989(r1)
	PPC_STORE_U8(ctx.r1.u32 + 989, ctx.r31.u8);
	// stb r31,990(r1)
	PPC_STORE_U8(ctx.r1.u32 + 990, ctx.r31.u8);
	// stb r31,991(r1)
	PPC_STORE_U8(ctx.r1.u32 + 991, ctx.r31.u8);
	// stb r31,992(r1)
	PPC_STORE_U8(ctx.r1.u32 + 992, ctx.r31.u8);
	// stb r31,993(r1)
	PPC_STORE_U8(ctx.r1.u32 + 993, ctx.r31.u8);
	// stb r5,994(r1)
	PPC_STORE_U8(ctx.r1.u32 + 994, ctx.r5.u8);
	// stb r31,995(r1)
	PPC_STORE_U8(ctx.r1.u32 + 995, ctx.r31.u8);
	// stb r31,996(r1)
	PPC_STORE_U8(ctx.r1.u32 + 996, ctx.r31.u8);
	// stb r23,997(r1)
	PPC_STORE_U8(ctx.r1.u32 + 997, ctx.r23.u8);
	// stb r31,999(r1)
	PPC_STORE_U8(ctx.r1.u32 + 999, ctx.r31.u8);
	// stb r31,1000(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1000, ctx.r31.u8);
	// stb r31,1001(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1001, ctx.r31.u8);
	// stb r31,1002(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1002, ctx.r31.u8);
	// stb r31,1003(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1003, ctx.r31.u8);
	// stb r31,1004(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1004, ctx.r31.u8);
	// stb r24,1005(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1005, ctx.r24.u8);
	// stb r7,1006(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1006, ctx.r7.u8);
	// stb r31,1007(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1007, ctx.r31.u8);
	// stb r31,1008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1008, ctx.r31.u8);
	// stb r31,1009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1009, ctx.r31.u8);
	// stb r31,1010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1010, ctx.r31.u8);
	// stb r31,1011(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1011, ctx.r31.u8);
	// stb r31,1012(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1012, ctx.r31.u8);
	// stb r31,1013(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1013, ctx.r31.u8);
	// stb r11,1014(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1014, ctx.r11.u8);
	// stb r31,1015(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1015, ctx.r31.u8);
	// stb r31,1016(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1016, ctx.r31.u8);
	// stb r31,1017(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1017, ctx.r31.u8);
	// stb r31,1018(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1018, ctx.r31.u8);
	// stb r31,1019(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1019, ctx.r31.u8);
	// stb r31,1020(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1020, ctx.r31.u8);
	// stb r31,1021(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1021, ctx.r31.u8);
	// stb r18,1022(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1022, ctx.r18.u8);
	// stb r31,1023(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1023, ctx.r31.u8);
	// stb r31,1024(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1024, ctx.r31.u8);
	// stb r17,1025(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1025, ctx.r17.u8);
	// stb r8,1026(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1026, ctx.r8.u8);
	// stb r31,1027(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1027, ctx.r31.u8);
	// stb r31,1028(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1028, ctx.r31.u8);
	// stb r31,1029(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1029, ctx.r31.u8);
	// stb r31,1030(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1030, ctx.r31.u8);
	// stb r31,1031(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1031, ctx.r31.u8);
	// stb r31,1032(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1032, ctx.r31.u8);
	// stb r24,1033(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1033, ctx.r24.u8);
	// stb r7,1034(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1034, ctx.r7.u8);
	// stb r31,1035(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1035, ctx.r31.u8);
	// stb r31,1036(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1036, ctx.r31.u8);
	// stb r31,1037(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1037, ctx.r31.u8);
	// stb r31,1038(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1038, ctx.r31.u8);
	// stb r31,1039(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1039, ctx.r31.u8);
	// stb r31,1040(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1040, ctx.r31.u8);
	// stb r31,1041(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1041, ctx.r31.u8);
	// stb r11,1042(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1042, ctx.r11.u8);
	// stb r31,1043(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1043, ctx.r31.u8);
	// stb r31,1044(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1044, ctx.r31.u8);
	// stb r11,1070(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1070, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// stb r9,1053(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1053, ctx.r9.u8);
	// li r9,80
	ctx.r9.s64 = 80;
	// stb r31,1045(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1045, ctx.r31.u8);
	// addi r27,r29,24
	ctx.r27.s64 = ctx.r29.s64 + 24;
	// stb r31,1046(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1046, ctx.r31.u8);
	// li r5,1104
	ctx.r5.s64 = 1104;
	// stb r31,1047(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1047, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r11,1090(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1090, ctx.r11.u8);
	// li r11,27
	ctx.r11.s64 = 27;
	// stb r31,1048(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1048, ctx.r31.u8);
	// stb r31,1049(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1049, ctx.r31.u8);
	// stb r31,1050(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1050, ctx.r31.u8);
	// stb r31,1051(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1051, ctx.r31.u8);
	// stb r11,1106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1106, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,1052(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1052, ctx.r31.u8);
	// stb r26,1054(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1054, ctx.r26.u8);
	// stb r31,1055(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1055, ctx.r31.u8);
	// stb r31,1056(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1056, ctx.r31.u8);
	// stb r11,1114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1114, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// stb r31,1057(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1057, ctx.r31.u8);
	// stb r31,1058(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1058, ctx.r31.u8);
	// stb r31,1059(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1059, ctx.r31.u8);
	// stb r31,1060(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1060, ctx.r31.u8);
	// stb r3,1061(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1061, ctx.r3.u8);
	// stb r19,1062(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1062, ctx.r19.u8);
	// stb r31,1063(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1063, ctx.r31.u8);
	// stb r31,1064(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1064, ctx.r31.u8);
	// stb r31,1065(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1065, ctx.r31.u8);
	// stb r31,1066(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1066, ctx.r31.u8);
	// stb r31,1067(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1067, ctx.r31.u8);
	// stb r31,1068(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1068, ctx.r31.u8);
	// stb r31,1069(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1069, ctx.r31.u8);
	// stb r31,1071(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1071, ctx.r31.u8);
	// stb r31,1072(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1072, ctx.r31.u8);
	// stb r31,1073(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1073, ctx.r31.u8);
	// stb r31,1074(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1074, ctx.r31.u8);
	// stb r31,1075(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1075, ctx.r31.u8);
	// stb r31,1076(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1076, ctx.r31.u8);
	// stb r31,1077(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1077, ctx.r31.u8);
	// stb r31,1078(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1078, ctx.r31.u8);
	// stb r31,1079(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1079, ctx.r31.u8);
	// stb r31,1080(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1080, ctx.r31.u8);
	// stb r25,1081(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1081, ctx.r25.u8);
	// stb r6,1082(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1082, ctx.r6.u8);
	// stb r31,1083(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1083, ctx.r31.u8);
	// stb r31,1084(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1084, ctx.r31.u8);
	// stb r31,1085(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1085, ctx.r31.u8);
	// stb r31,1086(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1086, ctx.r31.u8);
	// stb r31,1087(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1087, ctx.r31.u8);
	// stb r31,1088(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1088, ctx.r31.u8);
	// stb r3,1089(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1089, ctx.r3.u8);
	// stb r31,1091(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1091, ctx.r31.u8);
	// stb r31,1092(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1092, ctx.r31.u8);
	// stb r31,1093(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1093, ctx.r31.u8);
	// stb r31,1094(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1094, ctx.r31.u8);
	// stb r31,1095(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1095, ctx.r31.u8);
	// stb r31,1096(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1096, ctx.r31.u8);
	// stb r26,1097(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1097, ctx.r26.u8);
	// stb r28,1098(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1098, ctx.r28.u8);
	// stb r31,1099(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1099, ctx.r31.u8);
	// stb r31,1100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1100, ctx.r31.u8);
	// stb r31,1101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1101, ctx.r31.u8);
	// stb r31,1102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1102, ctx.r31.u8);
	// stb r31,1103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1103, ctx.r31.u8);
	// stb r31,1104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1104, ctx.r31.u8);
	// stb r31,1105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1105, ctx.r31.u8);
	// stb r31,1107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1107, ctx.r31.u8);
	// stb r31,1108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1108, ctx.r31.u8);
	// stb r31,1109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1109, ctx.r31.u8);
	// stb r31,1110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1110, ctx.r31.u8);
	// stb r31,1111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1111, ctx.r31.u8);
	// stb r31,1112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1112, ctx.r31.u8);
	// stb r31,1113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1113, ctx.r31.u8);
	// stb r9,1115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1115, ctx.r9.u8);
	// stb r11,1116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1116, ctx.r11.u8);
	// stb r7,1117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1117, ctx.r7.u8);
	// li r11,121
	ctx.r11.s64 = 121;
	// stb r3,1140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1140, ctx.r3.u8);
	// li r8,82
	ctx.r8.s64 = 82;
	// stb r6,1120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1120, ctx.r6.u8);
	// li r24,105
	ctx.r24.s64 = 105;
	// stb r9,1121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1121, ctx.r9.u8);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// stb r7,1124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1124, ctx.r7.u8);
	// stb r21,1125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1125, ctx.r21.u8);
	// stb r11,1118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1118, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r8,1123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1123, ctx.r8.u8);
	// stb r30,1126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1126, ctx.r30.u8);
	// stb r24,1130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1130, ctx.r24.u8);
	// stb r21,1131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1131, ctx.r21.u8);
	// stb r11,1119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1119, ctx.r11.u8);
	// stb r11,1122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1122, ctx.r11.u8);
	// stb r11,1127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1127, ctx.r11.u8);
	// li r11,86
	ctx.r11.s64 = 86;
	// stb r30,1132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1132, ctx.r30.u8);
	// stb r30,1135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1135, ctx.r30.u8);
	// stb r31,1137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1137, ctx.r31.u8);
	// stb r31,1138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1138, ctx.r31.u8);
	// stb r11,1128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1128, ctx.r11.u8);
	// li r11,111
	ctx.r11.s64 = 111;
	// stb r31,1139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1139, ctx.r31.u8);
	// stb r31,1142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1142, ctx.r31.u8);
	// stb r31,1143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1143, ctx.r31.u8);
	// stb r31,1144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1144, ctx.r31.u8);
	// stb r11,1129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1129, ctx.r11.u8);
	// stb r11,1133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1133, ctx.r11.u8);
	// li r11,118
	ctx.r11.s64 = 118;
	// stb r31,1145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1145, ctx.r31.u8);
	// stb r31,1146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1146, ctx.r31.u8);
	// stb r31,1147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1147, ctx.r31.u8);
	// stb r26,1148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1148, ctx.r26.u8);
	// stb r11,1134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1134, ctx.r11.u8);
	// li r11,114
	ctx.r11.s64 = 114;
	// stb r28,1149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1149, ctx.r28.u8);
	// stb r31,1150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1150, ctx.r31.u8);
	// stb r31,1151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1151, ctx.r31.u8);
	// stb r31,1152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1152, ctx.r31.u8);
	// stb r11,1136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1136, ctx.r11.u8);
	// li r11,55
	ctx.r11.s64 = 55;
	// stb r31,1153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1153, ctx.r31.u8);
	// stb r31,1154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1154, ctx.r31.u8);
	// stb r31,1155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1155, ctx.r31.u8);
	// stb r31,1156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1156, ctx.r31.u8);
	// stb r11,1141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1141, ctx.r11.u8);
	// li r11,50
	ctx.r11.s64 = 50;
	// stb r10,1157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1157, ctx.r10.u8);
	// stb r31,1158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1158, ctx.r31.u8);
	// stb r31,1159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1159, ctx.r31.u8);
	// stb r31,1160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1160, ctx.r31.u8);
	// stb r31,1161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1161, ctx.r31.u8);
	// stb r31,1162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1162, ctx.r31.u8);
	// stb r31,1163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1163, ctx.r31.u8);
	// stb r31,1164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1164, ctx.r31.u8);
	// stb r15,1165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1165, ctx.r15.u8);
	// stb r23,1166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1166, ctx.r23.u8);
	// stb r20,1167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1167, ctx.r20.u8);
	// stb r11,1168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1168, ctx.r11.u8);
	// stb r6,1169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1169, ctx.r6.u8);
	// stb r9,1170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1170, ctx.r9.u8);
	// stb r8,1171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1171, ctx.r8.u8);
	// stb r7,1172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1172, ctx.r7.u8);
	// stb r21,1173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1173, ctx.r21.u8);
	// stb r30,1174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1174, ctx.r30.u8);
	// stb r31,1175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1175, ctx.r31.u8);
	// stb r31,1176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1176, ctx.r31.u8);
	// stb r31,1177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1177, ctx.r31.u8);
	// stb r25,1178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1178, ctx.r25.u8);
	// stb r6,1179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1179, ctx.r6.u8);
	// stb r31,1180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1180, ctx.r31.u8);
	// stb r31,1181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1181, ctx.r31.u8);
	// stb r31,1182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1182, ctx.r31.u8);
	// stb r31,1183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1183, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824926F4;
	sub_82B06418(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r27,20(r29)
	PPC_STORE_U32(ctx.r29.u32 + 20, ctx.r27.u32);
	// addi r1,r1,1344
	ctx.r1.s64 = ctx.r1.s64 + 1344;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82492708"))) PPC_WEAK_FUNC(sub_82492708);
PPC_FUNC_IMPL(__imp__sub_82492708) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82492710;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26680
	ctx.r4.s64 = ctx.r10.s64 + 26680;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249274C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,74
	ctx.r11.s64 = 74;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,21
	ctx.r11.s64 = 21;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8249282C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82492840"))) PPC_WEAK_FUNC(sub_82492840);
PPC_FUNC_IMPL(__imp__sub_82492840) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82492848;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,107
	ctx.r9.s64 = 107;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26700
	ctx.r4.s64 = ctx.r10.s64 + 26700;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82492884;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// li r8,2
	ctx.r8.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,75
	ctx.r11.s64 = 75;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// stb r10,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r8,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r8.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r8,18
	ctx.r8.s64 = 18;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r5,107
	ctx.r5.s64 = 107;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r8,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r8.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r10,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r10.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,71
	ctx.r11.s64 = 71;
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r9,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r9.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82492A84;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82492A98"))) PPC_WEAK_FUNC(sub_82492A98);
PPC_FUNC_IMPL(__imp__sub_82492A98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82492AA0;
	__savegprlr_27(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r28,99
	ctx.r28.s64 = 99;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26732
	ctx.r4.s64 = ctx.r10.s64 + 26732;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r28,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r28.u32);
	// bl 0x822e0818
	ctx.lr = 0x82492ADC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,87
	ctx.r10.s64 = 87;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r29,76
	ctx.r29.s64 = 76;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r8,32
	ctx.r8.s64 = 32;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r4,70
	ctx.r4.s64 = 70;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// stb r10,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r10.u8);
	// li r10,97
	ctx.r10.s64 = 97;
	// li r5,89
	ctx.r5.s64 = 89;
	// stb r29,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r29.u8);
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r6,69
	ctx.r6.s64 = 69;
	// stb r4,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r4.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,25
	ctx.r11.s64 = 25;
	// li r7,117
	ctx.r7.s64 = 117;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// li r9,101
	ctx.r9.s64 = 101;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// li r27,110
	ctx.r27.s64 = 110;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,21
	ctx.r11.s64 = 21;
	// stb r5,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r5.u8);
	// stb r3,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r3.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,113
	ctx.r11.s64 = 113;
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r11.u8);
	// li r11,105
	ctx.r11.s64 = 105;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,112
	ctx.r11.s64 = 112;
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r11,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r11.u8);
	// stb r11,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r11.u8);
	// li r11,111
	ctx.r11.s64 = 111;
	// stb r6,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r6.u8);
	// stb r7,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r7.u8);
	// stb r8,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r8.u8);
	// stb r9,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r9.u8);
	// stb r10,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r10.u8);
	// stb r11,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r11.u8);
	// stb r27,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r27.u8);
	// stb r8,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r8.u8);
	// stb r29,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r29.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r10,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r10.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// li r11,116
	ctx.r11.s64 = 116;
	// li r8,100
	ctx.r8.s64 = 100;
	// stb r4,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r4.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r5,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r5.u8);
	// stb r3,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r3.u8);
	// li r5,99
	ctx.r5.s64 = 99;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r7,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r7.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r11,55
	ctx.r11.s64 = 55;
	// stb r8,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r8.u8);
	// li r8,80
	ctx.r8.s64 = 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r11,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r11.u8);
	// li r11,14
	ctx.r11.s64 = 14;
	// stb r8,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r8.u8);
	// li r8,82
	ctx.r8.s64 = 82;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r11,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r11.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r11,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r11.u8);
	// li r11,65
	ctx.r11.s64 = 65;
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r11,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,50
	ctx.r11.s64 = 50;
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r11,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r8,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r8.u8);
	// stb r10,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r10.u8);
	// stb r28,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r28.u8);
	// stb r11,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r11.u8);
	// stb r9,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r9.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r6,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r6.u8);
	// stb r11,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r11.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82492CF4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82492D08"))) PPC_WEAK_FUNC(sub_82492D08);
PPC_FUNC_IMPL(__imp__sub_82492D08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82492D10;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26772
	ctx.r4.s64 = ctx.r10.s64 + 26772;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82492D4C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,22
	ctx.r11.s64 = 22;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82492E28;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82492E38"))) PPC_WEAK_FUNC(sub_82492E38);
PPC_FUNC_IMPL(__imp__sub_82492E38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82492E40;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,107
	ctx.r9.s64 = 107;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26784
	ctx.r4.s64 = ctx.r10.s64 + 26784;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82492E7C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,72
	ctx.r9.s64 = 72;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,78
	ctx.r11.s64 = 78;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r9,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r9.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r9,18
	ctx.r9.s64 = 18;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r5,107
	ctx.r5.s64 = 107;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r9,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r9.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,74
	ctx.r11.s64 = 74;
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r10,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r10.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493080;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493090"))) PPC_WEAK_FUNC(sub_82493090);
PPC_FUNC_IMPL(__imp__sub_82493090) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e40
	ctx.lr = 0x82493098;
	__savegprlr_18(ctx, base);
	// stwu r1,-672(r1)
	ea = -672 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,459
	ctx.r9.s64 = 459;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26812
	ctx.r4.s64 = ctx.r10.s64 + 26812;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824930D4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r26,1
	ctx.r26.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r25,79
	ctx.r25.s64 = 79;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,8
	ctx.r5.s64 = 8;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,95
	ctx.r11.s64 = 95;
	// stb r10,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r10.u8);
	// li r10,37
	ctx.r10.s64 = 37;
	// li r19,66
	ctx.r19.s64 = 66;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r6,70
	ctx.r6.s64 = 70;
	// stb r25,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r25.u8);
	// li r20,130
	ctx.r20.s64 = 130;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,209
	ctx.r11.s64 = 209;
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,143
	ctx.r11.s64 = 143;
	// stb r5,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r5.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r11.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r26,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r26.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r26,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r26.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r19,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r19.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r6,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r6.u8);
	// stb r20,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r20.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r31,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r31.u8);
	// stb r10,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r10.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r11,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r11.u8);
	// li r11,15
	ctx.r11.s64 = 15;
	// li r9,253
	ctx.r9.s64 = 253;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// li r8,121
	ctx.r8.s64 = 121;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// li r29,255
	ctx.r29.s64 = 255;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// li r21,67
	ctx.r21.s64 = 67;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r11,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r11.u8);
	// li r11,11
	ctx.r11.s64 = 11;
	// stb r9,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r9.u8);
	// li r9,63
	ctx.r9.s64 = 63;
	// stb r8,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r8.u8);
	// li r4,68
	ctx.r4.s64 = 68;
	// li r7,89
	ctx.r7.s64 = 89;
	// stb r29,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r29.u8);
	// li r27,2
	ctx.r27.s64 = 2;
	// stb r29,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r29.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// li r22,80
	ctx.r22.s64 = 80;
	// stb r21,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r21.u8);
	// li r8,101
	ctx.r8.s64 = 101;
	// stb r9,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r9.u8);
	// stb r4,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r4.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r11,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r11.u8);
	// li r11,97
	ctx.r11.s64 = 97;
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r5,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r5.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r10,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r10.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r9,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r9.u8);
	// stb r9,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r9.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r7,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r7.u8);
	// stb r27,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r27.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r22,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r22.u8);
	// stb r11,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r11.u8);
	// stb r8,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r8.u8);
	// stb r5,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r5.u8);
	// li r3,114
	ctx.r3.s64 = 114;
	// stb r5,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r5.u8);
	// li r5,90
	ctx.r5.s64 = 90;
	// stb r9,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r9.u8);
	// li r9,77
	ctx.r9.s64 = 77;
	// li r23,84
	ctx.r23.s64 = 84;
	// stb r8,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r8.u8);
	// li r24,109
	ctx.r24.s64 = 109;
	// stb r11,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r11.u8);
	// stb r3,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r3.u8);
	// li r3,155
	ctx.r3.s64 = 155;
	// stb r5,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r5.u8);
	// li r28,69
	ctx.r28.s64 = 69;
	// li r18,19
	ctx.r18.s64 = 19;
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// li r5,201
	ctx.r5.s64 = 201;
	// stb r23,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r23.u8);
	// stb r24,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r24.u8);
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// stb r25,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r25.u8);
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r4,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r4.u8);
	// stb r3,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r3.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r31,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r31.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r31,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r31.u8);
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r31,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r31.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r28,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r28.u8);
	// stb r9,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r9.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r31,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r31.u8);
	// stb r31,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r31.u8);
	// stb r9,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r9.u8);
	// stb r18,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r18.u8);
	// stb r31,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r31.u8);
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r31.u8);
	// stb r31,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r31.u8);
	// stb r4,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r4.u8);
	// stb r3,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r3.u8);
	// stb r31,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r31.u8);
	// stb r31,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r31.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r31,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r31.u8);
	// stb r31,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r31.u8);
	// stb r31,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r31.u8);
	// stb r31,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r31.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// stb r31,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r31.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r5,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r5.u8);
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r31,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r31.u8);
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// li r5,35
	ctx.r5.s64 = 35;
	// stb r31,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r31.u8);
	// li r18,12
	ctx.r18.s64 = 12;
	// stb r31,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r31.u8);
	// li r3,14
	ctx.r3.s64 = 14;
	// stb r31,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r31.u8);
	// li r4,17
	ctx.r4.s64 = 17;
	// stb r31,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r31.u8);
	// stb r31,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r31.u8);
	// stb r5,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r5.u8);
	// li r5,58
	ctx.r5.s64 = 58;
	// stb r18,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r18.u8);
	// li r18,100
	ctx.r18.s64 = 100;
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// stb r4,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r4.u8);
	// stb r3,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r3.u8);
	// stb r5,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r5.u8);
	// stb r5,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r5.u8);
	// li r5,244
	ctx.r5.s64 = 244;
	// stb r31,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r31.u8);
	// stb r31,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r31.u8);
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// stb r31,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r31.u8);
	// stb r5,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r5.u8);
	// li r5,53
	ctx.r5.s64 = 53;
	// stb r31,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r31.u8);
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// stb r31,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r31.u8);
	// stb r31,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r31.u8);
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// stb r31,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r31.u8);
	// stb r31,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r31.u8);
	// stb r31,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r31.u8);
	// stb r31,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r31.u8);
	// stb r31,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r31.u8);
	// stb r31,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r31.u8);
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r18,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r18.u8);
	// stb r31,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r31.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r31.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r3,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r3.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r31,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r31.u8);
	// stb r31,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r31.u8);
	// stb r31,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r31.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r31,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r31.u8);
	// stb r31,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r31.u8);
	// stb r31,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r31.u8);
	// stb r31,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r31.u8);
	// stb r31,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r31.u8);
	// stb r31,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r31.u8);
	// stb r31,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r31.u8);
	// stb r31,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r31.u8);
	// stb r31,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r31.u8);
	// stb r31,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r31.u8);
	// stb r31,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r31.u8);
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// stb r19,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r19.u8);
	// stb r31,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r31.u8);
	// stb r31,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r31.u8);
	// stb r31,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r31.u8);
	// stb r31,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r31.u8);
	// stb r31,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r31.u8);
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// stb r5,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r5.u8);
	// stb r11,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r11.u8);
	// stb r31,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r31.u8);
	// stb r31,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r31.u8);
	// stb r31,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r31.u8);
	// stb r31,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r31.u8);
	// stb r31,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r31.u8);
	// stb r31,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r31.u8);
	// stb r31,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r31.u8);
	// stb r29,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r29.u8);
	// li r29,33
	ctx.r29.s64 = 33;
	// stb r26,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r26.u8);
	// li r19,194
	ctx.r19.s64 = 194;
	// li r26,65
	ctx.r26.s64 = 65;
	// stb r10,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r10.u8);
	// stb r31,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r31.u8);
	// stb r31,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r31.u8);
	// stb r29,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r29.u8);
	// li r29,51
	ctx.r29.s64 = 51;
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r31,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r31.u8);
	// stb r31,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r31.u8);
	// stb r31,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r31.u8);
	// stb r31,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r31.u8);
	// stb r31,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r31.u8);
	// stb r31,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r31.u8);
	// stb r26,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r26.u8);
	// stb r19,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r19.u8);
	// stb r31,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r31.u8);
	// stb r31,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r31.u8);
	// stb r31,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r31.u8);
	// stb r31,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r31.u8);
	// stb r31,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r31.u8);
	// stb r31,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r31.u8);
	// stb r5,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r5.u8);
	// stb r11,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r11.u8);
	// stb r31,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r31.u8);
	// stb r31,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r31.u8);
	// stb r31,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r31.u8);
	// stb r31,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r31.u8);
	// stb r31,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r31.u8);
	// stb r31,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r31.u8);
	// stb r31,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r31.u8);
	// stb r10,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r10.u8);
	// stb r31,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r31.u8);
	// stb r31,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r31.u8);
	// stb r31,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r31.u8);
	// stb r31,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r31.u8);
	// stb r31,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r31.u8);
	// stb r31,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r31.u8);
	// stb r31,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r31.u8);
	// stb r31,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r31.u8);
	// stb r31,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r31.u8);
	// stb r29,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r29.u8);
	// stb r31,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r31.u8);
	// stb r31,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r31.u8);
	// stb r31,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r31.u8);
	// stb r31,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r31.u8);
	// stb r31,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r31.u8);
	// stb r31,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r31.u8);
	// stb r5,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r5.u8);
	// stb r11,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r11.u8);
	// stb r31,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r31.u8);
	// stb r31,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r31.u8);
	// stb r31,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r31.u8);
	// stb r31,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r31.u8);
	// stb r31,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r31.u8);
	// stb r31,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r31.u8);
	// stb r31,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r31.u8);
	// stb r10,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r10.u8);
	// stb r31,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r31.u8);
	// stb r31,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r31.u8);
	// stb r31,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r31.u8);
	// stb r31,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r31.u8);
	// stb r31,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r31.u8);
	// stb r31,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r31.u8);
	// stb r31,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r31.u8);
	// stb r31,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r31.u8);
	// stb r31,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r31.u8);
	// stb r31,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r31.u8);
	// stb r4,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r4.u8);
	// stb r7,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r7.u8);
	// stb r31,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r31.u8);
	// stb r31,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r31.u8);
	// stb r31,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r31.u8);
	// stb r31,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r31.u8);
	// stb r31,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r31.u8);
	// stb r31,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r31.u8);
	// stb r6,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r6.u8);
	// stb r20,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r20.u8);
	// stb r10,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r10.u8);
	// li r10,134
	ctx.r10.s64 = 134;
	// stb r21,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r21.u8);
	// li r21,115
	ctx.r21.s64 = 115;
	// stb r31,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r31.u8);
	// li r5,459
	ctx.r5.s64 = 459;
	// stb r31,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r10.u8);
	// li r10,22
	ctx.r10.s64 = 22;
	// stb r21,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r21.u8);
	// li r21,104
	ctx.r21.s64 = 104;
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r31,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r31.u8);
	// stb r31,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r31.u8);
	// stb r10,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r10.u8);
	// li r10,18
	ctx.r10.s64 = 18;
	// stb r21,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r21.u8);
	// li r21,116
	ctx.r21.s64 = 116;
	// stb r31,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r31.u8);
	// stb r31,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r31.u8);
	// stb r31,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r31.u8);
	// stb r10,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r10.u8);
	// li r10,71
	ctx.r10.s64 = 71;
	// stb r21,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r21.u8);
	// li r21,111
	ctx.r21.s64 = 111;
	// stb r31,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r31.u8);
	// stb r31,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r31.u8);
	// stb r31,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r31.u8);
	// stb r10,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r10.u8);
	// li r10,105
	ctx.r10.s64 = 105;
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r31,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r31.u8);
	// stb r31,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r31.u8);
	// stb r31,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r31.u8);
	// stb r10,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r10.u8);
	// li r10,118
	ctx.r10.s64 = 118;
	// stb r31,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r31.u8);
	// stb r28,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r28.u8);
	// stb r9,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r9.u8);
	// stb r31,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r31.u8);
	// stb r10,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r10.u8);
	// li r10,32
	ctx.r10.s64 = 32;
	// stb r31,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r31.u8);
	// stb r31,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r31.u8);
	// stb r31,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r31.u8);
	// stb r31,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r31.u8);
	// stb r31,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r31.u8);
	// stb r6,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r6.u8);
	// stb r31,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r31.u8);
	// stb r31,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r31.u8);
	// stb r31,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r31.u8);
	// stb r31,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r31.u8);
	// stb r31,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r31.u8);
	// stb r31,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r31.u8);
	// stb r7,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r7.u8);
	// stb r27,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r27.u8);
	// stb r31,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r31.u8);
	// stb r31,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r31.u8);
	// stb r31,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r31.u8);
	// stb r31,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r31.u8);
	// stb r31,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r31.u8);
	// stb r31,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r31.u8);
	// stb r31,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r31.u8);
	// stb r31,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r31.u8);
	// stb r31,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r31.u8);
	// stb r31,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r31.u8);
	// stb r31,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r31.u8);
	// stb r31,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r31.u8);
	// stb r31,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r31.u8);
	// stb r31,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r31.u8);
	// stb r8,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r8.u8);
	// stb r10,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r10.u8);
	// stb r11,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r11.u8);
	// stb r10,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r10.u8);
	// stb r21,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r21.u8);
	// stb r10,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r10.u8);
	// stb r23,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r23.u8);
	// stb r8,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r8.u8);
	// li r10,55
	ctx.r10.s64 = 55;
	// stb r11,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r11.u8);
	// stb r11,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r3,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r3.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r24,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r24.u8);
	// stb r31,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r31.u8);
	// stb r10,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r10.u8);
	// li r10,10
	ctx.r10.s64 = 10;
	// stb r31,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r31.u8);
	// stb r31,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r31.u8);
	// stb r6,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r6.u8);
	// stb r31,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r31.u8);
	// stb r10,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r10.u8);
	// li r10,50
	ctx.r10.s64 = 50;
	// stb r31,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r31.u8);
	// stb r31,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r31.u8);
	// stb r31,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r31.u8);
	// stb r31,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r31.u8);
	// stb r10,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r10.u8);
	// li r10,82
	ctx.r10.s64 = 82;
	// stb r31,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r31.u8);
	// stb r7,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r7.u8);
	// stb r27,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r27.u8);
	// stb r31,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r31.u8);
	// stb r31,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r31.u8);
	// stb r31,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r31.u8);
	// stb r31,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r31.u8);
	// stb r31,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r31.u8);
	// stb r31,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r31.u8);
	// stb r31,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r31.u8);
	// stb r31,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r31.u8);
	// stb r31,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r31.u8);
	// stb r31,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r31.u8);
	// stb r31,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r31.u8);
	// stb r31,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r31.u8);
	// stb r31,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r31.u8);
	// stb r31,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r31.u8);
	// stb r26,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r26.u8);
	// stb r25,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r25.u8);
	// stb r9,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r9.u8);
	// stb r22,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r22.u8);
	// stb r10,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r10.u8);
	// stb r11,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r11.u8);
	// stb r8,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r8.u8);
	// stb r31,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r31.u8);
	// stb r31,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r31.u8);
	// stb r31,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r31.u8);
	// stb r28,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r28.u8);
	// stb r9,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r9.u8);
	// stb r31,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r31.u8);
	// stb r31,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r31.u8);
	// stb r31,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r31.u8);
	// stb r31,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493914;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,672
	ctx.r1.s64 = ctx.r1.s64 + 672;
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493928"))) PPC_WEAK_FUNC(sub_82493928);
PPC_FUNC_IMPL(__imp__sub_82493928) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82493930;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26848
	ctx.r4.s64 = ctx.r10.s64 + 26848;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249396C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,80
	ctx.r11.s64 = 80;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493A4C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493A60"))) PPC_WEAK_FUNC(sub_82493A60);
PPC_FUNC_IMPL(__imp__sub_82493A60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82493A68;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26868
	ctx.r4.s64 = ctx.r10.s64 + 26868;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82493AA4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,81
	ctx.r11.s64 = 81;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,75
	ctx.r11.s64 = 75;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493B8C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493BA0"))) PPC_WEAK_FUNC(sub_82493BA0);
PPC_FUNC_IMPL(__imp__sub_82493BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82493BA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26880
	ctx.r4.s64 = ctx.r10.s64 + 26880;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82493BE4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,82
	ctx.r11.s64 = 82;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,76
	ctx.r11.s64 = 76;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493CCC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493CE0"))) PPC_WEAK_FUNC(sub_82493CE0);
PPC_FUNC_IMPL(__imp__sub_82493CE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82493CE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,21512
	ctx.r4.s64 = ctx.r10.s64 + 21512;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82493D24;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,23
	ctx.r11.s64 = 23;
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,252
	ctx.r11.s64 = 252;
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,54
	ctx.r11.s64 = 54;
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82493E24;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82493E38"))) PPC_WEAK_FUNC(sub_82493E38);
PPC_FUNC_IMPL(__imp__sub_82493E38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82493E40;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,107
	ctx.r9.s64 = 107;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26892
	ctx.r4.s64 = ctx.r10.s64 + 26892;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82493E7C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,78
	ctx.r9.s64 = 78;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,84
	ctx.r11.s64 = 84;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r9,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r9.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r9,18
	ctx.r9.s64 = 18;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r5,107
	ctx.r5.s64 = 107;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r9,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r9.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,80
	ctx.r11.s64 = 80;
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r10,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r10.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82494080;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82494090"))) PPC_WEAK_FUNC(sub_82494090);
PPC_FUNC_IMPL(__imp__sub_82494090) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82494098;
	__savegprlr_28(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r28,99
	ctx.r28.s64 = 99;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26924
	ctx.r4.s64 = ctx.r10.s64 + 26924;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r28,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r28.u32);
	// bl 0x822e0818
	ctx.lr = 0x824940D4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,105
	ctx.r9.s64 = 105;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r8,108
	ctx.r8.s64 = 108;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,114
	ctx.r10.s64 = 114;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r4,70
	ctx.r4.s64 = 70;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r9,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r9.u8);
	// li r9,100
	ctx.r9.s64 = 100;
	// stb r8,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r8.u8);
	// li r5,89
	ctx.r5.s64 = 89;
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r6,79
	ctx.r6.s64 = 79;
	// stb r4,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r4.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// stb r9,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r9.u8);
	// li r9,32
	ctx.r9.s64 = 32;
	// li r7,80
	ctx.r7.s64 = 80;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// li r8,97
	ctx.r8.s64 = 97;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// li r29,121
	ctx.r29.s64 = 121;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,25
	ctx.r11.s64 = 25;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r5,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r5.u8);
	// stb r3,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r3.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,21
	ctx.r11.s64 = 21;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,118
	ctx.r11.s64 = 118;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r11.u8);
	// li r11,101
	ctx.r11.s64 = 101;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r6,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r6.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r10,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r10.u8);
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// stb r9,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r9.u8);
	// stb r7,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r7.u8);
	// stb r8,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r8.u8);
	// stb r29,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r29.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r10,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r10.u8);
	// stb r9,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r9.u8);
	// li r10,109
	ctx.r10.s64 = 109;
	// stb r11,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r11.u8);
	// li r9,65
	ctx.r9.s64 = 65;
	// stb r4,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r4.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r5,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r5.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r3,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r3.u8);
	// li r5,99
	ctx.r5.s64 = 99;
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r10,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r10.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r10.u8);
	// li r10,111
	ctx.r10.s64 = 111;
	// stb r9,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r9.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r9,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r9.u8);
	// li r9,82
	ctx.r9.s64 = 82;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r10,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r10.u8);
	// li r10,55
	ctx.r10.s64 = 55;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r10,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r10.u8);
	// li r10,14
	ctx.r10.s64 = 14;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r10,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r10.u8);
	// li r10,10
	ctx.r10.s64 = 10;
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r10,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r10.u8);
	// li r10,50
	ctx.r10.s64 = 50;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r10,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r10.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r6,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r6.u8);
	// stb r10,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r10.u8);
	// stb r7,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r7.u8);
	// stb r9,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r9.u8);
	// stb r8,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r8.u8);
	// stb r28,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r28.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r11,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r11.u8);
	// stb r10,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r10.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824942E8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824942F8"))) PPC_WEAK_FUNC(sub_824942F8);
PPC_FUNC_IMPL(__imp__sub_824942F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82494300;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,21512
	ctx.r4.s64 = ctx.r10.s64 + 21512;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249433C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,86
	ctx.r11.s64 = 86;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,24
	ctx.r11.s64 = 24;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,252
	ctx.r11.s64 = 252;
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,54
	ctx.r11.s64 = 54;
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82494438;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82494448"))) PPC_WEAK_FUNC(sub_82494448);
PPC_FUNC_IMPL(__imp__sub_82494448) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82494450;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,107
	ctx.r9.s64 = 107;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26964
	ctx.r4.s64 = ctx.r10.s64 + 26964;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249448C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,81
	ctx.r9.s64 = 81;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,87
	ctx.r11.s64 = 87;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,232
	ctx.r10.s64 = 232;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r9,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r9.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r9,18
	ctx.r9.s64 = 18;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r5,107
	ctx.r5.s64 = 107;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r9,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r9.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r10,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r10.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82494690;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824946A0"))) PPC_WEAK_FUNC(sub_824946A0);
PPC_FUNC_IMPL(__imp__sub_824946A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824946A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,100
	ctx.r9.s64 = 100;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,26996
	ctx.r4.s64 = ctx.r10.s64 + 26996;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824946E4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r7,116
	ctx.r7.s64 = 116;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r5,70
	ctx.r5.s64 = 70;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r3,89
	ctx.r3.s64 = 89;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// li r6,2
	ctx.r6.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r8,99
	ctx.r8.s64 = 99;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// li r10,110
	ctx.r10.s64 = 110;
	// stb r5,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r5.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r3,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r3.u8);
	// stb r6,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r6.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,26
	ctx.r11.s64 = 26;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,22
	ctx.r11.s64 = 22;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r11,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r11.u8);
	// li r11,119
	ctx.r11.s64 = 119;
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r7,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r7.u8);
	// stb r8,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r8.u8);
	// stb r11,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r11.u8);
	// li r11,105
	ctx.r11.s64 = 105;
	// stb r9,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r9.u8);
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// stb r7,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r7.u8);
	// stb r9,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r9.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,104
	ctx.r11.s64 = 104;
	// stb r11,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r11.u8);
	// li r11,67
	ctx.r11.s64 = 67;
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r11.u8);
	// li r11,117
	ctx.r11.s64 = 117;
	// stb r11,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r11.u8);
	// li r11,114
	ctx.r11.s64 = 114;
	// stb r11,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r11.u8);
	// stb r11,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r11.u8);
	// li r11,101
	ctx.r11.s64 = 101;
	// stb r11,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r11.u8);
	// stb r10,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r10.u8);
	// li r10,55
	ctx.r10.s64 = 55;
	// li r7,112
	ctx.r7.s64 = 112;
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// li r9,87
	ctx.r9.s64 = 87;
	// stb r11,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r5,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r5.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r3,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r3.u8);
	// stb r10,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r10.u8);
	// li r10,14
	ctx.r10.s64 = 14;
	// stb r7,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r7.u8);
	// li r7,111
	ctx.r7.s64 = 111;
	// stb r9,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r9.u8);
	// li r9,97
	ctx.r9.s64 = 97;
	// li r5,100
	ctx.r5.s64 = 100;
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r10,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r10.u8);
	// li r10,10
	ctx.r10.s64 = 10;
	// stb r7,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r7.u8);
	// li r7,80
	ctx.r7.s64 = 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r9,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r9.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r10,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r10.u8);
	// li r10,65
	ctx.r10.s64 = 65;
	// stb r7,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r7.u8);
	// li r7,82
	ctx.r7.s64 = 82;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r10,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r10.u8);
	// li r10,79
	ctx.r10.s64 = 79;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r6,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r6.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r10,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r10.u8);
	// li r10,50
	ctx.r10.s64 = 50;
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r10,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r10.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r10,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r10.u8);
	// stb r7,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r7.u8);
	// stb r9,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r9.u8);
	// stb r8,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r8.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r11,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r11.u8);
	// stb r10,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r10.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82494910;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82494920"))) PPC_WEAK_FUNC(sub_82494920);
PPC_FUNC_IMPL(__imp__sub_82494920) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82494928;
	__savegprlr_29(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,107
	ctx.r9.s64 = 107;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27040
	ctx.r4.s64 = ctx.r10.s64 + 27040;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82494964;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,89
	ctx.r11.s64 = 89;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// li r10,22
	ctx.r10.s64 = 22;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// li r10,2
	ctx.r10.s64 = 2;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r11.u8);
	// stb r11,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r11.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r10,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r10.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r9,8
	ctx.r9.s64 = 8;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// stb r10,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r10.u8);
	// li r10,146
	ctx.r10.s64 = 146;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// li r5,107
	ctx.r5.s64 = 107;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r9,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r9.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r10.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r11,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82494B68;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82494B78"))) PPC_WEAK_FUNC(sub_82494B78);
PPC_FUNC_IMPL(__imp__sub_82494B78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82494B80;
	__savegprlr_14(ctx, base);
	// stwu r1,-928(r1)
	ea = -928 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,677
	ctx.r9.s64 = 677;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27068
	ctx.r4.s64 = ctx.r10.s64 + 27068;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82494BBC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,14
	ctx.r9.s64 = 14;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,58
	ctx.r10.s64 = 58;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r28,8
	ctx.r28.s64 = 8;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r24,143
	ctx.r24.s64 = 143;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,90
	ctx.r11.s64 = 90;
	// li r7,2
	ctx.r7.s64 = 2;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r9.u8);
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,72
	ctx.r11.s64 = 72;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,190
	ctx.r11.s64 = 190;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,19
	ctx.r11.s64 = 19;
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r28,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r28.u8);
	// stb r24,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r24.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r31,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r31.u8);
	// stb r31,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r31.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// stb r7,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r7.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r31,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r31.u8);
	// stb r31,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r31.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// li r5,101
	ctx.r5.s64 = 101;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// li r11,74
	ctx.r11.s64 = 74;
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// li r8,63
	ctx.r8.s64 = 63;
	// stb r31,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r31.u8);
	// li r6,89
	ctx.r6.s64 = 89;
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// li r29,12
	ctx.r29.s64 = 12;
	// stb r7,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r7.u8);
	// stb r5,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r5.u8);
	// li r5,115
	ctx.r5.s64 = 115;
	// stb r11,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r11.u8);
	// li r11,4
	ctx.r11.s64 = 4;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r8,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r8.u8);
	// stb r5,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r5.u8);
	// li r5,71
	ctx.r5.s64 = 71;
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r31,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r28,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r28.u8);
	// stb r24,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r24.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r11,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r11.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r31,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r31.u8);
	// stb r31,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r8,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r8.u8);
	// stb r8,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r8.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r31,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r6,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r6.u8);
	// stb r7,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r7.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r28,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r28.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r11.u8);
	// stb r6,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r6.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r29,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r29.u8);
	// stb r5,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r5.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// li r4,11
	ctx.r4.s64 = 11;
	// stb r31,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r31.u8);
	// li r5,29
	ctx.r5.s64 = 29;
	// stb r31,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r31.u8);
	// li r14,31
	ctx.r14.s64 = 31;
	// stb r9,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r9.u8);
	// stb r10,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r10.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r31,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r31.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r31,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r31.u8);
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r31,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r31.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r31,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r31.u8);
	// stb r31,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r31.u8);
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r4,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r4.u8);
	// stb r5,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r5.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r31,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r31.u8);
	// stb r9,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r9.u8);
	// stb r10,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r10.u8);
	// stb r31,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r31.u8);
	// stb r31,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r31.u8);
	// stb r31,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r31.u8);
	// stb r31,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r31.u8);
	// stb r31,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r31.u8);
	// stb r31,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r31.u8);
	// stb r31,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r31.u8);
	// stb r31,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r31.u8);
	// stb r31,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r31.u8);
	// stb r31,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r31.u8);
	// stb r31,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r31.u8);
	// stb r31,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r31.u8);
	// stb r31,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r31.u8);
	// stb r31,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r31.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r31,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r31.u8);
	// stb r31,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r31.u8);
	// stb r31,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r31.u8);
	// stb r4,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r4.u8);
	// stb r14,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r14.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// stb r31,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r31.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r31,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r31.u8);
	// stb r9,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r9.u8);
	// stb r10,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r10.u8);
	// stb r31,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r31.u8);
	// stb r31,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r31.u8);
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r31,274(r1)
	PPC_STORE_U8(ctx.r1.u32 + 274, ctx.r31.u8);
	// stb r31,275(r1)
	PPC_STORE_U8(ctx.r1.u32 + 275, ctx.r31.u8);
	// stb r31,276(r1)
	PPC_STORE_U8(ctx.r1.u32 + 276, ctx.r31.u8);
	// stb r31,277(r1)
	PPC_STORE_U8(ctx.r1.u32 + 277, ctx.r31.u8);
	// stb r31,278(r1)
	PPC_STORE_U8(ctx.r1.u32 + 278, ctx.r31.u8);
	// stb r31,279(r1)
	PPC_STORE_U8(ctx.r1.u32 + 279, ctx.r31.u8);
	// stb r31,280(r1)
	PPC_STORE_U8(ctx.r1.u32 + 280, ctx.r31.u8);
	// stb r31,281(r1)
	PPC_STORE_U8(ctx.r1.u32 + 281, ctx.r31.u8);
	// stb r31,282(r1)
	PPC_STORE_U8(ctx.r1.u32 + 282, ctx.r31.u8);
	// stb r31,283(r1)
	PPC_STORE_U8(ctx.r1.u32 + 283, ctx.r31.u8);
	// stb r31,284(r1)
	PPC_STORE_U8(ctx.r1.u32 + 284, ctx.r31.u8);
	// stb r31,285(r1)
	PPC_STORE_U8(ctx.r1.u32 + 285, ctx.r31.u8);
	// li r25,67
	ctx.r25.s64 = 67;
	// stb r8,286(r1)
	PPC_STORE_U8(ctx.r1.u32 + 286, ctx.r8.u8);
	// li r3,70
	ctx.r3.s64 = 70;
	// stb r31,288(r1)
	PPC_STORE_U8(ctx.r1.u32 + 288, ctx.r31.u8);
	// li r15,130
	ctx.r15.s64 = 130;
	// stb r31,289(r1)
	PPC_STORE_U8(ctx.r1.u32 + 289, ctx.r31.u8);
	// li r16,1
	ctx.r16.s64 = 1;
	// stb r31,290(r1)
	PPC_STORE_U8(ctx.r1.u32 + 290, ctx.r31.u8);
	// li r17,28
	ctx.r17.s64 = 28;
	// stb r31,291(r1)
	PPC_STORE_U8(ctx.r1.u32 + 291, ctx.r31.u8);
	// li r18,39
	ctx.r18.s64 = 39;
	// stb r25,287(r1)
	PPC_STORE_U8(ctx.r1.u32 + 287, ctx.r25.u8);
	// li r19,120
	ctx.r19.s64 = 120;
	// stb r31,292(r1)
	PPC_STORE_U8(ctx.r1.u32 + 292, ctx.r31.u8);
	// li r20,33
	ctx.r20.s64 = 33;
	// stb r31,293(r1)
	PPC_STORE_U8(ctx.r1.u32 + 293, ctx.r31.u8);
	// li r21,52
	ctx.r21.s64 = 52;
	// stb r3,294(r1)
	PPC_STORE_U8(ctx.r1.u32 + 294, ctx.r3.u8);
	// li r22,53
	ctx.r22.s64 = 53;
	// stb r15,295(r1)
	PPC_STORE_U8(ctx.r1.u32 + 295, ctx.r15.u8);
	// li r5,97
	ctx.r5.s64 = 97;
	// stb r31,296(r1)
	PPC_STORE_U8(ctx.r1.u32 + 296, ctx.r31.u8);
	// stb r31,297(r1)
	PPC_STORE_U8(ctx.r1.u32 + 297, ctx.r31.u8);
	// stb r31,298(r1)
	PPC_STORE_U8(ctx.r1.u32 + 298, ctx.r31.u8);
	// stb r31,299(r1)
	PPC_STORE_U8(ctx.r1.u32 + 299, ctx.r31.u8);
	// stb r31,300(r1)
	PPC_STORE_U8(ctx.r1.u32 + 300, ctx.r31.u8);
	// stb r31,301(r1)
	PPC_STORE_U8(ctx.r1.u32 + 301, ctx.r31.u8);
	// stb r31,302(r1)
	PPC_STORE_U8(ctx.r1.u32 + 302, ctx.r31.u8);
	// stb r11,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r11.u8);
	// stb r31,304(r1)
	PPC_STORE_U8(ctx.r1.u32 + 304, ctx.r31.u8);
	// stb r31,305(r1)
	PPC_STORE_U8(ctx.r1.u32 + 305, ctx.r31.u8);
	// stb r31,306(r1)
	PPC_STORE_U8(ctx.r1.u32 + 306, ctx.r31.u8);
	// stb r31,307(r1)
	PPC_STORE_U8(ctx.r1.u32 + 307, ctx.r31.u8);
	// stb r31,308(r1)
	PPC_STORE_U8(ctx.r1.u32 + 308, ctx.r31.u8);
	// stb r31,309(r1)
	PPC_STORE_U8(ctx.r1.u32 + 309, ctx.r31.u8);
	// stb r31,310(r1)
	PPC_STORE_U8(ctx.r1.u32 + 310, ctx.r31.u8);
	// stb r31,311(r1)
	PPC_STORE_U8(ctx.r1.u32 + 311, ctx.r31.u8);
	// stb r31,312(r1)
	PPC_STORE_U8(ctx.r1.u32 + 312, ctx.r31.u8);
	// stb r31,313(r1)
	PPC_STORE_U8(ctx.r1.u32 + 313, ctx.r31.u8);
	// stb r16,314(r1)
	PPC_STORE_U8(ctx.r1.u32 + 314, ctx.r16.u8);
	// stb r17,315(r1)
	PPC_STORE_U8(ctx.r1.u32 + 315, ctx.r17.u8);
	// stb r31,316(r1)
	PPC_STORE_U8(ctx.r1.u32 + 316, ctx.r31.u8);
	// stb r31,317(r1)
	PPC_STORE_U8(ctx.r1.u32 + 317, ctx.r31.u8);
	// stb r31,318(r1)
	PPC_STORE_U8(ctx.r1.u32 + 318, ctx.r31.u8);
	// stb r31,319(r1)
	PPC_STORE_U8(ctx.r1.u32 + 319, ctx.r31.u8);
	// stb r31,320(r1)
	PPC_STORE_U8(ctx.r1.u32 + 320, ctx.r31.u8);
	// stb r31,321(r1)
	PPC_STORE_U8(ctx.r1.u32 + 321, ctx.r31.u8);
	// stb r18,322(r1)
	PPC_STORE_U8(ctx.r1.u32 + 322, ctx.r18.u8);
	// stb r19,323(r1)
	PPC_STORE_U8(ctx.r1.u32 + 323, ctx.r19.u8);
	// stb r31,324(r1)
	PPC_STORE_U8(ctx.r1.u32 + 324, ctx.r31.u8);
	// stb r31,325(r1)
	PPC_STORE_U8(ctx.r1.u32 + 325, ctx.r31.u8);
	// stb r31,326(r1)
	PPC_STORE_U8(ctx.r1.u32 + 326, ctx.r31.u8);
	// stb r31,327(r1)
	PPC_STORE_U8(ctx.r1.u32 + 327, ctx.r31.u8);
	// stb r31,328(r1)
	PPC_STORE_U8(ctx.r1.u32 + 328, ctx.r31.u8);
	// stb r31,329(r1)
	PPC_STORE_U8(ctx.r1.u32 + 329, ctx.r31.u8);
	// stb r31,330(r1)
	PPC_STORE_U8(ctx.r1.u32 + 330, ctx.r31.u8);
	// stb r11,331(r1)
	PPC_STORE_U8(ctx.r1.u32 + 331, ctx.r11.u8);
	// stb r31,332(r1)
	PPC_STORE_U8(ctx.r1.u32 + 332, ctx.r31.u8);
	// stb r31,333(r1)
	PPC_STORE_U8(ctx.r1.u32 + 333, ctx.r31.u8);
	// stb r31,334(r1)
	PPC_STORE_U8(ctx.r1.u32 + 334, ctx.r31.u8);
	// stb r31,335(r1)
	PPC_STORE_U8(ctx.r1.u32 + 335, ctx.r31.u8);
	// stb r31,336(r1)
	PPC_STORE_U8(ctx.r1.u32 + 336, ctx.r31.u8);
	// stb r31,337(r1)
	PPC_STORE_U8(ctx.r1.u32 + 337, ctx.r31.u8);
	// stb r31,338(r1)
	PPC_STORE_U8(ctx.r1.u32 + 338, ctx.r31.u8);
	// stb r31,339(r1)
	PPC_STORE_U8(ctx.r1.u32 + 339, ctx.r31.u8);
	// stb r31,340(r1)
	PPC_STORE_U8(ctx.r1.u32 + 340, ctx.r31.u8);
	// stb r31,341(r1)
	PPC_STORE_U8(ctx.r1.u32 + 341, ctx.r31.u8);
	// stb r20,342(r1)
	PPC_STORE_U8(ctx.r1.u32 + 342, ctx.r20.u8);
	// stb r21,343(r1)
	PPC_STORE_U8(ctx.r1.u32 + 343, ctx.r21.u8);
	// stb r31,344(r1)
	PPC_STORE_U8(ctx.r1.u32 + 344, ctx.r31.u8);
	// stb r31,345(r1)
	PPC_STORE_U8(ctx.r1.u32 + 345, ctx.r31.u8);
	// stb r31,346(r1)
	PPC_STORE_U8(ctx.r1.u32 + 346, ctx.r31.u8);
	// stb r31,347(r1)
	PPC_STORE_U8(ctx.r1.u32 + 347, ctx.r31.u8);
	// stb r31,348(r1)
	PPC_STORE_U8(ctx.r1.u32 + 348, ctx.r31.u8);
	// stb r31,349(r1)
	PPC_STORE_U8(ctx.r1.u32 + 349, ctx.r31.u8);
	// stb r22,350(r1)
	PPC_STORE_U8(ctx.r1.u32 + 350, ctx.r22.u8);
	// stb r5,351(r1)
	PPC_STORE_U8(ctx.r1.u32 + 351, ctx.r5.u8);
	// stb r31,352(r1)
	PPC_STORE_U8(ctx.r1.u32 + 352, ctx.r31.u8);
	// stb r31,353(r1)
	PPC_STORE_U8(ctx.r1.u32 + 353, ctx.r31.u8);
	// stb r31,354(r1)
	PPC_STORE_U8(ctx.r1.u32 + 354, ctx.r31.u8);
	// stb r31,355(r1)
	PPC_STORE_U8(ctx.r1.u32 + 355, ctx.r31.u8);
	// std r30,760(r1)
	PPC_STORE_U64(ctx.r1.u32 + 760, ctx.r30.u64);
	// li r23,100
	ctx.r23.s64 = 100;
	// li r26,69
	ctx.r26.s64 = 69;
	// stb r31,356(r1)
	PPC_STORE_U8(ctx.r1.u32 + 356, ctx.r31.u8);
	// li r27,77
	ctx.r27.s64 = 77;
	// stb r31,357(r1)
	PPC_STORE_U8(ctx.r1.u32 + 357, ctx.r31.u8);
	// li r30,74
	ctx.r30.s64 = 74;
	// stb r31,358(r1)
	PPC_STORE_U8(ctx.r1.u32 + 358, ctx.r31.u8);
	// stb r11,359(r1)
	PPC_STORE_U8(ctx.r1.u32 + 359, ctx.r11.u8);
	// stb r31,360(r1)
	PPC_STORE_U8(ctx.r1.u32 + 360, ctx.r31.u8);
	// stb r31,361(r1)
	PPC_STORE_U8(ctx.r1.u32 + 361, ctx.r31.u8);
	// stb r31,362(r1)
	PPC_STORE_U8(ctx.r1.u32 + 362, ctx.r31.u8);
	// stb r31,363(r1)
	PPC_STORE_U8(ctx.r1.u32 + 363, ctx.r31.u8);
	// stb r31,364(r1)
	PPC_STORE_U8(ctx.r1.u32 + 364, ctx.r31.u8);
	// stb r31,365(r1)
	PPC_STORE_U8(ctx.r1.u32 + 365, ctx.r31.u8);
	// stb r31,366(r1)
	PPC_STORE_U8(ctx.r1.u32 + 366, ctx.r31.u8);
	// stb r31,367(r1)
	PPC_STORE_U8(ctx.r1.u32 + 367, ctx.r31.u8);
	// stb r31,368(r1)
	PPC_STORE_U8(ctx.r1.u32 + 368, ctx.r31.u8);
	// stb r31,369(r1)
	PPC_STORE_U8(ctx.r1.u32 + 369, ctx.r31.u8);
	// stb r29,370(r1)
	PPC_STORE_U8(ctx.r1.u32 + 370, ctx.r29.u8);
	// stb r23,371(r1)
	PPC_STORE_U8(ctx.r1.u32 + 371, ctx.r23.u8);
	// stb r31,372(r1)
	PPC_STORE_U8(ctx.r1.u32 + 372, ctx.r31.u8);
	// stb r31,373(r1)
	PPC_STORE_U8(ctx.r1.u32 + 373, ctx.r31.u8);
	// stb r31,374(r1)
	PPC_STORE_U8(ctx.r1.u32 + 374, ctx.r31.u8);
	// stb r31,375(r1)
	PPC_STORE_U8(ctx.r1.u32 + 375, ctx.r31.u8);
	// stb r31,376(r1)
	PPC_STORE_U8(ctx.r1.u32 + 376, ctx.r31.u8);
	// stb r31,377(r1)
	PPC_STORE_U8(ctx.r1.u32 + 377, ctx.r31.u8);
	// stb r9,378(r1)
	PPC_STORE_U8(ctx.r1.u32 + 378, ctx.r9.u8);
	// stb r10,379(r1)
	PPC_STORE_U8(ctx.r1.u32 + 379, ctx.r10.u8);
	// stb r31,380(r1)
	PPC_STORE_U8(ctx.r1.u32 + 380, ctx.r31.u8);
	// stb r31,381(r1)
	PPC_STORE_U8(ctx.r1.u32 + 381, ctx.r31.u8);
	// stb r31,382(r1)
	PPC_STORE_U8(ctx.r1.u32 + 382, ctx.r31.u8);
	// stb r31,383(r1)
	PPC_STORE_U8(ctx.r1.u32 + 383, ctx.r31.u8);
	// stb r31,384(r1)
	PPC_STORE_U8(ctx.r1.u32 + 384, ctx.r31.u8);
	// stb r31,385(r1)
	PPC_STORE_U8(ctx.r1.u32 + 385, ctx.r31.u8);
	// stb r31,386(r1)
	PPC_STORE_U8(ctx.r1.u32 + 386, ctx.r31.u8);
	// stb r31,387(r1)
	PPC_STORE_U8(ctx.r1.u32 + 387, ctx.r31.u8);
	// stb r31,388(r1)
	PPC_STORE_U8(ctx.r1.u32 + 388, ctx.r31.u8);
	// stb r31,389(r1)
	PPC_STORE_U8(ctx.r1.u32 + 389, ctx.r31.u8);
	// stb r31,390(r1)
	PPC_STORE_U8(ctx.r1.u32 + 390, ctx.r31.u8);
	// stb r31,391(r1)
	PPC_STORE_U8(ctx.r1.u32 + 391, ctx.r31.u8);
	// stb r31,392(r1)
	PPC_STORE_U8(ctx.r1.u32 + 392, ctx.r31.u8);
	// stb r31,393(r1)
	PPC_STORE_U8(ctx.r1.u32 + 393, ctx.r31.u8);
	// stb r31,394(r1)
	PPC_STORE_U8(ctx.r1.u32 + 394, ctx.r31.u8);
	// stb r31,395(r1)
	PPC_STORE_U8(ctx.r1.u32 + 395, ctx.r31.u8);
	// stb r31,396(r1)
	PPC_STORE_U8(ctx.r1.u32 + 396, ctx.r31.u8);
	// stb r31,397(r1)
	PPC_STORE_U8(ctx.r1.u32 + 397, ctx.r31.u8);
	// stb r26,398(r1)
	PPC_STORE_U8(ctx.r1.u32 + 398, ctx.r26.u8);
	// stb r27,399(r1)
	PPC_STORE_U8(ctx.r1.u32 + 399, ctx.r27.u8);
	// stb r31,400(r1)
	PPC_STORE_U8(ctx.r1.u32 + 400, ctx.r31.u8);
	// stb r31,401(r1)
	PPC_STORE_U8(ctx.r1.u32 + 401, ctx.r31.u8);
	// stb r31,402(r1)
	PPC_STORE_U8(ctx.r1.u32 + 402, ctx.r31.u8);
	// stb r31,403(r1)
	PPC_STORE_U8(ctx.r1.u32 + 403, ctx.r31.u8);
	// stb r31,404(r1)
	PPC_STORE_U8(ctx.r1.u32 + 404, ctx.r31.u8);
	// stb r31,405(r1)
	PPC_STORE_U8(ctx.r1.u32 + 405, ctx.r31.u8);
	// stb r8,406(r1)
	PPC_STORE_U8(ctx.r1.u32 + 406, ctx.r8.u8);
	// stb r30,407(r1)
	PPC_STORE_U8(ctx.r1.u32 + 407, ctx.r30.u8);
	// stb r31,408(r1)
	PPC_STORE_U8(ctx.r1.u32 + 408, ctx.r31.u8);
	// stb r31,409(r1)
	PPC_STORE_U8(ctx.r1.u32 + 409, ctx.r31.u8);
	// stb r31,410(r1)
	PPC_STORE_U8(ctx.r1.u32 + 410, ctx.r31.u8);
	// stb r31,411(r1)
	PPC_STORE_U8(ctx.r1.u32 + 411, ctx.r31.u8);
	// stb r31,412(r1)
	PPC_STORE_U8(ctx.r1.u32 + 412, ctx.r31.u8);
	// stb r31,413(r1)
	PPC_STORE_U8(ctx.r1.u32 + 413, ctx.r31.u8);
	// stb r28,414(r1)
	PPC_STORE_U8(ctx.r1.u32 + 414, ctx.r28.u8);
	// stb r24,415(r1)
	PPC_STORE_U8(ctx.r1.u32 + 415, ctx.r24.u8);
	// stb r31,416(r1)
	PPC_STORE_U8(ctx.r1.u32 + 416, ctx.r31.u8);
	// stb r31,417(r1)
	PPC_STORE_U8(ctx.r1.u32 + 417, ctx.r31.u8);
	// stb r31,418(r1)
	PPC_STORE_U8(ctx.r1.u32 + 418, ctx.r31.u8);
	// stb r31,419(r1)
	PPC_STORE_U8(ctx.r1.u32 + 419, ctx.r31.u8);
	// stb r31,420(r1)
	PPC_STORE_U8(ctx.r1.u32 + 420, ctx.r31.u8);
	// stb r31,421(r1)
	PPC_STORE_U8(ctx.r1.u32 + 421, ctx.r31.u8);
	// stb r31,422(r1)
	PPC_STORE_U8(ctx.r1.u32 + 422, ctx.r31.u8);
	// stb r11,423(r1)
	PPC_STORE_U8(ctx.r1.u32 + 423, ctx.r11.u8);
	// stb r31,424(r1)
	PPC_STORE_U8(ctx.r1.u32 + 424, ctx.r31.u8);
	// stb r31,425(r1)
	PPC_STORE_U8(ctx.r1.u32 + 425, ctx.r31.u8);
	// stb r31,426(r1)
	PPC_STORE_U8(ctx.r1.u32 + 426, ctx.r31.u8);
	// stb r31,427(r1)
	PPC_STORE_U8(ctx.r1.u32 + 427, ctx.r31.u8);
	// stb r31,428(r1)
	PPC_STORE_U8(ctx.r1.u32 + 428, ctx.r31.u8);
	// stb r31,429(r1)
	PPC_STORE_U8(ctx.r1.u32 + 429, ctx.r31.u8);
	// stb r31,430(r1)
	PPC_STORE_U8(ctx.r1.u32 + 430, ctx.r31.u8);
	// stb r31,431(r1)
	PPC_STORE_U8(ctx.r1.u32 + 431, ctx.r31.u8);
	// li r28,7
	ctx.r28.s64 = 7;
	// stb r31,432(r1)
	PPC_STORE_U8(ctx.r1.u32 + 432, ctx.r31.u8);
	// stb r31,433(r1)
	PPC_STORE_U8(ctx.r1.u32 + 433, ctx.r31.u8);
	// stb r8,434(r1)
	PPC_STORE_U8(ctx.r1.u32 + 434, ctx.r8.u8);
	// stb r8,435(r1)
	PPC_STORE_U8(ctx.r1.u32 + 435, ctx.r8.u8);
	// stb r31,436(r1)
	PPC_STORE_U8(ctx.r1.u32 + 436, ctx.r31.u8);
	// stb r28,451(r1)
	PPC_STORE_U8(ctx.r1.u32 + 451, ctx.r28.u8);
	// li r28,3
	ctx.r28.s64 = 3;
	// stb r31,437(r1)
	PPC_STORE_U8(ctx.r1.u32 + 437, ctx.r31.u8);
	// stb r31,438(r1)
	PPC_STORE_U8(ctx.r1.u32 + 438, ctx.r31.u8);
	// stb r31,439(r1)
	PPC_STORE_U8(ctx.r1.u32 + 439, ctx.r31.u8);
	// stb r31,440(r1)
	PPC_STORE_U8(ctx.r1.u32 + 440, ctx.r31.u8);
	// stb r28,459(r1)
	PPC_STORE_U8(ctx.r1.u32 + 459, ctx.r28.u8);
	// li r28,78
	ctx.r28.s64 = 78;
	// stb r31,441(r1)
	PPC_STORE_U8(ctx.r1.u32 + 441, ctx.r31.u8);
	// stb r6,442(r1)
	PPC_STORE_U8(ctx.r1.u32 + 442, ctx.r6.u8);
	// stb r7,443(r1)
	PPC_STORE_U8(ctx.r1.u32 + 443, ctx.r7.u8);
	// stb r31,444(r1)
	PPC_STORE_U8(ctx.r1.u32 + 444, ctx.r31.u8);
	// stb r28,460(r1)
	PPC_STORE_U8(ctx.r1.u32 + 460, ctx.r28.u8);
	// li r28,111
	ctx.r28.s64 = 111;
	// stb r31,445(r1)
	PPC_STORE_U8(ctx.r1.u32 + 445, ctx.r31.u8);
	// stb r31,446(r1)
	PPC_STORE_U8(ctx.r1.u32 + 446, ctx.r31.u8);
	// stb r31,447(r1)
	PPC_STORE_U8(ctx.r1.u32 + 447, ctx.r31.u8);
	// stb r31,448(r1)
	PPC_STORE_U8(ctx.r1.u32 + 448, ctx.r31.u8);
	// stb r28,461(r1)
	PPC_STORE_U8(ctx.r1.u32 + 461, ctx.r28.u8);
	// li r28,71
	ctx.r28.s64 = 71;
	// stb r31,449(r1)
	PPC_STORE_U8(ctx.r1.u32 + 449, ctx.r31.u8);
	// stb r31,450(r1)
	PPC_STORE_U8(ctx.r1.u32 + 450, ctx.r31.u8);
	// stb r31,452(r1)
	PPC_STORE_U8(ctx.r1.u32 + 452, ctx.r31.u8);
	// stb r31,453(r1)
	PPC_STORE_U8(ctx.r1.u32 + 453, ctx.r31.u8);
	// stb r28,466(r1)
	PPC_STORE_U8(ctx.r1.u32 + 466, ctx.r28.u8);
	// li r28,29
	ctx.r28.s64 = 29;
	// stb r31,454(r1)
	PPC_STORE_U8(ctx.r1.u32 + 454, ctx.r31.u8);
	// stb r31,455(r1)
	PPC_STORE_U8(ctx.r1.u32 + 455, ctx.r31.u8);
	// stb r31,456(r1)
	PPC_STORE_U8(ctx.r1.u32 + 456, ctx.r31.u8);
	// stb r31,457(r1)
	PPC_STORE_U8(ctx.r1.u32 + 457, ctx.r31.u8);
	// stb r31,458(r1)
	PPC_STORE_U8(ctx.r1.u32 + 458, ctx.r31.u8);
	// stb r31,462(r1)
	PPC_STORE_U8(ctx.r1.u32 + 462, ctx.r31.u8);
	// stb r31,463(r1)
	PPC_STORE_U8(ctx.r1.u32 + 463, ctx.r31.u8);
	// stb r31,464(r1)
	PPC_STORE_U8(ctx.r1.u32 + 464, ctx.r31.u8);
	// stb r29,465(r1)
	PPC_STORE_U8(ctx.r1.u32 + 465, ctx.r29.u8);
	// stb r31,467(r1)
	PPC_STORE_U8(ctx.r1.u32 + 467, ctx.r31.u8);
	// stb r31,468(r1)
	PPC_STORE_U8(ctx.r1.u32 + 468, ctx.r31.u8);
	// stb r31,469(r1)
	PPC_STORE_U8(ctx.r1.u32 + 469, ctx.r31.u8);
	// stb r31,470(r1)
	PPC_STORE_U8(ctx.r1.u32 + 470, ctx.r31.u8);
	// stb r31,471(r1)
	PPC_STORE_U8(ctx.r1.u32 + 471, ctx.r31.u8);
	// stb r31,472(r1)
	PPC_STORE_U8(ctx.r1.u32 + 472, ctx.r31.u8);
	// stb r9,473(r1)
	PPC_STORE_U8(ctx.r1.u32 + 473, ctx.r9.u8);
	// stb r10,474(r1)
	PPC_STORE_U8(ctx.r1.u32 + 474, ctx.r10.u8);
	// stb r31,475(r1)
	PPC_STORE_U8(ctx.r1.u32 + 475, ctx.r31.u8);
	// stb r31,476(r1)
	PPC_STORE_U8(ctx.r1.u32 + 476, ctx.r31.u8);
	// stb r31,477(r1)
	PPC_STORE_U8(ctx.r1.u32 + 477, ctx.r31.u8);
	// stb r31,478(r1)
	PPC_STORE_U8(ctx.r1.u32 + 478, ctx.r31.u8);
	// stb r31,479(r1)
	PPC_STORE_U8(ctx.r1.u32 + 479, ctx.r31.u8);
	// stb r31,480(r1)
	PPC_STORE_U8(ctx.r1.u32 + 480, ctx.r31.u8);
	// stb r31,481(r1)
	PPC_STORE_U8(ctx.r1.u32 + 481, ctx.r31.u8);
	// stb r31,482(r1)
	PPC_STORE_U8(ctx.r1.u32 + 482, ctx.r31.u8);
	// stb r31,483(r1)
	PPC_STORE_U8(ctx.r1.u32 + 483, ctx.r31.u8);
	// stb r31,484(r1)
	PPC_STORE_U8(ctx.r1.u32 + 484, ctx.r31.u8);
	// stb r31,485(r1)
	PPC_STORE_U8(ctx.r1.u32 + 485, ctx.r31.u8);
	// stb r31,486(r1)
	PPC_STORE_U8(ctx.r1.u32 + 486, ctx.r31.u8);
	// stb r31,487(r1)
	PPC_STORE_U8(ctx.r1.u32 + 487, ctx.r31.u8);
	// stb r31,488(r1)
	PPC_STORE_U8(ctx.r1.u32 + 488, ctx.r31.u8);
	// stb r31,489(r1)
	PPC_STORE_U8(ctx.r1.u32 + 489, ctx.r31.u8);
	// stb r31,490(r1)
	PPC_STORE_U8(ctx.r1.u32 + 490, ctx.r31.u8);
	// stb r31,491(r1)
	PPC_STORE_U8(ctx.r1.u32 + 491, ctx.r31.u8);
	// stb r31,492(r1)
	PPC_STORE_U8(ctx.r1.u32 + 492, ctx.r31.u8);
	// stb r4,493(r1)
	PPC_STORE_U8(ctx.r1.u32 + 493, ctx.r4.u8);
	// stb r28,494(r1)
	PPC_STORE_U8(ctx.r1.u32 + 494, ctx.r28.u8);
	// stb r31,495(r1)
	PPC_STORE_U8(ctx.r1.u32 + 495, ctx.r31.u8);
	// stb r31,496(r1)
	PPC_STORE_U8(ctx.r1.u32 + 496, ctx.r31.u8);
	// stb r31,497(r1)
	PPC_STORE_U8(ctx.r1.u32 + 497, ctx.r31.u8);
	// stb r31,498(r1)
	PPC_STORE_U8(ctx.r1.u32 + 498, ctx.r31.u8);
	// stb r31,499(r1)
	PPC_STORE_U8(ctx.r1.u32 + 499, ctx.r31.u8);
	// stb r31,500(r1)
	PPC_STORE_U8(ctx.r1.u32 + 500, ctx.r31.u8);
	// stb r9,501(r1)
	PPC_STORE_U8(ctx.r1.u32 + 501, ctx.r9.u8);
	// stb r10,502(r1)
	PPC_STORE_U8(ctx.r1.u32 + 502, ctx.r10.u8);
	// stb r31,503(r1)
	PPC_STORE_U8(ctx.r1.u32 + 503, ctx.r31.u8);
	// stb r31,504(r1)
	PPC_STORE_U8(ctx.r1.u32 + 504, ctx.r31.u8);
	// stb r31,505(r1)
	PPC_STORE_U8(ctx.r1.u32 + 505, ctx.r31.u8);
	// stb r31,506(r1)
	PPC_STORE_U8(ctx.r1.u32 + 506, ctx.r31.u8);
	// stb r31,507(r1)
	PPC_STORE_U8(ctx.r1.u32 + 507, ctx.r31.u8);
	// stb r31,508(r1)
	PPC_STORE_U8(ctx.r1.u32 + 508, ctx.r31.u8);
	// stb r31,509(r1)
	PPC_STORE_U8(ctx.r1.u32 + 509, ctx.r31.u8);
	// stb r31,510(r1)
	PPC_STORE_U8(ctx.r1.u32 + 510, ctx.r31.u8);
	// stb r31,511(r1)
	PPC_STORE_U8(ctx.r1.u32 + 511, ctx.r31.u8);
	// stb r31,512(r1)
	PPC_STORE_U8(ctx.r1.u32 + 512, ctx.r31.u8);
	// stb r31,513(r1)
	PPC_STORE_U8(ctx.r1.u32 + 513, ctx.r31.u8);
	// stb r31,514(r1)
	PPC_STORE_U8(ctx.r1.u32 + 514, ctx.r31.u8);
	// stb r31,515(r1)
	PPC_STORE_U8(ctx.r1.u32 + 515, ctx.r31.u8);
	// stb r31,516(r1)
	PPC_STORE_U8(ctx.r1.u32 + 516, ctx.r31.u8);
	// stb r31,517(r1)
	PPC_STORE_U8(ctx.r1.u32 + 517, ctx.r31.u8);
	// stb r31,518(r1)
	PPC_STORE_U8(ctx.r1.u32 + 518, ctx.r31.u8);
	// stb r31,519(r1)
	PPC_STORE_U8(ctx.r1.u32 + 519, ctx.r31.u8);
	// stb r31,520(r1)
	PPC_STORE_U8(ctx.r1.u32 + 520, ctx.r31.u8);
	// stb r4,521(r1)
	PPC_STORE_U8(ctx.r1.u32 + 521, ctx.r4.u8);
	// stb r14,522(r1)
	PPC_STORE_U8(ctx.r1.u32 + 522, ctx.r14.u8);
	// stb r31,523(r1)
	PPC_STORE_U8(ctx.r1.u32 + 523, ctx.r31.u8);
	// stb r31,524(r1)
	PPC_STORE_U8(ctx.r1.u32 + 524, ctx.r31.u8);
	// stb r31,525(r1)
	PPC_STORE_U8(ctx.r1.u32 + 525, ctx.r31.u8);
	// stb r31,526(r1)
	PPC_STORE_U8(ctx.r1.u32 + 526, ctx.r31.u8);
	// stb r31,527(r1)
	PPC_STORE_U8(ctx.r1.u32 + 527, ctx.r31.u8);
	// stb r31,528(r1)
	PPC_STORE_U8(ctx.r1.u32 + 528, ctx.r31.u8);
	// stb r9,529(r1)
	PPC_STORE_U8(ctx.r1.u32 + 529, ctx.r9.u8);
	// stb r10,530(r1)
	PPC_STORE_U8(ctx.r1.u32 + 530, ctx.r10.u8);
	// stb r31,531(r1)
	PPC_STORE_U8(ctx.r1.u32 + 531, ctx.r31.u8);
	// stb r31,532(r1)
	PPC_STORE_U8(ctx.r1.u32 + 532, ctx.r31.u8);
	// stb r31,533(r1)
	PPC_STORE_U8(ctx.r1.u32 + 533, ctx.r31.u8);
	// stb r31,534(r1)
	PPC_STORE_U8(ctx.r1.u32 + 534, ctx.r31.u8);
	// stb r31,535(r1)
	PPC_STORE_U8(ctx.r1.u32 + 535, ctx.r31.u8);
	// stb r31,536(r1)
	PPC_STORE_U8(ctx.r1.u32 + 536, ctx.r31.u8);
	// stb r31,537(r1)
	PPC_STORE_U8(ctx.r1.u32 + 537, ctx.r31.u8);
	// stb r31,538(r1)
	PPC_STORE_U8(ctx.r1.u32 + 538, ctx.r31.u8);
	// stb r31,539(r1)
	PPC_STORE_U8(ctx.r1.u32 + 539, ctx.r31.u8);
	// stb r31,540(r1)
	PPC_STORE_U8(ctx.r1.u32 + 540, ctx.r31.u8);
	// stb r31,541(r1)
	PPC_STORE_U8(ctx.r1.u32 + 541, ctx.r31.u8);
	// stb r31,542(r1)
	PPC_STORE_U8(ctx.r1.u32 + 542, ctx.r31.u8);
	// stb r31,543(r1)
	PPC_STORE_U8(ctx.r1.u32 + 543, ctx.r31.u8);
	// stb r31,544(r1)
	PPC_STORE_U8(ctx.r1.u32 + 544, ctx.r31.u8);
	// stb r31,545(r1)
	PPC_STORE_U8(ctx.r1.u32 + 545, ctx.r31.u8);
	// stb r31,546(r1)
	PPC_STORE_U8(ctx.r1.u32 + 546, ctx.r31.u8);
	// stb r31,547(r1)
	PPC_STORE_U8(ctx.r1.u32 + 547, ctx.r31.u8);
	// stb r31,548(r1)
	PPC_STORE_U8(ctx.r1.u32 + 548, ctx.r31.u8);
	// stb r8,549(r1)
	PPC_STORE_U8(ctx.r1.u32 + 549, ctx.r8.u8);
	// stb r25,550(r1)
	PPC_STORE_U8(ctx.r1.u32 + 550, ctx.r25.u8);
	// stb r31,551(r1)
	PPC_STORE_U8(ctx.r1.u32 + 551, ctx.r31.u8);
	// stb r31,552(r1)
	PPC_STORE_U8(ctx.r1.u32 + 552, ctx.r31.u8);
	// stb r31,553(r1)
	PPC_STORE_U8(ctx.r1.u32 + 553, ctx.r31.u8);
	// stb r31,554(r1)
	PPC_STORE_U8(ctx.r1.u32 + 554, ctx.r31.u8);
	// stb r31,555(r1)
	PPC_STORE_U8(ctx.r1.u32 + 555, ctx.r31.u8);
	// stb r31,556(r1)
	PPC_STORE_U8(ctx.r1.u32 + 556, ctx.r31.u8);
	// stb r3,557(r1)
	PPC_STORE_U8(ctx.r1.u32 + 557, ctx.r3.u8);
	// stb r15,558(r1)
	PPC_STORE_U8(ctx.r1.u32 + 558, ctx.r15.u8);
	// stb r31,559(r1)
	PPC_STORE_U8(ctx.r1.u32 + 559, ctx.r31.u8);
	// stb r31,560(r1)
	PPC_STORE_U8(ctx.r1.u32 + 560, ctx.r31.u8);
	// stb r31,561(r1)
	PPC_STORE_U8(ctx.r1.u32 + 561, ctx.r31.u8);
	// stb r31,562(r1)
	PPC_STORE_U8(ctx.r1.u32 + 562, ctx.r31.u8);
	// stb r31,563(r1)
	PPC_STORE_U8(ctx.r1.u32 + 563, ctx.r31.u8);
	// stb r31,564(r1)
	PPC_STORE_U8(ctx.r1.u32 + 564, ctx.r31.u8);
	// stb r31,565(r1)
	PPC_STORE_U8(ctx.r1.u32 + 565, ctx.r31.u8);
	// stb r11,566(r1)
	PPC_STORE_U8(ctx.r1.u32 + 566, ctx.r11.u8);
	// stb r31,567(r1)
	PPC_STORE_U8(ctx.r1.u32 + 567, ctx.r31.u8);
	// stb r31,568(r1)
	PPC_STORE_U8(ctx.r1.u32 + 568, ctx.r31.u8);
	// stb r31,569(r1)
	PPC_STORE_U8(ctx.r1.u32 + 569, ctx.r31.u8);
	// stb r31,570(r1)
	PPC_STORE_U8(ctx.r1.u32 + 570, ctx.r31.u8);
	// stb r31,571(r1)
	PPC_STORE_U8(ctx.r1.u32 + 571, ctx.r31.u8);
	// stb r31,572(r1)
	PPC_STORE_U8(ctx.r1.u32 + 572, ctx.r31.u8);
	// stb r31,573(r1)
	PPC_STORE_U8(ctx.r1.u32 + 573, ctx.r31.u8);
	// stb r31,574(r1)
	PPC_STORE_U8(ctx.r1.u32 + 574, ctx.r31.u8);
	// stb r31,575(r1)
	PPC_STORE_U8(ctx.r1.u32 + 575, ctx.r31.u8);
	// stb r31,576(r1)
	PPC_STORE_U8(ctx.r1.u32 + 576, ctx.r31.u8);
	// stb r16,577(r1)
	PPC_STORE_U8(ctx.r1.u32 + 577, ctx.r16.u8);
	// stb r17,578(r1)
	PPC_STORE_U8(ctx.r1.u32 + 578, ctx.r17.u8);
	// stb r31,579(r1)
	PPC_STORE_U8(ctx.r1.u32 + 579, ctx.r31.u8);
	// stb r31,580(r1)
	PPC_STORE_U8(ctx.r1.u32 + 580, ctx.r31.u8);
	// stb r31,581(r1)
	PPC_STORE_U8(ctx.r1.u32 + 581, ctx.r31.u8);
	// stb r31,582(r1)
	PPC_STORE_U8(ctx.r1.u32 + 582, ctx.r31.u8);
	// stb r31,583(r1)
	PPC_STORE_U8(ctx.r1.u32 + 583, ctx.r31.u8);
	// stb r31,584(r1)
	PPC_STORE_U8(ctx.r1.u32 + 584, ctx.r31.u8);
	// stb r18,585(r1)
	PPC_STORE_U8(ctx.r1.u32 + 585, ctx.r18.u8);
	// stb r19,586(r1)
	PPC_STORE_U8(ctx.r1.u32 + 586, ctx.r19.u8);
	// stb r31,587(r1)
	PPC_STORE_U8(ctx.r1.u32 + 587, ctx.r31.u8);
	// stb r31,588(r1)
	PPC_STORE_U8(ctx.r1.u32 + 588, ctx.r31.u8);
	// stb r31,589(r1)
	PPC_STORE_U8(ctx.r1.u32 + 589, ctx.r31.u8);
	// stb r31,590(r1)
	PPC_STORE_U8(ctx.r1.u32 + 590, ctx.r31.u8);
	// stb r31,591(r1)
	PPC_STORE_U8(ctx.r1.u32 + 591, ctx.r31.u8);
	// stb r31,592(r1)
	PPC_STORE_U8(ctx.r1.u32 + 592, ctx.r31.u8);
	// stb r31,593(r1)
	PPC_STORE_U8(ctx.r1.u32 + 593, ctx.r31.u8);
	// stb r11,594(r1)
	PPC_STORE_U8(ctx.r1.u32 + 594, ctx.r11.u8);
	// stb r31,595(r1)
	PPC_STORE_U8(ctx.r1.u32 + 595, ctx.r31.u8);
	// stb r31,596(r1)
	PPC_STORE_U8(ctx.r1.u32 + 596, ctx.r31.u8);
	// stb r31,597(r1)
	PPC_STORE_U8(ctx.r1.u32 + 597, ctx.r31.u8);
	// stb r31,598(r1)
	PPC_STORE_U8(ctx.r1.u32 + 598, ctx.r31.u8);
	// stb r31,599(r1)
	PPC_STORE_U8(ctx.r1.u32 + 599, ctx.r31.u8);
	// stb r31,600(r1)
	PPC_STORE_U8(ctx.r1.u32 + 600, ctx.r31.u8);
	// stb r31,601(r1)
	PPC_STORE_U8(ctx.r1.u32 + 601, ctx.r31.u8);
	// stb r31,602(r1)
	PPC_STORE_U8(ctx.r1.u32 + 602, ctx.r31.u8);
	// stb r31,603(r1)
	PPC_STORE_U8(ctx.r1.u32 + 603, ctx.r31.u8);
	// stb r31,604(r1)
	PPC_STORE_U8(ctx.r1.u32 + 604, ctx.r31.u8);
	// stb r20,605(r1)
	PPC_STORE_U8(ctx.r1.u32 + 605, ctx.r20.u8);
	// stb r21,606(r1)
	PPC_STORE_U8(ctx.r1.u32 + 606, ctx.r21.u8);
	// stb r31,607(r1)
	PPC_STORE_U8(ctx.r1.u32 + 607, ctx.r31.u8);
	// stb r31,608(r1)
	PPC_STORE_U8(ctx.r1.u32 + 608, ctx.r31.u8);
	// stb r31,609(r1)
	PPC_STORE_U8(ctx.r1.u32 + 609, ctx.r31.u8);
	// stb r31,610(r1)
	PPC_STORE_U8(ctx.r1.u32 + 610, ctx.r31.u8);
	// stb r31,611(r1)
	PPC_STORE_U8(ctx.r1.u32 + 611, ctx.r31.u8);
	// stb r31,612(r1)
	PPC_STORE_U8(ctx.r1.u32 + 612, ctx.r31.u8);
	// stb r22,613(r1)
	PPC_STORE_U8(ctx.r1.u32 + 613, ctx.r22.u8);
	// stb r5,614(r1)
	PPC_STORE_U8(ctx.r1.u32 + 614, ctx.r5.u8);
	// stb r31,615(r1)
	PPC_STORE_U8(ctx.r1.u32 + 615, ctx.r31.u8);
	// stb r31,616(r1)
	PPC_STORE_U8(ctx.r1.u32 + 616, ctx.r31.u8);
	// stb r31,617(r1)
	PPC_STORE_U8(ctx.r1.u32 + 617, ctx.r31.u8);
	// stb r31,618(r1)
	PPC_STORE_U8(ctx.r1.u32 + 618, ctx.r31.u8);
	// stb r31,619(r1)
	PPC_STORE_U8(ctx.r1.u32 + 619, ctx.r31.u8);
	// stb r31,620(r1)
	PPC_STORE_U8(ctx.r1.u32 + 620, ctx.r31.u8);
	// stb r31,621(r1)
	PPC_STORE_U8(ctx.r1.u32 + 621, ctx.r31.u8);
	// stb r11,622(r1)
	PPC_STORE_U8(ctx.r1.u32 + 622, ctx.r11.u8);
	// stb r31,623(r1)
	PPC_STORE_U8(ctx.r1.u32 + 623, ctx.r31.u8);
	// stb r31,624(r1)
	PPC_STORE_U8(ctx.r1.u32 + 624, ctx.r31.u8);
	// stb r31,625(r1)
	PPC_STORE_U8(ctx.r1.u32 + 625, ctx.r31.u8);
	// stb r31,626(r1)
	PPC_STORE_U8(ctx.r1.u32 + 626, ctx.r31.u8);
	// stb r31,627(r1)
	PPC_STORE_U8(ctx.r1.u32 + 627, ctx.r31.u8);
	// stb r31,628(r1)
	PPC_STORE_U8(ctx.r1.u32 + 628, ctx.r31.u8);
	// stb r31,629(r1)
	PPC_STORE_U8(ctx.r1.u32 + 629, ctx.r31.u8);
	// stb r31,630(r1)
	PPC_STORE_U8(ctx.r1.u32 + 630, ctx.r31.u8);
	// stb r31,631(r1)
	PPC_STORE_U8(ctx.r1.u32 + 631, ctx.r31.u8);
	// stb r31,632(r1)
	PPC_STORE_U8(ctx.r1.u32 + 632, ctx.r31.u8);
	// stb r29,633(r1)
	PPC_STORE_U8(ctx.r1.u32 + 633, ctx.r29.u8);
	// stb r23,634(r1)
	PPC_STORE_U8(ctx.r1.u32 + 634, ctx.r23.u8);
	// stb r31,635(r1)
	PPC_STORE_U8(ctx.r1.u32 + 635, ctx.r31.u8);
	// stb r31,636(r1)
	PPC_STORE_U8(ctx.r1.u32 + 636, ctx.r31.u8);
	// stb r31,637(r1)
	PPC_STORE_U8(ctx.r1.u32 + 637, ctx.r31.u8);
	// stb r31,638(r1)
	PPC_STORE_U8(ctx.r1.u32 + 638, ctx.r31.u8);
	// stb r31,639(r1)
	PPC_STORE_U8(ctx.r1.u32 + 639, ctx.r31.u8);
	// stb r31,640(r1)
	PPC_STORE_U8(ctx.r1.u32 + 640, ctx.r31.u8);
	// stb r9,641(r1)
	PPC_STORE_U8(ctx.r1.u32 + 641, ctx.r9.u8);
	// stb r10,642(r1)
	PPC_STORE_U8(ctx.r1.u32 + 642, ctx.r10.u8);
	// stb r31,643(r1)
	PPC_STORE_U8(ctx.r1.u32 + 643, ctx.r31.u8);
	// stb r31,644(r1)
	PPC_STORE_U8(ctx.r1.u32 + 644, ctx.r31.u8);
	// stb r31,645(r1)
	PPC_STORE_U8(ctx.r1.u32 + 645, ctx.r31.u8);
	// stb r31,646(r1)
	PPC_STORE_U8(ctx.r1.u32 + 646, ctx.r31.u8);
	// stb r31,647(r1)
	PPC_STORE_U8(ctx.r1.u32 + 647, ctx.r31.u8);
	// stb r31,648(r1)
	PPC_STORE_U8(ctx.r1.u32 + 648, ctx.r31.u8);
	// stb r31,649(r1)
	PPC_STORE_U8(ctx.r1.u32 + 649, ctx.r31.u8);
	// stb r31,650(r1)
	PPC_STORE_U8(ctx.r1.u32 + 650, ctx.r31.u8);
	// stb r31,651(r1)
	PPC_STORE_U8(ctx.r1.u32 + 651, ctx.r31.u8);
	// stb r31,652(r1)
	PPC_STORE_U8(ctx.r1.u32 + 652, ctx.r31.u8);
	// stb r31,653(r1)
	PPC_STORE_U8(ctx.r1.u32 + 653, ctx.r31.u8);
	// stb r31,654(r1)
	PPC_STORE_U8(ctx.r1.u32 + 654, ctx.r31.u8);
	// stb r31,655(r1)
	PPC_STORE_U8(ctx.r1.u32 + 655, ctx.r31.u8);
	// stb r31,656(r1)
	PPC_STORE_U8(ctx.r1.u32 + 656, ctx.r31.u8);
	// stb r31,657(r1)
	PPC_STORE_U8(ctx.r1.u32 + 657, ctx.r31.u8);
	// stb r31,658(r1)
	PPC_STORE_U8(ctx.r1.u32 + 658, ctx.r31.u8);
	// stb r31,659(r1)
	PPC_STORE_U8(ctx.r1.u32 + 659, ctx.r31.u8);
	// stb r31,660(r1)
	PPC_STORE_U8(ctx.r1.u32 + 660, ctx.r31.u8);
	// stb r26,661(r1)
	PPC_STORE_U8(ctx.r1.u32 + 661, ctx.r26.u8);
	// stb r27,662(r1)
	PPC_STORE_U8(ctx.r1.u32 + 662, ctx.r27.u8);
	// stb r31,663(r1)
	PPC_STORE_U8(ctx.r1.u32 + 663, ctx.r31.u8);
	// stb r31,664(r1)
	PPC_STORE_U8(ctx.r1.u32 + 664, ctx.r31.u8);
	// stb r31,665(r1)
	PPC_STORE_U8(ctx.r1.u32 + 665, ctx.r31.u8);
	// stb r31,666(r1)
	PPC_STORE_U8(ctx.r1.u32 + 666, ctx.r31.u8);
	// stb r31,667(r1)
	PPC_STORE_U8(ctx.r1.u32 + 667, ctx.r31.u8);
	// stb r31,668(r1)
	PPC_STORE_U8(ctx.r1.u32 + 668, ctx.r31.u8);
	// li r11,134
	ctx.r11.s64 = 134;
	// ld r30,760(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + 760);
	// li r10,83
	ctx.r10.s64 = 83;
	// stb r5,707(r1)
	PPC_STORE_U8(ctx.r1.u32 + 707, ctx.r5.u8);
	// li r9,73
	ctx.r9.s64 = 73;
	// stb r5,710(r1)
	PPC_STORE_U8(ctx.r1.u32 + 710, ctx.r5.u8);
	// li r8,98
	ctx.r8.s64 = 98;
	// stb r3,669(r1)
	PPC_STORE_U8(ctx.r1.u32 + 669, ctx.r3.u8);
	// stb r31,671(r1)
	PPC_STORE_U8(ctx.r1.u32 + 671, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r11,670(r1)
	PPC_STORE_U8(ctx.r1.u32 + 670, ctx.r11.u8);
	// li r11,24
	ctx.r11.s64 = 24;
	// stb r10,698(r1)
	PPC_STORE_U8(ctx.r1.u32 + 698, ctx.r10.u8);
	// li r10,80
	ctx.r10.s64 = 80;
	// stb r31,672(r1)
	PPC_STORE_U8(ctx.r1.u32 + 672, ctx.r31.u8);
	// li r5,677
	ctx.r5.s64 = 677;
	// stb r31,673(r1)
	PPC_STORE_U8(ctx.r1.u32 + 673, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,674(r1)
	PPC_STORE_U8(ctx.r1.u32 + 674, ctx.r31.u8);
	// stb r11,686(r1)
	PPC_STORE_U8(ctx.r1.u32 + 686, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r10,699(r1)
	PPC_STORE_U8(ctx.r1.u32 + 699, ctx.r10.u8);
	// li r10,68
	ctx.r10.s64 = 68;
	// stb r31,675(r1)
	PPC_STORE_U8(ctx.r1.u32 + 675, ctx.r31.u8);
	// stb r31,676(r1)
	PPC_STORE_U8(ctx.r1.u32 + 676, ctx.r31.u8);
	// stb r6,677(r1)
	PPC_STORE_U8(ctx.r1.u32 + 677, ctx.r6.u8);
	// stb r11,694(r1)
	PPC_STORE_U8(ctx.r1.u32 + 694, ctx.r11.u8);
	// li r11,115
	ctx.r11.s64 = 115;
	// stb r10,701(r1)
	PPC_STORE_U8(ctx.r1.u32 + 701, ctx.r10.u8);
	// li r10,76
	ctx.r10.s64 = 76;
	// stb r7,678(r1)
	PPC_STORE_U8(ctx.r1.u32 + 678, ctx.r7.u8);
	// stb r31,679(r1)
	PPC_STORE_U8(ctx.r1.u32 + 679, ctx.r31.u8);
	// stb r31,680(r1)
	PPC_STORE_U8(ctx.r1.u32 + 680, ctx.r31.u8);
	// stb r11,696(r1)
	PPC_STORE_U8(ctx.r1.u32 + 696, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r10,702(r1)
	PPC_STORE_U8(ctx.r1.u32 + 702, ctx.r10.u8);
	// li r10,65
	ctx.r10.s64 = 65;
	// stb r31,681(r1)
	PPC_STORE_U8(ctx.r1.u32 + 681, ctx.r31.u8);
	// stb r31,682(r1)
	PPC_STORE_U8(ctx.r1.u32 + 682, ctx.r31.u8);
	// stb r31,683(r1)
	PPC_STORE_U8(ctx.r1.u32 + 683, ctx.r31.u8);
	// stb r11,697(r1)
	PPC_STORE_U8(ctx.r1.u32 + 697, ctx.r11.u8);
	// stb r11,700(r1)
	PPC_STORE_U8(ctx.r1.u32 + 700, ctx.r11.u8);
	// stb r11,704(r1)
	PPC_STORE_U8(ctx.r1.u32 + 704, ctx.r11.u8);
	// li r11,118
	ctx.r11.s64 = 118;
	// stb r31,684(r1)
	PPC_STORE_U8(ctx.r1.u32 + 684, ctx.r31.u8);
	// stb r31,685(r1)
	PPC_STORE_U8(ctx.r1.u32 + 685, ctx.r31.u8);
	// stb r31,687(r1)
	PPC_STORE_U8(ctx.r1.u32 + 687, ctx.r31.u8);
	// stb r31,688(r1)
	PPC_STORE_U8(ctx.r1.u32 + 688, ctx.r31.u8);
	// stb r11,706(r1)
	PPC_STORE_U8(ctx.r1.u32 + 706, ctx.r11.u8);
	// li r11,105
	ctx.r11.s64 = 105;
	// stb r31,689(r1)
	PPC_STORE_U8(ctx.r1.u32 + 689, ctx.r31.u8);
	// stb r31,690(r1)
	PPC_STORE_U8(ctx.r1.u32 + 690, ctx.r31.u8);
	// stb r31,691(r1)
	PPC_STORE_U8(ctx.r1.u32 + 691, ctx.r31.u8);
	// stb r31,692(r1)
	PPC_STORE_U8(ctx.r1.u32 + 692, ctx.r31.u8);
	// stb r11,708(r1)
	PPC_STORE_U8(ctx.r1.u32 + 708, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// stb r31,693(r1)
	PPC_STORE_U8(ctx.r1.u32 + 693, ctx.r31.u8);
	// stb r9,695(r1)
	PPC_STORE_U8(ctx.r1.u32 + 695, ctx.r9.u8);
	// stb r25,703(r1)
	PPC_STORE_U8(ctx.r1.u32 + 703, ctx.r25.u8);
	// stb r10,705(r1)
	PPC_STORE_U8(ctx.r1.u32 + 705, ctx.r10.u8);
	// stb r11,709(r1)
	PPC_STORE_U8(ctx.r1.u32 + 709, ctx.r11.u8);
	// stb r11,712(r1)
	PPC_STORE_U8(ctx.r1.u32 + 712, ctx.r11.u8);
	// li r11,101
	ctx.r11.s64 = 101;
	// stb r8,711(r1)
	PPC_STORE_U8(ctx.r1.u32 + 711, ctx.r8.u8);
	// stb r31,714(r1)
	PPC_STORE_U8(ctx.r1.u32 + 714, ctx.r31.u8);
	// stb r31,715(r1)
	PPC_STORE_U8(ctx.r1.u32 + 715, ctx.r31.u8);
	// stb r31,716(r1)
	PPC_STORE_U8(ctx.r1.u32 + 716, ctx.r31.u8);
	// stb r11,713(r1)
	PPC_STORE_U8(ctx.r1.u32 + 713, ctx.r11.u8);
	// li r11,55
	ctx.r11.s64 = 55;
	// stb r3,717(r1)
	PPC_STORE_U8(ctx.r1.u32 + 717, ctx.r3.u8);
	// stb r31,719(r1)
	PPC_STORE_U8(ctx.r1.u32 + 719, ctx.r31.u8);
	// stb r31,720(r1)
	PPC_STORE_U8(ctx.r1.u32 + 720, ctx.r31.u8);
	// stb r31,721(r1)
	PPC_STORE_U8(ctx.r1.u32 + 721, ctx.r31.u8);
	// stb r11,718(r1)
	PPC_STORE_U8(ctx.r1.u32 + 718, ctx.r11.u8);
	// stb r31,722(r1)
	PPC_STORE_U8(ctx.r1.u32 + 722, ctx.r31.u8);
	// stb r31,723(r1)
	PPC_STORE_U8(ctx.r1.u32 + 723, ctx.r31.u8);
	// stb r31,724(r1)
	PPC_STORE_U8(ctx.r1.u32 + 724, ctx.r31.u8);
	// stb r6,725(r1)
	PPC_STORE_U8(ctx.r1.u32 + 725, ctx.r6.u8);
	// stb r7,726(r1)
	PPC_STORE_U8(ctx.r1.u32 + 726, ctx.r7.u8);
	// stb r31,727(r1)
	PPC_STORE_U8(ctx.r1.u32 + 727, ctx.r31.u8);
	// stb r31,728(r1)
	PPC_STORE_U8(ctx.r1.u32 + 728, ctx.r31.u8);
	// li r11,10
	ctx.r11.s64 = 10;
	// stb r31,729(r1)
	PPC_STORE_U8(ctx.r1.u32 + 729, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,730(r1)
	PPC_STORE_U8(ctx.r1.u32 + 730, ctx.r31.u8);
	// stb r31,731(r1)
	PPC_STORE_U8(ctx.r1.u32 + 731, ctx.r31.u8);
	// stb r31,732(r1)
	PPC_STORE_U8(ctx.r1.u32 + 732, ctx.r31.u8);
	// stb r31,733(r1)
	PPC_STORE_U8(ctx.r1.u32 + 733, ctx.r31.u8);
	// stb r11,734(r1)
	PPC_STORE_U8(ctx.r1.u32 + 734, ctx.r11.u8);
	// li r11,6
	ctx.r11.s64 = 6;
	// stb r31,735(r1)
	PPC_STORE_U8(ctx.r1.u32 + 735, ctx.r31.u8);
	// stb r31,736(r1)
	PPC_STORE_U8(ctx.r1.u32 + 736, ctx.r31.u8);
	// stb r31,737(r1)
	PPC_STORE_U8(ctx.r1.u32 + 737, ctx.r31.u8);
	// stb r31,738(r1)
	PPC_STORE_U8(ctx.r1.u32 + 738, ctx.r31.u8);
	// stb r11,742(r1)
	PPC_STORE_U8(ctx.r1.u32 + 742, ctx.r11.u8);
	// li r11,79
	ctx.r11.s64 = 79;
	// stb r31,739(r1)
	PPC_STORE_U8(ctx.r1.u32 + 739, ctx.r31.u8);
	// stb r31,740(r1)
	PPC_STORE_U8(ctx.r1.u32 + 740, ctx.r31.u8);
	// stb r31,741(r1)
	PPC_STORE_U8(ctx.r1.u32 + 741, ctx.r31.u8);
	// stb r10,743(r1)
	PPC_STORE_U8(ctx.r1.u32 + 743, ctx.r10.u8);
	// stb r11,744(r1)
	PPC_STORE_U8(ctx.r1.u32 + 744, ctx.r11.u8);
	// li r11,50
	ctx.r11.s64 = 50;
	// stb r9,747(r1)
	PPC_STORE_U8(ctx.r1.u32 + 747, ctx.r9.u8);
	// stb r31,748(r1)
	PPC_STORE_U8(ctx.r1.u32 + 748, ctx.r31.u8);
	// stb r31,749(r1)
	PPC_STORE_U8(ctx.r1.u32 + 749, ctx.r31.u8);
	// stb r31,750(r1)
	PPC_STORE_U8(ctx.r1.u32 + 750, ctx.r31.u8);
	// stb r11,745(r1)
	PPC_STORE_U8(ctx.r1.u32 + 745, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r26,751(r1)
	PPC_STORE_U8(ctx.r1.u32 + 751, ctx.r26.u8);
	// stb r27,752(r1)
	PPC_STORE_U8(ctx.r1.u32 + 752, ctx.r27.u8);
	// stb r31,753(r1)
	PPC_STORE_U8(ctx.r1.u32 + 753, ctx.r31.u8);
	// stb r31,754(r1)
	PPC_STORE_U8(ctx.r1.u32 + 754, ctx.r31.u8);
	// stb r11,746(r1)
	PPC_STORE_U8(ctx.r1.u32 + 746, ctx.r11.u8);
	// stb r31,755(r1)
	PPC_STORE_U8(ctx.r1.u32 + 755, ctx.r31.u8);
	// stb r31,756(r1)
	PPC_STORE_U8(ctx.r1.u32 + 756, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495774;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,928
	ctx.r1.s64 = ctx.r1.s64 + 928;
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495788"))) PPC_WEAK_FUNC(sub_82495788);
PPC_FUNC_IMPL(__imp__sub_82495788) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495790;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27104
	ctx.r4.s64 = ctx.r10.s64 + 27104;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824957CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,91
	ctx.r11.s64 = 91;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,32
	ctx.r9.s64 = 32;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,253
	ctx.r11.s64 = 253;
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,35
	ctx.r11.s64 = 35;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824958C4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824958D8"))) PPC_WEAK_FUNC(sub_824958D8);
PPC_FUNC_IMPL(__imp__sub_824958D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824958E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27120
	ctx.r4.s64 = ctx.r10.s64 + 27120;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249591C;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,86
	ctx.r9.s64 = 86;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,92
	ctx.r11.s64 = 92;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,32
	ctx.r9.s64 = 32;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495A00;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495A10"))) PPC_WEAK_FUNC(sub_82495A10);
PPC_FUNC_IMPL(__imp__sub_82495A10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495A18;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27132
	ctx.r4.s64 = ctx.r10.s64 + 27132;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82495A54;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,69
	ctx.r9.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,93
	ctx.r11.s64 = 93;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,87
	ctx.r11.s64 = 87;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495B38;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495B48"))) PPC_WEAK_FUNC(sub_82495B48);
PPC_FUNC_IMPL(__imp__sub_82495B48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495B50;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// addi r4,r10,29676
	ctx.r4.s64 = ctx.r10.s64 + 29676;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82495B8C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,69
	ctx.r9.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,94
	ctx.r11.s64 = 94;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495C70;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495C80"))) PPC_WEAK_FUNC(sub_82495C80);
PPC_FUNC_IMPL(__imp__sub_82495C80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495C88;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// addi r4,r10,30996
	ctx.r4.s64 = ctx.r10.s64 + 30996;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82495CC4;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,89
	ctx.r9.s64 = 89;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,95
	ctx.r11.s64 = 95;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,192
	ctx.r9.s64 = 192;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495DB0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495DC0"))) PPC_WEAK_FUNC(sub_82495DC0);
PPC_FUNC_IMPL(__imp__sub_82495DC0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495DC8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// addi r4,r10,-3196
	ctx.r4.s64 = ctx.r10.s64 + -3196;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82495E04;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,90
	ctx.r9.s64 = 90;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,96
	ctx.r11.s64 = 96;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,192
	ctx.r9.s64 = 192;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82495EF0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82495F00"))) PPC_WEAK_FUNC(sub_82495F00);
PPC_FUNC_IMPL(__imp__sub_82495F00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82495F08;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// addi r4,r10,29620
	ctx.r4.s64 = ctx.r10.s64 + 29620;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82495F44;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,69
	ctx.r9.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,97
	ctx.r11.s64 = 97;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,91
	ctx.r11.s64 = 91;
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r11,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r11.u8);
	// li r11,64
	ctx.r11.s64 = 64;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496028;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496038"))) PPC_WEAK_FUNC(sub_82496038);
PPC_FUNC_IMPL(__imp__sub_82496038) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496040;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,22632
	ctx.r4.s64 = ctx.r10.s64 + 22632;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249607C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,98
	ctx.r11.s64 = 98;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,5
	ctx.r9.s64 = 5;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8249615C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496170"))) PPC_WEAK_FUNC(sub_82496170);
PPC_FUNC_IMPL(__imp__sub_82496170) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496178;
	__savegprlr_29(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,75
	ctx.r9.s64 = 75;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27156
	ctx.r4.s64 = ctx.r10.s64 + 27156;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824961B4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,92
	ctx.r10.s64 = 92;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r8,129
	ctx.r8.s64 = 129;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r9,93
	ctx.r9.s64 = 93;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r10,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r10.u8);
	// li r10,36
	ctx.r10.s64 = 36;
	// stb r8,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r8.u8);
	// li r8,45
	ctx.r8.s64 = 45;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// li r10,3
	ctx.r10.s64 = 3;
	// stb r8,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r10,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r10.u8);
	// li r10,198
	ctx.r10.s64 = 198;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r10,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r10.u8);
	// li r10,16
	ctx.r10.s64 = 16;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r11.u8);
	// stb r11,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r11.u8);
	// li r11,249
	ctx.r11.s64 = 249;
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r9,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r9.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r11,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r11,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// stb r8,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r8.u8);
	// stb r31,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r31.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// li r8,87
	ctx.r8.s64 = 87;
	// stb r11,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r10,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r10.u8);
	// li r10,58
	ctx.r10.s64 = 58;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r31.u8);
	// li r5,75
	ctx.r5.s64 = 75;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r8,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r8.u8);
	// li r8,22
	ctx.r8.s64 = 22;
	// stb r11,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r10,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r10.u8);
	// li r10,8
	ctx.r10.s64 = 8;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r9,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r9.u8);
	// stb r8,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r8.u8);
	// stb r11,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r11.u8);
	// stb r11,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r11.u8);
	// li r11,54
	ctx.r11.s64 = 54;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,147
	ctx.r11.s64 = 147;
	// stb r10,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r10.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r31.u8);
	// stb r31,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8249635C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496370"))) PPC_WEAK_FUNC(sub_82496370);
PPC_FUNC_IMPL(__imp__sub_82496370) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496378;
	__savegprlr_29(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,127
	ctx.r9.s64 = 127;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27176
	ctx.r4.s64 = ctx.r10.s64 + 27176;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824963B4;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,94
	ctx.r10.s64 = 94;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r8,2
	ctx.r8.s64 = 2;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,100
	ctx.r11.s64 = 100;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// stb r10,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r10.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r8,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r8.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r11.u8);
	// li r7,1
	ctx.r7.s64 = 1;
	// stb r11,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// li r5,127
	ctx.r5.s64 = 127;
	// stb r31,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r7,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r7.u8);
	// li r7,54
	ctx.r7.s64 = 54;
	// stb r11,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r31.u8);
	// stb r7,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r7.u8);
	// li r7,147
	ctx.r7.s64 = 147;
	// stb r11,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r11.u8);
	// li r11,41
	ctx.r11.s64 = 41;
	// stb r31,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r31.u8);
	// stb r31,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r31.u8);
	// stb r31,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r31.u8);
	// stb r7,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r7.u8);
	// li r7,8
	ctx.r7.s64 = 8;
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,82
	ctx.r11.s64 = 82;
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r9,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r9.u8);
	// stb r10,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r10.u8);
	// stb r7,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r7.u8);
	// li r7,4
	ctx.r7.s64 = 4;
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r7,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r7.u8);
	// li r7,190
	ctx.r7.s64 = 190;
	// stb r11,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r7,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r7.u8);
	// stb r11,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r11.u8);
	// li r11,37
	ctx.r11.s64 = 37;
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r31.u8);
	// stb r8,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r8.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r10,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r10.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r31,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r31.u8);
	// stb r31,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r31.u8);
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// stb r31,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r31.u8);
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r31,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r31.u8);
	// li r11,96
	ctx.r11.s64 = 96;
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r9,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r9.u8);
	// stb r11,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x8249661C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496630"))) PPC_WEAK_FUNC(sub_82496630);
PPC_FUNC_IMPL(__imp__sub_82496630) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496638;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,12
	ctx.r9.s64 = 12;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27208
	ctx.r4.s64 = ctx.r10.s64 + 27208;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82496674;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,12
	ctx.r5.s64 = 12;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,101
	ctx.r11.s64 = 101;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824966C8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824966D8"))) PPC_WEAK_FUNC(sub_824966D8);
PPC_FUNC_IMPL(__imp__sub_824966D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824966E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// addi r4,r10,30432
	ctx.r4.s64 = ctx.r10.s64 + 30432;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249671C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,102
	ctx.r11.s64 = 102;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824967F8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496808"))) PPC_WEAK_FUNC(sub_82496808);
PPC_FUNC_IMPL(__imp__sub_82496808) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496810;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// addi r4,r10,29676
	ctx.r4.s64 = ctx.r10.s64 + 29676;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249684C;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,97
	ctx.r9.s64 = 97;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,103
	ctx.r11.s64 = 103;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,192
	ctx.r9.s64 = 192;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496938;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496948"))) PPC_WEAK_FUNC(sub_82496948);
PPC_FUNC_IMPL(__imp__sub_82496948) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496950;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// addi r4,r10,-3196
	ctx.r4.s64 = ctx.r10.s64 + -3196;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249698C;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,98
	ctx.r9.s64 = 98;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,104
	ctx.r11.s64 = 104;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// li r9,192
	ctx.r9.s64 = 192;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r9.u8);
	// li r9,2
	ctx.r9.s64 = 2;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r9.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496A78;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496A88"))) PPC_WEAK_FUNC(sub_82496A88);
PPC_FUNC_IMPL(__imp__sub_82496A88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496A90;
	__savegprlr_29(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,115
	ctx.r9.s64 = 115;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27252
	ctx.r4.s64 = ctx.r10.s64 + 27252;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82496ACC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,2
	ctx.r10.s64 = 2;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,105
	ctx.r11.s64 = 105;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,126
	ctx.r11.s64 = 126;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r31.u8);
	// stb r31,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r11,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r11.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r11.u8);
	// stb r11,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r11.u8);
	// stb r11,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r11.u8);
	// stb r11,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r11.u8);
	// stb r11,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r11.u8);
	// stb r11,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r11.u8);
	// stb r11,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r11.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// stb r11,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r11.u8);
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r31.u8);
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r10,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r10.u8);
	// stb r31,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r31.u8);
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r8,8
	ctx.r8.s64 = 8;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r31.u8);
	// li r5,115
	ctx.r5.s64 = 115;
	// stb r31,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r31.u8);
	// stb r8,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r8.u8);
	// li r8,4
	ctx.r8.s64 = 4;
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// li r11,52
	ctx.r11.s64 = 52;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// stb r31,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r31.u8);
	// stb r31,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r31.u8);
	// stb r8,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r8.u8);
	// li r8,190
	ctx.r8.s64 = 190;
	// stb r11,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r11.u8);
	// li r11,41
	ctx.r11.s64 = 41;
	// stb r31,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r31.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r8,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r8.u8);
	// stb r11,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r11.u8);
	// li r11,82
	ctx.r11.s64 = 82;
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r31,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r31.u8);
	// stb r31,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r31.u8);
	// stb r11,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r11.u8);
	// li r11,70
	ctx.r11.s64 = 70;
	// stb r31,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r31.u8);
	// stb r10,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r10.u8);
	// stb r31,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r31.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// li r11,61
	ctx.r11.s64 = 61;
	// stb r31,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r31.u8);
	// stb r31,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r31.u8);
	// stb r31,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r31.u8);
	// stb r31,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r31.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// li r11,94
	ctx.r11.s64 = 94;
	// stb r31,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r31.u8);
	// stb r31,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r31.u8);
	// stb r31,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r31.u8);
	// stb r31,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r31.u8);
	// stb r11,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r11.u8);
	// li r11,37
	ctx.r11.s64 = 37;
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r11,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r11.u8);
	// li r11,101
	ctx.r11.s64 = 101;
	// stb r31,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r31.u8);
	// stb r31,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r31.u8);
	// stb r31,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r31.u8);
	// stb r31,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r31.u8);
	// stb r31,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r31.u8);
	// stb r31,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r31.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// stb r31,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r31.u8);
	// stb r31,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r31.u8);
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r9,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r9.u8);
	// stb r11,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496CFC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496D10"))) PPC_WEAK_FUNC(sub_82496D10);
PPC_FUNC_IMPL(__imp__sub_82496D10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496D18;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,12
	ctx.r9.s64 = 12;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27296
	ctx.r4.s64 = ctx.r10.s64 + 27296;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82496D54;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r5,12
	ctx.r5.s64 = 12;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,106
	ctx.r11.s64 = 106;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496DA8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496DB8"))) PPC_WEAK_FUNC(sub_82496DB8);
PPC_FUNC_IMPL(__imp__sub_82496DB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496DC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27348
	ctx.r4.s64 = ctx.r10.s64 + 27348;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82496DFC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,107
	ctx.r11.s64 = 107;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,253
	ctx.r11.s64 = 253;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,76
	ctx.r11.s64 = 76;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82496EF0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82496F00"))) PPC_WEAK_FUNC(sub_82496F00);
PPC_FUNC_IMPL(__imp__sub_82496F00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82496F08;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27348
	ctx.r4.s64 = ctx.r10.s64 + 27348;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82496F44;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,79
	ctx.r9.s64 = 79;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,225
	ctx.r9.s64 = 225;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,102
	ctx.r11.s64 = 102;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497040;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497050"))) PPC_WEAK_FUNC(sub_82497050);
PPC_FUNC_IMPL(__imp__sub_82497050) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497058;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27356
	ctx.r4.s64 = ctx.r10.s64 + 27356;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497094;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,109
	ctx.r11.s64 = 109;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,111
	ctx.r9.s64 = 111;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497174;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497188"))) PPC_WEAK_FUNC(sub_82497188);
PPC_FUNC_IMPL(__imp__sub_82497188) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497190;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27376
	ctx.r4.s64 = ctx.r10.s64 + 27376;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824971CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,110
	ctx.r11.s64 = 110;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824972A8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824972B8"))) PPC_WEAK_FUNC(sub_824972B8);
PPC_FUNC_IMPL(__imp__sub_824972B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824972C0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27392
	ctx.r4.s64 = ctx.r10.s64 + 27392;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824972FC;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,105
	ctx.r9.s64 = 105;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,111
	ctx.r11.s64 = 111;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824973E0;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824973F0"))) PPC_WEAK_FUNC(sub_824973F0);
PPC_FUNC_IMPL(__imp__sub_824973F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824973F8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27416
	ctx.r4.s64 = ctx.r10.s64 + 27416;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497434;
	sub_822E0818(ctx, base);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,106
	ctx.r9.s64 = 106;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,112
	ctx.r11.s64 = 112;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497518;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497528"))) PPC_WEAK_FUNC(sub_82497528);
PPC_FUNC_IMPL(__imp__sub_82497528) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497530;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27440
	ctx.r4.s64 = ctx.r10.s64 + 27440;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249756C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,113
	ctx.r11.s64 = 113;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497648;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497658"))) PPC_WEAK_FUNC(sub_82497658);
PPC_FUNC_IMPL(__imp__sub_82497658) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497660;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27468
	ctx.r4.s64 = ctx.r10.s64 + 27468;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249769C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,114
	ctx.r11.s64 = 114;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497778;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497788"))) PPC_WEAK_FUNC(sub_82497788);
PPC_FUNC_IMPL(__imp__sub_82497788) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497790;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27468
	ctx.r4.s64 = ctx.r10.s64 + 27468;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824977CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,128
	ctx.r9.s64 = 128;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,115
	ctx.r11.s64 = 115;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,170
	ctx.r9.s64 = 170;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// li r9,64
	ctx.r9.s64 = 64;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,109
	ctx.r11.s64 = 109;
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r9,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r9.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x824978C8;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824978D8"))) PPC_WEAK_FUNC(sub_824978D8);
PPC_FUNC_IMPL(__imp__sub_824978D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824978E0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27440
	ctx.r4.s64 = ctx.r10.s64 + 27440;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249791C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r8,110
	ctx.r8.s64 = 110;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,69
	ctx.r9.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r10,77
	ctx.r10.s64 = 77;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,116
	ctx.r11.s64 = 116;
	// stb r8,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r8.u8);
	// li r8,1
	ctx.r8.s64 = 1;
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r9,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r9.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,232
	ctx.r11.s64 = 232;
	// stb r8,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r8.u8);
	// li r8,64
	ctx.r8.s64 = 64;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,108
	ctx.r11.s64 = 108;
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r8,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r8.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r9,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r9.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r31,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497A14;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497A28"))) PPC_WEAK_FUNC(sub_82497A28);
PPC_FUNC_IMPL(__imp__sub_82497A28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497A30;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27492
	ctx.r4.s64 = ctx.r10.s64 + 27492;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497A6C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,117
	ctx.r11.s64 = 117;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497B44;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497B58"))) PPC_WEAK_FUNC(sub_82497B58);
PPC_FUNC_IMPL(__imp__sub_82497B58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497B60;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,48
	ctx.r9.s64 = 48;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27516
	ctx.r4.s64 = ctx.r10.s64 + 27516;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497B9C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,35
	ctx.r9.s64 = 35;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,48
	ctx.r5.s64 = 48;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,118
	ctx.r11.s64 = 118;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,111
	ctx.r9.s64 = 111;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r11.u8);
	// stb r11,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r11.u8);
	// li r11,254
	ctx.r11.s64 = 254;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r11,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r11.u8);
	// li r11,45
	ctx.r11.s64 = 45;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497C98;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497CA8"))) PPC_WEAK_FUNC(sub_82497CA8);
PPC_FUNC_IMPL(__imp__sub_82497CA8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497CB0;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27544
	ctx.r4.s64 = ctx.r10.s64 + 27544;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497CEC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,119
	ctx.r11.s64 = 119;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,113
	ctx.r9.s64 = 113;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497DCC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497DE0"))) PPC_WEAK_FUNC(sub_82497DE0);
PPC_FUNC_IMPL(__imp__sub_82497DE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497DE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27576
	ctx.r4.s64 = ctx.r10.s64 + 27576;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497E24;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,120
	ctx.r11.s64 = 120;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,114
	ctx.r9.s64 = 114;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,4
	ctx.r9.s64 = 4;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82497F04;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82497F18"))) PPC_WEAK_FUNC(sub_82497F18);
PPC_FUNC_IMPL(__imp__sub_82497F18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82497F20;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27604
	ctx.r4.s64 = ctx.r10.s64 + 27604;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82497F5C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,121
	ctx.r11.s64 = 121;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,115
	ctx.r9.s64 = 115;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x8249803C;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82498050"))) PPC_WEAK_FUNC(sub_82498050);
PPC_FUNC_IMPL(__imp__sub_82498050) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82498058;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27632
	ctx.r4.s64 = ctx.r10.s64 + 27632;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82498094;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,232
	ctx.r9.s64 = 232;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,122
	ctx.r11.s64 = 122;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,116
	ctx.r9.s64 = 116;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82498174;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82498188"))) PPC_WEAK_FUNC(sub_82498188);
PPC_FUNC_IMPL(__imp__sub_82498188) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82498190;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27656
	ctx.r4.s64 = ctx.r10.s64 + 27656;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824981CC;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,35
	ctx.r9.s64 = 35;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,123
	ctx.r11.s64 = 123;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,161
	ctx.r9.s64 = 161;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824982AC;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824982C0"))) PPC_WEAK_FUNC(sub_824982C0);
PPC_FUNC_IMPL(__imp__sub_824982C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x824982C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27684
	ctx.r4.s64 = ctx.r10.s64 + 27684;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82498304;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r9,30
	ctx.r9.s64 = 30;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,124
	ctx.r11.s64 = 124;
	// stb r9,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r9.u8);
	// li r9,126
	ctx.r9.s64 = 126;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r9,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r9.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x824983E4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_824983F8"))) PPC_WEAK_FUNC(sub_824983F8);
PPC_FUNC_IMPL(__imp__sub_824983F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82498400;
	__savegprlr_27(ctx, base);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,157
	ctx.r9.s64 = 157;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27720
	ctx.r4.s64 = ctx.r10.s64 + 27720;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x8249843C;
	sub_822E0818(ctx, base);
	// li r10,253
	ctx.r10.s64 = 253;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r28,248
	ctx.r28.s64 = 248;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r6,5
	ctx.r6.s64 = 5;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r4,154
	ctx.r4.s64 = 154;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// li r10,39
	ctx.r10.s64 = 39;
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,125
	ctx.r11.s64 = 125;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// li r7,25
	ctx.r7.s64 = 25;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// li r10,26
	ctx.r10.s64 = 26;
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r28,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r28.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r10,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r10.u8);
	// li r10,65
	ctx.r10.s64 = 65;
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r10,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r10.u8);
	// li r10,119
	ctx.r10.s64 = 119;
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r10,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r10.u8);
	// li r10,98
	ctx.r10.s64 = 98;
	// stb r11,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r11.u8);
	// stb r11,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r11.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// li r10,7
	ctx.r10.s64 = 7;
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r10,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r10.u8);
	// li r10,95
	ctx.r10.s64 = 95;
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r10.u8);
	// li r10,130
	ctx.r10.s64 = 130;
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r6,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r6.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r10,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r10.u8);
	// stb r4,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r4.u8);
	// li r5,245
	ctx.r5.s64 = 245;
	// stb r4,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r4.u8);
	// stb r28,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r28.u8);
	// li r4,195
	ctx.r4.s64 = 195;
	// li r28,46
	ctx.r28.s64 = 46;
	// stb r7,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r7.u8);
	// li r27,24
	ctx.r27.s64 = 24;
	// stb r7,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r7.u8);
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// stb r5,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r5.u8);
	// li r5,239
	ctx.r5.s64 = 239;
	// stb r4,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r4.u8);
	// li r4,70
	ctx.r4.s64 = 70;
	// stb r28,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r28.u8);
	// li r28,86
	ctx.r28.s64 = 86;
	// stb r27,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r27.u8);
	// li r8,247
	ctx.r8.s64 = 247;
	// li r9,4
	ctx.r9.s64 = 4;
	// stb r10,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r10.u8);
	// stb r5,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r5.u8);
	// li r5,38
	ctx.r5.s64 = 38;
	// stb r4,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r4.u8);
	// li r29,226
	ctx.r29.s64 = 226;
	// stb r28,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r28.u8);
	// li r3,150
	ctx.r3.s64 = 150;
	// li r27,18
	ctx.r27.s64 = 18;
	// stb r11,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r11.u8);
	// li r4,37
	ctx.r4.s64 = 37;
	// stb r8,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r8.u8);
	// stb r5,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r5.u8);
	// li r5,22
	ctx.r5.s64 = 22;
	// li r28,127
	ctx.r28.s64 = 127;
	// stb r29,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r29.u8);
	// stb r31,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r31.u8);
	// stb r6,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r6.u8);
	// stb r9,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r9.u8);
	// stb r10,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r10.u8);
	// stb r11,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r11.u8);
	// stb r11,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r11.u8);
	// stb r8,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r8.u8);
	// stb r3,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r3.u8);
	// stb r31,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r31.u8);
	// stb r6,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r6.u8);
	// stb r9,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r9.u8);
	// stb r10,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r10.u8);
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// stb r11,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r11.u8);
	// stb r5,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r5.u8);
	// stb r31,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r31.u8);
	// stb r27,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r27.u8);
	// stb r7,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r7.u8);
	// stb r10,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r10.u8);
	// stb r11,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r11.u8);
	// stb r11,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r11.u8);
	// stb r8,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r8.u8);
	// stb r31,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r31.u8);
	// stb r6,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r6.u8);
	// stb r9,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r9.u8);
	// stb r10,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r10.u8);
	// stb r11,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r11.u8);
	// stb r11,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r11.u8);
	// stb r4,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r4.u8);
	// stb r5,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r5.u8);
	// stb r5,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r5.u8);
	// stb r7,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r7.u8);
	// stb r31,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r31.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r28,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r28.u8);
	// stb r7,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r7.u8);
	// stb r10,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r10.u8);
	// stb r11,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r11.u8);
	// stb r11,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r11.u8);
	// stb r8,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r8.u8);
	// stb r29,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r29.u8);
	// stb r31,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r31.u8);
	// stb r6,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r6.u8);
	// stb r9,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r9.u8);
	// stb r10,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r10.u8);
	// stb r11,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r11.u8);
	// stb r11,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r11.u8);
	// li r11,21
	ctx.r11.s64 = 21;
	// stb r8,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r8.u8);
	// li r8,36
	ctx.r8.s64 = 36;
	// stb r3,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r3.u8);
	// li r7,30
	ctx.r7.s64 = 30;
	// stb r4,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r4.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r5,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r5.u8);
	// li r5,157
	ctx.r5.s64 = 157;
	// stb r31,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r31.u8);
	// stb r11,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r11.u8);
	// li r11,27
	ctx.r11.s64 = 27;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r31.u8);
	// stb r31,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r31.u8);
	// stb r31,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r31.u8);
	// stb r11,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r11.u8);
	// li r11,74
	ctx.r11.s64 = 74;
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r31,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r31.u8);
	// stb r31,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r31.u8);
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r11,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r11.u8);
	// li r11,250
	ctx.r11.s64 = 250;
	// stb r8,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r8.u8);
	// stb r7,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r7.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r11,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r11.u8);
	// li r11,88
	ctx.r11.s64 = 88;
	// stb r31,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r31.u8);
	// stb r31,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r31.u8);
	// stb r8,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r8.u8);
	// stb r9,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r9.u8);
	// stb r11,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r11.u8);
	// stb r11,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r11.u8);
	// li r11,11
	ctx.r11.s64 = 11;
	// stb r31,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r31.u8);
	// stb r31,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r31.u8);
	// stb r31,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r31.u8);
	// stb r31,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r31.u8);
	// stb r11,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r10,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r10.u8);
	// stb r31,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r31.u8);
	// stb r31,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r31.u8);
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r11,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r31,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r31.u8);
	// stb r31,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r31.u8);
	// stb r11,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r11.u8);
	// stb r11,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r11.u8);
	// li r11,71
	ctx.r11.s64 = 71;
	// stb r11,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r11.u8);
	// li r11,9
	ctx.r11.s64 = 9;
	// stb r11,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82498780;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82498790"))) PPC_WEAK_FUNC(sub_82498790);
PPC_FUNC_IMPL(__imp__sub_82498790) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e4c
	ctx.lr = 0x82498798;
	__savegprlr_21(ctx, base);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,194
	ctx.r9.s64 = 194;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27728
	ctx.r4.s64 = ctx.r10.s64 + 27728;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x824987D4;
	sub_822E0818(ctx, base);
	// li r11,69
	ctx.r11.s64 = 69;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,135
	ctx.r10.s64 = 135;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r22,126
	ctx.r22.s64 = 126;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// li r8,232
	ctx.r8.s64 = 232;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r23,124
	ctx.r23.s64 = 124;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r10,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r10.u8);
	// li r24,6
	ctx.r24.s64 = 6;
	// stb r10,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r10.u8);
	// li r6,56
	ctx.r6.s64 = 56;
	// li r9,201
	ctx.r9.s64 = 201;
	// stb r22,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r22.u8);
	// li r25,7
	ctx.r25.s64 = 7;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// li r11,42
	ctx.r11.s64 = 42;
	// li r10,31
	ctx.r10.s64 = 31;
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// li r7,1
	ctx.r7.s64 = 1;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r11,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r11.u8);
	// li r11,230
	ctx.r11.s64 = 230;
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r11,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r11.u8);
	// li r11,46
	ctx.r11.s64 = 46;
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r31,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r31.u8);
	// stb r11,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r11.u8);
	// li r11,154
	ctx.r11.s64 = 154;
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r8,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r8.u8);
	// stb r23,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r23.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r11,127(r1)
	PPC_STORE_U8(ctx.r1.u32 + 127, ctx.r11.u8);
	// li r11,25
	ctx.r11.s64 = 25;
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r24,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r24.u8);
	// stb r6,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r6.u8);
	// stb r9,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r9.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r25,124(r1)
	PPC_STORE_U8(ctx.r1.u32 + 124, ctx.r25.u8);
	// stb r31,125(r1)
	PPC_STORE_U8(ctx.r1.u32 + 125, ctx.r31.u8);
	// stb r10,126(r1)
	PPC_STORE_U8(ctx.r1.u32 + 126, ctx.r10.u8);
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r11.u8);
	// stb r11,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, ctx.r11.u8);
	// li r9,247
	ctx.r9.s64 = 247;
	// stb r7,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, ctx.r7.u8);
	// li r11,255
	ctx.r11.s64 = 255;
	// stb r31,135(r1)
	PPC_STORE_U8(ctx.r1.u32 + 135, ctx.r31.u8);
	// li r28,15
	ctx.r28.s64 = 15;
	// stb r7,138(r1)
	PPC_STORE_U8(ctx.r1.u32 + 138, ctx.r7.u8);
	// li r10,226
	ctx.r10.s64 = 226;
	// stb r31,143(r1)
	PPC_STORE_U8(ctx.r1.u32 + 143, ctx.r31.u8);
	// li r5,63
	ctx.r5.s64 = 63;
	// stb r7,146(r1)
	PPC_STORE_U8(ctx.r1.u32 + 146, ctx.r7.u8);
	// stb r9,133(r1)
	PPC_STORE_U8(ctx.r1.u32 + 133, ctx.r9.u8);
	// li r4,5
	ctx.r4.s64 = 5;
	// stb r9,141(r1)
	PPC_STORE_U8(ctx.r1.u32 + 141, ctx.r9.u8);
	// li r9,150
	ctx.r9.s64 = 150;
	// stb r11,131(r1)
	PPC_STORE_U8(ctx.r1.u32 + 131, ctx.r11.u8);
	// li r27,172
	ctx.r27.s64 = 172;
	// stb r11,132(r1)
	PPC_STORE_U8(ctx.r1.u32 + 132, ctx.r11.u8);
	// li r29,248
	ctx.r29.s64 = 248;
	// stb r11,139(r1)
	PPC_STORE_U8(ctx.r1.u32 + 139, ctx.r11.u8);
	// li r26,39
	ctx.r26.s64 = 39;
	// stb r11,140(r1)
	PPC_STORE_U8(ctx.r1.u32 + 140, ctx.r11.u8);
	// li r3,123
	ctx.r3.s64 = 123;
	// stb r9,142(r1)
	PPC_STORE_U8(ctx.r1.u32 + 142, ctx.r9.u8);
	// li r9,245
	ctx.r9.s64 = 245;
	// stb r11,147(r1)
	PPC_STORE_U8(ctx.r1.u32 + 147, ctx.r11.u8);
	// li r21,72
	ctx.r21.s64 = 72;
	// stb r11,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, ctx.r11.u8);
	// stb r11,165(r1)
	PPC_STORE_U8(ctx.r1.u32 + 165, ctx.r11.u8);
	// stb r11,166(r1)
	PPC_STORE_U8(ctx.r1.u32 + 166, ctx.r11.u8);
	// stb r9,149(r1)
	PPC_STORE_U8(ctx.r1.u32 + 149, ctx.r9.u8);
	// li r9,239
	ctx.r9.s64 = 239;
	// stb r11,172(r1)
	PPC_STORE_U8(ctx.r1.u32 + 172, ctx.r11.u8);
	// stb r11,173(r1)
	PPC_STORE_U8(ctx.r1.u32 + 173, ctx.r11.u8);
	// li r11,44
	ctx.r11.s64 = 44;
	// stb r10,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, ctx.r10.u8);
	// li r10,4
	ctx.r10.s64 = 4;
	// stb r28,155(r1)
	PPC_STORE_U8(ctx.r1.u32 + 155, ctx.r28.u8);
	// stb r9,150(r1)
	PPC_STORE_U8(ctx.r1.u32 + 150, ctx.r9.u8);
	// li r9,38
	ctx.r9.s64 = 38;
	// stb r28,177(r1)
	PPC_STORE_U8(ctx.r1.u32 + 177, ctx.r28.u8);
	// li r28,122
	ctx.r28.s64 = 122;
	// stb r11,175(r1)
	PPC_STORE_U8(ctx.r1.u32 + 175, ctx.r11.u8);
	// li r11,18
	ctx.r11.s64 = 18;
	// stb r4,136(r1)
	PPC_STORE_U8(ctx.r1.u32 + 136, ctx.r4.u8);
	// stb r10,137(r1)
	PPC_STORE_U8(ctx.r1.u32 + 137, ctx.r10.u8);
	// stb r9,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, ctx.r9.u8);
	// li r9,22
	ctx.r9.s64 = 22;
	// stb r4,144(r1)
	PPC_STORE_U8(ctx.r1.u32 + 144, ctx.r4.u8);
	// stb r11,186(r1)
	PPC_STORE_U8(ctx.r1.u32 + 186, ctx.r11.u8);
	// li r11,32
	ctx.r11.s64 = 32;
	// stb r10,145(r1)
	PPC_STORE_U8(ctx.r1.u32 + 145, ctx.r10.u8);
	// stb r10,153(r1)
	PPC_STORE_U8(ctx.r1.u32 + 153, ctx.r10.u8);
	// stb r9,152(r1)
	PPC_STORE_U8(ctx.r1.u32 + 152, ctx.r9.u8);
	// stb r26,154(r1)
	PPC_STORE_U8(ctx.r1.u32 + 154, ctx.r26.u8);
	// stb r31,156(r1)
	PPC_STORE_U8(ctx.r1.u32 + 156, ctx.r31.u8);
	// stb r31,157(r1)
	PPC_STORE_U8(ctx.r1.u32 + 157, ctx.r31.u8);
	// stb r31,158(r1)
	PPC_STORE_U8(ctx.r1.u32 + 158, ctx.r31.u8);
	// stb r8,159(r1)
	PPC_STORE_U8(ctx.r1.u32 + 159, ctx.r8.u8);
	// stb r3,160(r1)
	PPC_STORE_U8(ctx.r1.u32 + 160, ctx.r3.u8);
	// stb r27,161(r1)
	PPC_STORE_U8(ctx.r1.u32 + 161, ctx.r27.u8);
	// stb r6,162(r1)
	PPC_STORE_U8(ctx.r1.u32 + 162, ctx.r6.u8);
	// stb r5,163(r1)
	PPC_STORE_U8(ctx.r1.u32 + 163, ctx.r5.u8);
	// stb r7,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r7.u8);
	// stb r29,167(r1)
	PPC_STORE_U8(ctx.r1.u32 + 167, ctx.r29.u8);
	// stb r21,168(r1)
	PPC_STORE_U8(ctx.r1.u32 + 168, ctx.r21.u8);
	// stb r6,169(r1)
	PPC_STORE_U8(ctx.r1.u32 + 169, ctx.r6.u8);
	// stb r5,170(r1)
	PPC_STORE_U8(ctx.r1.u32 + 170, ctx.r5.u8);
	// stb r7,171(r1)
	PPC_STORE_U8(ctx.r1.u32 + 171, ctx.r7.u8);
	// stb r29,174(r1)
	PPC_STORE_U8(ctx.r1.u32 + 174, ctx.r29.u8);
	// stb r9,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r9.u8);
	// stb r31,178(r1)
	PPC_STORE_U8(ctx.r1.u32 + 178, ctx.r31.u8);
	// stb r31,179(r1)
	PPC_STORE_U8(ctx.r1.u32 + 179, ctx.r31.u8);
	// stb r31,180(r1)
	PPC_STORE_U8(ctx.r1.u32 + 180, ctx.r31.u8);
	// stb r8,181(r1)
	PPC_STORE_U8(ctx.r1.u32 + 181, ctx.r8.u8);
	// stb r28,182(r1)
	PPC_STORE_U8(ctx.r1.u32 + 182, ctx.r28.u8);
	// stb r27,183(r1)
	PPC_STORE_U8(ctx.r1.u32 + 183, ctx.r27.u8);
	// stb r6,184(r1)
	PPC_STORE_U8(ctx.r1.u32 + 184, ctx.r6.u8);
	// stb r5,185(r1)
	PPC_STORE_U8(ctx.r1.u32 + 185, ctx.r5.u8);
	// stb r11,187(r1)
	PPC_STORE_U8(ctx.r1.u32 + 187, ctx.r11.u8);
	// stb r31,188(r1)
	PPC_STORE_U8(ctx.r1.u32 + 188, ctx.r31.u8);
	// stb r31,189(r1)
	PPC_STORE_U8(ctx.r1.u32 + 189, ctx.r31.u8);
	// li r11,86
	ctx.r11.s64 = 86;
	// stb r4,193(r1)
	PPC_STORE_U8(ctx.r1.u32 + 193, ctx.r4.u8);
	// li r6,66
	ctx.r6.s64 = 66;
	// stb r31,192(r1)
	PPC_STORE_U8(ctx.r1.u32 + 192, ctx.r31.u8);
	// stb r10,194(r1)
	PPC_STORE_U8(ctx.r1.u32 + 194, ctx.r10.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,196(r1)
	PPC_STORE_U8(ctx.r1.u32 + 196, ctx.r31.u8);
	// li r5,194
	ctx.r5.s64 = 194;
	// stb r31,197(r1)
	PPC_STORE_U8(ctx.r1.u32 + 197, ctx.r31.u8);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r11,190(r1)
	PPC_STORE_U8(ctx.r1.u32 + 190, ctx.r11.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// stb r6,201(r1)
	PPC_STORE_U8(ctx.r1.u32 + 201, ctx.r6.u8);
	// li r6,200
	ctx.r6.s64 = 200;
	// stb r31,203(r1)
	PPC_STORE_U8(ctx.r1.u32 + 203, ctx.r31.u8);
	// stb r31,204(r1)
	PPC_STORE_U8(ctx.r1.u32 + 204, ctx.r31.u8);
	// stb r9,205(r1)
	PPC_STORE_U8(ctx.r1.u32 + 205, ctx.r9.u8);
	// stb r11,191(r1)
	PPC_STORE_U8(ctx.r1.u32 + 191, ctx.r11.u8);
	// li r11,2
	ctx.r11.s64 = 2;
	// stb r6,202(r1)
	PPC_STORE_U8(ctx.r1.u32 + 202, ctx.r6.u8);
	// li r6,130
	ctx.r6.s64 = 130;
	// stb r25,206(r1)
	PPC_STORE_U8(ctx.r1.u32 + 206, ctx.r25.u8);
	// stb r31,207(r1)
	PPC_STORE_U8(ctx.r1.u32 + 207, ctx.r31.u8);
	// stb r22,208(r1)
	PPC_STORE_U8(ctx.r1.u32 + 208, ctx.r22.u8);
	// stb r11,195(r1)
	PPC_STORE_U8(ctx.r1.u32 + 195, ctx.r11.u8);
	// li r11,85
	ctx.r11.s64 = 85;
	// stb r6,209(r1)
	PPC_STORE_U8(ctx.r1.u32 + 209, ctx.r6.u8);
	// li r6,177
	ctx.r6.s64 = 177;
	// stb r31,211(r1)
	PPC_STORE_U8(ctx.r1.u32 + 211, ctx.r31.u8);
	// stb r31,212(r1)
	PPC_STORE_U8(ctx.r1.u32 + 212, ctx.r31.u8);
	// stb r31,213(r1)
	PPC_STORE_U8(ctx.r1.u32 + 213, ctx.r31.u8);
	// stb r11,198(r1)
	PPC_STORE_U8(ctx.r1.u32 + 198, ctx.r11.u8);
	// li r11,60
	ctx.r11.s64 = 60;
	// stb r6,210(r1)
	PPC_STORE_U8(ctx.r1.u32 + 210, ctx.r6.u8);
	// stb r8,214(r1)
	PPC_STORE_U8(ctx.r1.u32 + 214, ctx.r8.u8);
	// stb r3,215(r1)
	PPC_STORE_U8(ctx.r1.u32 + 215, ctx.r3.u8);
	// stb r31,217(r1)
	PPC_STORE_U8(ctx.r1.u32 + 217, ctx.r31.u8);
	// stb r11,199(r1)
	PPC_STORE_U8(ctx.r1.u32 + 199, ctx.r11.u8);
	// li r11,30
	ctx.r11.s64 = 30;
	// stb r31,218(r1)
	PPC_STORE_U8(ctx.r1.u32 + 218, ctx.r31.u8);
	// stb r31,219(r1)
	PPC_STORE_U8(ctx.r1.u32 + 219, ctx.r31.u8);
	// stb r31,220(r1)
	PPC_STORE_U8(ctx.r1.u32 + 220, ctx.r31.u8);
	// stb r9,221(r1)
	PPC_STORE_U8(ctx.r1.u32 + 221, ctx.r9.u8);
	// stb r11,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, ctx.r11.u8);
	// stb r11,216(r1)
	PPC_STORE_U8(ctx.r1.u32 + 216, ctx.r11.u8);
	// li r11,24
	ctx.r11.s64 = 24;
	// stb r31,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r31.u8);
	// stb r31,226(r1)
	PPC_STORE_U8(ctx.r1.u32 + 226, ctx.r31.u8);
	// stb r31,227(r1)
	PPC_STORE_U8(ctx.r1.u32 + 227, ctx.r31.u8);
	// stb r31,228(r1)
	PPC_STORE_U8(ctx.r1.u32 + 228, ctx.r31.u8);
	// stb r11,222(r1)
	PPC_STORE_U8(ctx.r1.u32 + 222, ctx.r11.u8);
	// li r11,20
	ctx.r11.s64 = 20;
	// stb r8,229(r1)
	PPC_STORE_U8(ctx.r1.u32 + 229, ctx.r8.u8);
	// stb r3,230(r1)
	PPC_STORE_U8(ctx.r1.u32 + 230, ctx.r3.u8);
	// stb r31,232(r1)
	PPC_STORE_U8(ctx.r1.u32 + 232, ctx.r31.u8);
	// stb r31,233(r1)
	PPC_STORE_U8(ctx.r1.u32 + 233, ctx.r31.u8);
	// stb r11,224(r1)
	PPC_STORE_U8(ctx.r1.u32 + 224, ctx.r11.u8);
	// li r11,178
	ctx.r11.s64 = 178;
	// stb r31,234(r1)
	PPC_STORE_U8(ctx.r1.u32 + 234, ctx.r31.u8);
	// stb r8,235(r1)
	PPC_STORE_U8(ctx.r1.u32 + 235, ctx.r8.u8);
	// stb r28,236(r1)
	PPC_STORE_U8(ctx.r1.u32 + 236, ctx.r28.u8);
	// stb r7,237(r1)
	PPC_STORE_U8(ctx.r1.u32 + 237, ctx.r7.u8);
	// stb r11,225(r1)
	PPC_STORE_U8(ctx.r1.u32 + 225, ctx.r11.u8);
	// li r11,174
	ctx.r11.s64 = 174;
	// stb r31,238(r1)
	PPC_STORE_U8(ctx.r1.u32 + 238, ctx.r31.u8);
	// stb r31,239(r1)
	PPC_STORE_U8(ctx.r1.u32 + 239, ctx.r31.u8);
	// stb r9,242(r1)
	PPC_STORE_U8(ctx.r1.u32 + 242, ctx.r9.u8);
	// stb r9,243(r1)
	PPC_STORE_U8(ctx.r1.u32 + 243, ctx.r9.u8);
	// stb r11,231(r1)
	PPC_STORE_U8(ctx.r1.u32 + 231, ctx.r11.u8);
	// li r11,35
	ctx.r11.s64 = 35;
	// stb r9,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r9.u8);
	// stb r10,245(r1)
	PPC_STORE_U8(ctx.r1.u32 + 245, ctx.r10.u8);
	// stb r24,247(r1)
	PPC_STORE_U8(ctx.r1.u32 + 247, ctx.r24.u8);
	// stb r31,248(r1)
	PPC_STORE_U8(ctx.r1.u32 + 248, ctx.r31.u8);
	// stb r11,240(r1)
	PPC_STORE_U8(ctx.r1.u32 + 240, ctx.r11.u8);
	// li r11,98
	ctx.r11.s64 = 98;
	// stb r11,241(r1)
	PPC_STORE_U8(ctx.r1.u32 + 241, ctx.r11.u8);
	// li r11,40
	ctx.r11.s64 = 40;
	// stb r11,246(r1)
	PPC_STORE_U8(ctx.r1.u32 + 246, ctx.r11.u8);
	// li r11,128
	ctx.r11.s64 = 128;
	// stb r11,249(r1)
	PPC_STORE_U8(ctx.r1.u32 + 249, ctx.r11.u8);
	// li r11,58
	ctx.r11.s64 = 58;
	// stb r10,250(r1)
	PPC_STORE_U8(ctx.r1.u32 + 250, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r26,251(r1)
	PPC_STORE_U8(ctx.r1.u32 + 251, ctx.r26.u8);
	// stb r10,252(r1)
	PPC_STORE_U8(ctx.r1.u32 + 252, ctx.r10.u8);
	// stb r31,254(r1)
	PPC_STORE_U8(ctx.r1.u32 + 254, ctx.r31.u8);
	// stb r31,255(r1)
	PPC_STORE_U8(ctx.r1.u32 + 255, ctx.r31.u8);
	// stb r11,253(r1)
	PPC_STORE_U8(ctx.r1.u32 + 253, ctx.r11.u8);
	// li r11,83
	ctx.r11.s64 = 83;
	// stb r8,256(r1)
	PPC_STORE_U8(ctx.r1.u32 + 256, ctx.r8.u8);
	// stb r23,257(r1)
	PPC_STORE_U8(ctx.r1.u32 + 257, ctx.r23.u8);
	// stb r31,259(r1)
	PPC_STORE_U8(ctx.r1.u32 + 259, ctx.r31.u8);
	// stb r31,260(r1)
	PPC_STORE_U8(ctx.r1.u32 + 260, ctx.r31.u8);
	// stb r11,258(r1)
	PPC_STORE_U8(ctx.r1.u32 + 258, ctx.r11.u8);
	// li r11,3
	ctx.r11.s64 = 3;
	// stb r31,261(r1)
	PPC_STORE_U8(ctx.r1.u32 + 261, ctx.r31.u8);
	// stb r31,262(r1)
	PPC_STORE_U8(ctx.r1.u32 + 262, ctx.r31.u8);
	// stb r10,263(r1)
	PPC_STORE_U8(ctx.r1.u32 + 263, ctx.r10.u8);
	// stb r31,264(r1)
	PPC_STORE_U8(ctx.r1.u32 + 264, ctx.r31.u8);
	// stb r11,265(r1)
	PPC_STORE_U8(ctx.r1.u32 + 265, ctx.r11.u8);
	// li r11,99
	ctx.r11.s64 = 99;
	// stb r31,266(r1)
	PPC_STORE_U8(ctx.r1.u32 + 266, ctx.r31.u8);
	// stb r31,267(r1)
	PPC_STORE_U8(ctx.r1.u32 + 267, ctx.r31.u8);
	// stb r31,270(r1)
	PPC_STORE_U8(ctx.r1.u32 + 270, ctx.r31.u8);
	// stb r31,271(r1)
	PPC_STORE_U8(ctx.r1.u32 + 271, ctx.r31.u8);
	// stb r11,268(r1)
	PPC_STORE_U8(ctx.r1.u32 + 268, ctx.r11.u8);
	// li r11,214
	ctx.r11.s64 = 214;
	// stb r31,272(r1)
	PPC_STORE_U8(ctx.r1.u32 + 272, ctx.r31.u8);
	// stb r31,273(r1)
	PPC_STORE_U8(ctx.r1.u32 + 273, ctx.r31.u8);
	// stb r11,269(r1)
	PPC_STORE_U8(ctx.r1.u32 + 269, ctx.r11.u8);
	// bl 0x82b06418
	ctx.lr = 0x82498BE4;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82498BF8"))) PPC_WEAK_FUNC(sub_82498BF8);
PPC_FUNC_IMPL(__imp__sub_82498BF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82498C00;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// addi r3,r30,4
	ctx.r3.s64 = ctx.r30.s64 + 4;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r11,r11,-29388
	ctx.r11.s64 = ctx.r11.s64 + -29388;
	// li r9,44
	ctx.r9.s64 = 44;
	// lis r10,-32250
	ctx.r10.s64 = -2113536000;
	// addi r4,r10,27756
	ctx.r4.s64 = ctx.r10.s64 + 27756;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r31,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r31.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
	// stw r9,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r9.u32);
	// bl 0x822e0818
	ctx.lr = 0x82498C3C;
	sub_822E0818(ctx, base);
	// li r11,135
	ctx.r11.s64 = 135;
	// stb r31,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r31.u8);
	// li r10,69
	ctx.r10.s64 = 69;
	// stb r31,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r31.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r31,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, ctx.r31.u8);
	// addi r29,r30,24
	ctx.r29.s64 = ctx.r30.s64 + 24;
	// stb r31,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r31.u8);
	// li r5,44
	ctx.r5.s64 = 44;
	// stb r31,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r31.u8);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, ctx.r11.u8);
	// li r11,127
	ctx.r11.s64 = 127;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stb r10,86(r1)
	PPC_STORE_U8(ctx.r1.u32 + 86, ctx.r10.u8);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stb r31,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r31.u8);
	// stb r31,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r31.u8);
	// stb r31,91(r1)
	PPC_STORE_U8(ctx.r1.u32 + 91, ctx.r31.u8);
	// stb r11,83(r1)
	PPC_STORE_U8(ctx.r1.u32 + 83, ctx.r11.u8);
	// li r11,77
	ctx.r11.s64 = 77;
	// stb r31,92(r1)
	PPC_STORE_U8(ctx.r1.u32 + 92, ctx.r31.u8);
	// stb r31,93(r1)
	PPC_STORE_U8(ctx.r1.u32 + 93, ctx.r31.u8);
	// stb r31,94(r1)
	PPC_STORE_U8(ctx.r1.u32 + 94, ctx.r31.u8);
	// stb r31,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r31.u8);
	// stb r11,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r11.u8);
	// stb r31,96(r1)
	PPC_STORE_U8(ctx.r1.u32 + 96, ctx.r31.u8);
	// stb r31,97(r1)
	PPC_STORE_U8(ctx.r1.u32 + 97, ctx.r31.u8);
	// stb r31,98(r1)
	PPC_STORE_U8(ctx.r1.u32 + 98, ctx.r31.u8);
	// stb r31,99(r1)
	PPC_STORE_U8(ctx.r1.u32 + 99, ctx.r31.u8);
	// stb r31,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r31.u8);
	// stb r31,101(r1)
	PPC_STORE_U8(ctx.r1.u32 + 101, ctx.r31.u8);
	// stb r31,102(r1)
	PPC_STORE_U8(ctx.r1.u32 + 102, ctx.r31.u8);
	// stb r9,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r9.u8);
	// stb r31,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r31.u8);
	// stb r31,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, ctx.r31.u8);
	// stb r31,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r31.u8);
	// stb r31,107(r1)
	PPC_STORE_U8(ctx.r1.u32 + 107, ctx.r31.u8);
	// stb r31,108(r1)
	PPC_STORE_U8(ctx.r1.u32 + 108, ctx.r31.u8);
	// stb r31,109(r1)
	PPC_STORE_U8(ctx.r1.u32 + 109, ctx.r31.u8);
	// stb r31,110(r1)
	PPC_STORE_U8(ctx.r1.u32 + 110, ctx.r31.u8);
	// stb r31,111(r1)
	PPC_STORE_U8(ctx.r1.u32 + 111, ctx.r31.u8);
	// stb r31,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, ctx.r31.u8);
	// stb r31,113(r1)
	PPC_STORE_U8(ctx.r1.u32 + 113, ctx.r31.u8);
	// stb r10,114(r1)
	PPC_STORE_U8(ctx.r1.u32 + 114, ctx.r10.u8);
	// stb r11,115(r1)
	PPC_STORE_U8(ctx.r1.u32 + 115, ctx.r11.u8);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, ctx.r31.u8);
	// stb r31,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, ctx.r31.u8);
	// stb r31,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, ctx.r31.u8);
	// stb r31,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, ctx.r31.u8);
	// stb r31,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, ctx.r31.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, ctx.r31.u8);
	// bl 0x82b06418
	ctx.lr = 0x82498D14;
	sub_82B06418(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r29,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r29.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

