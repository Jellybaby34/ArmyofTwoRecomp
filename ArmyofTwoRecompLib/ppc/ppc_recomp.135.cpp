#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_82A211C8"))) PPC_WEAK_FUNC(sub_82A211C8);
PPC_FUNC_IMPL(__imp__sub_82A211C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21218
	if (!ctx.cr6.eq) goto loc_82A21218;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A211F4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21204
	if (ctx.cr6.eq) goto loc_82A21204;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21200;
	sub_82A13FE0(ctx, base);
	// b 0x82a21208
	goto loc_82A21208;
loc_82A21204:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A21208:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A21218:
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,2484(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 2484);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A21234;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21254;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21270"))) PPC_WEAK_FUNC(sub_82A21270);
PPC_FUNC_IMPL(__imp__sub_82A21270) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r11,r5,24
	ctx.r11.u64 = ctx.r5.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a212b0
	if (ctx.cr6.eq) goto loc_82A212B0;
	// lwz r11,0(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A212A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A212A8;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18fa0
	ctx.lr = 0x82A212B0;
	sub_82A18FA0(ctx, base);
loc_82A212B0:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A212C8"))) PPC_WEAK_FUNC(sub_82A212C8);
PPC_FUNC_IMPL(__imp__sub_82A212C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// cmpwi cr6,r4,-1
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -1, ctx.xer);
	// bne cr6,0x82a212ec
	if (!ctx.cr6.eq) goto loc_82A212EC;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_82A212EC:
	// bl 0x82a02908
	ctx.lr = 0x82A212F0;
	sub_82A02908(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a21334
	if (ctx.cr6.eq) goto loc_82A21334;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2130C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a21334
	if (ctx.cr6.eq) goto loc_82A21334;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21330;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82a21384
	goto loc_82A21384;
loc_82A21334:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bne cr6,0x82a21384
	if (!ctx.cr6.eq) goto loc_82A21384;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A21344;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21370
	if (ctx.cr6.eq) goto loc_82A21370;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r10,-605
	ctx.r10.s64 = -605;
	// addi r11,r11,-4456
	ctx.r11.s64 = ctx.r11.s64 + -4456;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// b 0x82a21374
	goto loc_82A21374;
loc_82A21370:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A21374:
	// bl 0x82a186e0
	ctx.lr = 0x82A21378;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A21384;
	sub_82A02300(ctx, base);
loc_82A21384:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A213A0"))) PPC_WEAK_FUNC(sub_82A213A0);
PPC_FUNC_IMPL(__imp__sub_82A213A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// bl 0x82a029a8
	ctx.lr = 0x82A213BC;
	sub_82A029A8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a21400
	if (ctx.cr6.eq) goto loc_82A21400;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A213D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a21400
	if (ctx.cr6.eq) goto loc_82A21400;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A213FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82a21450
	goto loc_82A21450;
loc_82A21400:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bne cr6,0x82a21450
	if (!ctx.cr6.eq) goto loc_82A21450;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A21410;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2143c
	if (ctx.cr6.eq) goto loc_82A2143C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r10,-605
	ctx.r10.s64 = -605;
	// addi r11,r11,-4456
	ctx.r11.s64 = ctx.r11.s64 + -4456;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// b 0x82a21440
	goto loc_82A21440;
loc_82A2143C:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A21440:
	// bl 0x82a186e0
	ctx.lr = 0x82A21444;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A21450;
	sub_82A02300(ctx, base);
loc_82A21450:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21468"))) PPC_WEAK_FUNC(sub_82A21468);
PPC_FUNC_IMPL(__imp__sub_82A21468) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a214bc
	if (!ctx.cr6.eq) goto loc_82A214BC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21498;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a214a8
	if (ctx.cr6.eq) goto loc_82A214A8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A214A4;
	sub_82A13FE0(ctx, base);
	// b 0x82a214ac
	goto loc_82A214AC;
loc_82A214A8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A214AC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A214BC:
	// mulli r11,r30,68
	ctx.r11.s64 = ctx.r30.s64 * 68;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addi r31,r11,1148
	ctx.r31.s64 = ctx.r11.s64 + 1148;
	// bl 0x82219f20
	ctx.lr = 0x82A214CC;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A214DC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A214F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21504;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a21524
	if (!ctx.cr6.eq) goto loc_82A21524;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21524;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A21524:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21540"))) PPC_WEAK_FUNC(sub_82A21540);
PPC_FUNC_IMPL(__imp__sub_82A21540) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,16
	ctx.r3.s64 = 16;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// bl 0x82545e80
	ctx.lr = 0x82A21560;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2158c
	if (ctx.cr6.eq) goto loc_82A2158C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r31.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r11,r11,-4432
	ctx.r11.s64 = ctx.r11.s64 + -4432;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// b 0x82a21590
	goto loc_82A21590;
loc_82A2158C:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A21590:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a215cc
	if (!ctx.cr6.eq) goto loc_82A215CC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A215A8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a215b8
	if (ctx.cr6.eq) goto loc_82A215B8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A215B4;
	sub_82A13FE0(ctx, base);
	// b 0x82a215bc
	goto loc_82A215BC;
loc_82A215B8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A215BC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A215CC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A215D8;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A215F0"))) PPC_WEAK_FUNC(sub_82A215F0);
PPC_FUNC_IMPL(__imp__sub_82A215F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x82A215F8;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2161C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x82a2172c
	if (!ctx.cr6.gt) goto loc_82A2172C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r23,-31969
	ctx.r23.s64 = -2095120384;
	// addi r24,r11,-4432
	ctx.r24.s64 = ctx.r11.s64 + -4432;
	// lis r11,20971
	ctx.r11.s64 = 1374355456;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// li r25,-1
	ctx.r25.s64 = -1;
	// ori r27,r11,34079
	ctx.r27.u64 = ctx.r11.u64 | 34079;
loc_82A21640:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21658;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A21660;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21680
	if (ctx.cr6.eq) goto loc_82A21680;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r25.u32);
	// stw r22,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r22.u32);
	// b 0x82a21684
	goto loc_82A21684;
loc_82A21680:
	// li r28,0
	ctx.r28.s64 = 0;
loc_82A21684:
	// lwz r3,12324(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a216b8
	if (!ctx.cr6.eq) goto loc_82A216B8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21698;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a216a8
	if (ctx.cr6.eq) goto loc_82A216A8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A216A4;
	sub_82A13FE0(ctx, base);
	// b 0x82a216ac
	goto loc_82A216AC;
loc_82A216A8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A216AC:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r23)
	PPC_STORE_U8(ctx.r23.u32 + 12328, ctx.r11.u8);
loc_82A216B8:
	// addi r31,r3,1488
	ctx.r31.s64 = ctx.r3.s64 + 1488;
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A216C8;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lbz r11,205(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 205);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulhw r10,r11,r27
	ctx.r10.s64 = (int64_t(ctx.r11.s32) * int64_t(ctx.r27.s32)) >> 32;
	// srawi r10,r10,4
	ctx.xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r28,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r28.u32);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// stb r10,204(r31)
	PPC_STORE_U8(ctx.r31.u32 + 204, ctx.r10.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A2170C;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21724;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpw cr6,r30,r3
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r3.s32, ctx.xer);
	// blt cr6,0x82a21640
	if (ctx.cr6.lt) goto loc_82A21640;
loc_82A2172C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A21738"))) PPC_WEAK_FUNC(sub_82A21738);
PPC_FUNC_IMPL(__imp__sub_82A21738) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2178c
	if (!ctx.cr6.eq) goto loc_82A2178C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21768;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21778
	if (ctx.cr6.eq) goto loc_82A21778;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21774;
	sub_82A13FE0(ctx, base);
	// b 0x82a2177c
	goto loc_82A2177C;
loc_82A21778:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2177C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2178C:
	// mulli r11,r30,68
	ctx.r11.s64 = ctx.r30.s64 * 68;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addi r31,r11,1148
	ctx.r31.s64 = ctx.r11.s64 + 1148;
	// bl 0x82219f20
	ctx.lr = 0x82A2179C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A217AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A217C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A217D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// bne cr6,0x82a217f4
	if (!ctx.cr6.eq) goto loc_82A217F4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A217F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A217F4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21810"))) PPC_WEAK_FUNC(sub_82A21810);
PPC_FUNC_IMPL(__imp__sub_82A21810) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,16
	ctx.r3.s64 = 16;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// bl 0x82545e80
	ctx.lr = 0x82A21830;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2185c
	if (ctx.cr6.eq) goto loc_82A2185C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r31.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r11,r11,-4428
	ctx.r11.s64 = ctx.r11.s64 + -4428;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// b 0x82a21860
	goto loc_82A21860;
loc_82A2185C:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A21860:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2189c
	if (!ctx.cr6.eq) goto loc_82A2189C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21878;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21888
	if (ctx.cr6.eq) goto loc_82A21888;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21884;
	sub_82A13FE0(ctx, base);
	// b 0x82a2188c
	goto loc_82A2188C;
loc_82A21888:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2188C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2189C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A218A8;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A218C0"))) PPC_WEAK_FUNC(sub_82A218C0);
PPC_FUNC_IMPL(__imp__sub_82A218C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x82A218C8;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r22,r5
	ctx.r22.u64 = ctx.r5.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A218EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x82a219fc
	if (!ctx.cr6.gt) goto loc_82A219FC;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r23,-31969
	ctx.r23.s64 = -2095120384;
	// addi r24,r11,-4428
	ctx.r24.s64 = ctx.r11.s64 + -4428;
	// lis r11,20971
	ctx.r11.s64 = 1374355456;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// li r25,-1
	ctx.r25.s64 = -1;
	// ori r27,r11,34079
	ctx.r27.u64 = ctx.r11.u64 | 34079;
loc_82A21910:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21928;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A21930;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21950
	if (ctx.cr6.eq) goto loc_82A21950;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r25.u32);
	// stw r22,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r22.u32);
	// b 0x82a21954
	goto loc_82A21954;
loc_82A21950:
	// li r28,0
	ctx.r28.s64 = 0;
loc_82A21954:
	// lwz r3,12324(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21988
	if (!ctx.cr6.eq) goto loc_82A21988;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21968;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21978
	if (ctx.cr6.eq) goto loc_82A21978;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21974;
	sub_82A13FE0(ctx, base);
	// b 0x82a2197c
	goto loc_82A2197C;
loc_82A21978:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2197C:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r23)
	PPC_STORE_U8(ctx.r23.u32 + 12328, ctx.r11.u8);
loc_82A21988:
	// addi r31,r3,1488
	ctx.r31.s64 = ctx.r3.s64 + 1488;
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A21998;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lbz r11,205(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 205);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulhw r10,r11,r27
	ctx.r10.s64 = (int64_t(ctx.r11.s32) * int64_t(ctx.r27.s32)) >> 32;
	// srawi r10,r10,4
	ctx.xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r28,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r28.u32);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// stb r10,204(r31)
	PPC_STORE_U8(ctx.r31.u32 + 204, ctx.r10.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A219DC;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A219F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpw cr6,r30,r3
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r3.s32, ctx.xer);
	// blt cr6,0x82a21910
	if (ctx.cr6.lt) goto loc_82A21910;
loc_82A219FC:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A21A08"))) PPC_WEAK_FUNC(sub_82A21A08);
PPC_FUNC_IMPL(__imp__sub_82A21A08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A21A10;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r31,12324(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a21a58
	if (!ctx.cr6.eq) goto loc_82A21A58;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21A30;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21a44
	if (ctx.cr6.eq) goto loc_82A21A44;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21A3C;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a21a48
	goto loc_82A21A48;
loc_82A21A44:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A21A48:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r29)
	PPC_STORE_U32(ctx.r29.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A21A58:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A21A64;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r9,2788(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2788);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// cntlzw r11,r10
	ctx.r11.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r31,r11,27,31,31
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// bl 0x83157d24
	ctx.lr = 0x82A21A84;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A21A90"))) PPC_WEAK_FUNC(sub_82A21A90);
PPC_FUNC_IMPL(__imp__sub_82A21A90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// stw r11,68(r3)
	PPC_STORE_U32(ctx.r3.u32 + 68, ctx.r11.u32);
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21ae4
	if (!ctx.cr6.eq) goto loc_82A21AE4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21AC0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21ad0
	if (ctx.cr6.eq) goto loc_82A21AD0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21ACC;
	sub_82A13FE0(ctx, base);
	// b 0x82a21ad4
	goto loc_82A21AD4;
loc_82A21AD0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A21AD4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A21AE4:
	// bl 0x82a0c9a8
	ctx.lr = 0x82A21AE8;
	sub_82A0C9A8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21B00"))) PPC_WEAK_FUNC(sub_82A21B00);
PPC_FUNC_IMPL(__imp__sub_82A21B00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// bne cr6,0x82a21b84
	if (!ctx.cr6.eq) goto loc_82A21B84;
	// bl 0x82a186e0
	ctx.lr = 0x82A21B28;
	sub_82A186E0(ctx, base);
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a21b84
	if (!ctx.cr6.eq) goto loc_82A21B84;
	// bl 0x82a186e0
	ctx.lr = 0x82A21B38;
	sub_82A186E0(ctx, base);
	// lbz r11,4021(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4021);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a21b84
	if (!ctx.cr6.eq) goto loc_82A21B84;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a03378
	ctx.lr = 0x82A21B54;
	sub_82A03378(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A21B60;
	sub_823099B0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A21B68;
	sub_82A186E0(ctx, base);
	// lwz r3,2784(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21b7c
	if (ctx.cr6.eq) goto loc_82A21B7C;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a34548
	ctx.lr = 0x82A21B7C;
	sub_82A34548(ctx, base);
loc_82A21B7C:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82309a60
	ctx.lr = 0x82A21B84;
	sub_82309A60(ctx, base);
loc_82A21B84:
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21BA0"))) PPC_WEAK_FUNC(sub_82A21BA0);
PPC_FUNC_IMPL(__imp__sub_82A21BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21bf4
	if (!ctx.cr6.eq) goto loc_82A21BF4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21BD0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21be0
	if (ctx.cr6.eq) goto loc_82A21BE0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21BDC;
	sub_82A13FE0(ctx, base);
	// b 0x82a21be4
	goto loc_82A21BE4;
loc_82A21BE0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A21BE4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A21BF4:
	// lbz r11,1088(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a21c14
	if (!ctx.cr6.eq) goto loc_82A21C14;
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21C14;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A21C14:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A21C30"))) PPC_WEAK_FUNC(sub_82A21C30);
PPC_FUNC_IMPL(__imp__sub_82A21C30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A21C38;
	__savegprlr_26(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// li r5,64
	ctx.r5.s64 = 64;
	// li r4,64
	ctx.r4.s64 = 64;
	// li r3,6
	ctx.r3.s64 = 6;
	// stw r29,8(r27)
	PPC_STORE_U32(ctx.r27.u32 + 8, ctx.r29.u32);
	// bl 0x82214060
	ctx.lr = 0x82A21C58;
	sub_82214060(ctx, base);
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// lwz r3,12324(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21c98
	if (!ctx.cr6.eq) goto loc_82A21C98;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21C78;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21c88
	if (ctx.cr6.eq) goto loc_82A21C88;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21C84;
	sub_82A13FE0(ctx, base);
	// b 0x82a21c8c
	goto loc_82A21C8C;
loc_82A21C88:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A21C8C:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A21C98:
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r5,r3,12
	ctx.r5.s64 = ctx.r3.s64 + 12;
	// addi r30,r11,25332
	ctx.r30.s64 = ctx.r11.s64 + 25332;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,36(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 36);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21CBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,12324(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21cf0
	if (!ctx.cr6.eq) goto loc_82A21CF0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21CD0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21ce0
	if (ctx.cr6.eq) goto loc_82A21CE0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21CDC;
	sub_82A13FE0(ctx, base);
	// b 0x82a21ce4
	goto loc_82A21CE4;
loc_82A21CE0:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A21CE4:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A21CF0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r5,1040(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1040);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21D0C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21D28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 20);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21D44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// lwz r3,12304(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21d74
	if (!ctx.cr6.eq) goto loc_82A21D74;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A21D5C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21d6c
	if (ctx.cr6.eq) goto loc_82A21D6C;
	// bl 0x82a08db0
	ctx.lr = 0x82A21D68;
	sub_82A08DB0(ctx, base);
	// b 0x82a21d70
	goto loc_82A21D70;
loc_82A21D6C:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A21D70:
	// stw r3,12304(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12304, ctx.r3.u32);
loc_82A21D74:
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lwz r4,24(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 24);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// lwz r10,52(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// xori r5,r11,1
	ctx.r5.u64 = ctx.r11.u64 ^ 1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A21D9C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,40(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,5624(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5624);
	// lwz r11,52(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21DBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,4(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21DD0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r11,-1
	ctx.r11.s64 = -1;
	// lwz r3,4(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r29.u32);
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// stw r29,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r29.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r29.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21E20;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82c1a0b8
	ctx.lr = 0x82A21E28;
	sub_82C1A0B8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A21E30"))) PPC_WEAK_FUNC(sub_82A21E30);
PPC_FUNC_IMPL(__imp__sub_82A21E30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82A21E38;
	__savegprlr_25(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// li r5,64
	ctx.r5.s64 = 64;
	// li r4,64
	ctx.r4.s64 = 64;
	// li r3,7
	ctx.r3.s64 = 7;
	// stw r27,8(r26)
	PPC_STORE_U32(ctx.r26.u32 + 8, ctx.r27.u32);
	// bl 0x82214060
	ctx.lr = 0x82A21E58;
	sub_82214060(ctx, base);
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r25,-31969
	ctx.r25.s64 = -2095120384;
	// lwz r3,12324(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21e98
	if (!ctx.cr6.eq) goto loc_82A21E98;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21E78;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21e88
	if (ctx.cr6.eq) goto loc_82A21E88;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21E84;
	sub_82A13FE0(ctx, base);
	// b 0x82a21e8c
	goto loc_82A21E8C;
loc_82A21E88:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A21E8C:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r25)
	PPC_STORE_U8(ctx.r25.u32 + 12328, ctx.r11.u8);
loc_82A21E98:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r3,12
	ctx.r3.s64 = ctx.r3.s64 + 12;
	// addi r4,r11,-2912
	ctx.r4.s64 = ctx.r11.s64 + -2912;
	// bl 0x82e28c50
	ctx.lr = 0x82A21EA8;
	sub_82E28C50(ctx, base);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r29,r11,25332
	ctx.r29.s64 = ctx.r11.s64 + 25332;
	// beq cr6,0x82a21ed8
	if (ctx.cr6.eq) goto loc_82A21ED8;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x82a186e0
	ctx.lr = 0x82A21EC0;
	sub_82A186E0(ctx, base);
	// addi r5,r3,12
	ctx.r5.s64 = ctx.r3.s64 + 12;
	// lwz r11,36(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 36);
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21ED8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A21ED8:
	// lwz r3,12324(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21f0c
	if (!ctx.cr6.eq) goto loc_82A21F0C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21EEC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21efc
	if (ctx.cr6.eq) goto loc_82A21EFC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21EF8;
	sub_82A13FE0(ctx, base);
	// b 0x82a21f00
	goto loc_82A21F00;
loc_82A21EFC:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A21F00:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r25)
	PPC_STORE_U8(ctx.r25.u32 + 12328, ctx.r11.u8);
loc_82A21F0C:
	// lwz r11,1068(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1068);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x82a21f3c
	if (ctx.cr6.eq) goto loc_82A21F3C;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x82a186e0
	ctx.lr = 0x82A21F20;
	sub_82A186E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,52(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// lwz r4,28(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 28);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,1068(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1068);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A21F3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A21F3C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,16(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 16);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21F58;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,20(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 20);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A21F74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a21fa4
	if (!ctx.cr6.eq) goto loc_82A21FA4;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A21F8C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21f9c
	if (ctx.cr6.eq) goto loc_82A21F9C;
	// bl 0x82a08db0
	ctx.lr = 0x82A21F98;
	sub_82A08DB0(ctx, base);
	// b 0x82a21fa0
	goto loc_82A21FA0;
loc_82A21F9C:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A21FA0:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A21FA4:
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 24);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// lwz r10,52(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// xori r5,r11,1
	ctx.r5.u64 = ctx.r11.u64 ^ 1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A21FCC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,12324(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22000
	if (!ctx.cr6.eq) goto loc_82A22000;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A21FE0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a21ff0
	if (ctx.cr6.eq) goto loc_82A21FF0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A21FEC;
	sub_82A13FE0(ctx, base);
	// b 0x82a21ff4
	goto loc_82A21FF4;
loc_82A21FF0:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A21FF4:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r25)
	PPC_STORE_U8(ctx.r25.u32 + 12328, ctx.r11.u8);
loc_82A22000:
	// lwz r11,1044(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1044);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a22040
	if (!ctx.cr6.gt) goto loc_82A22040;
	// bl 0x82a186e0
	ctx.lr = 0x82A22010;
	sub_82A186E0(ctx, base);
	// lwz r11,1044(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1044);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// beq cr6,0x82a22040
	if (ctx.cr6.eq) goto loc_82A22040;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x82a186e0
	ctx.lr = 0x82A22024;
	sub_82A186E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,52(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 52);
	// lwz r4,32(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,1044(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1044);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A22040;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A22040:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,40(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,5624(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5624);
	// lwz r11,52(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22060;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,4(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22074;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r11,-1
	ctx.r11.s64 = -1;
	// lwz r3,4(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r27.u32);
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r27.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r27.u32);
	// li r7,1
	ctx.r7.s64 = 1;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r27,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r27.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r27.u32);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A220C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82c1a0b8
	ctx.lr = 0x82A220CC;
	sub_82C1A0B8(ctx, base);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A220D8"))) PPC_WEAK_FUNC(sub_82A220D8);
PPC_FUNC_IMPL(__imp__sub_82A220D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// bne cr6,0x82a221e4
	if (!ctx.cr6.eq) goto loc_82A221E4;
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x82545e80
	ctx.lr = 0x82A22104;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a22134
	if (ctx.cr6.eq) goto loc_82A22134;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r10,-32229
	ctx.r10.s64 = -2112159744;
	// addi r11,r11,-4444
	ctx.r11.s64 = ctx.r11.s64 + -4444;
	// addi r4,r10,-29761
	ctx.r4.s64 = ctx.r10.s64 + -29761;
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A22130;
	sub_82E2AB28(ctx, base);
	// b 0x82a22138
	goto loc_82A22138;
loc_82A22134:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22138:
	// bl 0x82a186e0
	ctx.lr = 0x82A2213C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A22148;
	sub_82A02300(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A2214C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2215C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2223c
	if (ctx.cr6.eq) goto loc_82A2223C;
	// bl 0x82219f20
	ctx.lr = 0x82A22168;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22178;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22188;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2223c
	if (ctx.cr6.eq) goto loc_82A2223C;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A221A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2223c
	if (ctx.cr6.eq) goto loc_82A2223C;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A221C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A221D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r30,24
	ctx.r3.s64 = ctx.r30.s64 + 24;
	// li r5,50
	ctx.r5.s64 = 50;
	// bl 0x82e2ab28
	ctx.lr = 0x82A221E0;
	sub_82E2AB28(ctx, base);
	// b 0x82a2223c
	goto loc_82A2223C;
loc_82A221E4:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-27624
	ctx.r4.s64 = ctx.r11.s64 + -27624;
	// bl 0x82e2b400
	ctx.lr = 0x82A221F4;
	sub_82E2B400(ctx, base);
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x82545e80
	ctx.lr = 0x82A221FC;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a22228
	if (ctx.cr6.eq) goto loc_82A22228;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r11,r11,-4444
	ctx.r11.s64 = ctx.r11.s64 + -4444;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A22224;
	sub_82E2AB28(ctx, base);
	// b 0x82a2222c
	goto loc_82A2222C;
loc_82A22228:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A2222C:
	// bl 0x82a186e0
	ctx.lr = 0x82A22230;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2223C;
	sub_82A02300(ctx, base);
loc_82A2223C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22258"))) PPC_WEAK_FUNC(sub_82A22258);
PPC_FUNC_IMPL(__imp__sub_82A22258) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22280;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A2228C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a222ac
	if (ctx.cr6.eq) goto loc_82A222AC;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// std r31,4(r3)
	PPC_STORE_U64(ctx.r3.u32 + 4, ctx.r31.u64);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,-4436
	ctx.r11.s64 = ctx.r11.s64 + -4436;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a222b0
	goto loc_82A222B0;
loc_82A222AC:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A222B0:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a222ec
	if (!ctx.cr6.eq) goto loc_82A222EC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A222C8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a222d8
	if (ctx.cr6.eq) goto loc_82A222D8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A222D4;
	sub_82A13FE0(ctx, base);
	// b 0x82a222dc
	goto loc_82A222DC;
loc_82A222D8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A222DC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A222EC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A222F8;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22310"))) PPC_WEAK_FUNC(sub_82A22310);
PPC_FUNC_IMPL(__imp__sub_82A22310) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A22318;
	__savegprlr_27(ctx, base);
	// stwu r1,-384(r1)
	ea = -384 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r27,3
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 3, ctx.xer);
	// bgt cr6,0x82a22400
	if (ctx.cr6.gt) goto loc_82A22400;
	// lis r12,-32094
	ctx.r12.s64 = -2103312384;
	// addi r12,r12,9032
	ctx.r12.s64 = ctx.r12.s64 + 9032;
	// rlwinm r0,r27,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r27.u64) {
	case 0:
		goto loc_82A22358;
	case 1:
		goto loc_82A223C0;
	case 2:
		goto loc_82A223A0;
	case 3:
		goto loc_82A223E0;
	default:
		__builtin_unreachable();
	}
	// lwz r21,9048(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + 9048);
	// lwz r21,9152(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + 9152);
	// lwz r21,9120(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + 9120);
	// lwz r21,9184(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + 9184);
loc_82A22358:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2236C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22384;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r11,3412
	ctx.r4.s64 = ctx.r11.s64 + 3412;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// bl 0x82e2b400
	ctx.lr = 0x82A2239C;
	sub_82E2B400(ctx, base);
	// b 0x82a22428
	goto loc_82A22428;
loc_82A223A0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A223B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,3396
	ctx.r4.s64 = ctx.r11.s64 + 3396;
	// b 0x82a2241c
	goto loc_82A2241C;
loc_82A223C0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A223D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,3380
	ctx.r4.s64 = ctx.r11.s64 + 3380;
	// b 0x82a2241c
	goto loc_82A2241C;
loc_82A223E0:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A223F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,3340
	ctx.r4.s64 = ctx.r11.s64 + 3340;
	// b 0x82a2241c
	goto loc_82A2241C;
loc_82A22400:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22414;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,3312
	ctx.r4.s64 = ctx.r11.s64 + 3312;
loc_82A2241C:
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82e2b400
	ctx.lr = 0x82A22428;
	sub_82E2B400(ctx, base);
loc_82A22428:
	// lbz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a22468
	if (!ctx.cr6.eq) goto loc_82A22468;
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,16(r30)
	PPC_STORE_U8(ctx.r30.u32 + 16, ctx.r11.u8);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22450;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A22458;
	sub_82A186E0(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,2734
	ctx.r3.s64 = ctx.r3.s64 + 2734;
	// bl 0x82e2ab28
	ctx.lr = 0x82A22468;
	sub_82E2AB28(ctx, base);
loc_82A22468:
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// lwz r3,12324(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a224a4
	if (!ctx.cr6.eq) goto loc_82A224A4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22484;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22494
	if (ctx.cr6.eq) goto loc_82A22494;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22490;
	sub_82A13FE0(ctx, base);
	// b 0x82a22498
	goto loc_82A22498;
loc_82A22494:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22498:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r29)
	PPC_STORE_U32(ctx.r29.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r28)
	PPC_STORE_U8(ctx.r28.u32 + 12328, ctx.r11.u8);
loc_82A224A4:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x82a06488
	ctx.lr = 0x82A224AC;
	sub_82A06488(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A224C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r3,64
	ctx.r3.s64 = 64;
	// bl 0x82545e80
	ctx.lr = 0x82A224CC;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a224fc
	if (ctx.cr6.eq) goto loc_82A224FC;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// std r30,4(r31)
	PPC_STORE_U64(ctx.r31.u32 + 4, ctx.r30.u64);
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r11,r11,-4424
	ctx.r11.s64 = ctx.r11.s64 + -4424;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,12
	ctx.r3.s64 = ctx.r31.s64 + 12;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A224F8;
	sub_82E2AB28(ctx, base);
	// b 0x82a22500
	goto loc_82A22500;
loc_82A224FC:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22500:
	// lwz r3,12324(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22534
	if (!ctx.cr6.eq) goto loc_82A22534;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22514;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22524
	if (ctx.cr6.eq) goto loc_82A22524;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22520;
	sub_82A13FE0(ctx, base);
	// b 0x82a22528
	goto loc_82A22528;
loc_82A22524:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22528:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r29)
	PPC_STORE_U32(ctx.r29.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r28)
	PPC_STORE_U8(ctx.r28.u32 + 12328, ctx.r11.u8);
loc_82A22534:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A22540;
	sub_82A02300(ctx, base);
	// addi r1,r1,384
	ctx.r1.s64 = ctx.r1.s64 + 384;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22548"))) PPC_WEAK_FUNC(sub_82A22548);
PPC_FUNC_IMPL(__imp__sub_82A22548) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22550;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2256C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A22578;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2259c
	if (ctx.cr6.eq) goto loc_82A2259C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// std r30,4(r3)
	PPC_STORE_U64(ctx.r3.u32 + 4, ctx.r30.u64);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r31.u32);
	// addi r11,r11,-4284
	ctx.r11.s64 = ctx.r11.s64 + -4284;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a225a0
	goto loc_82A225A0;
loc_82A2259C:
	// li r29,0
	ctx.r29.s64 = 0;
loc_82A225A0:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a225dc
	if (!ctx.cr6.eq) goto loc_82A225DC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A225B8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a225c8
	if (ctx.cr6.eq) goto loc_82A225C8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A225C4;
	sub_82A13FE0(ctx, base);
	// b 0x82a225cc
	goto loc_82A225CC;
loc_82A225C8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A225CC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A225DC:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A225E8;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A225F0"))) PPC_WEAK_FUNC(sub_82A225F0);
PPC_FUNC_IMPL(__imp__sub_82A225F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22644
	if (!ctx.cr6.eq) goto loc_82A22644;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22620;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22630
	if (ctx.cr6.eq) goto loc_82A22630;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2262C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22634
	goto loc_82A22634;
loc_82A22630:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22634:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22644:
	// addi r7,r30,108
	ctx.r7.s64 = ctx.r30.s64 + 108;
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r6,r30,58
	ctx.r6.s64 = ctx.r30.s64 + 58;
	// addi r5,r30,8
	ctx.r5.s64 = ctx.r30.s64 + 8;
	// bl 0x82a10e68
	ctx.lr = 0x82A22658;
	sub_82A10E68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22670"))) PPC_WEAK_FUNC(sub_82A22670);
PPC_FUNC_IMPL(__imp__sub_82A22670) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a226c4
	if (!ctx.cr6.eq) goto loc_82A226C4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A226A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a226b0
	if (ctx.cr6.eq) goto loc_82A226B0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A226AC;
	sub_82A13FE0(ctx, base);
	// b 0x82a226b4
	goto loc_82A226B4;
loc_82A226B0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A226B4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A226C4:
	// lwz r6,12(r30)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12);
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a05600
	ctx.lr = 0x82A226D4;
	sub_82A05600(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A226F0"))) PPC_WEAK_FUNC(sub_82A226F0);
PPC_FUNC_IMPL(__imp__sub_82A226F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22744
	if (!ctx.cr6.eq) goto loc_82A22744;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22720;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22730
	if (ctx.cr6.eq) goto loc_82A22730;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2272C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22734
	goto loc_82A22734;
loc_82A22730:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22734:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22744:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// extsw r7,r11
	ctx.r7.s64 = ctx.r11.s32;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// rlwinm r11,r10,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// stw r10,4080(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4080, ctx.r10.u32);
	// stw r8,4084(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4084, ctx.r8.u32);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// stfs f0,4076(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4076, temp.u32);
	// frsp f0,f13
	ctx.f0.f64 = double(float(ctx.f13.f64));
	// stfs f0,4072(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4072, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A227B0"))) PPC_WEAK_FUNC(sub_82A227B0);
PPC_FUNC_IMPL(__imp__sub_82A227B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,12324(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a22808
	if (!ctx.cr6.eq) goto loc_82A22808;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A227E0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a227f4
	if (ctx.cr6.eq) goto loc_82A227F4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A227EC;
	sub_82A13FE0(ctx, base);
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// b 0x82a227fc
	goto loc_82A227FC;
loc_82A227F4:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r11.u32);
loc_82A227FC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22808:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r11,11464(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a22834
	if (ctx.cr6.eq) goto loc_82A22834;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a22834
	if (ctx.cr6.eq) goto loc_82A22834;
	// lfs f0,4(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,824(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 824, temp.u32);
loc_82A22834:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22850"))) PPC_WEAK_FUNC(sub_82A22850);
PPC_FUNC_IMPL(__imp__sub_82A22850) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a228a4
	if (!ctx.cr6.eq) goto loc_82A228A4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22880;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22890
	if (ctx.cr6.eq) goto loc_82A22890;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2288C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22894
	goto loc_82A22894;
loc_82A22890:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22894:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A228A4:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a166a0
	ctx.lr = 0x82A228AC;
	sub_82A166A0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A228C8"))) PPC_WEAK_FUNC(sub_82A228C8);
PPC_FUNC_IMPL(__imp__sub_82A228C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2291c
	if (!ctx.cr6.eq) goto loc_82A2291C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A228F8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22908
	if (ctx.cr6.eq) goto loc_82A22908;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22904;
	sub_82A13FE0(ctx, base);
	// b 0x82a2290c
	goto loc_82A2290C;
loc_82A22908:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2290C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2291C:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a16488
	ctx.lr = 0x82A22924;
	sub_82A16488(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22940"))) PPC_WEAK_FUNC(sub_82A22940);
PPC_FUNC_IMPL(__imp__sub_82A22940) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a22994
	if (!ctx.cr6.eq) goto loc_82A22994;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2296C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22980
	if (ctx.cr6.eq) goto loc_82A22980;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22978;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a22984
	goto loc_82A22984;
loc_82A22980:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22984:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22994:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,12356
	ctx.r4.s64 = ctx.r11.s64 + 12356;
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,4460(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4460, ctx.r11.u8);
	// bl 0x82a0d990
	ctx.lr = 0x82A229AC;
	sub_82A0D990(ctx, base);
	// lbz r11,2804(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a229c0
	if (ctx.cr6.eq) goto loc_82A229C0;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,2805(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2805, ctx.r11.u8);
loc_82A229C0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A229D8"))) PPC_WEAK_FUNC(sub_82A229D8);
PPC_FUNC_IMPL(__imp__sub_82A229D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22a2c
	if (!ctx.cr6.eq) goto loc_82A22A2C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22A08;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22a18
	if (ctx.cr6.eq) goto loc_82A22A18;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22A14;
	sub_82A13FE0(ctx, base);
	// b 0x82a22a1c
	goto loc_82A22A1C;
loc_82A22A18:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22A1C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22A2C:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a0cdb0
	ctx.lr = 0x82A22A34;
	sub_82A0CDB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22A50"))) PPC_WEAK_FUNC(sub_82A22A50);
PPC_FUNC_IMPL(__imp__sub_82A22A50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22A58;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a22aa0
	if (!ctx.cr6.eq) goto loc_82A22AA0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22A78;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22a8c
	if (ctx.cr6.eq) goto loc_82A22A8C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22A84;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a22a90
	goto loc_82A22A90;
loc_82A22A8C:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22A90:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22AA0:
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A22AAC;
	sub_823099B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a14e08
	ctx.lr = 0x82A22AB8;
	sub_82A14E08(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22AC0"))) PPC_WEAK_FUNC(sub_82A22AC0);
PPC_FUNC_IMPL(__imp__sub_82A22AC0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22AC8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a22b10
	if (!ctx.cr6.eq) goto loc_82A22B10;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22AE8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22afc
	if (ctx.cr6.eq) goto loc_82A22AFC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22AF4;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a22b00
	goto loc_82A22B00;
loc_82A22AFC:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22B00:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22B10:
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A22B1C;
	sub_823099B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a10730
	ctx.lr = 0x82A22B28;
	sub_82A10730(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22B30"))) PPC_WEAK_FUNC(sub_82A22B30);
PPC_FUNC_IMPL(__imp__sub_82A22B30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22B38;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22b7c
	if (!ctx.cr6.eq) goto loc_82A22B7C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22B58;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22b68
	if (ctx.cr6.eq) goto loc_82A22B68;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22B64;
	sub_82A13FE0(ctx, base);
	// b 0x82a22b6c
	goto loc_82A22B6C;
loc_82A22B68:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22B6C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22B7C:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// ld r4,4620(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4620);
	// lwz r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lwz r11,12(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A22BB4;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22BD4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22BE0"))) PPC_WEAK_FUNC(sub_82A22BE0);
PPC_FUNC_IMPL(__imp__sub_82A22BE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22BE8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22c2c
	if (!ctx.cr6.eq) goto loc_82A22C2C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22C08;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22c18
	if (ctx.cr6.eq) goto loc_82A22C18;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22C14;
	sub_82A13FE0(ctx, base);
	// b 0x82a22c1c
	goto loc_82A22C1C;
loc_82A22C18:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22C1C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22C2C:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// ld r4,4712(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4712);
	// lwz r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lwz r11,12(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A22C64;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A22C84;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22C90"))) PPC_WEAK_FUNC(sub_82A22C90);
PPC_FUNC_IMPL(__imp__sub_82A22C90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22C98;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a22ce0
	if (!ctx.cr6.eq) goto loc_82A22CE0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22CB8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22ccc
	if (ctx.cr6.eq) goto loc_82A22CCC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22CC4;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a22cd0
	goto loc_82A22CD0;
loc_82A22CCC:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22CD0:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22CE0:
	// addi r4,r29,12
	ctx.r4.s64 = ctx.r29.s64 + 12;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A22CEC;
	sub_823099B0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a15238
	ctx.lr = 0x82A22CFC;
	sub_82A15238(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22D08"))) PPC_WEAK_FUNC(sub_82A22D08);
PPC_FUNC_IMPL(__imp__sub_82A22D08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A22D10;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a22d58
	if (!ctx.cr6.eq) goto loc_82A22D58;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22D30;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22d44
	if (ctx.cr6.eq) goto loc_82A22D44;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22D3C;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a22d48
	goto loc_82A22D48;
loc_82A22D44:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A22D48:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22D58:
	// lwz r29,8(r28)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	// lwz r30,4(r28)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02ed0
	ctx.lr = 0x82A22D68;
	sub_82A02ED0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,20(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// stw r30,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r30.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a22d88
	if (ctx.cr6.eq) goto loc_82A22D88;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A22D84;
	sub_82A02F70(ctx, base);
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r29.u32);
loc_82A22D88:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A22D90"))) PPC_WEAK_FUNC(sub_82A22D90);
PPC_FUNC_IMPL(__imp__sub_82A22D90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22de4
	if (!ctx.cr6.eq) goto loc_82A22DE4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22DC0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22dd0
	if (ctx.cr6.eq) goto loc_82A22DD0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22DCC;
	sub_82A13FE0(ctx, base);
	// b 0x82a22dd4
	goto loc_82A22DD4;
loc_82A22DD0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22DD4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22DE4:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a195f0
	ctx.lr = 0x82A22DEC;
	sub_82A195F0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22E08"))) PPC_WEAK_FUNC(sub_82A22E08);
PPC_FUNC_IMPL(__imp__sub_82A22E08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22e54
	if (!ctx.cr6.eq) goto loc_82A22E54;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22E30;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22e40
	if (ctx.cr6.eq) goto loc_82A22E40;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22E3C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22e44
	goto loc_82A22E44;
loc_82A22E40:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22E44:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22E54:
	// bl 0x82a10fd0
	ctx.lr = 0x82A22E58;
	sub_82A10FD0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22E70"))) PPC_WEAK_FUNC(sub_82A22E70);
PPC_FUNC_IMPL(__imp__sub_82A22E70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22ebc
	if (!ctx.cr6.eq) goto loc_82A22EBC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22E98;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22ea8
	if (ctx.cr6.eq) goto loc_82A22EA8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22EA4;
	sub_82A13FE0(ctx, base);
	// b 0x82a22eac
	goto loc_82A22EAC;
loc_82A22EA8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22EAC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22EBC:
	// bl 0x82a0d5f0
	ctx.lr = 0x82A22EC0;
	sub_82A0D5F0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22ED8"))) PPC_WEAK_FUNC(sub_82A22ED8);
PPC_FUNC_IMPL(__imp__sub_82A22ED8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22f24
	if (!ctx.cr6.eq) goto loc_82A22F24;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22F00;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22f10
	if (ctx.cr6.eq) goto loc_82A22F10;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22F0C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22f14
	goto loc_82A22F14;
loc_82A22F10:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22F14:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22F24:
	// bl 0x82a0d6a0
	ctx.lr = 0x82A22F28;
	sub_82A0D6A0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22F40"))) PPC_WEAK_FUNC(sub_82A22F40);
PPC_FUNC_IMPL(__imp__sub_82A22F40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a22f94
	if (!ctx.cr6.eq) goto loc_82A22F94;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22F70;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22f80
	if (ctx.cr6.eq) goto loc_82A22F80;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22F7C;
	sub_82A13FE0(ctx, base);
	// b 0x82a22f84
	goto loc_82A22F84;
loc_82A22F80:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22F84:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A22F94:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a11148
	ctx.lr = 0x82A22F9C;
	sub_82A11148(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A22FB8"))) PPC_WEAK_FUNC(sub_82A22FB8);
PPC_FUNC_IMPL(__imp__sub_82A22FB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A22FC0;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23004
	if (!ctx.cr6.eq) goto loc_82A23004;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A22FE0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a22ff0
	if (ctx.cr6.eq) goto loc_82A22FF0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A22FEC;
	sub_82A13FE0(ctx, base);
	// b 0x82a22ff4
	goto loc_82A22FF4;
loc_82A22FF0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A22FF4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23004:
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// stb r10,4028(r3)
	PPC_STORE_U8(ctx.r3.u32 + 4028, ctx.r10.u8);
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,4640(r10)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r10.u32 + 4640);
	// bl 0x8246bd50
	ctx.lr = 0x82A23034;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23054;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23060"))) PPC_WEAK_FUNC(sub_82A23060);
PPC_FUNC_IMPL(__imp__sub_82A23060) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a230ac
	if (!ctx.cr6.eq) goto loc_82A230AC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23088;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23098
	if (ctx.cr6.eq) goto loc_82A23098;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23094;
	sub_82A13FE0(ctx, base);
	// b 0x82a2309c
	goto loc_82A2309C;
loc_82A23098:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2309C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A230AC:
	// lwz r11,4068(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4068);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4068(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4068, ctx.r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A230D0"))) PPC_WEAK_FUNC(sub_82A230D0);
PPC_FUNC_IMPL(__imp__sub_82A230D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A230D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a23120
	if (!ctx.cr6.eq) goto loc_82A23120;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A230F8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2310c
	if (ctx.cr6.eq) goto loc_82A2310C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23104;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a23110
	goto loc_82A23110;
loc_82A2310C:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A23110:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23120:
	// lwz r4,4(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2312C;
	sub_82A02D50(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// lwz r10,2800(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2800);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// stw r11,2800(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2800, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23158"))) PPC_WEAK_FUNC(sub_82A23158);
PPC_FUNC_IMPL(__imp__sub_82A23158) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A23160;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a231a4
	if (!ctx.cr6.eq) goto loc_82A231A4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23180;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23190
	if (ctx.cr6.eq) goto loc_82A23190;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2318C;
	sub_82A13FE0(ctx, base);
	// b 0x82a23194
	goto loc_82A23194;
loc_82A23190:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23194:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A231A4:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,3584(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 3584);
	// bl 0x8246bd50
	ctx.lr = 0x82A231CC;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A231EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A231F8"))) PPC_WEAK_FUNC(sub_82A231F8);
PPC_FUNC_IMPL(__imp__sub_82A231F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A23200;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23244
	if (!ctx.cr6.eq) goto loc_82A23244;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23220;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23230
	if (ctx.cr6.eq) goto loc_82A23230;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2322C;
	sub_82A13FE0(ctx, base);
	// b 0x82a23234
	goto loc_82A23234;
loc_82A23230:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23234:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23244:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,1480(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 1480);
	// bl 0x8246bd50
	ctx.lr = 0x82A2326C;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2328C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23298"))) PPC_WEAK_FUNC(sub_82A23298);
PPC_FUNC_IMPL(__imp__sub_82A23298) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A232A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a232e8
	if (!ctx.cr6.eq) goto loc_82A232E8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A232C0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a232d4
	if (ctx.cr6.eq) goto loc_82A232D4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A232CC;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a232d8
	goto loc_82A232D8;
loc_82A232D4:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A232D8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A232E8:
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82a35608
	ctx.lr = 0x82A232F4;
	sub_82A35608(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a1a6f0
	ctx.lr = 0x82A23300;
	sub_82A1A6F0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23308"))) PPC_WEAK_FUNC(sub_82A23308);
PPC_FUNC_IMPL(__imp__sub_82A23308) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A23310;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lis r27,-31969
	ctx.r27.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23354
	if (!ctx.cr6.eq) goto loc_82A23354;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23334;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23344
	if (ctx.cr6.eq) goto loc_82A23344;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23340;
	sub_82A13FE0(ctx, base);
	// b 0x82a23348
	goto loc_82A23348;
loc_82A23344:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23348:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r27)
	PPC_STORE_U8(ctx.r27.u32 + 12328, ctx.r11.u8);
loc_82A23354:
	// lwz r30,16(r28)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2338c
	if (!ctx.cr6.eq) goto loc_82A2338C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2336C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2337c
	if (ctx.cr6.eq) goto loc_82A2337C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23378;
	sub_82A13FE0(ctx, base);
	// b 0x82a23380
	goto loc_82A23380;
loc_82A2337C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23380:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r27)
	PPC_STORE_U8(ctx.r27.u32 + 12328, ctx.r11.u8);
loc_82A2338C:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// lwz r3,2784(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r4,r28,4
	ctx.r4.s64 = ctx.r28.s64 + 4;
	// bl 0x82a35a00
	ctx.lr = 0x82A2339C;
	sub_82A35A00(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,4289(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4289, ctx.r11.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A233B0"))) PPC_WEAK_FUNC(sub_82A233B0);
PPC_FUNC_IMPL(__imp__sub_82A233B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A233B8;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a233fc
	if (!ctx.cr6.eq) goto loc_82A233FC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A233D8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a233e8
	if (ctx.cr6.eq) goto loc_82A233E8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A233E4;
	sub_82A13FE0(ctx, base);
	// b 0x82a233ec
	goto loc_82A233EC;
loc_82A233E8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A233EC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A233FC:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,2980(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 2980);
	// bl 0x8246bd50
	ctx.lr = 0x82A23424;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23444;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23450"))) PPC_WEAK_FUNC(sub_82A23450);
PPC_FUNC_IMPL(__imp__sub_82A23450) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2349c
	if (!ctx.cr6.eq) goto loc_82A2349C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23478;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23488
	if (ctx.cr6.eq) goto loc_82A23488;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23484;
	sub_82A13FE0(ctx, base);
	// b 0x82a2348c
	goto loc_82A2348C;
loc_82A23488:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2348C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2349C:
	// lwz r11,4392(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4392);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4392(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4392, ctx.r11.u32);
	// bl 0x82a168b8
	ctx.lr = 0x82A234AC;
	sub_82A168B8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A234C0"))) PPC_WEAK_FUNC(sub_82A234C0);
PPC_FUNC_IMPL(__imp__sub_82A234C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23514
	if (!ctx.cr6.eq) goto loc_82A23514;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A234F0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23500
	if (ctx.cr6.eq) goto loc_82A23500;
	// bl 0x82a13fe0
	ctx.lr = 0x82A234FC;
	sub_82A13FE0(ctx, base);
	// b 0x82a23504
	goto loc_82A23504;
loc_82A23500:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23504:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23514:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// stw r11,4400(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4400, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,4396(r3)
	PPC_STORE_U8(ctx.r3.u32 + 4396, ctx.r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23540"))) PPC_WEAK_FUNC(sub_82A23540);
PPC_FUNC_IMPL(__imp__sub_82A23540) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A23548;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a23590
	if (!ctx.cr6.eq) goto loc_82A23590;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23568;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2357c
	if (ctx.cr6.eq) goto loc_82A2357C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23574;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a23580
	goto loc_82A23580;
loc_82A2357C:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A23580:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23590:
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823128a8
	ctx.lr = 0x82A2359C;
	sub_823128A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a0db20
	ctx.lr = 0x82A235A8;
	sub_82A0DB20(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A235B0"))) PPC_WEAK_FUNC(sub_82A235B0);
PPC_FUNC_IMPL(__imp__sub_82A235B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23604
	if (!ctx.cr6.eq) goto loc_82A23604;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A235E0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a235f0
	if (ctx.cr6.eq) goto loc_82A235F0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A235EC;
	sub_82A13FE0(ctx, base);
	// b 0x82a235f4
	goto loc_82A235F4;
loc_82A235F0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A235F4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23604:
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a16cb8
	ctx.lr = 0x82A23610;
	sub_82A16CB8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23628"))) PPC_WEAK_FUNC(sub_82A23628);
PPC_FUNC_IMPL(__imp__sub_82A23628) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2367c
	if (!ctx.cr6.eq) goto loc_82A2367C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23658;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23668
	if (ctx.cr6.eq) goto loc_82A23668;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23664;
	sub_82A13FE0(ctx, base);
	// b 0x82a2366c
	goto loc_82A2366C;
loc_82A23668:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2366C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2367C:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A23688;
	sub_82A02D50(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a236a4
	if (ctx.cr6.eq) goto loc_82A236A4;
	// lwz r11,16(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a236a4
	if (ctx.cr6.eq) goto loc_82A236A4;
	// bl 0x82a186e0
	ctx.lr = 0x82A236A0;
	sub_82A186E0(ctx, base);
	// bl 0x82a11d60
	ctx.lr = 0x82A236A4;
	sub_82A11D60(ctx, base);
loc_82A236A4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A236C0"))) PPC_WEAK_FUNC(sub_82A236C0);
PPC_FUNC_IMPL(__imp__sub_82A236C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2370c
	if (!ctx.cr6.eq) goto loc_82A2370C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A236E8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a236f8
	if (ctx.cr6.eq) goto loc_82A236F8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A236F4;
	sub_82A13FE0(ctx, base);
	// b 0x82a236fc
	goto loc_82A236FC;
loc_82A236F8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A236FC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2370C:
	// bl 0x82a0cbe0
	ctx.lr = 0x82A23710;
	sub_82A0CBE0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23728"))) PPC_WEAK_FUNC(sub_82A23728);
PPC_FUNC_IMPL(__imp__sub_82A23728) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A23730;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23774
	if (!ctx.cr6.eq) goto loc_82A23774;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23750;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23760
	if (ctx.cr6.eq) goto loc_82A23760;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2375C;
	sub_82A13FE0(ctx, base);
	// b 0x82a23764
	goto loc_82A23764;
loc_82A23760:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23764:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23774:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,2628(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 2628);
	// bl 0x8246bd50
	ctx.lr = 0x82A2379C;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A237BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A237C8"))) PPC_WEAK_FUNC(sub_82A237C8);
PPC_FUNC_IMPL(__imp__sub_82A237C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r11,12324(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a23818
	if (!ctx.cr6.eq) goto loc_82A23818;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A237F0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23804
	if (ctx.cr6.eq) goto loc_82A23804;
	// bl 0x82a13fe0
	ctx.lr = 0x82A237FC;
	sub_82A13FE0(ctx, base);
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// b 0x82a2380c
	goto loc_82A2380C;
loc_82A23804:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r11.u32);
loc_82A2380C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23818:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23830"))) PPC_WEAK_FUNC(sub_82A23830);
PPC_FUNC_IMPL(__imp__sub_82A23830) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2387c
	if (!ctx.cr6.eq) goto loc_82A2387C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23858;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23868
	if (ctx.cr6.eq) goto loc_82A23868;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23864;
	sub_82A13FE0(ctx, base);
	// b 0x82a2386c
	goto loc_82A2386C;
loc_82A23868:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2386C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2387C:
	// bl 0x82a05048
	ctx.lr = 0x82A23880;
	sub_82A05048(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23898"))) PPC_WEAK_FUNC(sub_82A23898);
PPC_FUNC_IMPL(__imp__sub_82A23898) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a238ec
	if (!ctx.cr6.eq) goto loc_82A238EC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A238C8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a238d8
	if (ctx.cr6.eq) goto loc_82A238D8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A238D4;
	sub_82A13FE0(ctx, base);
	// b 0x82a238dc
	goto loc_82A238DC;
loc_82A238D8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A238DC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A238EC:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a12530
	ctx.lr = 0x82A238F4;
	sub_82A12530(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23910"))) PPC_WEAK_FUNC(sub_82A23910);
PPC_FUNC_IMPL(__imp__sub_82A23910) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,8
	ctx.r3.s64 = 8;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x82545e80
	ctx.lr = 0x82A2393C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2395c
	if (ctx.cr6.eq) goto loc_82A2395C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,-4384
	ctx.r11.s64 = ctx.r11.s64 + -4384;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a23960
	goto loc_82A23960;
loc_82A2395C:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23960:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2399c
	if (!ctx.cr6.eq) goto loc_82A2399C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23978;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23988
	if (ctx.cr6.eq) goto loc_82A23988;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23984;
	sub_82A13FE0(ctx, base);
	// b 0x82a2398c
	goto loc_82A2398C;
loc_82A23988:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2398C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2399C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A239A8;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A239C0"))) PPC_WEAK_FUNC(sub_82A239C0);
PPC_FUNC_IMPL(__imp__sub_82A239C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A239C8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,12
	ctx.r3.s64 = 12;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// bl 0x82545e80
	ctx.lr = 0x82A239E8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23a0c
	if (ctx.cr6.eq) goto loc_82A23A0C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// stw r30,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r30.u32);
	// addi r11,r11,-4380
	ctx.r11.s64 = ctx.r11.s64 + -4380;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a23a10
	goto loc_82A23A10;
loc_82A23A0C:
	// li r29,0
	ctx.r29.s64 = 0;
loc_82A23A10:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23a4c
	if (!ctx.cr6.eq) goto loc_82A23A4C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23A28;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23a38
	if (ctx.cr6.eq) goto loc_82A23A38;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23A34;
	sub_82A13FE0(ctx, base);
	// b 0x82a23a3c
	goto loc_82A23A3C;
loc_82A23A38:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23A3C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23A4C:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23A58;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A23A60"))) PPC_WEAK_FUNC(sub_82A23A60);
PPC_FUNC_IMPL(__imp__sub_82A23A60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A23A7C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23a98
	if (ctx.cr6.eq) goto loc_82A23A98;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,-4376
	ctx.r11.s64 = ctx.r11.s64 + -4376;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a23a9c
	goto loc_82A23A9C;
loc_82A23A98:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23A9C:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23ad8
	if (!ctx.cr6.eq) goto loc_82A23AD8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23AB4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23ac4
	if (ctx.cr6.eq) goto loc_82A23AC4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23AC0;
	sub_82A13FE0(ctx, base);
	// b 0x82a23ac8
	goto loc_82A23AC8;
loc_82A23AC4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23AC8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23AD8:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23AE4;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23B00"))) PPC_WEAK_FUNC(sub_82A23B00);
PPC_FUNC_IMPL(__imp__sub_82A23B00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A23B1C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23b38
	if (ctx.cr6.eq) goto loc_82A23B38;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,-4372
	ctx.r11.s64 = ctx.r11.s64 + -4372;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a23b3c
	goto loc_82A23B3C;
loc_82A23B38:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23B3C:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23b78
	if (!ctx.cr6.eq) goto loc_82A23B78;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23B54;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23b64
	if (ctx.cr6.eq) goto loc_82A23B64;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23B60;
	sub_82A13FE0(ctx, base);
	// b 0x82a23b68
	goto loc_82A23B68;
loc_82A23B64:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23B68:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23B78:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23B84;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23BA0"))) PPC_WEAK_FUNC(sub_82A23BA0);
PPC_FUNC_IMPL(__imp__sub_82A23BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A23BBC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23bd8
	if (ctx.cr6.eq) goto loc_82A23BD8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,-4368
	ctx.r11.s64 = ctx.r11.s64 + -4368;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a23bdc
	goto loc_82A23BDC;
loc_82A23BD8:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23BDC:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23c18
	if (!ctx.cr6.eq) goto loc_82A23C18;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23BF4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23c04
	if (ctx.cr6.eq) goto loc_82A23C04;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23C00;
	sub_82A13FE0(ctx, base);
	// b 0x82a23c08
	goto loc_82A23C08;
loc_82A23C04:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23C08:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23C18:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23C24;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23C40"))) PPC_WEAK_FUNC(sub_82A23C40);
PPC_FUNC_IMPL(__imp__sub_82A23C40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-1152(r1)
	ea = -1152 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r5,1040
	ctx.r5.s64 = 1040;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82e29500
	ctx.lr = 0x82A23C68;
	sub_82E29500(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23C7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// li r6,1024
	ctx.r6.s64 = 1024;
	// addi r30,r11,25332
	ctx.r30.s64 = ctx.r11.s64 + 25332;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23CA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,28(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 28);
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23CC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,1108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1108, ctx.r3.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,32(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23CE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,1112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1112, ctx.r3.u32);
	// li r3,1044
	ctx.r3.s64 = 1044;
	// bl 0x82545e80
	ctx.lr = 0x82A23CEC;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a23d18
	if (ctx.cr6.eq) goto loc_82A23D18;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// addi r11,r11,-4388
	ctx.r11.s64 = ctx.r11.s64 + -4388;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,1040
	ctx.r5.s64 = 1040;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e28fd0
	ctx.lr = 0x82A23D14;
	sub_82E28FD0(ctx, base);
	// b 0x82a23d1c
	goto loc_82A23D1C;
loc_82A23D18:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A23D1C:
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23d58
	if (!ctx.cr6.eq) goto loc_82A23D58;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23D34;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23d44
	if (ctx.cr6.eq) goto loc_82A23D44;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23D40;
	sub_82A13FE0(ctx, base);
	// b 0x82a23d48
	goto loc_82A23D48;
loc_82A23D44:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23D48:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23D58:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23D64;
	sub_82A02300(ctx, base);
	// addi r1,r1,1152
	ctx.r1.s64 = ctx.r1.s64 + 1152;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23D80"))) PPC_WEAK_FUNC(sub_82A23D80);
PPC_FUNC_IMPL(__imp__sub_82A23D80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,12
	ctx.r3.s64 = 12;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// bl 0x82545e80
	ctx.lr = 0x82A23DA0;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a23de8
	if (ctx.cr6.eq) goto loc_82A23DE8;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23DC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23DD0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
	// std r3,4(r31)
	PPC_STORE_U64(ctx.r31.u32 + 4, ctx.r3.u64);
	// addi r11,r11,-4364
	ctx.r11.s64 = ctx.r11.s64 + -4364;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// b 0x82a23dec
	goto loc_82A23DEC;
loc_82A23DE8:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23DEC:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23e28
	if (!ctx.cr6.eq) goto loc_82A23E28;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23E04;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23e14
	if (ctx.cr6.eq) goto loc_82A23E14;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23E10;
	sub_82A13FE0(ctx, base);
	// b 0x82a23e18
	goto loc_82A23E18;
loc_82A23E14:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23E18:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23E28:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23E34;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23E50"))) PPC_WEAK_FUNC(sub_82A23E50);
PPC_FUNC_IMPL(__imp__sub_82A23E50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,12
	ctx.r3.s64 = 12;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// bl 0x82545e80
	ctx.lr = 0x82A23E70;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a23eb8
	if (ctx.cr6.eq) goto loc_82A23EB8;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23E90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A23EA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
	// std r3,4(r31)
	PPC_STORE_U64(ctx.r31.u32 + 4, ctx.r3.u64);
	// addi r11,r11,-4360
	ctx.r11.s64 = ctx.r11.s64 + -4360;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// b 0x82a23ebc
	goto loc_82A23EBC;
loc_82A23EB8:
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A23EBC:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a23ef8
	if (!ctx.cr6.eq) goto loc_82A23EF8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A23ED4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23ee4
	if (ctx.cr6.eq) goto loc_82A23EE4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A23EE0;
	sub_82A13FE0(ctx, base);
	// b 0x82a23ee8
	goto loc_82A23EE8;
loc_82A23EE4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A23EE8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A23EF8:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A23F04;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A23F20"))) PPC_WEAK_FUNC(sub_82A23F20);
PPC_FUNC_IMPL(__imp__sub_82A23F20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A23F28;
	__savegprlr_29(ctx, base);
	// stwu r1,-1264(r1)
	ea = -1264 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x822394f0
	ctx.lr = 0x82A23F3C;
	sub_822394F0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x822395a8
	ctx.lr = 0x82A23F48;
	sub_822395A8(ctx, base);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// cmpwi cr6,r11,78
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 78, ctx.xer);
	// beq cr6,0x82a23fd8
	if (ctx.cr6.eq) goto loc_82A23FD8;
	// cmpwi cr6,r11,88
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 88, ctx.xer);
	// beq cr6,0x82a23fa4
	if (ctx.cr6.eq) goto loc_82A23FA4;
	// cmpwi cr6,r11,89
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 89, ctx.xer);
	// bne cr6,0x82a24058
	if (!ctx.cr6.eq) goto loc_82A24058;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82239808
	ctx.lr = 0x82A23F74;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A23F7C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23f9c
	if (ctx.cr6.eq) goto loc_82A23F9C;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r10,r10,-4304
	ctx.r10.s64 = ctx.r10.s64 + -4304;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a24044
	goto loc_82A24044;
loc_82A23F9C:
	// li r31,0
	ctx.r31.s64 = 0;
	// b 0x82a24048
	goto loc_82A24048;
loc_82A23FA4:
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82239808
	ctx.lr = 0x82A23FB0;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A23FB8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a23f9c
	if (ctx.cr6.eq) goto loc_82A23F9C;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r10,r10,-4308
	ctx.r10.s64 = ctx.r10.s64 + -4308;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a24044
	goto loc_82A24044;
loc_82A23FD8:
	// li r11,-1
	ctx.r11.s64 = -1;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r30,r1,160
	ctx.r30.s64 = ctx.r1.s64 + 160;
	// addi r29,r1,96
	ctx.r29.s64 = ctx.r1.s64 + 96;
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r11.u64);
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.r11.u64);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// stw r31,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r31.u32);
	// stw r31,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r31.u32);
	// stw r31,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r31.u32);
	// stw r31,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r31.u32);
	// stw r31,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r31.u32);
	// std r31,144(r1)
	PPC_STORE_U64(ctx.r1.u32 + 144, ctx.r31.u64);
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A24020;
	sub_82A186E0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82a05248
	ctx.lr = 0x82A2402C;
	sub_82A05248(ctx, base);
	// li r3,64
	ctx.r3.s64 = 64;
	// bl 0x82545e80
	ctx.lr = 0x82A24034;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24048
	if (ctx.cr6.eq) goto loc_82A24048;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x82a04150
	ctx.lr = 0x82A24044;
	sub_82A04150(ctx, base);
loc_82A24044:
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_82A24048:
	// bl 0x82a186e0
	ctx.lr = 0x82A2404C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A24058;
	sub_82A02300(ctx, base);
loc_82A24058:
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x82239548
	ctx.lr = 0x82A24060;
	sub_82239548(ctx, base);
	// addi r1,r1,1264
	ctx.r1.s64 = ctx.r1.s64 + 1264;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24068"))) PPC_WEAK_FUNC(sub_82A24068);
PPC_FUNC_IMPL(__imp__sub_82A24068) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A24070;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,12
	ctx.r3.s64 = 12;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// bl 0x82545e80
	ctx.lr = 0x82A24084;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a240a8
	if (ctx.cr6.eq) goto loc_82A240A8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// stw r30,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r30.u32);
	// addi r11,r11,-4356
	ctx.r11.s64 = ctx.r11.s64 + -4356;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a240ac
	goto loc_82A240AC;
loc_82A240A8:
	// li r29,0
	ctx.r29.s64 = 0;
loc_82A240AC:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a240e8
	if (!ctx.cr6.eq) goto loc_82A240E8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A240C4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a240d4
	if (ctx.cr6.eq) goto loc_82A240D4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A240D0;
	sub_82A13FE0(ctx, base);
	// b 0x82a240d8
	goto loc_82A240D8;
loc_82A240D4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A240D8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A240E8:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A240F4;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24100"))) PPC_WEAK_FUNC(sub_82A24100);
PPC_FUNC_IMPL(__imp__sub_82A24100) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A24108;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r5)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	// mr r31,r6
	ctx.r31.u64 = ctx.r6.u64;
	// mr r3,r5
	ctx.r3.u64 = ctx.r5.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24124;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24134;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A24140;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24164
	if (ctx.cr6.eq) goto loc_82A24164;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// std r30,4(r3)
	PPC_STORE_U64(ctx.r3.u32 + 4, ctx.r30.u64);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r31.u32);
	// addi r11,r11,-4284
	ctx.r11.s64 = ctx.r11.s64 + -4284;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a24168
	goto loc_82A24168;
loc_82A24164:
	// li r29,0
	ctx.r29.s64 = 0;
loc_82A24168:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a241a4
	if (!ctx.cr6.eq) goto loc_82A241A4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A24180;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24190
	if (ctx.cr6.eq) goto loc_82A24190;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2418C;
	sub_82A13FE0(ctx, base);
	// b 0x82a24194
	goto loc_82A24194;
loc_82A24190:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A24194:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A241A4:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A241B0;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A241B8"))) PPC_WEAK_FUNC(sub_82A241B8);
PPC_FUNC_IMPL(__imp__sub_82A241B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A241C0;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r4,164(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 164);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x82a241f4
	if (ctx.cr6.eq) goto loc_82A241F4;
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// lwz r3,19928(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19928);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A241F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r29,164(r27)
	PPC_STORE_U32(ctx.r27.u32 + 164, ctx.r29.u32);
loc_82A241F4:
	// addi r11,r27,144
	ctx.r11.s64 = ctx.r27.s64 + 144;
	// li r30,2
	ctx.r30.s64 = 2;
	// addi r31,r11,4
	ctx.r31.s64 = ctx.r11.s64 + 4;
	// lis r26,-31973
	ctx.r26.s64 = -2095382528;
loc_82A24204:
	// addi r31,r31,-36
	ctx.r31.s64 = ctx.r31.s64 + -36;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x82a35740
	ctx.lr = 0x82A24218;
	sub_82A35740(ctx, base);
	// lwz r28,0(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a2424c
	if (ctx.cr6.eq) goto loc_82A2424C;
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a24238
	if (!ctx.cr6.eq) goto loc_82A24238;
	// bl 0x82545cc0
	ctx.lr = 0x82A24234;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
loc_82A24238:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2424C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2424C:
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// stw r29,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r29.u32);
	// stw r29,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r29.u32);
	// stw r29,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r29.u32);
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bge cr6,0x82a24204
	if (!ctx.cr6.lt) goto loc_82A24204;
	// addi r3,r27,24
	ctx.r3.s64 = ctx.r27.s64 + 24;
	// bl 0x82480d20
	ctx.lr = 0x82A2426C;
	sub_82480D20(ctx, base);
	// addi r31,r27,12
	ctx.r31.s64 = ctx.r27.s64 + 12;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x82a35740
	ctx.lr = 0x82A24280;
	sub_82A35740(ctx, base);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a242b4
	if (ctx.cr6.eq) goto loc_82A242B4;
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a242a0
	if (!ctx.cr6.eq) goto loc_82A242A0;
	// bl 0x82545cc0
	ctx.lr = 0x82A2429C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
loc_82A242A0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A242B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A242B4:
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r29,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r29.u32);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// stw r29,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r29.u32);
	// stw r29,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r29.u32);
	// lwz r5,4(r27)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// bl 0x82a35740
	ctx.lr = 0x82A242D0;
	sub_82A35740(ctx, base);
	// lwz r31,0(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a24304
	if (ctx.cr6.eq) goto loc_82A24304;
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a242f0
	if (!ctx.cr6.eq) goto loc_82A242F0;
	// bl 0x82545cc0
	ctx.lr = 0x82A242EC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 8344);
loc_82A242F0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24304;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A24304:
	// stw r29,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r29.u32);
	// stw r29,8(r27)
	PPC_STORE_U32(ctx.r27.u32 + 8, ctx.r29.u32);
	// stw r29,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r29.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24318"))) PPC_WEAK_FUNC(sub_82A24318);
PPC_FUNC_IMPL(__imp__sub_82A24318) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r3,596
	ctx.r3.s64 = 596;
	// bl 0x82a337c0
	ctx.lr = 0x82A24338;
	sub_82A337C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24348
	if (ctx.cr6.eq) goto loc_82A24348;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A24348;
	sub_82A18048(ctx, base);
loc_82A24348:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24360"))) PPC_WEAK_FUNC(sub_82A24360);
PPC_FUNC_IMPL(__imp__sub_82A24360) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A24368;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r9,8(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x82a243a8
	if (!ctx.cr6.gt) goto loc_82A243A8;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// lwz r8,44(r26)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r26.u32 + 44);
	// addi r11,r11,44
	ctx.r11.s64 = ctx.r11.s64 + 44;
loc_82A2438C:
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpw cr6,r8,r7
	ctx.cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, ctx.xer);
	// beq cr6,0x82a2444c
	if (ctx.cr6.eq) goto loc_82A2444C;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,596
	ctx.r11.s64 = ctx.r11.s64 + 596;
	// cmpw cr6,r10,r9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, ctx.xer);
	// blt cr6,0x82a2438c
	if (ctx.cr6.lt) goto loc_82A2438C;
loc_82A243A8:
	// addi r31,r4,4
	ctx.r31.s64 = ctx.r4.s64 + 4;
	// lwz r27,4(r31)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addi r11,r27,1
	ctx.r11.s64 = ctx.r27.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// ble cr6,0x82a24430
	if (!ctx.cr6.gt) goto loc_82A24430;
	// li r4,596
	ctx.r4.s64 = 596;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82416640
	ctx.lr = 0x82A243D0;
	sub_82416640(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r28,0(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// bne cr6,0x82a243f0
	if (!ctx.cr6.eq) goto loc_82A243F0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a24430
	if (ctx.cr6.eq) goto loc_82A24430;
loc_82A243F0:
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// mulli r29,r11,596
	ctx.r29.s64 = ctx.r11.s64 * 596;
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2440c
	if (!ctx.cr6.eq) goto loc_82A2440C;
	// bl 0x82545cc0
	ctx.lr = 0x82A24408;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8344);
loc_82A2440C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2442C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
loc_82A24430:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mulli r11,r27,596
	ctx.r11.s64 = ctx.r27.s64 * 596;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2444c
	if (ctx.cr6.eq) goto loc_82A2444C;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A2444C;
	sub_82A18048(ctx, base);
loc_82A2444C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24458"))) PPC_WEAK_FUNC(sub_82A24458);
PPC_FUNC_IMPL(__imp__sub_82A24458) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A24470;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24480;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a245b4
	if (ctx.cr6.eq) goto loc_82A245B4;
	// bl 0x82219f20
	ctx.lr = 0x82A2448C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2449C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A244AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a245b4
	if (ctx.cr6.eq) goto loc_82A245B4;
	// bl 0x82219f20
	ctx.lr = 0x82A244B8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A244C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A244D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A244E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,2
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 2, ctx.xer);
	// blt cr6,0x82a245b4
	if (ctx.cr6.lt) goto loc_82A245B4;
	// bl 0x82a186e0
	ctx.lr = 0x82A244F4;
	sub_82A186E0(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82a05738
	ctx.lr = 0x82A244FC;
	sub_82A05738(ctx, base);
	// lwz r11,780(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 780);
	// lis r10,6990
	ctx.r10.s64 = 458096640;
	// addi r11,r11,45
	ctx.r11.s64 = ctx.r11.s64 + 45;
	// ori r8,r10,33205
	ctx.r8.u64 = ctx.r10.u64 | 33205;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r11,r31,184
	ctx.r11.s64 = ctx.r31.s64 + 184;
	// li r10,25
	ctx.r10.s64 = 25;
	// stwx r3,r9,r31
	PPC_STORE_U32(ctx.r9.u32 + ctx.r31.u32, ctx.r3.u32);
	// lwz r9,780(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 780);
	// stw r7,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r7.u32);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// mulhw r8,r9,r8
	ctx.r8.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r8.s32)) >> 32;
	// srawi r8,r8,4
	ctx.xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0xF) != 0);
	ctx.r8.s64 = ctx.r8.s32 >> 4;
	// rlwinm r7,r8,1,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0x1;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// mulli r8,r8,150
	ctx.r8.s64 = ctx.r8.s64 * 150;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// stw r9,780(r31)
	PPC_STORE_U32(ctx.r31.u32 + 780, ctx.r9.u32);
loc_82A24548:
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + -4);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// lwz r8,784(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 784);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// lwz r8,12(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// lwz r8,16(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// addi r11,r11,24
	ctx.r11.s64 = ctx.r11.s64 + 24;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// stw r9,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r9.u32);
	// bne cr6,0x82a24548
	if (!ctx.cr6.eq) goto loc_82A24548;
	// rotlwi r11,r9,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// li r10,150
	ctx.r10.s64 = 150;
	// divw r11,r11,r10
	ctx.r11.s32 = ctx.r11.s32 / ctx.r10.s32;
	// stw r11,784(r31)
	PPC_STORE_U32(ctx.r31.u32 + 784, ctx.r11.u32);
loc_82A245B4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A245C8"))) PPC_WEAK_FUNC(sub_82A245C8);
PPC_FUNC_IMPL(__imp__sub_82A245C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31968
	ctx.r31.s64 = -2095054848;
	// lwz r3,23584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a24610
	if (!ctx.cr6.eq) goto loc_82A24610;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x82545e80
	ctx.lr = 0x82A245F0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24600
	if (ctx.cr6.eq) goto loc_82A24600;
	// bl 0x82a18680
	ctx.lr = 0x82A245FC;
	sub_82A18680(ctx, base);
	// b 0x82a24604
	goto loc_82A24604;
loc_82A24600:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A24604:
	// stw r3,23584(r31)
	PPC_STORE_U32(ctx.r31.u32 + 23584, ctx.r3.u32);
	// bl 0x82a13e88
	ctx.lr = 0x82A2460C;
	sub_82A13E88(ctx, base);
	// lwz r3,23584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
loc_82A24610:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24628"))) PPC_WEAK_FUNC(sub_82A24628);
PPC_FUNC_IMPL(__imp__sub_82A24628) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,4000(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4000);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// b 0x82a212c8
	sub_82A212C8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24638"))) PPC_WEAK_FUNC(sub_82A24638);
PPC_FUNC_IMPL(__imp__sub_82A24638) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24640"))) PPC_WEAK_FUNC(sub_82A24640);
PPC_FUNC_IMPL(__imp__sub_82A24640) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,4000(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4000);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a24660
	if (ctx.cr6.eq) goto loc_82A24660;
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x82a24668
	goto loc_82A24668;
loc_82A24660:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_82A24668:
	// b 0x82a213a0
	sub_82A213A0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2466C"))) PPC_WEAK_FUNC(sub_82A2466C);
PPC_FUNC_IMPL(__imp__sub_82A2466C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24670"))) PPC_WEAK_FUNC(sub_82A24670);
PPC_FUNC_IMPL(__imp__sub_82A24670) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A24678;
	__savegprlr_26(ctx, base);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2475c
	if (ctx.cr6.eq) goto loc_82A2475C;
	// ld r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// bl 0x82a02e50
	ctx.lr = 0x82A2469C;
	sub_82A02E50(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82a24770
	if (!ctx.cr6.eq) goto loc_82A24770;
	// ld r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// li r28,0
	ctx.r28.s64 = 0;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// li r30,-1
	ctx.r30.s64 = -1;
	// bl 0x82a02dd0
	ctx.lr = 0x82A246BC;
	sub_82A02DD0(ctx, base);
	// lwz r11,16(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a246d0
	if (ctx.cr6.eq) goto loc_82A246D0;
	// lwz r30,1704(r29)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1704);
	// li r28,1
	ctx.r28.s64 = 1;
loc_82A246D0:
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// ld r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r31.u32 + 48);
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// lwz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// ld r6,24(r31)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x82a02b28
	ctx.lr = 0x82A246FC;
	sub_82A02B28(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a24724
	if (ctx.cr6.eq) goto loc_82A24724;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A24710;
	sub_82A0BFB0(ctx, base);
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a24724
	if (ctx.cr6.eq) goto loc_82A24724;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,4012(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4012, ctx.r11.u32);
loc_82A24724:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A24728;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a24768
	if (!ctx.cr6.eq) goto loc_82A24768;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x823099b0
	ctx.lr = 0x82A24744;
	sub_823099B0(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a34278
	ctx.lr = 0x82A24750;
	sub_82A34278(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A24758;
	sub_82309A60(ctx, base);
	// b 0x82a24768
	goto loc_82A24768;
loc_82A2475C:
	// ld r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// bl 0x82a02dd0
	ctx.lr = 0x82A24764;
	sub_82A02DD0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_82A24768:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a24878
	if (ctx.cr6.eq) goto loc_82A24878;
loc_82A24770:
	// lwz r11,24(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a247e4
	if (!ctx.cr6.eq) goto loc_82A247E4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A24788;
	sub_82A02F70(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a247e4
	if (ctx.cr6.eq) goto loc_82A247E4;
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,52(r28)
	PPC_STORE_U32(ctx.r28.u32 + 52, ctx.r11.u32);
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a247e4
	if (!ctx.cr6.eq) goto loc_82A247E4;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A247AC;
	sub_82A0BFB0(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a247c4
	if (ctx.cr6.eq) goto loc_82A247C4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,4(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// bl 0x82a0cf50
	ctx.lr = 0x82A247C4;
	sub_82A0CF50(ctx, base);
loc_82A247C4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a0e0c0
	ctx.lr = 0x82A247CC;
	sub_82A0E0C0(ctx, base);
	// lwz r4,4(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a33138
	ctx.lr = 0x82A247D8;
	sub_82A33138(ctx, base);
	// ld r4,28(r28)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r28.u32 + 28);
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a08cf8
	ctx.lr = 0x82A247E4;
	sub_82A08CF8(ctx, base);
loc_82A247E4:
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r28,-1
	ctx.r28.s64 = -1;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// beq cr6,0x82a2480c
	if (ctx.cr6.eq) goto loc_82A2480C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A247FC;
	sub_82A0BFB0(ctx, base);
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2480c
	if (ctx.cr6.eq) goto loc_82A2480C;
	// lwz r28,4(r30)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
loc_82A2480C:
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r28,-1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, -1, ctx.xer);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// stw r11,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r11.u32);
	// ld r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// std r11,28(r30)
	PPC_STORE_U64(ctx.r30.u32 + 28, ctx.r11.u64);
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r11,40(r30)
	PPC_STORE_U32(ctx.r30.u32 + 40, ctx.r11.u32);
	// lwz r11,36(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// stw r11,44(r30)
	PPC_STORE_U32(ctx.r30.u32 + 44, ctx.r11.u32);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,48(r30)
	PPC_STORE_U32(ctx.r30.u32 + 48, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,52(r30)
	PPC_STORE_U32(ctx.r30.u32 + 52, ctx.r11.u32);
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// stw r11,64(r30)
	PPC_STORE_U32(ctx.r30.u32 + 64, ctx.r11.u32);
	// beq cr6,0x82a24984
	if (ctx.cr6.eq) goto loc_82A24984;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A24860;
	sub_82A02D50(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a24984
	if (!ctx.cr6.eq) goto loc_82A24984;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a33138
	ctx.lr = 0x82A24874;
	sub_82A33138(ctx, base);
	// b 0x82a24984
	goto loc_82A24984;
loc_82A24878:
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// li r27,0
	ctx.r27.s64 = 0;
	// ld r26,8(r31)
	ctx.r26.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// li r28,-1
	ctx.r28.s64 = -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a248dc
	if (ctx.cr6.eq) goto loc_82A248DC;
	// bl 0x82219f20
	ctx.lr = 0x82A24894;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A248A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A248B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// ld r30,24(r31)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A248C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpd cr6,r3,r30
	ctx.cr6.compare<int64_t>(ctx.r3.s64, ctx.r30.s64, ctx.xer);
	// bne cr6,0x82a248dc
	if (!ctx.cr6.eq) goto loc_82A248DC;
	// lwz r28,1704(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1704);
	// mr r26,r30
	ctx.r26.u64 = ctx.r30.u64;
	// b 0x82a24920
	goto loc_82A24920;
loc_82A248DC:
	// bl 0x82219f20
	ctx.lr = 0x82A248E0;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A248F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24900;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24910;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// cmpd cr6,r3,r11
	ctx.cr6.compare<int64_t>(ctx.r3.s64, ctx.r11.s64, ctx.xer);
	// bne cr6,0x82a24924
	if (!ctx.cr6.eq) goto loc_82A24924;
	// lwz r28,1700(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1700);
loc_82A24920:
	// li r27,1
	ctx.r27.s64 = 1;
loc_82A24924:
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// ld r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r31.u32 + 48);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// lwz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x82a02b28
	ctx.lr = 0x82A24950;
	sub_82A02B28(ctx, base);
	// ld r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// std r11,28(r30)
	PPC_STORE_U64(ctx.r30.u32 + 28, ctx.r11.u64);
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r11,40(r30)
	PPC_STORE_U32(ctx.r30.u32 + 40, ctx.r11.u32);
	// lwz r11,36(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// stw r11,44(r30)
	PPC_STORE_U32(ctx.r30.u32 + 44, ctx.r11.u32);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,48(r30)
	PPC_STORE_U32(ctx.r30.u32 + 48, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,52(r30)
	PPC_STORE_U32(ctx.r30.u32 + 52, ctx.r11.u32);
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// stw r11,64(r30)
	PPC_STORE_U32(ctx.r30.u32 + 64, ctx.r11.u32);
loc_82A24984:
	// addi r11,r1,112
	ctx.r11.s64 = ctx.r1.s64 + 112;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,6
	ctx.r9.s64 = 6;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82A24994:
	// std r10,0(r11)
	PPC_STORE_U64(ctx.r11.u32 + 0, ctx.r10.u64);
	// addi r11,r11,8
	ctx.r11.s64 = ctx.r11.s64 + 8;
	// bdnz 0x82a24994
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A24994;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// bl 0x82a20510
	ctx.lr = 0x82A249B4;
	sub_82A20510(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82a33940
	ctx.lr = 0x82A249C0;
	sub_82A33940(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a34168
	ctx.lr = 0x82A249CC;
	sub_82A34168(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a111d8
	ctx.lr = 0x82A249D4;
	sub_82A111D8(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x82A249DC;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A249E8"))) PPC_WEAK_FUNC(sub_82A249E8);
PPC_FUNC_IMPL(__imp__sub_82A249E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-1232(r1)
	ea = -1232 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239200
	ctx.lr = 0x82A24A10;
	sub_82239200(ctx, base);
	// li r4,78
	ctx.r4.s64 = 78;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239280
	ctx.lr = 0x82A24A1C;
	sub_82239280(ctx, base);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0cab8
	ctx.lr = 0x82A24A2C;
	sub_82A0CAB8(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A24A30;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24A40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24A50;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24A68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// lwz r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// ld r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 28);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r11.u64);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r11.u32);
	// lwz r11,48(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 48);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// ld r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 56);
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r11.u64);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r11.u32);
	// bl 0x82a24670
	ctx.lr = 0x82A24AD4;
	sub_82A24670(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239548
	ctx.lr = 0x82A24ADC;
	sub_82239548(ctx, base);
	// addi r1,r1,1232
	ctx.r1.s64 = ctx.r1.s64 + 1232;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24AF8"))) PPC_WEAK_FUNC(sub_82A24AF8);
PPC_FUNC_IMPL(__imp__sub_82A24AF8) {
	PPC_FUNC_PROLOGUE();
	// lwz r3,2784(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x82a36290
	sub_82A36290(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24B0C"))) PPC_WEAK_FUNC(sub_82A24B0C);
PPC_FUNC_IMPL(__imp__sub_82A24B0C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A24B10"))) PPC_WEAK_FUNC(sub_82A24B10);
PPC_FUNC_IMPL(__imp__sub_82A24B10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A24B18;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A24B28;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// ld r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B6C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A24B70;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24B90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24BA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a24c30
	if (ctx.cr6.eq) goto loc_82A24C30;
	// ld r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 0);
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A24BB8;
	sub_82A02DD0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x82a24c30
	if (ctx.cr6.eq) goto loc_82A24C30;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,20(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r31,36(r4)
	PPC_STORE_U32(ctx.r4.u32 + 36, ctx.r31.u32);
	// beq cr6,0x82a24be4
	if (ctx.cr6.eq) goto loc_82A24BE4;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A24BE0;
	sub_82A02F70(ctx, base);
	// stw r31,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r31.u32);
loc_82A24BE4:
	// li r29,8
	ctx.r29.s64 = 8;
loc_82A24BE8:
	// lwz r31,4016(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A24BF8;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r31,r29,r31
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r31.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A24C08;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a24c1c
	if (ctx.cr6.eq) goto loc_82A24C1C;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a249e8
	ctx.lr = 0x82A24C1C;
	sub_82A249E8(ctx, base);
loc_82A24C1C:
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpwi cr6,r29,24
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 24, ctx.xer);
	// blt cr6,0x82a24be8
	if (ctx.cr6.lt) goto loc_82A24BE8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a05c58
	ctx.lr = 0x82A24C30;
	sub_82A05C58(ctx, base);
loc_82A24C30:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24C38"))) PPC_WEAK_FUNC(sub_82A24C38);
PPC_FUNC_IMPL(__imp__sub_82A24C38) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// b 0x82a1b130
	sub_82A1B130(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24C48"))) PPC_WEAK_FUNC(sub_82A24C48);
PPC_FUNC_IMPL(__imp__sub_82A24C48) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// b 0x82a1b528
	sub_82A1B528(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24C58"))) PPC_WEAK_FUNC(sub_82A24C58);
PPC_FUNC_IMPL(__imp__sub_82A24C58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A24C60;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a24cac
	if (!ctx.cr6.eq) goto loc_82A24CAC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A24C88;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a24c98
	if (ctx.cr6.eq) goto loc_82A24C98;
	// bl 0x82a13fe0
	ctx.lr = 0x82A24C94;
	sub_82A13FE0(ctx, base);
	// b 0x82a24c9c
	goto loc_82A24C9C;
loc_82A24C98:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A24C9C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A24CAC:
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a1a950
	ctx.lr = 0x82A24CBC;
	sub_82A1A950(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24CC8"))) PPC_WEAK_FUNC(sub_82A24CC8);
PPC_FUNC_IMPL(__imp__sub_82A24CC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82A24CD0;
	__savegprlr_25(ctx, base);
	// stwu r1,-1840(r1)
	ea = -1840 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A24CDC;
	sub_82219F20(ctx, base);
	// lwz r11,4184(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4184);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a24d60
	if (!ctx.cr6.eq) goto loc_82A24D60;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24CFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// lwz r7,4252(r28)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4252);
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r4,4176(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4176);
	// li r9,1
	ctx.r9.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r28,4188
	ctx.r5.s64 = ctx.r28.s64 + 4188;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r8,r7,10
	ctx.r8.s64 = ctx.r7.s64 + 10;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24D30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24D44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24D54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// addi r5,r11,19512
	ctx.r5.s64 = ctx.r11.s64 + 19512;
	// b 0x82a24f08
	goto loc_82A24F08;
loc_82A24D60:
	// addi r11,r1,176
	ctx.r11.s64 = ctx.r1.s64 + 176;
	// li r10,99
	ctx.r10.s64 = 99;
	// li r9,0
	ctx.r9.s64 = 0;
loc_82A24D6C:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// std r9,0(r11)
	PPC_STORE_U64(ctx.r11.u32 + 0, ctx.r9.u64);
	// stw r9,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r9.u32);
	// addi r11,r11,16
	ctx.r11.s64 = ctx.r11.s64 + 16;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bge cr6,0x82a24d6c
	if (!ctx.cr6.lt) goto loc_82A24D6C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24D98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24DA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24DC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24DD0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24DE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r25,1
	ctx.r25.s64 = 1;
	// std r3,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r3.u64);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r26,r25
	ctx.r26.u64 = ctx.r25.u64;
	// mr r29,r25
	ctx.r29.u64 = ctx.r25.u64;
	// stw r25,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r25.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24E08;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 1, ctx.xer);
	// blt cr6,0x82a24e78
	if (ctx.cr6.lt) goto loc_82A24E78;
	// addi r27,r1,200
	ctx.r27.s64 = ctx.r1.s64 + 200;
loc_82A24E14:
	// cmpwi cr6,r29,100
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 100, ctx.xer);
	// bge cr6,0x82a24e78
	if (!ctx.cr6.lt) goto loc_82A24E78;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r4,r29,-1
	ctx.r4.s64 = ctx.r29.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24E34;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24E44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// stw r25,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r25.u32);
	// addi r26,r26,1
	ctx.r26.s64 = ctx.r26.s64 + 1;
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// std r11,-8(r27)
	PPC_STORE_U64(ctx.r27.u32 + -8, ctx.r11.u64);
	// addi r27,r27,16
	ctx.r27.s64 = ctx.r27.s64 + 16;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24E70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpw cr6,r29,r3
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r3.s32, ctx.xer);
	// ble cr6,0x82a24e14
	if (!ctx.cr6.gt) goto loc_82A24E14;
loc_82A24E78:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r28,4264
	ctx.r3.s64 = ctx.r28.s64 + 4264;
	// bl 0x82a34830
	ctx.lr = 0x82A24E84;
	sub_82A34830(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r28,4276
	ctx.r3.s64 = ctx.r28.s64 + 4276;
	// bl 0x82a34830
	ctx.lr = 0x82A24E90;
	sub_82A34830(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r28,4188
	ctx.r4.s64 = ctx.r28.s64 + 4188;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x822178a8
	ctx.lr = 0x82A24EA0;
	sub_822178A8(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24EB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,4176(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4176);
	// li r9,1
	ctx.r9.s64 = 1;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24EDC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24EF0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24F00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32096
	ctx.r11.s64 = -2103443456;
	// addi r5,r11,24376
	ctx.r5.s64 = ctx.r11.s64 + 24376;
loc_82A24F08:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// lwz r4,4176(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A24F24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,1840
	ctx.r1.s64 = ctx.r1.s64 + 1840;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A24F30"))) PPC_WEAK_FUNC(sub_82A24F30);
PPC_FUNC_IMPL(__imp__sub_82A24F30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A24F38;
	__savegprlr_27(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a25008
	if (ctx.cr6.eq) goto loc_82A25008;
	// lbz r11,4289(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4289);
	// lis r29,-31973
	ctx.r29.s64 = -2095382528;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a24fa4
	if (ctx.cr6.eq) goto loc_82A24FA4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A24F6C;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4292
	ctx.r11.s64 = ctx.r31.s64 + 4292;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fmsub f13,f13,f0,f12
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f12.f64;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// lfd f0,-29544(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -29544);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// blt cr6,0x82a25008
	if (ctx.cr6.lt) goto loc_82A25008;
loc_82A24FA4:
	// li r30,1
	ctx.r30.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r30,4289(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4289, ctx.r30.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A24FB4;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// li r10,0
	ctx.r10.s64 = 0;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// addi r11,r31,4292
	ctx.r11.s64 = ctx.r31.s64 + 4292;
	// stw r30,4260(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4260, ctx.r30.u32);
	// li r5,32
	ctx.r5.s64 = 32;
	// stw r27,4184(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4184, ctx.r27.u32);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// stb r10,4288(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4288, ctx.r10.u8);
	// addi r3,r31,4188
	ctx.r3.s64 = ctx.r31.s64 + 4188;
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A24FFC;
	sub_82E2AB28(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r30,4252(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4252, ctx.r30.u32);
	// bl 0x82a24cc8
	ctx.lr = 0x82A25008;
	sub_82A24CC8(ctx, base);
loc_82A25008:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A25010"))) PPC_WEAK_FUNC(sub_82A25010);
PPC_FUNC_IMPL(__imp__sub_82A25010) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a250f0
	if (ctx.cr6.eq) goto loc_82A250F0;
	// lbz r11,4289(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4289);
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a25084
	if (ctx.cr6.eq) goto loc_82A25084;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A2504C;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4292
	ctx.r11.s64 = ctx.r31.s64 + 4292;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fmsub f13,f13,f0,f12
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f12.f64;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// lfd f0,-29544(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -29544);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// blt cr6,0x82a250f0
	if (ctx.cr6.lt) goto loc_82A250F0;
loc_82A25084:
	// li r11,1
	ctx.r11.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r11,4289(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4289, ctx.r11.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A25094;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lwz r10,4260(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4260);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// addi r11,r31,4292
	ctx.r11.s64 = ctx.r31.s64 + 4292;
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// bne cr6,0x82a250d4
	if (!ctx.cr6.eq) goto loc_82A250D4;
	// lwz r11,4252(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4252);
	// addi r11,r11,10
	ctx.r11.s64 = ctx.r11.s64 + 10;
	// stw r11,4252(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4252, ctx.r11.u32);
loc_82A250D4:
	// lwz r11,4184(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4184);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a250ec
	if (!ctx.cr6.eq) goto loc_82A250EC;
	// bl 0x82a24cc8
	ctx.lr = 0x82A250E8;
	sub_82A24CC8(ctx, base);
	// b 0x82a250f0
	goto loc_82A250F0;
loc_82A250EC:
	// bl 0x82a1ab68
	ctx.lr = 0x82A250F0;
	sub_82A1AB68(ctx, base);
loc_82A250F0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A25108"))) PPC_WEAK_FUNC(sub_82A25108);
PPC_FUNC_IMPL(__imp__sub_82A25108) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A25110;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a251e4
	if (ctx.cr6.eq) goto loc_82A251E4;
	// lbz r11,4289(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4289);
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a25174
	if (ctx.cr6.eq) goto loc_82A25174;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A2513C;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4292
	ctx.r11.s64 = ctx.r31.s64 + 4292;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fmsub f13,f13,f0,f12
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f12.f64;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// lfd f0,-29544(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -29544);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// blt cr6,0x82a251e4
	if (ctx.cr6.lt) goto loc_82A251E4;
loc_82A25174:
	// li r29,1
	ctx.r29.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r29,4289(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4289, ctx.r29.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A25184;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lwz r11,4252(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4252);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// addi r11,r11,-10
	ctx.r11.s64 = ctx.r11.s64 + -10;
	// addi r10,r31,4292
	ctx.r10.s64 = ctx.r31.s64 + 4292;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// stw r11,4252(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4252, ctx.r11.u32);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// bge cr6,0x82a251c4
	if (!ctx.cr6.lt) goto loc_82A251C4;
	// stw r29,4252(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4252, ctx.r29.u32);
loc_82A251C4:
	// lwz r11,4184(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4184);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a251e0
	if (!ctx.cr6.eq) goto loc_82A251E0;
	// bl 0x82a24cc8
	ctx.lr = 0x82A251D8;
	sub_82A24CC8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A251E0:
	// bl 0x82a1ab68
	ctx.lr = 0x82A251E4;
	sub_82A1AB68(ctx, base);
loc_82A251E4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A251F0"))) PPC_WEAK_FUNC(sub_82A251F0);
PPC_FUNC_IMPL(__imp__sub_82A251F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A251F8;
	__savegprlr_29(ctx, base);
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, ctx.f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lbz r11,2793(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a25398
	if (ctx.cr6.eq) goto loc_82A25398;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a25248
	if (!ctx.cr6.eq) goto loc_82A25248;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A25230;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25240
	if (ctx.cr6.eq) goto loc_82A25240;
	// bl 0x82a08db0
	ctx.lr = 0x82A2523C;
	sub_82A08DB0(ctx, base);
	// b 0x82a25244
	goto loc_82A25244;
loc_82A25240:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A25244:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A25248:
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a25398
	if (ctx.cr6.eq) goto loc_82A25398;
	// bl 0x82219f20
	ctx.lr = 0x82A25258;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25268;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25294
	if (ctx.cr6.eq) goto loc_82A25294;
	// bl 0x82219f20
	ctx.lr = 0x82A25274;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25284;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25294;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A25294:
	// addi r31,r30,4220
	ctx.r31.s64 = ctx.r30.s64 + 4220;
	// li r5,32
	ctx.r5.s64 = 32;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A252A8;
	sub_82E2AB28(ctx, base);
	// li r11,3
	ctx.r11.s64 = 3;
	// li r29,1
	ctx.r29.s64 = 1;
	// stfs f31,108(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 108, temp.u32);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A252CC;
	sub_82219F20(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A252E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A252F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8221c198
	ctx.lr = 0x82A252FC;
	sub_8221C198(ctx, base);
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// ld r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// std r11,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r11.u64);
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r29.u32);
	// stw r11,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r11.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25334;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,4176(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4176);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25350;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25364;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25374;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// lwz r4,4176(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// addi r5,r11,19528
	ctx.r5.s64 = ctx.r11.s64 + 19528;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25398;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A25398:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A253A8"))) PPC_WEAK_FUNC(sub_82A253A8);
PPC_FUNC_IMPL(__imp__sub_82A253A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A253B0;
	__savegprlr_27(ctx, base);
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, ctx.f31.u64);
	// stwu r1,-560(r1)
	ea = -560 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r27,0
	ctx.r27.s64 = 0;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r27.u32);
	// beq cr6,0x82a25850
	if (ctx.cr6.eq) goto loc_82A25850;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82228bd8
	ctx.lr = 0x82A253E0;
	sub_82228BD8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a25850
	if (!ctx.cr6.eq) goto loc_82A25850;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8221f038
	ctx.lr = 0x82A253F8;
	sub_8221F038(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lwz r10,4256(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4256);
	// stb r27,176(r1)
	PPC_STORE_U8(ctx.r1.u32 + 176, ctx.r27.u8);
	// stb r27,244(r1)
	PPC_STORE_U8(ctx.r1.u32 + 244, ctx.r27.u8);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r27,500(r1)
	PPC_STORE_U32(ctx.r1.u32 + 500, ctx.r27.u32);
	// lfs f31,-13892(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f31.f64 = double(temp.f32);
	// stfs f31,240(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 240, temp.u32);
	// beq cr6,0x82a254ec
	if (ctx.cr6.eq) goto loc_82A254EC;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r27,4256(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4256, ctx.r27.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2547c
	if (!ctx.cr6.eq) goto loc_82A2547C;
	// li r3,20
	ctx.r3.s64 = 20;
	// bl 0x82545e80
	ctx.lr = 0x82A25434;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2546c
	if (ctx.cr6.eq) goto loc_82A2546C;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82a35608
	ctx.lr = 0x82A2544C;
	sub_82A35608(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82a18248
	ctx.lr = 0x82A2545C;
	sub_82A18248(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A25464;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// b 0x82a258cc
	goto loc_82A258CC;
loc_82A2546C:
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A25474;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// b 0x82a258cc
	goto loc_82A258CC;
loc_82A2547C:
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8221f170
	ctx.lr = 0x82A25490;
	sub_8221F170(ctx, base);
	// lfs f0,240(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	ctx.f0.f64 = double(temp.f32);
	// lwz r11,500(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 500);
	// fcmpu cr6,f0,f31
	ctx.cr6.compare(ctx.f0.f64, ctx.f31.f64);
	// bne cr6,0x82a254b4
	if (!ctx.cr6.eq) goto loc_82A254B4;
	// addi r11,r11,-9
	ctx.r11.s64 = ctx.r11.s64 + -9;
	// stw r11,4252(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4252, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,4288(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4288, ctx.r11.u8);
	// b 0x82a254bc
	goto loc_82A254BC;
loc_82A254B4:
	// addi r11,r11,-4
	ctx.r11.s64 = ctx.r11.s64 + -4;
	// stw r11,4252(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4252, ctx.r11.u32);
loc_82A254BC:
	// lwz r11,4252(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4252);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bge cr6,0x82a254d0
	if (!ctx.cr6.lt) goto loc_82A254D0;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,4252(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4252, ctx.r11.u32);
loc_82A254D0:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a24cc8
	ctx.lr = 0x82A254D8;
	sub_82A24CC8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82319ba8
	ctx.lr = 0x82A254E0;
	sub_82319BA8(ctx, base);
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82A254EC:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// std r27,160(r1)
	PPC_STORE_U64(ctx.r1.u32 + 160, ctx.r27.u64);
	// stw r27,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r27.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a255f4
	if (ctx.cr6.eq) goto loc_82A255F4;
loc_82A25504:
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8221f0c8
	ctx.lr = 0x82A25514;
	sub_8221F0C8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a255e4
	if (ctx.cr6.eq) goto loc_82A255E4;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a255e4
	if (ctx.cr6.eq) goto loc_82A255E4;
loc_82A25530:
	// addi r6,r1,176
	ctx.r6.s64 = ctx.r1.s64 + 176;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8221f170
	ctx.lr = 0x82A25544;
	sub_8221F170(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a25564
	if (!ctx.cr6.eq) goto loc_82A25564;
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplw cr6,r31,r11
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r11.u32, ctx.xer);
	// blt cr6,0x82a25530
	if (ctx.cr6.lt) goto loc_82A25530;
	// b 0x82a255e4
	goto loc_82A255E4;
loc_82A25564:
	// addi r31,r30,4264
	ctx.r31.s64 = ctx.r30.s64 + 4264;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ac4b0
	ctx.lr = 0x82A25574;
	sub_825AC4B0(ctx, base);
	// lwz r11,4264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// mulli r29,r3,28
	ctx.r29.s64 = ctx.r3.s64 * 28;
	// mr r9,r27
	ctx.r9.u64 = ctx.r27.u64;
	// li r10,7
	ctx.r10.s64 = 7;
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
loc_82A2558C:
	// stw r9,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// bdnz 0x82a2558c
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A2558C;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// ld r4,160(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 160);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// addi r6,r11,20
	ctx.r6.s64 = ctx.r11.s64 + 20;
	// bl 0x82a05f70
	ctx.lr = 0x82A255B4;
	sub_82A05F70(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,500(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 500);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// stwx r10,r29,r11
	PPC_STORE_U32(ctx.r29.u32 + ctx.r11.u32, ctx.r10.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x822e0818
	ctx.lr = 0x82A255D4;
	sub_822E0818(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lfs f0,240(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	ctx.f0.f64 = double(temp.f32);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// stfs f0,16(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 16, temp.u32);
loc_82A255E4:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// blt cr6,0x82a25504
	if (ctx.cr6.lt) goto loc_82A25504;
loc_82A255F4:
	// lis r11,-32096
	ctx.r11.s64 = -2103443456;
	// lwz r4,4268(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4268);
	// li r5,28
	ctx.r5.s64 = 28;
	// lwz r3,4264(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// addi r6,r11,24392
	ctx.r6.s64 = ctx.r11.s64 + 24392;
	// bl 0x82406780
	ctx.lr = 0x82A2560C;
	sub_82406780(ctx, base);
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
loc_82A25614:
	// lwz r11,4268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4268);
	// cmplw cr6,r28,r11
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r11.u32, ctx.xer);
	// bge cr6,0x82a25700
	if (!ctx.cr6.lt) goto loc_82A25700;
	// lwz r29,84(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r11,r29,1
	ctx.r11.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ble cr6,0x82a25664
	if (!ctx.cr6.gt) goto loc_82A25664;
	// li r4,28
	ctx.r4.s64 = 28;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416640
	ctx.lr = 0x82A25644;
	sub_82416640(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,16
	ctx.r5.s64 = 16;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// li r4,28
	ctx.r4.s64 = 28;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// bl 0x822e0788
	ctx.lr = 0x82A25664;
	sub_822E0788(ctx, base);
loc_82A25664:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mulli r29,r29,28
	ctx.r29.s64 = ctx.r29.s64 * 28;
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// mr r9,r27
	ctx.r9.u64 = ctx.r27.u64;
	// li r10,7
	ctx.r10.s64 = 7;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
loc_82A2567C:
	// stw r9,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// bdnz 0x82a2567c
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A2567C;
	// lwz r11,4264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwzx r11,r31,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// stwx r11,r29,r10
	PPC_STORE_U32(ctx.r29.u32 + ctx.r10.u32, ctx.r11.u32);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r29,r11
	ctx.r10.u64 = ctx.r29.u64 + ctx.r11.u64;
	// lwz r11,4264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// addi r3,r10,4
	ctx.r3.s64 = ctx.r10.s64 + 4;
	// addi r4,r11,4
	ctx.r4.s64 = ctx.r11.s64 + 4;
	// bl 0x82302d08
	ctx.lr = 0x82A256B4;
	sub_82302D08(ctx, base);
	// lwz r11,4264(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// add r10,r29,r10
	ctx.r10.u64 = ctx.r29.u64 + ctx.r10.u64;
	// lfs f0,16(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,16(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 16, temp.u32);
	// lwz r10,4264(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4264);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r31,r10
	ctx.r10.u64 = ctx.r31.u64 + ctx.r10.u64;
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// addi r31,r31,28
	ctx.r31.s64 = ctx.r31.s64 + 28;
	// cmplwi cr6,r31,280
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 280, ctx.xer);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// stw r9,20(r11)
	PPC_STORE_U32(ctx.r11.u32 + 20, ctx.r9.u32);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// stw r10,24(r11)
	PPC_STORE_U32(ctx.r11.u32 + 24, ctx.r10.u32);
	// blt cr6,0x82a25614
	if (ctx.cr6.lt) goto loc_82A25614;
loc_82A25700:
	// lwz r11,4268(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4268);
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// ble cr6,0x82a25714
	if (!ctx.cr6.gt) goto loc_82A25714;
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
loc_82A25714:
	// li r3,20
	ctx.r3.s64 = 20;
	// stw r11,4260(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4260, ctx.r11.u32);
	// bl 0x82545e80
	ctx.lr = 0x82A25720;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2575c
	if (ctx.cr6.eq) goto loc_82A2575C;
	// lwz r11,4260(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4260);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// subfic r11,r11,0
	ctx.xer.ca = ctx.r11.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r11.s64;
	// subfe r30,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r30.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// bl 0x82a35608
	ctx.lr = 0x82A25744;
	sub_82A35608(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82a18248
	ctx.lr = 0x82A25754;
	sub_82A18248(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// b 0x82a25760
	goto loc_82A25760;
loc_82A2575C:
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
loc_82A25760:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2579c
	if (!ctx.cr6.eq) goto loc_82A2579C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A25778;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25788
	if (ctx.cr6.eq) goto loc_82A25788;
	// bl 0x82a13fe0
	ctx.lr = 0x82A25784;
	sub_82A13FE0(ctx, base);
	// b 0x82a2578c
	goto loc_82A2578C;
loc_82A25788:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A2578C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2579C:
	// addi r31,r3,1488
	ctx.r31.s64 = ctx.r3.s64 + 1488;
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A257AC;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lbz r11,205(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 205);
	// lis r9,20971
	ctx.r9.s64 = 1374355456;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// ori r9,r9,34079
	ctx.r9.u64 = ctx.r9.u64 | 34079;
	// mulhw r10,r11,r9
	ctx.r10.s64 = (int64_t(ctx.r11.s32) * int64_t(ctx.r9.s32)) >> 32;
	// srawi r10,r10,4
	ctx.xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0xF) != 0);
	ctx.r10.s64 = ctx.r10.s32 >> 4;
	// rlwinm r9,r10,1,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// mulli r10,r10,50
	ctx.r10.s64 = ctx.r10.s64 * 50;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r30,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r30.u32);
	// lbz r10,204(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 204);
	// lwz r11,200(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 200);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// stb r10,204(r31)
	PPC_STORE_U8(ctx.r31.u32 + 204, ctx.r10.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A257F8;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82312d98
	ctx.lr = 0x82A25808;
	sub_82312D98(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a258dc
	if (ctx.cr6.eq) goto loc_82A258DC;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a25830
	if (!ctx.cr6.eq) goto loc_82A25830;
	// bl 0x82545cc0
	ctx.lr = 0x82A2582C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82A25830:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25844;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82A25850:
	// li r3,20
	ctx.r3.s64 = 20;
	// bl 0x82545e80
	ctx.lr = 0x82A25858;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a25888
	if (ctx.cr6.eq) goto loc_82A25888;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82a35608
	ctx.lr = 0x82A25870;
	sub_82A35608(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82a18248
	ctx.lr = 0x82A25880;
	sub_82A18248(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// b 0x82a2588c
	goto loc_82A2588C;
loc_82A25888:
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
loc_82A2588C:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a258c8
	if (!ctx.cr6.eq) goto loc_82A258C8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A258A4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a258b4
	if (ctx.cr6.eq) goto loc_82A258B4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A258B0;
	sub_82A13FE0(ctx, base);
	// b 0x82a258b8
	goto loc_82A258B8;
loc_82A258B4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A258B8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A258C8:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
loc_82A258CC:
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A258D4;
	sub_82A02300(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82319ba8
	ctx.lr = 0x82A258DC;
	sub_82319BA8(ctx, base);
loc_82A258DC:
	// addi r1,r1,560
	ctx.r1.s64 = ctx.r1.s64 + 560;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A258E8"))) PPC_WEAK_FUNC(sub_82A258E8);
PPC_FUNC_IMPL(__imp__sub_82A258E8) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// b 0x82a1b5f0
	sub_82A1B5F0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A258F8"))) PPC_WEAK_FUNC(sub_82A258F8);
PPC_FUNC_IMPL(__imp__sub_82A258F8) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// b 0x82a1b728
	sub_82A1B728(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A25908"))) PPC_WEAK_FUNC(sub_82A25908);
PPC_FUNC_IMPL(__imp__sub_82A25908) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A25910;
	__savegprlr_29(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r11,1
	ctx.r11.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,4300(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4300, ctx.r11.u32);
	// stw r11,4356(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4356, ctx.r11.u32);
	// bl 0x8238ad50
	ctx.lr = 0x82A2592C;
	sub_8238AD50(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a25968
	if (ctx.cr6.eq) goto loc_82A25968;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,50
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 50, ctx.xer);
	// blt cr6,0x82a25968
	if (ctx.cr6.lt) goto loc_82A25968;
	// li r5,49
	ctx.r5.s64 = 49;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8238abb8
	ctx.lr = 0x82A25954;
	sub_8238ABB8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x82A25960;
	sub_82302D08(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A25968;
	sub_82309A60(ctx, base);
loc_82A25968:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// addi r5,r11,-26248
	ctx.r5.s64 = ctx.r11.s64 + -26248;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8242a4a8
	ctx.lr = 0x82A25988;
	sub_8242A4A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82302d08
	ctx.lr = 0x82A25994;
	sub_82302D08(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2599C;
	sub_82309A60(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a259b0
	if (!ctx.cr6.eq) goto loc_82A259B0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
loc_82A259B0:
	// addi r29,r30,4304
	ctx.r29.s64 = ctx.r30.s64 + 4304;
	// li r5,50
	ctx.r5.s64 = 50;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A259C0;
	sub_82E2AB28(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A259C4;
	sub_82219F20(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A259D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r4,4176(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4176);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r5,r11,3444
	ctx.r5.s64 = ctx.r11.s64 + 3444;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25A04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25A18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25A28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// lwz r4,4176(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// addi r5,r11,22760
	ctx.r5.s64 = ctx.r11.s64 + 22760;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25A4C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82A25A54;
	sub_82309A60(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A25A60"))) PPC_WEAK_FUNC(sub_82A25A60);
PPC_FUNC_IMPL(__imp__sub_82A25A60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r11,2
	ctx.r11.s64 = 2;
	// stw r11,4300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4300, ctx.r11.u32);
	// stw r11,4356(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4356, ctx.r11.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A25A88;
	sub_82219F20(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25A9C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r5,r11,3476
	ctx.r5.s64 = ctx.r11.s64 + 3476;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r6,r31,4304
	ctx.r6.s64 = ctx.r31.s64 + 4304;
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25AC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25ADC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25AEC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// addi r5,r11,22760
	ctx.r5.s64 = ctx.r11.s64 + 22760;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25B10;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A25B28"))) PPC_WEAK_FUNC(sub_82A25B28);
PPC_FUNC_IMPL(__imp__sub_82A25B28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,4300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4300, ctx.r11.u32);
	// stw r11,4356(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4356, ctx.r11.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A25B50;
	sub_82219F20(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25B64;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// addi r5,r11,3508
	ctx.r5.s64 = ctx.r11.s64 + 3508;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25B80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25B94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25BA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// addi r5,r11,22776
	ctx.r5.s64 = ctx.r11.s64 + 22776;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25BC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A25BE0"))) PPC_WEAK_FUNC(sub_82A25BE0);
PPC_FUNC_IMPL(__imp__sub_82A25BE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r11,2
	ctx.r11.s64 = 2;
	// stw r11,4300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4300, ctx.r11.u32);
	// stw r11,4356(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4356, ctx.r11.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A25C08;
	sub_82219F20(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25C1C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// addi r5,r11,3536
	ctx.r5.s64 = ctx.r11.s64 + 3536;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,28(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25C38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25C4C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25C5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32094
	ctx.r11.s64 = -2103312384;
	// lwz r4,4176(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4176);
	// li r7,10000
	ctx.r7.s64 = 10000;
	// addi r5,r11,22776
	ctx.r5.s64 = ctx.r11.s64 + 22776;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25C80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A25C98"))) PPC_WEAK_FUNC(sub_82A25C98);
PPC_FUNC_IMPL(__imp__sub_82A25C98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A25CA0;
	__savegprlr_29(ctx, base);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a25cdc
	if (!ctx.cr6.eq) goto loc_82A25CDC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A25CC4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25cd4
	if (ctx.cr6.eq) goto loc_82A25CD4;
	// bl 0x82a08db0
	ctx.lr = 0x82A25CD0;
	sub_82A08DB0(ctx, base);
	// b 0x82a25cd8
	goto loc_82A25CD8;
loc_82A25CD4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A25CD8:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A25CDC:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addi r4,r30,2848
	ctx.r4.s64 = ctx.r30.s64 + 2848;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a25d1c
	if (ctx.cr6.eq) goto loc_82A25D1C;
	// li r5,127
	ctx.r5.s64 = 127;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82e2ab28
	ctx.lr = 0x82A25CF8;
	sub_82E2AB28(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r29,223(r1)
	PPC_STORE_U8(ctx.r1.u32 + 223, ctx.r29.u8);
	// addi r4,r11,21208
	ctx.r4.s64 = ctx.r11.s64 + 21208;
	// bl 0x82e2c390
	ctx.lr = 0x82A25D0C;
	sub_82E2C390(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25d18
	if (ctx.cr6.eq) goto loc_82A25D18;
	// stb r29,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, ctx.r29.u8);
loc_82A25D18:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
loc_82A25D1C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A25D24;
	sub_823099B0(ctx, base);
	// addi r31,r1,80
	ctx.r31.s64 = ctx.r1.s64 + 80;
	// bl 0x82a245c8
	ctx.lr = 0x82A25D2C;
	sub_82A245C8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a10058
	ctx.lr = 0x82A25D34;
	sub_82A10058(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82A25D40;
	sub_82309A60(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A25D50"))) PPC_WEAK_FUNC(sub_82A25D50);
PPC_FUNC_IMPL(__imp__sub_82A25D50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31968
	ctx.r31.s64 = -2095054848;
	// lwz r11,23584(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a25d98
	if (!ctx.cr6.eq) goto loc_82A25D98;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x82545e80
	ctx.lr = 0x82A25D78;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25d88
	if (ctx.cr6.eq) goto loc_82A25D88;
	// bl 0x82a18680
	ctx.lr = 0x82A25D84;
	sub_82A18680(ctx, base);
	// b 0x82a25d8c
	goto loc_82A25D8C;
loc_82A25D88:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A25D8C:
	// stw r3,23584(r31)
	PPC_STORE_U32(ctx.r31.u32 + 23584, ctx.r3.u32);
	// bl 0x82a13e88
	ctx.lr = 0x82A25D94;
	sub_82A13E88(ctx, base);
	// lwz r11,23584(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
loc_82A25D98:
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A25DB0"))) PPC_WEAK_FUNC(sub_82A25DB0);
PPC_FUNC_IMPL(__imp__sub_82A25DB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A25DB8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31968
	ctx.r31.s64 = -2095054848;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r3,23584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a25dfc
	if (!ctx.cr6.eq) goto loc_82A25DFC;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x82545e80
	ctx.lr = 0x82A25DDC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a25dec
	if (ctx.cr6.eq) goto loc_82A25DEC;
	// bl 0x82a18680
	ctx.lr = 0x82A25DE8;
	sub_82A18680(ctx, base);
	// b 0x82a25df0
	goto loc_82A25DF0;
loc_82A25DEC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A25DF0:
	// stw r3,23584(r31)
	PPC_STORE_U32(ctx.r31.u32 + 23584, ctx.r3.u32);
	// bl 0x82a13e88
	ctx.lr = 0x82A25DF8;
	sub_82A13E88(ctx, base);
	// lwz r3,23584(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 23584);
loc_82A25DFC:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a10058
	ctx.lr = 0x82A25E04;
	sub_82A10058(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r29,1
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 1, ctx.xer);
	// beq cr6,0x82a25e58
	if (ctx.cr6.eq) goto loc_82A25E58;
	// li r30,8
	ctx.r30.s64 = 8;
loc_82A25E14:
	// lwz r31,4016(r28)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4016);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A25E24;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r31,r30,r31
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r31.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A25E34;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a25e4c
	if (ctx.cr6.eq) goto loc_82A25E4C;
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// and r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 & ctx.r29.u64;
	// cmpw cr6,r11,r29
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r29.s32, ctx.xer);
	// bne cr6,0x82a25e64
	if (!ctx.cr6.eq) goto loc_82A25E64;
loc_82A25E4C:
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpwi cr6,r30,24
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 24, ctx.xer);
	// blt cr6,0x82a25e14
	if (ctx.cr6.lt) goto loc_82A25E14;
loc_82A25E58:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A25E64:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A25E70"))) PPC_WEAK_FUNC(sub_82A25E70);
PPC_FUNC_IMPL(__imp__sub_82A25E70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e34
	ctx.lr = 0x82A25E78;
	__savegprlr_15(ctx, base);
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r27,0
	ctx.r27.s64 = 0;
	// mr r22,r4
	ctx.r22.u64 = ctx.r4.u64;
	// mr r25,r27
	ctx.r25.u64 = ctx.r27.u64;
	// mr r15,r3
	ctx.r15.u64 = ctx.r3.u64;
	// mr r24,r5
	ctx.r24.u64 = ctx.r5.u64;
	// mr r16,r6
	ctx.r16.u64 = ctx.r6.u64;
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// mr r20,r27
	ctx.r20.u64 = ctx.r27.u64;
	// stw r25,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r25.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a261f0
	if (!ctx.cr6.gt) goto loc_82A261F0;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r21,r27
	ctx.r21.u64 = ctx.r27.u64;
	// addi r18,r11,-29761
	ctx.r18.s64 = ctx.r11.s64 + -29761;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r28,-31973
	ctx.r28.s64 = -2095382528;
	// addi r23,r11,-27000
	ctx.r23.s64 = ctx.r11.s64 + -27000;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r26,-31973
	ctx.r26.s64 = -2095382528;
	// addi r17,r11,3564
	ctx.r17.s64 = ctx.r11.s64 + 3564;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r19,r11,29620
	ctx.r19.s64 = ctx.r11.s64 + 29620;
loc_82A25ED4:
	// lwz r11,0(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 0);
	// lwzx r31,r21,r11
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r21.u32 + ctx.r11.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a25f18
	if (ctx.cr6.eq) goto loc_82A25F18;
	// lwz r4,5672(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 5672);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82a25f04
	if (!ctx.cr6.eq) goto loc_82A25F04;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8235a210
	ctx.lr = 0x82A25EF8;
	sub_8235A210(ctx, base);
	// stw r3,5672(r26)
	PPC_STORE_U32(ctx.r26.u32 + 5672, ctx.r3.u32);
	// bl 0x82327dd0
	ctx.lr = 0x82A25F00;
	sub_82327DD0(ctx, base);
	// lwz r4,5672(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 5672);
loc_82A25F04:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82A25F0C;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
	// bne cr6,0x82a25f1c
	if (!ctx.cr6.eq) goto loc_82A25F1C;
loc_82A25F18:
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
loc_82A25F1C:
	// addi r11,r1,112
	ctx.r11.s64 = ctx.r1.s64 + 112;
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82A25F2C:
	// std r10,0(r11)
	PPC_STORE_U64(ctx.r11.u32 + 0, ctx.r10.u64);
	// addi r11,r11,8
	ctx.r11.s64 = ctx.r11.s64 + 8;
	// bdnz 0x82a25f2c
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A25F2C;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// stw r27,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r27.u32);
	// beq cr6,0x82a25f84
	if (ctx.cr6.eq) goto loc_82A25F84;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A25F54;
	sub_823099B0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// ori r25,r25,1
	ctx.r25.u64 = ctx.r25.u64 | 1;
	// li r6,-1
	ctx.r6.s64 = -1;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r11,268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 268);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25F78;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bne cr6,0x82a25f88
	if (!ctx.cr6.eq) goto loc_82A25F88;
loc_82A25F84:
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
loc_82A25F88:
	// clrlwi r10,r25,31
	ctx.r10.u64 = ctx.r25.u32 & 0x1;
	// clrlwi r30,r11,24
	ctx.r30.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a26058
	if (ctx.cr6.eq) goto loc_82A26058;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// rlwinm r25,r25,0,0,30
	ctx.r25.u64 = __builtin_rotateleft64(ctx.r25.u32 | (ctx.r25.u64 << 32), 0) & 0xFFFFFFFE;
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r27.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a25ff8
	if (ctx.cr6.eq) goto loc_82A25FF8;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a25ff8
	if (ctx.cr6.eq) goto loc_82A25FF8;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a25fd4
	if (!ctx.cr6.eq) goto loc_82A25FD4;
	// bl 0x82545cc0
	ctx.lr = 0x82A25FD0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82A25FD4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A25FF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
loc_82A25FF8:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,92(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82416660
	ctx.lr = 0x82A26014;
	sub_82416660(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2604c
	if (ctx.cr6.eq) goto loc_82A2604C;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26038
	if (!ctx.cr6.eq) goto loc_82A26038;
	// bl 0x82545cc0
	ctx.lr = 0x82A26034;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82A26038:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2604C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2604C:
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r27.u32);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r27.u32);
loc_82A26058:
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a260c0
	if (ctx.cr6.eq) goto loc_82A260C0;
	// lwz r11,128(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// lwz r3,124(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a26078
	if (!ctx.cr6.eq) goto loc_82A26078;
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
loc_82A26078:
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x82e28c50
	ctx.lr = 0x82A26080;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a260c0
	if (ctx.cr6.eq) goto loc_82A260C0;
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// mr r3,r15
	ctx.r3.u64 = ctx.r15.u64;
	// bl 0x82a25db0
	ctx.lr = 0x82A26094;
	sub_82A25DB0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a260c0
	if (ctx.cr6.eq) goto loc_82A260C0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82309110
	ctx.lr = 0x82A260A8;
	sub_82309110(ctx, base);
	// lwz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// rlwinm r11,r3,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r11,r10
	ctx.r10.u64 = ctx.r11.u64 + ctx.r10.u64;
	// stw r29,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r29.u32);
	// lwz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// stwx r16,r11,r10
	PPC_STORE_U32(ctx.r11.u32 + ctx.r10.u32, ctx.r16.u32);
loc_82A260C0:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,144(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,140
	ctx.r3.s64 = ctx.r1.s64 + 140;
	// bl 0x82416660
	ctx.lr = 0x82A260DC;
	sub_82416660(ctx, base);
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a26114
	if (ctx.cr6.eq) goto loc_82A26114;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26100
	if (!ctx.cr6.eq) goto loc_82A26100;
	// bl 0x82545cc0
	ctx.lr = 0x82A260FC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82A26100:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26114;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A26114:
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r27,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r27.u32);
	// stw r27,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r27.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r27,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r27.u32);
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r27.u32);
	// beq cr6,0x82a2617c
	if (ctx.cr6.eq) goto loc_82A2617C;
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r27.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2617c
	if (ctx.cr6.eq) goto loc_82A2617C;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26158
	if (!ctx.cr6.eq) goto loc_82A26158;
	// bl 0x82545cc0
	ctx.lr = 0x82A26154;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82A26158:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26178;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r3.u32);
loc_82A2617C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,128(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x82416660
	ctx.lr = 0x82A26198;
	sub_82416660(ctx, base);
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a261d0
	if (ctx.cr6.eq) goto loc_82A261D0;
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a261bc
	if (!ctx.cr6.eq) goto loc_82A261BC;
	// bl 0x82545cc0
	ctx.lr = 0x82A261B8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8344);
loc_82A261BC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A261D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A261D0:
	// lwz r11,4(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4);
	// addi r20,r20,1
	ctx.r20.s64 = ctx.r20.s64 + 1;
	// stw r27,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r27.u32);
	// addi r21,r21,4
	ctx.r21.s64 = ctx.r21.s64 + 4;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r27.u32);
	// cmpw cr6,r20,r11
	ctx.cr6.compare<int32_t>(ctx.r20.s32, ctx.r11.s32, ctx.xer);
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r27.u32);
	// blt cr6,0x82a25ed4
	if (ctx.cr6.lt) goto loc_82A25ED4;
loc_82A261F0:
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A261F8"))) PPC_WEAK_FUNC(sub_82A261F8);
PPC_FUNC_IMPL(__imp__sub_82A261F8) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-31968
	ctx.r11.s64 = -2095054848;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,23588
	ctx.r11.s64 = ctx.r11.s64 + 23588;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r10.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r10.u32);
	// stw r10,16(r11)
	PPC_STORE_U32(ctx.r11.u32 + 16, ctx.r10.u32);
	// stw r10,20(r11)
	PPC_STORE_U32(ctx.r11.u32 + 20, ctx.r10.u32);
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r11,12340(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12340, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A26228"))) PPC_WEAK_FUNC(sub_82A26228);
PPC_FUNC_IMPL(__imp__sub_82A26228) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A26230;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r30,4
	ctx.r30.s64 = 4;
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// li r29,0
	ctx.r29.s64 = 0;
loc_82A26244:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26268
	if (ctx.cr6.eq) goto loc_82A26268;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26264;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r29,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r29.u32);
loc_82A26268:
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,4
	ctx.r31.s64 = ctx.r31.s64 + 4;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82a26244
	if (!ctx.cr6.eq) goto loc_82A26244;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r29,16(r28)
	PPC_STORE_U32(ctx.r28.u32 + 16, ctx.r29.u32);
	// bl 0x82a1e9c8
	ctx.lr = 0x82A26284;
	sub_82A1E9C8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A26290"))) PPC_WEAK_FUNC(sub_82A26290);
PPC_FUNC_IMPL(__imp__sub_82A26290) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e34
	ctx.lr = 0x82A26298;
	__savegprlr_15(ctx, base);
	// stwu r1,-1584(r1)
	ea = -1584 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r10,r1,208
	ctx.r10.s64 = ctx.r1.s64 + 208;
	// addi r9,r1,192
	ctx.r9.s64 = ctx.r1.s64 + 192;
	// lis r17,-31969
	ctx.r17.s64 = -2095120384;
	// li r19,0
	ctx.r19.s64 = 0;
	// addi r8,r1,136
	ctx.r8.s64 = ctx.r1.s64 + 136;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// mr r18,r3
	ctx.r18.u64 = ctx.r3.u64;
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r11.u32);
	// mr r15,r4
	ctx.r15.u64 = ctx.r4.u64;
	// lwz r3,12304(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r11.u32);
	// stw r11,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r11.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r11.u32);
	// stw r11,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, ctx.r11.u32);
	// sth r19,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, ctx.r19.u16);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, ctx.r11.u32);
	// stw r11,12(r9)
	PPC_STORE_U32(ctx.r9.u32 + 12, ctx.r11.u32);
	// stw r19,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r19.u32);
	// stw r19,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r19.u32);
	// stw r19,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r19.u32);
	// stw r19,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r19.u32);
	// stw r19,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r19.u32);
	// stw r19,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r19.u32);
	// stw r19,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r19.u32);
	// stw r19,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r19.u32);
	// stw r19,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r19.u32);
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r19.u32);
	// stw r19,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r19.u32);
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// stb r19,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r19.u8);
	// sth r19,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, ctx.r19.u16);
	// bne cr6,0x82a26344
	if (!ctx.cr6.eq) goto loc_82A26344;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2632C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2633c
	if (ctx.cr6.eq) goto loc_82A2633C;
	// bl 0x82a08db0
	ctx.lr = 0x82A26338;
	sub_82A08DB0(ctx, base);
	// b 0x82a26340
	goto loc_82A26340;
loc_82A2633C:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
loc_82A26340:
	// stw r3,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r3.u32);
loc_82A26344:
	// li r23,4
	ctx.r23.s64 = 4;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// mr r28,r18
	ctx.r28.u64 = ctx.r18.u64;
	// mr r27,r23
	ctx.r27.u64 = ctx.r23.u64;
	// lis r16,-31973
	ctx.r16.s64 = -2095382528;
loc_82A26358:
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26524
	if (ctx.cr6.eq) goto loc_82A26524;
	// addi r31,r3,600
	ctx.r31.s64 = ctx.r3.s64 + 600;
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// stw r19,244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 244, ctx.r19.u32);
	// stw r19,572(r31)
	PPC_STORE_U32(ctx.r31.u32 + 572, ctx.r19.u32);
	// stw r23,312(r31)
	PPC_STORE_U32(ctx.r31.u32 + 312, ctx.r23.u32);
	// bl 0x82a17ec8
	ctx.lr = 0x82A26380;
	sub_82A17EC8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,224
	ctx.r3.s64 = ctx.r1.s64 + 224;
	// bl 0x82a18048
	ctx.lr = 0x82A2638C;
	sub_82A18048(ctx, base);
	// lwz r11,8(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8);
	// lwz r9,816(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 816);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a263a0
	if (!ctx.cr6.eq) goto loc_82A263A0;
	// lwz r9,812(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 812);
loc_82A263A0:
	// lwz r31,228(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 228);
	// addi r11,r1,224
	ctx.r11.s64 = ctx.r1.s64 + 224;
	// lwz r8,272(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 272);
	// addi r10,r1,136
	ctx.r10.s64 = ctx.r1.s64 + 136;
	// lwz r7,276(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r1,208
	ctx.r6.s64 = ctx.r1.s64 + 208;
	// addi r5,r1,192
	ctx.r5.s64 = ctx.r1.s64 + 192;
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// addi r4,r1,256
	ctx.r4.s64 = ctx.r1.s64 + 256;
	// lwz r31,232(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 232);
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// stwx r8,r9,r6
	PPC_STORE_U32(ctx.r9.u32 + ctx.r6.u32, ctx.r8.u32);
	// stwx r7,r9,r5
	PPC_STORE_U32(ctx.r9.u32 + ctx.r5.u32, ctx.r7.u32);
	// stw r31,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r31.u32);
	// lwz r31,236(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 236);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// lwz r31,240(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 240);
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r31.u32);
	// lwz r31,244(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 244);
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// lbz r31,248(r1)
	ctx.r31.u64 = PPC_LOAD_U8(ctx.r1.u32 + 248);
	// stb r31,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r31.u8);
	// lwz r31,252(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 252);
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r31.u32);
	// lhz r31,0(r11)
	ctx.r31.u64 = PPC_LOAD_U16(ctx.r11.u32 + 0);
	// lhz r11,2(r11)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r11.u32 + 2);
	// sth r31,0(r10)
	PPC_STORE_U16(ctx.r10.u32 + 0, ctx.r31.u16);
	// sth r11,2(r10)
	PPC_STORE_U16(ctx.r10.u32 + 2, ctx.r11.u16);
	// bl 0x82a5aba8
	ctx.lr = 0x82A26418;
	sub_82A5ABA8(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ble cr6,0x82a264a8
	if (!ctx.cr6.gt) goto loc_82A264A8;
	// li r4,596
	ctx.r4.s64 = 596;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416640
	ctx.lr = 0x82A26440;
	sub_82416640(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// bne cr6,0x82a26460
	if (!ctx.cr6.eq) goto loc_82A26460;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a264ac
	if (ctx.cr6.eq) goto loc_82A264AC;
loc_82A26460:
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mulli r31,r10,596
	ctx.r31.s64 = ctx.r10.s64 * 596;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// bne cr6,0x82a2647c
	if (!ctx.cr6.eq) goto loc_82A2647C;
	// bl 0x82545cc0
	ctx.lr = 0x82A26478;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A2647C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2649C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// b 0x82a264ac
	goto loc_82A264AC;
loc_82A264A8:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82A264AC:
	// mulli r10,r29,596
	ctx.r10.s64 = ctx.r29.s64 * 596;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a264c4
	if (ctx.cr6.eq) goto loc_82A264C4;
	// addi r4,r1,224
	ctx.r4.s64 = ctx.r1.s64 + 224;
	// bl 0x82a18048
	ctx.lr = 0x82A264C4;
	sub_82A18048(ctx, base);
loc_82A264C4:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,260(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x82416660
	ctx.lr = 0x82A264E0;
	sub_82416660(ctx, base);
	// lwz r11,256(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 256);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a26518
	if (ctx.cr6.eq) goto loc_82A26518;
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26504
	if (!ctx.cr6.eq) goto loc_82A26504;
	// bl 0x82545cc0
	ctx.lr = 0x82A26500;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A26504:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26518;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A26518:
	// stw r19,256(r1)
	PPC_STORE_U32(ctx.r1.u32 + 256, ctx.r19.u32);
	// stw r19,264(r1)
	PPC_STORE_U32(ctx.r1.u32 + 264, ctx.r19.u32);
	// stw r19,260(r1)
	PPC_STORE_U32(ctx.r1.u32 + 260, ctx.r19.u32);
loc_82A26524:
	// addi r27,r27,-1
	ctx.r27.s64 = ctx.r27.s64 + -1;
	// addi r28,r28,4
	ctx.r28.s64 = ctx.r28.s64 + 4;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82a26358
	if (!ctx.cr6.eq) goto loc_82A26358;
	// addi r28,r18,160
	ctx.r28.s64 = ctx.r18.s64 + 160;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r4,r1,124
	ctx.r4.s64 = ctx.r1.s64 + 124;
	// lwz r9,104(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// addi r3,r28,28
	ctx.r3.s64 = ctx.r28.s64 + 28;
	// lwz r8,108(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r7,112(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lbz r6,116(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 116);
	// lwz r5,120(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r9,8(r28)
	PPC_STORE_U32(ctx.r28.u32 + 8, ctx.r9.u32);
	// stw r8,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r8.u32);
	// stw r7,16(r28)
	PPC_STORE_U32(ctx.r28.u32 + 16, ctx.r7.u32);
	// stb r6,20(r28)
	PPC_STORE_U8(ctx.r28.u32 + 20, ctx.r6.u8);
	// stw r5,24(r28)
	PPC_STORE_U32(ctx.r28.u32 + 24, ctx.r5.u32);
	// bl 0x82a5aba8
	ctx.lr = 0x82A2657C;
	sub_82A5ABA8(ctx, base);
	// lbz r11,180(r18)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r18.u32 + 180);
	// lbz r10,140(r18)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r18.u32 + 140);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// beq cr6,0x82a26590
	if (ctx.cr6.eq) goto loc_82A26590;
	// stw r19,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r19.u32);
loc_82A26590:
	// lwz r11,136(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 136);
	// lwz r10,176(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 176);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// beq cr6,0x82a265ac
	if (ctx.cr6.eq) goto loc_82A265AC;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a265ac
	if (!ctx.cr6.eq) goto loc_82A265AC;
	// stw r19,176(r18)
	PPC_STORE_U32(ctx.r18.u32 + 176, ctx.r19.u32);
loc_82A265AC:
	// stw r19,316(r18)
	PPC_STORE_U32(ctx.r18.u32 + 316, ctx.r19.u32);
	// mr r26,r19
	ctx.r26.u64 = ctx.r19.u64;
	// lwz r3,12304(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// addi r27,r18,20
	ctx.r27.s64 = ctx.r18.s64 + 20;
	// li r25,1
	ctx.r25.s64 = 1;
loc_82A265C0:
	// lwz r11,40(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a269d8
	if (ctx.cr6.eq) goto loc_82A269D8;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a265f4
	if (!ctx.cr6.eq) goto loc_82A265F4;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A265DC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a265ec
	if (ctx.cr6.eq) goto loc_82A265EC;
	// bl 0x82a08db0
	ctx.lr = 0x82A265E8;
	sub_82A08DB0(ctx, base);
	// b 0x82a265f0
	goto loc_82A265F0;
loc_82A265EC:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
loc_82A265F0:
	// stw r3,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r3.u32);
loc_82A265F4:
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a269d8
	if (ctx.cr6.eq) goto loc_82A269D8;
	// lwz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a269d8
	if (!ctx.cr6.eq) goto loc_82A269D8;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a269c8
	if (ctx.cr6.eq) goto loc_82A269C8;
	// addi r31,r11,600
	ctx.r31.s64 = ctx.r11.s64 + 600;
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// stw r19,244(r31)
	PPC_STORE_U32(ctx.r31.u32 + 244, ctx.r19.u32);
	// stw r19,572(r31)
	PPC_STORE_U32(ctx.r31.u32 + 572, ctx.r19.u32);
	// stw r23,312(r31)
	PPC_STORE_U32(ctx.r31.u32 + 312, ctx.r23.u32);
	// bl 0x82a17ec8
	ctx.lr = 0x82A26638;
	sub_82A17EC8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,832
	ctx.r3.s64 = ctx.r1.s64 + 832;
	// bl 0x82a18048
	ctx.lr = 0x82A26644;
	sub_82A18048(ctx, base);
	// lwz r11,8(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,1424(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1424);
	// bne cr6,0x82a26658
	if (!ctx.cr6.eq) goto loc_82A26658;
	// lwz r11,1420(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1420);
loc_82A26658:
	// lwz r6,836(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 836);
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,880(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 880);
	// addi r8,r1,208
	ctx.r8.s64 = ctx.r1.s64 + 208;
	// lwz r9,884(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 884);
	// addi r7,r1,192
	ctx.r7.s64 = ctx.r1.s64 + 192;
	// addi r4,r1,864
	ctx.r4.s64 = ctx.r1.s64 + 864;
	// stw r19,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r19.u32);
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// stw r19,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r19.u32);
	// stw r6,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r6.u32);
	// lwz r6,840(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 840);
	// stw r19,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r19.u32);
	// stwx r10,r11,r8
	PPC_STORE_U32(ctx.r11.u32 + ctx.r8.u32, ctx.r10.u32);
	// stwx r9,r11,r7
	PPC_STORE_U32(ctx.r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// stw r6,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r6.u32);
	// lwz r6,844(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 844);
	// stw r6,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r6.u32);
	// lwz r6,848(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 848);
	// stw r6,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r6.u32);
	// lwz r6,852(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 852);
	// stw r6,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r6.u32);
	// lbz r6,856(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 856);
	// stb r6,164(r1)
	PPC_STORE_U8(ctx.r1.u32 + 164, ctx.r6.u8);
	// lwz r6,860(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 860);
	// stw r6,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r6.u32);
	// bl 0x82a5aba8
	ctx.lr = 0x82A266C4;
	sub_82A5ABA8(ctx, base);
	// lwz r10,160(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a266d4
	if (ctx.cr6.eq) goto loc_82A266D4;
	// stw r10,316(r18)
	PPC_STORE_U32(ctx.r18.u32 + 316, ctx.r10.u32);
loc_82A266D4:
	// lwz r9,0(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82a266e8
	if (!ctx.cr6.lt) goto loc_82A266E8;
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
loc_82A266E8:
	// lwz r9,164(r18)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r18.u32 + 164);
	// lwz r11,148(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82a266fc
	if (!ctx.cr6.lt) goto loc_82A266FC;
	// stw r11,164(r18)
	PPC_STORE_U32(ctx.r18.u32 + 164, ctx.r11.u32);
loc_82A266FC:
	// lwz r9,168(r18)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r18.u32 + 168);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82a26710
	if (!ctx.cr6.lt) goto loc_82A26710;
	// stw r11,168(r18)
	PPC_STORE_U32(ctx.r18.u32 + 168, ctx.r11.u32);
loc_82A26710:
	// lwz r9,172(r18)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r18.u32 + 172);
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82a26724
	if (!ctx.cr6.lt) goto loc_82A26724;
	// stw r11,172(r18)
	PPC_STORE_U32(ctx.r18.u32 + 172, ctx.r11.u32);
loc_82A26724:
	// lwz r11,176(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 176);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82a26734
	if (!ctx.cr6.lt) goto loc_82A26734;
	// stw r10,176(r18)
	PPC_STORE_U32(ctx.r18.u32 + 176, ctx.r10.u32);
loc_82A26734:
	// lwz r10,184(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 184);
	// lwz r11,168(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82a26748
	if (!ctx.cr6.lt) goto loc_82A26748;
	// stw r11,184(r18)
	PPC_STORE_U32(ctx.r18.u32 + 184, ctx.r11.u32);
loc_82A26748:
	// lwz r11,192(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 192);
	// mr r30,r19
	ctx.r30.u64 = ctx.r19.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a26800
	if (!ctx.cr6.gt) goto loc_82A26800;
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
loc_82A2675C:
	// lwz r6,176(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// mr r9,r19
	ctx.r9.u64 = ctx.r19.u64;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// ble cr6,0x82a267bc
	if (!ctx.cr6.gt) goto loc_82A267BC;
	// lwz r10,188(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 188);
	// lwz r7,172(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + ctx.r31.u64;
	// mr r11,r7
	ctx.r11.u64 = ctx.r7.u64;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
loc_82A26780:
	// lwz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpw cr6,r8,r5
	ctx.cr6.compare<int32_t>(ctx.r8.s32, ctx.r5.s32, ctx.xer);
	// beq cr6,0x82a267a0
	if (ctx.cr6.eq) goto loc_82A267A0;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,8
	ctx.r11.s64 = ctx.r11.s64 + 8;
	// cmpw cr6,r9,r6
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r6.s32, ctx.xer);
	// blt cr6,0x82a26780
	if (ctx.cr6.lt) goto loc_82A26780;
	// b 0x82a267bc
	goto loc_82A267BC;
loc_82A267A0:
	// rlwinm r11,r9,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// add r11,r11,r7
	ctx.r11.u64 = ctx.r11.u64 + ctx.r7.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpw cr6,r11,r8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r8.s32, ctx.xer);
	// bge cr6,0x82a267bc
	if (!ctx.cr6.lt) goto loc_82A267BC;
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r11.u32);
loc_82A267BC:
	// lwz r11,176(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// cmpw cr6,r9,r11
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a267ec
	if (!ctx.cr6.eq) goto loc_82A267EC;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r18,188
	ctx.r3.s64 = ctx.r18.s64 + 188;
	// bl 0x82416660
	ctx.lr = 0x82A267E4;
	sub_82416660(ctx, base);
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,-8
	ctx.r31.s64 = ctx.r31.s64 + -8;
loc_82A267EC:
	// lwz r11,192(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 192);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r31,r31,8
	ctx.r31.s64 = ctx.r31.s64 + 8;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a2675c
	if (ctx.cr6.lt) goto loc_82A2675C;
loc_82A26800:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ble cr6,0x82a26890
	if (!ctx.cr6.gt) goto loc_82A26890;
	// li r4,596
	ctx.r4.s64 = 596;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416640
	ctx.lr = 0x82A26828;
	sub_82416640(ctx, base);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// bne cr6,0x82a26848
	if (!ctx.cr6.eq) goto loc_82A26848;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a26894
	if (ctx.cr6.eq) goto loc_82A26894;
loc_82A26848:
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mulli r31,r10,596
	ctx.r31.s64 = ctx.r10.s64 * 596;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// bne cr6,0x82a26864
	if (!ctx.cr6.eq) goto loc_82A26864;
	// bl 0x82545cc0
	ctx.lr = 0x82A26860;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A26864:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26884;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// b 0x82a26894
	goto loc_82A26894;
loc_82A26890:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82A26894:
	// mulli r10,r29,596
	ctx.r10.s64 = ctx.r29.s64 * 596;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a268ac
	if (ctx.cr6.eq) goto loc_82A268AC;
	// addi r4,r1,832
	ctx.r4.s64 = ctx.r1.s64 + 832;
	// bl 0x82a18048
	ctx.lr = 0x82A268AC;
	sub_82A18048(ctx, base);
loc_82A268AC:
	// addi r10,r1,832
	ctx.r10.s64 = ctx.r1.s64 + 832;
	// addi r9,r1,184
	ctx.r9.s64 = ctx.r1.s64 + 184;
	// mr r8,r19
	ctx.r8.u64 = ctx.r19.u64;
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
	// lhz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// lhz r10,2(r10)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r10.u32 + 2);
	// sth r7,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, ctx.r7.u16);
	// sth r10,2(r9)
	PPC_STORE_U16(ctx.r9.u32 + 2, ctx.r10.u16);
loc_82A268CC:
	// addi r10,r1,184
	ctx.r10.s64 = ctx.r1.s64 + 184;
	// addi r9,r1,136
	ctx.r9.s64 = ctx.r1.s64 + 136;
	// lhzx r10,r11,r10
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r11.u32 + ctx.r10.u32);
	// lhzx r9,r11,r9
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r11.u32 + ctx.r9.u32);
	// cmplw cr6,r9,r10
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, ctx.xer);
	// bne cr6,0x82a268f8
	if (!ctx.cr6.eq) goto loc_82A268F8;
	// addi r11,r11,2
	ctx.r11.s64 = ctx.r11.s64 + 2;
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// blt cr6,0x82a268cc
	if (ctx.cr6.lt) goto loc_82A268CC;
	// b 0x82a26904
	goto loc_82A26904;
loc_82A268F8:
	// cmpwi cr6,r8,-1
	ctx.cr6.compare<int32_t>(ctx.r8.s32, -1, ctx.xer);
	// beq cr6,0x82a26904
	if (ctx.cr6.eq) goto loc_82A26904;
	// stw r25,52(r18)
	PPC_STORE_U32(ctx.r18.u32 + 52, ctx.r25.u32);
loc_82A26904:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,176(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 176);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,172
	ctx.r3.s64 = ctx.r1.s64 + 172;
	// bl 0x82416660
	ctx.lr = 0x82A26920;
	sub_82416660(ctx, base);
	// lwz r11,172(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a26958
	if (ctx.cr6.eq) goto loc_82A26958;
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26944
	if (!ctx.cr6.eq) goto loc_82A26944;
	// bl 0x82545cc0
	ctx.lr = 0x82A26940;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A26944:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26958;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A26958:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,868(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 868);
	// li r7,16
	ctx.r7.s64 = 16;
	// stw r19,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r19.u32);
	// li r6,8
	ctx.r6.s64 = 8;
	// stw r19,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r19.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r19,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r19.u32);
	// addi r3,r1,864
	ctx.r3.s64 = ctx.r1.s64 + 864;
	// bl 0x82416660
	ctx.lr = 0x82A26980;
	sub_82416660(ctx, base);
	// lwz r11,864(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 864);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a269b8
	if (ctx.cr6.eq) goto loc_82A269B8;
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a269a4
	if (!ctx.cr6.eq) goto loc_82A269A4;
	// bl 0x82545cc0
	ctx.lr = 0x82A269A0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A269A4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A269B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A269B8:
	// lwz r3,12304(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// stw r19,864(r1)
	PPC_STORE_U32(ctx.r1.u32 + 864, ctx.r19.u32);
	// stw r19,872(r1)
	PPC_STORE_U32(ctx.r1.u32 + 872, ctx.r19.u32);
	// stw r19,868(r1)
	PPC_STORE_U32(ctx.r1.u32 + 868, ctx.r19.u32);
loc_82A269C8:
	// addi r26,r26,1
	ctx.r26.s64 = ctx.r26.s64 + 1;
	// addi r27,r27,4
	ctx.r27.s64 = ctx.r27.s64 + 4;
	// cmpwi cr6,r26,3
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 3, ctx.xer);
	// blt cr6,0x82a265c0
	if (ctx.cr6.lt) goto loc_82A265C0;
loc_82A269D8:
	// mr r21,r19
	ctx.r21.u64 = ctx.r19.u64;
	// li r20,-9999
	ctx.r20.s64 = -9999;
	// mr r10,r19
	ctx.r10.u64 = ctx.r19.u64;
loc_82A269E4:
	// addi r11,r1,208
	ctx.r11.s64 = ctx.r1.s64 + 208;
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x82a269f8
	if (ctx.cr6.lt) goto loc_82A269F8;
	// add r21,r11,r21
	ctx.r21.u64 = ctx.r11.u64 + ctx.r21.u64;
loc_82A269F8:
	// addi r11,r1,192
	ctx.r11.s64 = ctx.r1.s64 + 192;
	// lwzx r11,r10,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r11.u32);
	// cmpw cr6,r11,r20
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r20.s32, ctx.xer);
	// ble cr6,0x82a26a0c
	if (!ctx.cr6.gt) goto loc_82A26A0C;
	// mr r20,r11
	ctx.r20.u64 = ctx.r11.u64;
loc_82A26A0C:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpwi cr6,r10,16
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 16, ctx.xer);
	// blt cr6,0x82a269e4
	if (ctx.cr6.lt) goto loc_82A269E4;
	// li r11,512
	ctx.r11.s64 = 512;
	// stw r25,36(r18)
	PPC_STORE_U32(ctx.r18.u32 + 36, ctx.r25.u32);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r24,84(r1)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,112(r18)
	PPC_STORE_U32(ctx.r18.u32 + 112, ctx.r11.u32);
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a26a68
	if (!ctx.cr6.eq) goto loc_82A26A68;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A26A40;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26a54
	if (ctx.cr6.eq) goto loc_82A26A54;
	// bl 0x82a13fe0
	ctx.lr = 0x82A26A4C;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a26a58
	goto loc_82A26A58;
loc_82A26A54:
	// mr r31,r19
	ctx.r31.u64 = ctx.r19.u64;
loc_82A26A58:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A26A68:
	// mr r23,r19
	ctx.r23.u64 = ctx.r19.u64;
	// lis r22,-31969
	ctx.r22.s64 = -2095120384;
	// lis r25,-31969
	ctx.r25.s64 = -2095120384;
	// li r26,-2
	ctx.r26.s64 = -2;
loc_82A26A78:
	// mr r27,r19
	ctx.r27.u64 = ctx.r19.u64;
	// cmpwi cr6,r24,0
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 0, ctx.xer);
	// ble cr6,0x82a26c30
	if (!ctx.cr6.gt) goto loc_82A26C30;
	// mr r28,r19
	ctx.r28.u64 = ctx.r19.u64;
loc_82A26A88:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r30,r28,r11
	ctx.r30.u64 = ctx.r28.u64 + ctx.r11.u64;
	// lwz r11,4156(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4156);
	// lwz r10,44(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 44);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a26ac4
	if (!ctx.cr6.eq) goto loc_82A26AC4;
	// lwz r3,4140(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4140);
	// lwz r4,4148(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4148);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,368(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 368);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26AB8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r19,4140(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4140, ctx.r19.u32);
	// stw r19,4148(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4148, ctx.r19.u32);
	// stw r26,4156(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4156, ctx.r26.u32);
loc_82A26AC4:
	// lwz r11,44(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 44);
	// lwz r10,4152(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4152);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82a26af8
	if (!ctx.cr6.eq) goto loc_82A26AF8;
	// lwz r3,4136(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4136);
	// lwz r4,4144(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4144);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,364(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 364);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26AEC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r19,4136(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4136, ctx.r19.u32);
	// stw r19,4144(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4144, ctx.r19.u32);
	// stw r26,4152(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4152, ctx.r26.u32);
loc_82A26AF8:
	// lwz r11,40(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 40);
	// lwz r29,588(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 588);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a26b70
	if (ctx.cr6.eq) goto loc_82A26B70;
	// lwz r11,12304(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a26b34
	if (!ctx.cr6.eq) goto loc_82A26B34;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A26B1C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26b30
	if (ctx.cr6.eq) goto loc_82A26B30;
	// bl 0x82a08db0
	ctx.lr = 0x82A26B28;
	sub_82A08DB0(ctx, base);
	// stw r3,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r3.u32);
	// b 0x82a26b34
	goto loc_82A26B34;
loc_82A26B30:
	// stw r19,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r19.u32);
loc_82A26B34:
	// lwz r11,12304(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a26b70
	if (ctx.cr6.eq) goto loc_82A26B70;
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a26b70
	if (!ctx.cr6.eq) goto loc_82A26B70;
	// lwz r29,592(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 592);
	// cmpwi cr6,r29,-1
	ctx.cr6.compare<int32_t>(ctx.r29.s32, -1, ctx.xer);
	// bne cr6,0x82a26b70
	if (!ctx.cr6.eq) goto loc_82A26B70;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// lwz r4,588(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 588);
	// bl 0x82a02cd0
	ctx.lr = 0x82A26B68;
	sub_82A02CD0(ctx, base);
	// lwz r29,4(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r29,592(r30)
	PPC_STORE_U32(ctx.r30.u32 + 592, ctx.r29.u32);
loc_82A26B70:
	// cmpw cr6,r29,r23
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r23.s32, ctx.xer);
	// beq cr6,0x82a26b8c
	if (ctx.cr6.eq) goto loc_82A26B8C;
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r28,r28,596
	ctx.r28.s64 = ctx.r28.s64 + 596;
	// cmpw cr6,r27,r24
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r24.s32, ctx.xer);
	// blt cr6,0x82a26a88
	if (ctx.cr6.lt) goto loc_82A26A88;
	// b 0x82a26c30
	goto loc_82A26C30;
loc_82A26B8C:
	// lwz r11,56(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 56);
	// lwz r10,112(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 112);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a26ba0
	if (!ctx.cr6.gt) goto loc_82A26BA0;
	// stw r11,112(r18)
	PPC_STORE_U32(ctx.r18.u32 + 112, ctx.r11.u32);
loc_82A26BA0:
	// lwz r11,12296(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 12296);
	// lwz r29,588(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 588);
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a26c00
	if (ctx.cr6.eq) goto loc_82A26C00;
	// lwz r11,12304(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a26be0
	if (!ctx.cr6.eq) goto loc_82A26BE0;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A26BC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26bdc
	if (ctx.cr6.eq) goto loc_82A26BDC;
	// bl 0x82a08db0
	ctx.lr = 0x82A26BD4;
	sub_82A08DB0(ctx, base);
	// stw r3,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r3.u32);
	// b 0x82a26be0
	goto loc_82A26BE0;
loc_82A26BDC:
	// stw r19,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r19.u32);
loc_82A26BE0:
	// lwz r11,12304(r17)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a26c00
	if (ctx.cr6.eq) goto loc_82A26C00;
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a26c00
	if (!ctx.cr6.eq) goto loc_82A26C00;
	// lwz r29,592(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 592);
loc_82A26C00:
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r7,584(r30)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r30.u32 + 584);
	// lwz r6,580(r30)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r30.u32 + 580);
	// lwz r5,576(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 576);
	// lwz r3,772(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 772);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,280(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 280);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26C28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0eec8
	ctx.lr = 0x82A26C30;
	sub_82A0EEC8(ctx, base);
loc_82A26C30:
	// addi r23,r23,1
	ctx.r23.s64 = ctx.r23.s64 + 1;
	// cmpwi cr6,r23,4
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 4, ctx.xer);
	// blt cr6,0x82a26a78
	if (ctx.cr6.lt) goto loc_82A26A78;
	// lwz r11,100(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 100);
	// lwz r10,40(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 40);
	// add r11,r11,r15
	ctx.r11.u64 = ctx.r11.u64 + ctx.r15.u64;
	// stw r19,36(r18)
	PPC_STORE_U32(ctx.r18.u32 + 36, ctx.r19.u32);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r11,100(r18)
	PPC_STORE_U32(ctx.r18.u32 + 100, ctx.r11.u32);
	// beq cr6,0x82a26ca4
	if (ctx.cr6.eq) goto loc_82A26CA4;
	// lwz r3,12304(r17)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r17.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26c84
	if (!ctx.cr6.eq) goto loc_82A26C84;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A26C6C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26c7c
	if (ctx.cr6.eq) goto loc_82A26C7C;
	// bl 0x82a08db0
	ctx.lr = 0x82A26C78;
	sub_82A08DB0(ctx, base);
	// b 0x82a26c80
	goto loc_82A26C80;
loc_82A26C7C:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
loc_82A26C80:
	// stw r3,12304(r17)
	PPC_STORE_U32(ctx.r17.u32 + 12304, ctx.r3.u32);
loc_82A26C84:
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a26ca4
	if (ctx.cr6.eq) goto loc_82A26CA4;
	// lwz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a26ca4
	if (!ctx.cr6.eq) goto loc_82A26CA4;
	// lwz r8,32(r18)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r18.u32 + 32);
	// b 0x82a26ca8
	goto loc_82A26CA8;
loc_82A26CA4:
	// mr r8,r19
	ctx.r8.u64 = ctx.r19.u64;
loc_82A26CA8:
	// lwz r9,256(r18)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r18.u32 + 256);
	// rotlwi r11,r21,1
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r21.u32, 1);
	// lwz r10,16(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 16);
	// addi r9,r9,54
	ctx.r9.s64 = ctx.r9.s64 + 54;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// divw r8,r21,r10
	ctx.r8.s32 = ctx.r21.s32 / ctx.r10.s32;
	// andc r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 & ~ctx.r11.u64;
	// twllei r10,0
	// twlgei r11,-1
	// stwx r8,r9,r18
	PPC_STORE_U32(ctx.r9.u32 + ctx.r18.u32, ctx.r8.u32);
	// lwz r11,256(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 256);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// stw r11,256(r18)
	PPC_STORE_U32(ctx.r18.u32 + 256, ctx.r11.u32);
	// blt cr6,0x82a26cf0
	if (ctx.cr6.lt) goto loc_82A26CF0;
	// stw r19,256(r18)
	PPC_STORE_U32(ctx.r18.u32 + 256, ctx.r19.u32);
loc_82A26CF0:
	// mr r9,r19
	ctx.r9.u64 = ctx.r19.u64;
	// addi r10,r18,216
	ctx.r10.s64 = ctx.r18.s64 + 216;
	// li r11,10
	ctx.r11.s64 = 10;
loc_82A26CFC:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a26cfc
	if (!ctx.cr6.eq) goto loc_82A26CFC;
	// li r11,10
	ctx.r11.s64 = 10;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// divw r11,r9,r11
	ctx.r11.s32 = ctx.r9.s32 / ctx.r11.s32;
	// stw r11,212(r18)
	PPC_STORE_U32(ctx.r18.u32 + 212, ctx.r11.u32);
	// blt cr6,0x82a26d8c
	if (ctx.cr6.lt) goto loc_82A26D8C;
	// lwz r11,284(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 284);
	// addi r11,r11,66
	ctx.r11.s64 = ctx.r11.s64 + 66;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r20,r11,r18
	PPC_STORE_U32(ctx.r11.u32 + ctx.r18.u32, ctx.r20.u32);
	// lwz r11,284(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 284);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// stw r11,284(r18)
	PPC_STORE_U32(ctx.r18.u32 + 284, ctx.r11.u32);
	// blt cr6,0x82a26d50
	if (ctx.cr6.lt) goto loc_82A26D50;
	// stw r19,284(r18)
	PPC_STORE_U32(ctx.r18.u32 + 284, ctx.r19.u32);
loc_82A26D50:
	// mr r9,r19
	ctx.r9.u64 = ctx.r19.u64;
	// addi r10,r18,264
	ctx.r10.s64 = ctx.r18.s64 + 264;
	// li r11,5
	ctx.r11.s64 = 5;
loc_82A26D5C:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a26d5c
	if (!ctx.cr6.eq) goto loc_82A26D5C;
	// rlwinm r11,r20,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r20.u32 | (ctx.r20.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r20,r11
	ctx.r11.u64 = ctx.r20.u64 + ctx.r11.u64;
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// srawi r11,r11,3
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x7) != 0);
	ctx.r11.s64 = ctx.r11.s32 >> 3;
	// addze r11,r11
	temp.s64 = ctx.r11.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r11.u32;
	ctx.r11.s64 = temp.s64;
	// stw r11,260(r18)
	PPC_STORE_U32(ctx.r18.u32 + 260, ctx.r11.u32);
loc_82A26D8C:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,128(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x82416660
	ctx.lr = 0x82A26DA8;
	sub_82416660(ctx, base);
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a26de0
	if (ctx.cr6.eq) goto loc_82A26DE0;
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26dcc
	if (!ctx.cr6.eq) goto loc_82A26DCC;
	// bl 0x82545cc0
	ctx.lr = 0x82A26DC8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A26DCC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26DE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A26DE0:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r19,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r19.u32);
	// stw r19,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r19.u32);
	// stw r19,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r19.u32);
	// bl 0x82a35740
	ctx.lr = 0x82A26DFC;
	sub_82A35740(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a26e34
	if (ctx.cr6.eq) goto loc_82A26E34;
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a26e20
	if (!ctx.cr6.eq) goto loc_82A26E20;
	// bl 0x82545cc0
	ctx.lr = 0x82A26E1C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r16)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r16.u32 + 8344);
loc_82A26E20:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A26E34;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A26E34:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfd f1,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// addi r1,r1,1584
	ctx.r1.s64 = ctx.r1.s64 + 1584;
	// b 0x82e28e84
	__restgprlr_15(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A26E48"))) PPC_WEAK_FUNC(sub_82A26E48);
PPC_FUNC_IMPL(__imp__sub_82A26E48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addi r4,r3,1200
	ctx.r4.s64 = ctx.r3.s64 + 1200;
	// li r3,596
	ctx.r3.s64 = 596;
	// bl 0x82a337c0
	ctx.lr = 0x82A26E68;
	sub_82A337C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26e78
	if (ctx.cr6.eq) goto loc_82A26E78;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A26E78;
	sub_82A18048(ctx, base);
loc_82A26E78:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A26E90"))) PPC_WEAK_FUNC(sub_82A26E90);
PPC_FUNC_IMPL(__imp__sub_82A26E90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// cmpwi cr6,r5,1
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 1, ctx.xer);
	// bne cr6,0x82a26f10
	if (!ctx.cr6.eq) goto loc_82A26F10;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// bne cr6,0x82a26ee4
	if (!ctx.cr6.eq) goto loc_82A26EE4;
	// li r3,1220
	ctx.r3.s64 = 1220;
	// bl 0x82545e80
	ctx.lr = 0x82A26EC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a363a0
	ctx.lr = 0x82A26EE0;
	sub_82A363A0(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26EE4:
	// cmpwi cr6,r6,1
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 1, ctx.xer);
	// bne cr6,0x82a26fd4
	if (!ctx.cr6.eq) goto loc_82A26FD4;
	// li r3,1224
	ctx.r3.s64 = 1224;
	// bl 0x82545e80
	ctx.lr = 0x82A26EF4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a36420
	ctx.lr = 0x82A26F0C;
	sub_82A36420(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26F10:
	// cmpwi cr6,r5,2
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 2, ctx.xer);
	// bne cr6,0x82a26f44
	if (!ctx.cr6.eq) goto loc_82A26F44;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// bne cr6,0x82a26fd4
	if (!ctx.cr6.eq) goto loc_82A26FD4;
	// li r3,1228
	ctx.r3.s64 = 1228;
	// bl 0x82545e80
	ctx.lr = 0x82A26F28;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,2
	ctx.r6.s64 = 2;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a364b0
	ctx.lr = 0x82A26F40;
	sub_82A364B0(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26F44:
	// cmpwi cr6,r5,3
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 3, ctx.xer);
	// bne cr6,0x82a26f70
	if (!ctx.cr6.eq) goto loc_82A26F70;
	// li r3,1232
	ctx.r3.s64 = 1232;
	// bl 0x82545e80
	ctx.lr = 0x82A26F54;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,3
	ctx.r6.s64 = 3;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a365d8
	ctx.lr = 0x82A26F6C;
	sub_82A365D8(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26F70:
	// cmpwi cr6,r5,4
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 4, ctx.xer);
	// bne cr6,0x82a26fd4
	if (!ctx.cr6.eq) goto loc_82A26FD4;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// bne cr6,0x82a26fa4
	if (!ctx.cr6.eq) goto loc_82A26FA4;
	// li r3,1220
	ctx.r3.s64 = 1220;
	// bl 0x82545e80
	ctx.lr = 0x82A26F88;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,4
	ctx.r6.s64 = 4;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a36668
	ctx.lr = 0x82A26FA0;
	sub_82A36668(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26FA4:
	// cmpwi cr6,r6,1
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 1, ctx.xer);
	// bne cr6,0x82a26fd4
	if (!ctx.cr6.eq) goto loc_82A26FD4;
	// li r3,1224
	ctx.r3.s64 = 1224;
	// bl 0x82545e80
	ctx.lr = 0x82A26FB4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a26fd0
	if (ctx.cr6.eq) goto loc_82A26FD0;
	// li r6,4
	ctx.r6.s64 = 4;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a366e8
	ctx.lr = 0x82A26FCC;
	sub_82A366E8(ctx, base);
	// b 0x82a26fd4
	goto loc_82A26FD4;
loc_82A26FD0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A26FD4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A26FF0"))) PPC_WEAK_FUNC(sub_82A26FF0);
PPC_FUNC_IMPL(__imp__sub_82A26FF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A26FF8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// cmplwi cr6,r5,1
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 1, ctx.xer);
	// blt cr6,0x82a27024
	if (ctx.cr6.lt) goto loc_82A27024;
	// beq cr6,0x82a2701c
	if (ctx.cr6.eq) goto loc_82A2701C;
	// cmplwi cr6,r5,3
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 3, ctx.xer);
	// bge cr6,0x82a27024
	if (!ctx.cr6.lt) goto loc_82A27024;
	// li r30,2
	ctx.r30.s64 = 2;
	// b 0x82a27028
	goto loc_82A27028;
loc_82A2701C:
	// li r30,0
	ctx.r30.s64 = 0;
	// b 0x82a27028
	goto loc_82A27028;
loc_82A27024:
	// li r30,1
	ctx.r30.s64 = 1;
loc_82A27028:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27064
	if (!ctx.cr6.eq) goto loc_82A27064;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27040;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27050
	if (ctx.cr6.eq) goto loc_82A27050;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2704C;
	sub_82A13FE0(ctx, base);
	// b 0x82a27054
	goto loc_82A27054;
loc_82A27050:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27054:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27064:
	// lwz r3,4000(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4000);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2707c
	if (ctx.cr6.eq) goto loc_82A2707C;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82a212c8
	ctx.lr = 0x82A2707C;
	sub_82A212C8(ctx, base);
loc_82A2707C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27088"))) PPC_WEAK_FUNC(sub_82A27088);
PPC_FUNC_IMPL(__imp__sub_82A27088) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A27090;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// cmplwi cr6,r5,1
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 1, ctx.xer);
	// blt cr6,0x82a270bc
	if (ctx.cr6.lt) goto loc_82A270BC;
	// beq cr6,0x82a270b4
	if (ctx.cr6.eq) goto loc_82A270B4;
	// cmplwi cr6,r5,3
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 3, ctx.xer);
	// bge cr6,0x82a270bc
	if (!ctx.cr6.lt) goto loc_82A270BC;
	// li r30,2
	ctx.r30.s64 = 2;
	// b 0x82a270c0
	goto loc_82A270C0;
loc_82A270B4:
	// li r30,0
	ctx.r30.s64 = 0;
	// b 0x82a270c0
	goto loc_82A270C0;
loc_82A270BC:
	// li r30,1
	ctx.r30.s64 = 1;
loc_82A270C0:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a270fc
	if (!ctx.cr6.eq) goto loc_82A270FC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A270D8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a270e8
	if (ctx.cr6.eq) goto loc_82A270E8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A270E4;
	sub_82A13FE0(ctx, base);
	// b 0x82a270ec
	goto loc_82A270EC;
loc_82A270E8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A270EC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A270FC:
	// lwz r3,4000(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4000);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27138
	if (ctx.cr6.eq) goto loc_82A27138;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a27128
	if (ctx.cr6.eq) goto loc_82A27128;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x82a213a0
	ctx.lr = 0x82A27120;
	sub_82A213A0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A27128:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x82a213a0
	ctx.lr = 0x82A27138;
	sub_82A213A0(ctx, base);
loc_82A27138:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27140"))) PPC_WEAK_FUNC(sub_82A27140);
PPC_FUNC_IMPL(__imp__sub_82A27140) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A27148;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a27164
	if (ctx.cr6.eq) goto loc_82A27164;
	// lwz r30,0(r4)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x82a2716c
	goto loc_82A2716C;
loc_82A27164:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A2716C:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a271a8
	if (!ctx.cr6.eq) goto loc_82A271A8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27184;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27194
	if (ctx.cr6.eq) goto loc_82A27194;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27190;
	sub_82A13FE0(ctx, base);
	// b 0x82a27198
	goto loc_82A27198;
loc_82A27194:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27198:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A271A8:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a24f30
	ctx.lr = 0x82A271B4;
	sub_82A24F30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A271C0"))) PPC_WEAK_FUNC(sub_82A271C0);
PPC_FUNC_IMPL(__imp__sub_82A271C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2720c
	if (!ctx.cr6.eq) goto loc_82A2720C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A271E8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a271f8
	if (ctx.cr6.eq) goto loc_82A271F8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A271F4;
	sub_82A13FE0(ctx, base);
	// b 0x82a271fc
	goto loc_82A271FC;
loc_82A271F8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A271FC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2720C:
	// bl 0x82a25010
	ctx.lr = 0x82A27210;
	sub_82A25010(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27228"))) PPC_WEAK_FUNC(sub_82A27228);
PPC_FUNC_IMPL(__imp__sub_82A27228) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27274
	if (!ctx.cr6.eq) goto loc_82A27274;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27250;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27260
	if (ctx.cr6.eq) goto loc_82A27260;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2725C;
	sub_82A13FE0(ctx, base);
	// b 0x82a27264
	goto loc_82A27264;
loc_82A27260:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27264:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27274:
	// bl 0x82a25108
	ctx.lr = 0x82A27278;
	sub_82A25108(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27290"))) PPC_WEAK_FUNC(sub_82A27290);
PPC_FUNC_IMPL(__imp__sub_82A27290) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a272c0
	if (ctx.cr6.eq) goto loc_82A272C0;
	// lwz r30,0(r4)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x82a272c8
	goto loc_82A272C8;
loc_82A272C0:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A272C8:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27304
	if (!ctx.cr6.eq) goto loc_82A27304;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A272E0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a272f0
	if (ctx.cr6.eq) goto loc_82A272F0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A272EC;
	sub_82A13FE0(ctx, base);
	// b 0x82a272f4
	goto loc_82A272F4;
loc_82A272F0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A272F4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27304:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x82a251f0
	ctx.lr = 0x82A27310;
	sub_82A251F0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27330"))) PPC_WEAK_FUNC(sub_82A27330);
PPC_FUNC_IMPL(__imp__sub_82A27330) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27384
	if (!ctx.cr6.eq) goto loc_82A27384;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27360;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27370
	if (ctx.cr6.eq) goto loc_82A27370;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2736C;
	sub_82A13FE0(ctx, base);
	// b 0x82a27374
	goto loc_82A27374;
loc_82A27370:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27374:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27384:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a25908
	ctx.lr = 0x82A2738C;
	sub_82A25908(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A273A8"))) PPC_WEAK_FUNC(sub_82A273A8);
PPC_FUNC_IMPL(__imp__sub_82A273A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a273f4
	if (!ctx.cr6.eq) goto loc_82A273F4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A273D0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a273e0
	if (ctx.cr6.eq) goto loc_82A273E0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A273DC;
	sub_82A13FE0(ctx, base);
	// b 0x82a273e4
	goto loc_82A273E4;
loc_82A273E0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A273E4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A273F4:
	// bl 0x82a25b28
	ctx.lr = 0x82A273F8;
	sub_82A25B28(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27410"))) PPC_WEAK_FUNC(sub_82A27410);
PPC_FUNC_IMPL(__imp__sub_82A27410) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A27418;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27424;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27434;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27444;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// ble cr6,0x82a27548
	if (!ctx.cr6.gt) goto loc_82A27548;
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A27454:
	// bl 0x82219f20
	ctx.lr = 0x82A27458;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27468;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2747C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r30
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r30.s32, ctx.xer);
	// blt cr6,0x82a27454
	if (ctx.cr6.lt) goto loc_82A27454;
	// bl 0x82219f20
	ctx.lr = 0x82A2748C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2749C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A274B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// bl 0x82a21ba0
	ctx.lr = 0x82A274C0;
	sub_82A21BA0(ctx, base);
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a274fc
	if (!ctx.cr6.eq) goto loc_82A274FC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A274D8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a274e8
	if (ctx.cr6.eq) goto loc_82A274E8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A274E4;
	sub_82A13FE0(ctx, base);
	// b 0x82a274ec
	goto loc_82A274EC;
loc_82A274E8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A274EC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A274FC:
	// li r11,1
	ctx.r11.s64 = 1;
	// lwz r31,2784(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stb r11,2795(r3)
	PPC_STORE_U8(ctx.r3.u32 + 2795, ctx.r11.u8);
	// beq cr6,0x82a27548
	if (ctx.cr6.eq) goto loc_82A27548;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,3924(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 3924);
	// bl 0x8246bd50
	ctx.lr = 0x82A27528;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27548;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A27548:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27550"))) PPC_WEAK_FUNC(sub_82A27550);
PPC_FUNC_IMPL(__imp__sub_82A27550) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82A27558;
	__savegprlr_25(ctx, base);
	// stwu r1,-448(r1)
	ea = -448 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r28,0
	ctx.r28.s64 = 0;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// beq cr6,0x82a27574
	if (ctx.cr6.eq) goto loc_82A27574;
	// stw r28,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r28.u32);
	// b 0x82a2758c
	goto loc_82A2758C;
loc_82A27574:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27588;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r3.u32);
loc_82A2758C:
	// lis r27,-31969
	ctx.r27.s64 = -2095120384;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// lwz r3,12324(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a275c8
	if (!ctx.cr6.eq) goto loc_82A275C8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A275A8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a275b8
	if (ctx.cr6.eq) goto loc_82A275B8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A275B4;
	sub_82A13FE0(ctx, base);
	// b 0x82a275bc
	goto loc_82A275BC;
loc_82A275B8:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A275BC:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r27)
	PPC_STORE_U32(ctx.r27.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A275C8:
	// lbz r11,4021(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4021);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a276a8
	if (ctx.cr6.eq) goto loc_82A276A8;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27638
	if (ctx.cr6.eq) goto loc_82A27638;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A275F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x82a27638
	if (!ctx.cr6.gt) goto loc_82A27638;
loc_82A27600:
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// addi r25,r1,128
	ctx.r25.s64 = ctx.r1.s64 + 128;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2761C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// bl 0x82a03378
	ctx.lr = 0x82A2762C;
	sub_82A03378(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r29
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r29.s32, ctx.xer);
	// blt cr6,0x82a27600
	if (ctx.cr6.lt) goto loc_82A27600;
loc_82A27638:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A27640;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2765c
	if (ctx.cr6.eq) goto loc_82A2765C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4416
	ctx.r11.s64 = ctx.r11.s64 + -4416;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a27660
	goto loc_82A27660;
loc_82A2765C:
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
loc_82A27660:
	// lwz r3,12324(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27694
	if (!ctx.cr6.eq) goto loc_82A27694;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27674;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27684
	if (ctx.cr6.eq) goto loc_82A27684;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27680;
	sub_82A13FE0(ctx, base);
	// b 0x82a27688
	goto loc_82A27688;
loc_82A27684:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A27688:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r27)
	PPC_STORE_U32(ctx.r27.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A27694:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A276A0;
	sub_82A02300(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82A276A8:
	// bl 0x82a186e0
	ctx.lr = 0x82A276AC;
	sub_82A186E0(ctx, base);
	// lbz r11,4028(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a27740
	if (ctx.cr6.eq) goto loc_82A27740;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2771c
	if (ctx.cr6.eq) goto loc_82A2771C;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A276D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x82a2771c
	if (!ctx.cr6.gt) goto loc_82A2771C;
loc_82A276E4:
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// addi r25,r1,128
	ctx.r25.s64 = ctx.r1.s64 + 128;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27700;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// bl 0x82a03378
	ctx.lr = 0x82A27710;
	sub_82A03378(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r29
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r29.s32, ctx.xer);
	// blt cr6,0x82a276e4
	if (ctx.cr6.lt) goto loc_82A276E4;
loc_82A2771C:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A27724;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2765c
	if (ctx.cr6.eq) goto loc_82A2765C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4412
	ctx.r11.s64 = ctx.r11.s64 + -4412;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a27660
	goto loc_82A27660;
loc_82A27740:
	// bl 0x82a186e0
	ctx.lr = 0x82A27744;
	sub_82A186E0(ctx, base);
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a27808
	if (ctx.cr6.eq) goto loc_82A27808;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a277b4
	if (ctx.cr6.eq) goto loc_82A277B4;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2776C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x82a277b4
	if (!ctx.cr6.gt) goto loc_82A277B4;
loc_82A2777C:
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// addi r27,r1,128
	ctx.r27.s64 = ctx.r1.s64 + 128;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27798;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// bl 0x82a03378
	ctx.lr = 0x82A277A8;
	sub_82A03378(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r29
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r29.s32, ctx.xer);
	// blt cr6,0x82a2777c
	if (ctx.cr6.lt) goto loc_82A2777C;
loc_82A277B4:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A277BC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a277ec
	if (ctx.cr6.eq) goto loc_82A277EC;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4408
	ctx.r11.s64 = ctx.r11.s64 + -4408;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A277D8;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A277E4;
	sub_82A02300(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82A277EC:
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A277F4;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A27800;
	sub_82A02300(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82A27808:
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r28.u32);
	// stw r28,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r28.u32);
	// bl 0x82312730
	ctx.lr = 0x82A27820;
	sub_82312730(ctx, base);
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2797c
	if (ctx.cr6.eq) goto loc_82A2797C;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r28,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r28.u32);
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r28.u32);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// li r4,1
	ctx.r4.s64 = 1;
	// stb r11,100(r1)
	PPC_STORE_U8(ctx.r1.u32 + 100, ctx.r11.u8);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27854;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27868;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// ble cr6,0x82a2797c
	if (!ctx.cr6.gt) goto loc_82A2797C;
loc_82A27874:
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2788C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82a03378
	ctx.lr = 0x82A278A0;
	sub_82A03378(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x823099b0
	ctx.lr = 0x82A278AC;
	sub_823099B0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x823fc440
	ctx.lr = 0x82A278B8;
	sub_823FC440(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a278c8
	if (ctx.cr6.eq) goto loc_82A278C8;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x82309dd8
	ctx.lr = 0x82A278C8;
	sub_82309DD8(ctx, base);
loc_82A278C8:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x82A278D0;
	sub_82309A60(ctx, base);
	// bl 0x82a186e0
	ctx.lr = 0x82A278D4;
	sub_82A186E0(ctx, base);
	// lbz r11,1088(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a27970
	if (ctx.cr6.eq) goto loc_82A27970;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,24(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A278F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A278FC;
	sub_82A186E0(ctx, base);
	// addi r11,r3,1048
	ctx.r11.s64 = ctx.r3.s64 + 1048;
loc_82A27900:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 0);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// subf r9,r9,r10
	ctx.r9.s64 = ctx.r10.s64 - ctx.r9.s64;
	// beq cr6,0x82a27924
	if (ctx.cr6.eq) goto loc_82A27924;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x82a27900
	if (ctx.cr6.eq) goto loc_82A27900;
loc_82A27924:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x82a27970
	if (!ctx.cr6.eq) goto loc_82A27970;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27940;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A27948;
	sub_82A186E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r31,1144(r11)
	PPC_STORE_U32(ctx.r11.u32 + 1144, ctx.r31.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27964;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A2796C;
	sub_82A186E0(ctx, base);
	// stw r31,1140(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1140, ctx.r31.u32);
loc_82A27970:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmpw cr6,r28,r27
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r27.s32, ctx.xer);
	// blt cr6,0x82a27874
	if (ctx.cr6.lt) goto loc_82A27874;
loc_82A2797C:
	// bl 0x82a186e0
	ctx.lr = 0x82A27980;
	sub_82A186E0(ctx, base);
	// lwz r3,2784(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2784);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27998
	if (ctx.cr6.eq) goto loc_82A27998;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82a36290
	ctx.lr = 0x82A27998;
	sub_82A36290(ctx, base);
loc_82A27998:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x825a2b78
	ctx.lr = 0x82A279A0;
	sub_825A2B78(ctx, base);
	// addi r1,r1,448
	ctx.r1.s64 = ctx.r1.s64 + 448;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A279A8"))) PPC_WEAK_FUNC(sub_82A279A8);
PPC_FUNC_IMPL(__imp__sub_82A279A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A279B0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,128
	ctx.r5.s64 = 128;
	// li r4,128
	ctx.r4.s64 = 128;
	// li r3,6
	ctx.r3.s64 = 6;
	// bl 0x82214060
	ctx.lr = 0x82A279C4;
	sub_82214060(ctx, base);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27a04
	if (!ctx.cr6.eq) goto loc_82A27A04;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A279E4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a279f4
	if (ctx.cr6.eq) goto loc_82A279F4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A279F0;
	sub_82A13FE0(ctx, base);
	// b 0x82a279f8
	goto loc_82A279F8;
loc_82A279F4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A279F8:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r28)
	PPC_STORE_U8(ctx.r28.u32 + 12328, ctx.r11.u8);
loc_82A27A04:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r10,4012(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4012);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,4036
	ctx.r4.s64 = ctx.r11.s64 + 4036;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// xori r5,r10,1
	ctx.r5.u64 = ctx.r10.u64 ^ 1;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27A30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,4024
	ctx.r4.s64 = ctx.r11.s64 + 4024;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r5,5624(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5624);
	// lwz r11,52(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27A54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A27A58;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27A68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27A78;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r29,0(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27A8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r11,-28368
	ctx.r4.s64 = ctx.r11.s64 + -28368;
	// lwz r11,60(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 60);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27AA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27adc
	if (!ctx.cr6.eq) goto loc_82A27ADC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27ABC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27acc
	if (ctx.cr6.eq) goto loc_82A27ACC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27AC8;
	sub_82A13FE0(ctx, base);
	// b 0x82a27ad0
	goto loc_82A27AD0;
loc_82A27ACC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27AD0:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r28)
	PPC_STORE_U8(ctx.r28.u32 + 12328, ctx.r11.u8);
loc_82A27ADC:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r5,1072(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1072);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,4004
	ctx.r4.s64 = ctx.r11.s64 + 4004;
	// lwz r11,52(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27AFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,12324(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a27b34
	if (!ctx.cr6.eq) goto loc_82A27B34;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27B10;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27b24
	if (ctx.cr6.eq) goto loc_82A27B24;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27B1C;
	sub_82A13FE0(ctx, base);
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// b 0x82a27b2c
	goto loc_82A27B2C;
loc_82A27B24:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r11.u32);
loc_82A27B2C:
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r28)
	PPC_STORE_U8(ctx.r28.u32 + 12328, ctx.r11.u8);
loc_82A27B34:
	// lis r30,-31968
	ctx.r30.s64 = -2095054848;
	// lwz r10,23584(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 23584);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a27b6c
	if (!ctx.cr6.eq) goto loc_82A27B6C;
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x82545e80
	ctx.lr = 0x82A27B4C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27b5c
	if (ctx.cr6.eq) goto loc_82A27B5C;
	// bl 0x82a18680
	ctx.lr = 0x82A27B58;
	sub_82A18680(ctx, base);
	// b 0x82a27b60
	goto loc_82A27B60;
loc_82A27B5C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27B60:
	// stw r3,23584(r30)
	PPC_STORE_U32(ctx.r30.u32 + 23584, ctx.r3.u32);
	// bl 0x82a13e88
	ctx.lr = 0x82A27B68;
	sub_82A13E88(ctx, base);
	// lwz r10,23584(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 23584);
loc_82A27B6C:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,4000
	ctx.r4.s64 = ctx.r11.s64 + 4000;
	// lwz r11,52(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27B8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,-13884(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -13884);
	// lwz r10,52(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// cntlzw r9,r11
	ctx.r9.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,3992
	ctx.r4.s64 = ctx.r11.s64 + 3992;
	// rlwinm r11,r9,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// addi r5,r11,1
	ctx.r5.s64 = ctx.r11.s64 + 1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A27BBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27BC8"))) PPC_WEAK_FUNC(sub_82A27BC8);
PPC_FUNC_IMPL(__imp__sub_82A27BC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A27BD0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27BE4;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27BF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27C0C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27c3c
	if (!ctx.cr6.eq) goto loc_82A27C3C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A27C24;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27c34
	if (ctx.cr6.eq) goto loc_82A27C34;
	// bl 0x82a08db0
	ctx.lr = 0x82A27C30;
	sub_82A08DB0(ctx, base);
	// b 0x82a27c38
	goto loc_82A27C38;
loc_82A27C34:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27C38:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A27C3C:
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a27cb4
	if (ctx.cr6.eq) goto loc_82A27CB4;
	// bl 0x82a186e0
	ctx.lr = 0x82A27C4C;
	sub_82A186E0(ctx, base);
	// lbz r11,1696(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a27cb4
	if (!ctx.cr6.eq) goto loc_82A27CB4;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A27C60;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27c98
	if (ctx.cr6.eq) goto loc_82A27C98;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r30.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r29,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r29.u32);
	// addi r11,r11,-4312
	ctx.r11.s64 = ctx.r11.s64 + -4312;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A27C84;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A27C90;
	sub_82A02300(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A27C98:
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82a186e0
	ctx.lr = 0x82A27CA0;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A27CAC;
	sub_82A02300(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A27CB4:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r11,12324(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a27cf4
	if (!ctx.cr6.eq) goto loc_82A27CF4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27CCC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27ce0
	if (ctx.cr6.eq) goto loc_82A27CE0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27CD8;
	sub_82A13FE0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// b 0x82a27ce4
	goto loc_82A27CE4;
loc_82A27CE0:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82A27CE4:
	// lis r9,-31969
	ctx.r9.s64 = -2095120384;
	// stw r11,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r11.u32);
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,12328(r9)
	PPC_STORE_U8(ctx.r9.u32 + 12328, ctx.r10.u8);
loc_82A27CF4:
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stb r10,1696(r11)
	PPC_STORE_U8(ctx.r11.u32 + 1696, ctx.r10.u8);
	// bl 0x82a279a8
	ctx.lr = 0x82A27D04;
	sub_82A279A8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27D0C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27D1C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27D3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27D48"))) PPC_WEAK_FUNC(sub_82A27D48);
PPC_FUNC_IMPL(__imp__sub_82A27D48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// bl 0x82a279a8
	ctx.lr = 0x82A27D64;
	sub_82A279A8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27D6C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27D7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27D98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27DB0"))) PPC_WEAK_FUNC(sub_82A27DB0);
PPC_FUNC_IMPL(__imp__sub_82A27DB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// bl 0x82a279a8
	ctx.lr = 0x82A27DCC;
	sub_82A279A8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27DD4;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27DE4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27E00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27E18"))) PPC_WEAK_FUNC(sub_82A27E18);
PPC_FUNC_IMPL(__imp__sub_82A27E18) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// bl 0x82a279a8
	ctx.lr = 0x82A27E34;
	sub_82A279A8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A27E3C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27E4C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27E68;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27E80"))) PPC_WEAK_FUNC(sub_82A27E80);
PPC_FUNC_IMPL(__imp__sub_82A27E80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A27E88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A27E9C;
	__imp__RtlEnterCriticalSection(ctx, base);
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// stb r30,17(r31)
	PPC_STORE_U8(ctx.r31.u32 + 17, ctx.r30.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A27EB0;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,24
	ctx.r3.s64 = ctx.r31.s64 + 24;
	// bl 0x82e29500
	ctx.lr = 0x82A27EC0;
	sub_82E29500(ctx, base);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27ef4
	if (ctx.cr6.eq) goto loc_82A27EF4;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A27EDC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a27d48
	ctx.lr = 0x82A27EE8;
	sub_82A27D48(ctx, base);
	// stw r30,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A27EF4:
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// addi r29,r31,8
	ctx.r29.s64 = ctx.r31.s64 + 8;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82a27f14
	if (ctx.cr6.eq) goto loc_82A27F14;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a27e18
	ctx.lr = 0x82A27F10;
	sub_82A27E18(ctx, base);
	// std r30,0(r29)
	PPC_STORE_U64(ctx.r29.u32 + 0, ctx.r30.u64);
loc_82A27F14:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A27F20"))) PPC_WEAK_FUNC(sub_82A27F20);
PPC_FUNC_IMPL(__imp__sub_82A27F20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27f74
	if (!ctx.cr6.eq) goto loc_82A27F74;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27F50;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27f60
	if (ctx.cr6.eq) goto loc_82A27F60;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27F5C;
	sub_82A13FE0(ctx, base);
	// b 0x82a27f64
	goto loc_82A27F64;
loc_82A27F60:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27F64:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27F74:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a24670
	ctx.lr = 0x82A27F7C;
	sub_82A24670(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A27F98"))) PPC_WEAK_FUNC(sub_82A27F98);
PPC_FUNC_IMPL(__imp__sub_82A27F98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a27fec
	if (!ctx.cr6.eq) goto loc_82A27FEC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A27FC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a27fd8
	if (ctx.cr6.eq) goto loc_82A27FD8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A27FD4;
	sub_82A13FE0(ctx, base);
	// b 0x82a27fdc
	goto loc_82A27FDC;
loc_82A27FD8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A27FDC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A27FEC:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a24b10
	ctx.lr = 0x82A27FF4;
	sub_82A24B10(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A28010"))) PPC_WEAK_FUNC(sub_82A28010);
PPC_FUNC_IMPL(__imp__sub_82A28010) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2805c
	if (!ctx.cr6.eq) goto loc_82A2805C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A28038;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28048
	if (ctx.cr6.eq) goto loc_82A28048;
	// bl 0x82a13fe0
	ctx.lr = 0x82A28044;
	sub_82A13FE0(ctx, base);
	// b 0x82a2804c
	goto loc_82A2804C;
loc_82A28048:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2804C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2805C:
	// bl 0x82a25a60
	ctx.lr = 0x82A28060;
	sub_82A25A60(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A28078"))) PPC_WEAK_FUNC(sub_82A28078);
PPC_FUNC_IMPL(__imp__sub_82A28078) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a280c4
	if (!ctx.cr6.eq) goto loc_82A280C4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A280A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a280b0
	if (ctx.cr6.eq) goto loc_82A280B0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A280AC;
	sub_82A13FE0(ctx, base);
	// b 0x82a280b4
	goto loc_82A280B4;
loc_82A280B0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A280B4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A280C4:
	// bl 0x82a25be0
	ctx.lr = 0x82A280C8;
	sub_82A25BE0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A280E0"))) PPC_WEAK_FUNC(sub_82A280E0);
PPC_FUNC_IMPL(__imp__sub_82A280E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A280E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r3,36
	ctx.r11.s64 = ctx.r3.s64 + 36;
	// stw r3,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r3.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r31,0
	ctx.r31.s64 = 0;
	// rotlwi r9,r10,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// li r29,1
	ctx.r29.s64 = 1;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r11.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r11.u32);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r11.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r11.u32);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r30,180(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r11.u32);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// stw r11,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r11.u32);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, ctx.r11.u32);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stw r11,32(r3)
	PPC_STORE_U32(ctx.r3.u32 + 32, ctx.r11.u32);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r9,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r9.u32);
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// lwz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r9,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r9.u32);
	// lwz r9,120(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stw r9,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r9.u32);
	// stw r10,16(r11)
	PPC_STORE_U32(ctx.r11.u32 + 16, ctx.r10.u32);
	// stw r10,20(r11)
	PPC_STORE_U32(ctx.r11.u32 + 20, ctx.r10.u32);
	// stw r31,24(r11)
	PPC_STORE_U32(ctx.r11.u32 + 24, ctx.r31.u32);
	// stw r29,28(r11)
	PPC_STORE_U32(ctx.r11.u32 + 28, ctx.r29.u32);
	// stw r31,32(r11)
	PPC_STORE_U32(ctx.r11.u32 + 32, ctx.r31.u32);
	// stw r10,36(r11)
	PPC_STORE_U32(ctx.r11.u32 + 36, ctx.r10.u32);
	// stw r31,40(r11)
	PPC_STORE_U32(ctx.r11.u32 + 40, ctx.r31.u32);
	// stw r31,44(r11)
	PPC_STORE_U32(ctx.r11.u32 + 44, ctx.r31.u32);
	// stw r31,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r31.u32);
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// stw r10,56(r11)
	PPC_STORE_U32(ctx.r11.u32 + 56, ctx.r10.u32);
	// stw r31,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r31.u32);
	// stw r29,64(r11)
	PPC_STORE_U32(ctx.r11.u32 + 64, ctx.r29.u32);
	// stw r31,68(r11)
	PPC_STORE_U32(ctx.r11.u32 + 68, ctx.r31.u32);
	// stw r10,72(r11)
	PPC_STORE_U32(ctx.r11.u32 + 72, ctx.r10.u32);
	// stw r31,76(r11)
	PPC_STORE_U32(ctx.r11.u32 + 76, ctx.r31.u32);
	// stw r31,80(r11)
	PPC_STORE_U32(ctx.r11.u32 + 80, ctx.r31.u32);
	// stw r31,84(r11)
	PPC_STORE_U32(ctx.r11.u32 + 84, ctx.r31.u32);
	// stw r10,88(r11)
	PPC_STORE_U32(ctx.r11.u32 + 88, ctx.r10.u32);
	// stw r10,92(r11)
	PPC_STORE_U32(ctx.r11.u32 + 92, ctx.r10.u32);
	// stw r31,96(r11)
	PPC_STORE_U32(ctx.r11.u32 + 96, ctx.r31.u32);
	// stw r29,100(r11)
	PPC_STORE_U32(ctx.r11.u32 + 100, ctx.r29.u32);
	// stw r31,104(r11)
	PPC_STORE_U32(ctx.r11.u32 + 104, ctx.r31.u32);
	// stw r31,144(r30)
	PPC_STORE_U32(ctx.r30.u32 + 144, ctx.r31.u32);
	// stw r31,148(r30)
	PPC_STORE_U32(ctx.r30.u32 + 148, ctx.r31.u32);
	// bl 0x82b061d8
	ctx.lr = 0x82A281F8;
	sub_82B061D8(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f12,f0
	ctx.f12.f64 = double(ctx.f0.s64);
	// addi r10,r30,152
	ctx.r10.s64 = ctx.r30.s64 + 152;
	// lfs f0,-5132(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -5132);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lfd f13,24768(r11)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// stw r31,160(r30)
	PPC_STORE_U32(ctx.r30.u32 + 160, ctx.r31.u32);
	// fmul f13,f12,f13
	ctx.f13.f64 = ctx.f12.f64 * ctx.f13.f64;
	// stfd f13,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.f13.u64);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// stfs f0,168(r30)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r30.u32 + 168, temp.u32);
	// stw r31,172(r30)
	PPC_STORE_U32(ctx.r30.u32 + 172, ctx.r31.u32);
	// stw r29,176(r30)
	PPC_STORE_U32(ctx.r30.u32 + 176, ctx.r29.u32);
	// lwz r9,124(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// lis r11,-31970
	ctx.r11.s64 = -2095185920;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r3,19928(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19928);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28254;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r11,r30,180
	ctx.r11.s64 = ctx.r30.s64 + 180;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// stw r3,164(r30)
	PPC_STORE_U32(ctx.r30.u32 + 164, ctx.r3.u32);
	// li r10,150
	ctx.r10.s64 = 150;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
loc_82A28268:
	// stw r9,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// bdnz 0x82a28268
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A28268;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r31,780(r30)
	PPC_STORE_U32(ctx.r30.u32 + 780, ctx.r31.u32);
	// stw r31,784(r30)
	PPC_STORE_U32(ctx.r30.u32 + 784, ctx.r31.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A28288"))) PPC_WEAK_FUNC(sub_82A28288);
PPC_FUNC_IMPL(__imp__sub_82A28288) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e30
	ctx.lr = 0x82A28290;
	__savegprlr_14(ctx, base);
	// stfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -160, ctx.f31.u64);
	// ld r12,-4096(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// ld r12,-8192(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8192);
	// stwu r1,-10784(r1)
	ea = -10784 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// lwz r20,4(r21)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r21.u32 + 4);
	// lwz r11,172(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 172);
	// cmpw cr6,r20,r11
	ctx.cr6.compare<int32_t>(ctx.r20.s32, ctx.r11.s32, ctx.xer);
	// stw r20,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r20.u32);
	// ble cr6,0x82a282c0
	if (!ctx.cr6.gt) goto loc_82A282C0;
	// mr r20,r11
	ctx.r20.u64 = ctx.r11.u64;
	// stw r20,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r20.u32);
loc_82A282C0:
	// lis r23,-31973
	ctx.r23.s64 = -2095382528;
	// lwz r11,28(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// li r22,0
	ctx.r22.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r23.u32);
	// bne cr6,0x82a283e0
	if (!ctx.cr6.eq) goto loc_82A283E0;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// ble cr6,0x82a283e0
	if (!ctx.cr6.gt) goto loc_82A283E0;
	// addi r31,r21,24
	ctx.r31.s64 = ctx.r21.s64 + 24;
	// mr r25,r22
	ctx.r25.u64 = ctx.r22.u64;
	// mr r24,r20
	ctx.r24.u64 = ctx.r20.u64;
loc_82A282EC:
	// lwz r11,28(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// mr r9,r22
	ctx.r9.u64 = ctx.r22.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a2832c
	if (!ctx.cr6.gt) goto loc_82A2832C;
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// add r10,r25,r10
	ctx.r10.u64 = ctx.r25.u64 + ctx.r10.u64;
	// lwz r10,592(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 592);
loc_82A2830C:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpw cr6,r8,r10
	ctx.cr6.compare<int32_t>(ctx.r8.s32, ctx.r10.s32, ctx.xer);
	// beq cr6,0x82a283d0
	if (ctx.cr6.eq) goto loc_82A283D0;
	// lwz r8,28(r21)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// cmpw cr6,r9,r8
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, ctx.xer);
	// blt cr6,0x82a2830c
	if (ctx.cr6.lt) goto loc_82A2830C;
loc_82A2832C:
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// lwz r29,4(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// add r11,r25,r11
	ctx.r11.u64 = ctx.r25.u64 + ctx.r11.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lwz r26,592(r11)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r11.u32 + 592);
	// addi r11,r29,1
	ctx.r11.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// ble cr6,0x82a283b8
	if (!ctx.cr6.gt) goto loc_82A283B8;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82416640
	ctx.lr = 0x82A2835C;
	sub_82416640(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r28,0(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// bne cr6,0x82a2837c
	if (!ctx.cr6.eq) goto loc_82A2837C;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a283b8
	if (ctx.cr6.eq) goto loc_82A283B8;
loc_82A2837C:
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
	// rlwinm r30,r11,2,0,29
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a28394
	if (!ctx.cr6.eq) goto loc_82A28394;
	// bl 0x82545cc0
	ctx.lr = 0x82A28390;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
loc_82A28394:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A283B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
loc_82A283B8:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r11,r29,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r29.u32 | (ctx.r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a283d0
	if (ctx.cr6.eq) goto loc_82A283D0;
	// stw r26,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r26.u32);
loc_82A283D0:
	// addi r24,r24,-1
	ctx.r24.s64 = ctx.r24.s64 + -1;
	// addi r25,r25,596
	ctx.r25.s64 = ctx.r25.s64 + 596;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// bne cr6,0x82a282ec
	if (!ctx.cr6.eq) goto loc_82A282EC;
loc_82A283E0:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r29,12324(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// bne cr6,0x82a28428
	if (!ctx.cr6.eq) goto loc_82A28428;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A283FC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28410
	if (ctx.cr6.eq) goto loc_82A28410;
	// bl 0x82a13fe0
	ctx.lr = 0x82A28408;
	sub_82A13FE0(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// b 0x82a28414
	goto loc_82A28414;
loc_82A28410:
	// mr r29,r22
	ctx.r29.u64 = ctx.r22.u64;
loc_82A28414:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r29,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r29.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r29,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r29.u32);
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A28428:
	// lwz r11,160(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 160);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2852c
	if (!ctx.cr6.eq) goto loc_82A2852C;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// ble cr6,0x82a28cb8
	if (!ctx.cr6.gt) goto loc_82A28CB8;
	// addi r3,r1,3472
	ctx.r3.s64 = ctx.r1.s64 + 3472;
	// li r31,11
	ctx.r31.s64 = 11;
loc_82A28444:
	// bl 0x82a0bcd0
	ctx.lr = 0x82A28448;
	sub_82A0BCD0(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r3,r3,596
	ctx.r3.s64 = ctx.r3.s64 + 596;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bge cr6,0x82a28444
	if (!ctx.cr6.lt) goto loc_82A28444;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// ble cr6,0x82a2848c
	if (!ctx.cr6.gt) goto loc_82A2848C;
	// mr r31,r22
	ctx.r31.u64 = ctx.r22.u64;
	// mr r30,r20
	ctx.r30.u64 = ctx.r20.u64;
loc_82A28468:
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// addi r11,r1,3472
	ctx.r11.s64 = ctx.r1.s64 + 3472;
	// add r4,r31,r10
	ctx.r4.u64 = ctx.r31.u64 + ctx.r10.u64;
	// add r3,r31,r11
	ctx.r3.u64 = ctx.r31.u64 + ctx.r11.u64;
	// bl 0x82a13cb0
	ctx.lr = 0x82A2847C;
	sub_82A13CB0(ctx, base);
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,596
	ctx.r31.s64 = ctx.r31.s64 + 596;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82a28468
	if (!ctx.cr6.eq) goto loc_82A28468;
loc_82A2848C:
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
	// addi r4,r1,3472
	ctx.r4.s64 = ctx.r1.s64 + 3472;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a09ba0
	ctx.lr = 0x82A2849C;
	sub_82A09BA0(ctx, base);
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82a35740
	ctx.lr = 0x82A284AC;
	sub_82A35740(ctx, base);
	// li r29,11
	ctx.r29.s64 = 11;
	// addi r31,r1,10656
	ctx.r31.s64 = ctx.r1.s64 + 10656;
loc_82A284B4:
	// addi r31,r31,-596
	ctx.r31.s64 = ctx.r31.s64 + -596;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x82416660
	ctx.lr = 0x82A284D4;
	sub_82416660(ctx, base);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a28508
	if (ctx.cr6.eq) goto loc_82A28508;
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a284f4
	if (!ctx.cr6.eq) goto loc_82A284F4;
	// bl 0x82545cc0
	ctx.lr = 0x82A284F0;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
loc_82A284F4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28508;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A28508:
	// addi r29,r29,-1
	ctx.r29.s64 = ctx.r29.s64 + -1;
	// stw r22,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r22.u32);
	// stw r22,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r22.u32);
	// stw r22,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r22.u32);
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bge cr6,0x82a284b4
	if (!ctx.cr6.lt) goto loc_82A284B4;
	// addi r1,r1,10784
	ctx.r1.s64 = ctx.r1.s64 + 10784;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
loc_82A2852C:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82a185d0
	ctx.lr = 0x82A28534;
	sub_82A185D0(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82b061d8
	ctx.lr = 0x82A2853C;
	sub_82B061D8(ctx, base);
	// lwz r11,152(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 152);
	// lwz r10,156(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 156);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfs f12,168(r21)
	temp.u32 = PPC_LOAD_U32(ctx.r21.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f31,f13,f0
	ctx.f31.f64 = ctx.f13.f64 * ctx.f0.f64;
	// lfd f0,104(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fsub f0,f31,f0
	ctx.f0.f64 = ctx.f31.f64 - ctx.f0.f64;
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// fcmpu cr6,f0,f12
	ctx.cr6.compare(ctx.f0.f64, ctx.f12.f64);
	// blt cr6,0x82a28cb8
	if (ctx.cr6.lt) goto loc_82A28CB8;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82a24458
	ctx.lr = 0x82A28580;
	sub_82A24458(ctx, base);
	// mr r11,r22
	ctx.r11.u64 = ctx.r22.u64;
	// addi r18,r21,36
	ctx.r18.s64 = ctx.r21.s64 + 36;
	// lis r15,-31976
	ctx.r15.s64 = -2095579136;
	// li r14,6
	ctx.r14.s64 = 6;
	// li r27,1199
	ctx.r27.s64 = 1199;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
loc_82A28598:
	// lwz r17,0(r18)
	ctx.r17.u64 = PPC_LOAD_U32(ctx.r18.u32 + 0);
	// mr r16,r22
	ctx.r16.u64 = ctx.r22.u64;
	// cmpwi cr6,r17,-1
	ctx.cr6.compare<int32_t>(ctx.r17.s32, -1, ctx.xer);
	// beq cr6,0x82a28bc4
	if (ctx.cr6.eq) goto loc_82A28BC4;
	// lwz r10,24(r18)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r18.u32 + 24);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x82a28bc4
	if (!ctx.cr6.eq) goto loc_82A28BC4;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239200
	ctx.lr = 0x82A285C0;
	sub_82239200(ctx, base);
	// li r4,85
	ctx.r4.s64 = 85;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239280
	ctx.lr = 0x82A285CC;
	sub_82239280(ctx, base);
	// lwz r19,172(r21)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r21.u32 + 172);
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r22.u32);
	// li r30,7
	ctx.r30.s64 = 7;
	// stw r22,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r22.u32);
	// mr r26,r22
	ctx.r26.u64 = ctx.r22.u64;
	// stw r22,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r22.u32);
	// mr r28,r22
	ctx.r28.u64 = ctx.r22.u64;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// ble cr6,0x82a28670
	if (!ctx.cr6.gt) goto loc_82A28670;
	// mr r29,r22
	ctx.r29.u64 = ctx.r22.u64;
loc_82A285F4:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpw cr6,r11,r19
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r19.s32, ctx.xer);
	// bge cr6,0x82a28670
	if (!ctx.cr6.lt) goto loc_82A28670;
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// add r31,r29,r11
	ctx.r31.u64 = ctx.r29.u64 + ctx.r11.u64;
	// lwz r9,36(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// lwz r11,244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 244);
	// lwz r10,312(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 312);
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// add r30,r11,r30
	ctx.r30.u64 = ctx.r11.u64 + ctx.r30.u64;
	// cmpwi cr6,r30,1198
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1198, ctx.xer);
	// bge cr6,0x82a2866c
	if (!ctx.cr6.lt) goto loc_82A2866C;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,596
	ctx.r3.s64 = 596;
	// bl 0x82a337c0
	ctx.lr = 0x82A28644;
	sub_82A337C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28654
	if (ctx.cr6.eq) goto loc_82A28654;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A28654;
	sub_82A18048(ctx, base);
loc_82A28654:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r29,r29,596
	ctx.r29.s64 = ctx.r29.s64 + 596;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a285f4
	if (ctx.cr6.lt) goto loc_82A285F4;
	// b 0x82a28670
	goto loc_82A28670;
loc_82A2866C:
	// li r26,1
	ctx.r26.s64 = 1;
loc_82A28670:
	// lwz r11,32(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2867C;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,32(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 32);
	// lwz r20,16(r18)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r18.u32 + 16);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// lwz r22,20(r18)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r18.u32 + 20);
	// bl 0x83157d24
	ctx.lr = 0x82A28690;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// bne cr6,0x82a2886c
	if (!ctx.cr6.eq) goto loc_82A2886C;
	// cmpw cr6,r5,r19
	ctx.cr6.compare<int32_t>(ctx.r5.s32, ctx.r19.s32, ctx.xer);
	// bge cr6,0x82a2886c
	if (!ctx.cr6.lt) goto loc_82A2886C;
	// lwz r11,16(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 16);
	// lwz r26,28(r21)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// addi r29,r11,-1
	ctx.r29.s64 = ctx.r11.s64 + -1;
	// mr r23,r29
	ctx.r23.u64 = ctx.r29.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// blt cr6,0x82a28744
	if (ctx.cr6.lt) goto loc_82A28744;
	// mulli r28,r29,596
	ctx.r28.s64 = ctx.r29.s64 * 596;
loc_82A286C0:
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// ble cr6,0x82a28740
	if (!ctx.cr6.gt) goto loc_82A28740;
	// lwz r11,12(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12);
	// mr r23,r29
	ctx.r23.u64 = ctx.r29.u64;
	// add r31,r11,r28
	ctx.r31.u64 = ctx.r11.u64 + ctx.r28.u64;
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// cmpw cr6,r11,r22
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r22.s32, ctx.xer);
	// ble cr6,0x82a28730
	if (!ctx.cr6.gt) goto loc_82A28730;
	// lwz r9,36(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// lwz r11,244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 244);
	// lwz r10,312(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 312);
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// add r30,r11,r30
	ctx.r30.u64 = ctx.r11.u64 + ctx.r30.u64;
	// cmpwi cr6,r30,1198
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1198, ctx.xer);
	// bge cr6,0x82a2872c
	if (!ctx.cr6.lt) goto loc_82A2872C;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,596
	ctx.r3.s64 = 596;
	// bl 0x82a337c0
	ctx.lr = 0x82A2871C;
	sub_82A337C0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2872c
	if (ctx.cr6.eq) goto loc_82A2872C;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A2872C;
	sub_82A18048(ctx, base);
loc_82A2872C:
	// addi r26,r26,-1
	ctx.r26.s64 = ctx.r26.s64 + -1;
loc_82A28730:
	// addi r29,r29,-1
	ctx.r29.s64 = ctx.r29.s64 + -1;
	// addi r28,r28,-596
	ctx.r28.s64 = ctx.r28.s64 + -596;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bge cr6,0x82a286c0
	if (!ctx.cr6.lt) goto loc_82A286C0;
loc_82A28740:
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82A28744:
	// li r24,0
	ctx.r24.s64 = 0;
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// ble cr6,0x82a2886c
	if (!ctx.cr6.gt) goto loc_82A2886C;
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r25,0
	ctx.r25.s64 = 0;
loc_82A28758:
	// cmpw cr6,r5,r19
	ctx.cr6.compare<int32_t>(ctx.r5.s32, ctx.r19.s32, ctx.xer);
	// bge cr6,0x82a2886c
	if (!ctx.cr6.lt) goto loc_82A2886C;
	// lwz r11,12(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12);
	// add r31,r11,r25
	ctx.r31.u64 = ctx.r11.u64 + ctx.r25.u64;
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// cmpw cr6,r11,r22
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r22.s32, ctx.xer);
	// ble cr6,0x82a2885c
	if (!ctx.cr6.gt) goto loc_82A2885C;
	// lwz r9,36(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// lwz r11,244(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 244);
	// lwz r10,312(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 312);
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r9
	ctx.r11.u64 = ctx.r11.u64 + ctx.r9.u64;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// add r30,r11,r30
	ctx.r30.u64 = ctx.r11.u64 + ctx.r30.u64;
	// cmpwi cr6,r30,1198
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1198, ctx.xer);
	// bge cr6,0x82a2886c
	if (!ctx.cr6.lt) goto loc_82A2886C;
	// mr r26,r5
	ctx.r26.u64 = ctx.r5.u64;
	// addi r5,r5,1
	ctx.r5.s64 = ctx.r5.s64 + 1;
	// cmpw cr6,r5,r8
	ctx.cr6.compare<int32_t>(ctx.r5.s32, ctx.r8.s32, ctx.xer);
	// stw r5,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r5.u32);
	// ble cr6,0x82a28838
	if (!ctx.cr6.gt) goto loc_82A28838;
	// li r4,596
	ctx.r4.s64 = 596;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82416640
	ctx.lr = 0x82A287C4;
	sub_82416640(ctx, base);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r28,80(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r8,r3,r5
	ctx.r8.u64 = ctx.r3.u64 + ctx.r5.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// bne cr6,0x82a287e4
	if (!ctx.cr6.eq) goto loc_82A287E4;
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// beq cr6,0x82a2883c
	if (ctx.cr6.eq) goto loc_82A2883C;
loc_82A287E4:
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mulli r29,r8,596
	ctx.r29.s64 = ctx.r8.s64 * 596;
	// lwz r3,8344(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a28804
	if (!ctx.cr6.eq) goto loc_82A28804;
	// bl 0x82545cc0
	ctx.lr = 0x82A287FC;
	sub_82545CC0(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r3,8344(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8344);
loc_82A28804:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28824;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// b 0x82a2883c
	goto loc_82A2883C;
loc_82A28838:
	// lwz r28,80(r1)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_82A2883C:
	// mulli r11,r26,596
	ctx.r11.s64 = ctx.r26.s64 * 596;
	// add r3,r11,r28
	ctx.r3.u64 = ctx.r11.u64 + ctx.r28.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2885c
	if (ctx.cr6.eq) goto loc_82A2885C;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A28854;
	sub_82A18048(ctx, base);
	// lwz r8,88(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_82A2885C:
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
	// addi r25,r25,596
	ctx.r25.s64 = ctx.r25.s64 + 596;
	// cmpw cr6,r24,r23
	ctx.cr6.compare<int32_t>(ctx.r24.s32, ctx.r23.s32, ctx.xer);
	// blt cr6,0x82a28758
	if (ctx.cr6.lt) goto loc_82A28758;
loc_82A2886C:
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// ble cr6,0x82a28884
	if (!ctx.cr6.gt) goto loc_82A28884;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r29,44(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// b 0x82a28888
	goto loc_82A28888;
loc_82A28884:
	// li r29,-1
	ctx.r29.s64 = -1;
loc_82A28888:
	// lwz r11,148(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 148);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// ble cr6,0x82a288e8
	if (!ctx.cr6.gt) goto loc_82A288E8;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x82a288e8
	if (ctx.cr6.eq) goto loc_82A288E8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lfs f13,168(r21)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r21.u32 + 168);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,-5132(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -5132);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bne cr6,0x82a288e8
	if (!ctx.cr6.eq) goto loc_82A288E8;
	// lwz r11,784(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 784);
	// cmpwi cr6,r11,1000
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1000, ctx.xer);
	// ble cr6,0x82a288e8
	if (!ctx.cr6.gt) goto loc_82A288E8;
	// li r22,0
	ctx.r22.s64 = 0;
	// stw r14,172(r21)
	PPC_STORE_U32(ctx.r21.u32 + 172, ctx.r14.u32);
	// li r4,-2
	ctx.r4.s64 = -2;
	// lfs f0,26344(r15)
	temp.u32 = PPC_LOAD_U32(ctx.r15.u32 + 26344);
	ctx.f0.f64 = double(temp.f32);
	// mr r20,r22
	ctx.r20.u64 = ctx.r22.u64;
	// stfs f0,168(r21)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r21.u32 + 168, temp.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// li r16,1
	ctx.r16.s64 = 1;
	// stw r20,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r20.u32);
	// bl 0x82239330
	ctx.lr = 0x82A288E4;
	sub_82239330(ctx, base);
	// b 0x82a289c8
	goto loc_82A289C8;
loc_82A288E8:
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// bne cr6,0x82a28964
	if (!ctx.cr6.eq) goto loc_82A28964;
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// blt cr6,0x82a28b54
	if (ctx.cr6.lt) goto loc_82A28B54;
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239330
	ctx.lr = 0x82A28904;
	sub_82239330(ctx, base);
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239330
	ctx.lr = 0x82A28910;
	sub_82239330(ctx, base);
	// lwz r11,28(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// extsb r4,r11
	ctx.r4.s64 = ctx.r11.s8;
	// bl 0x82239280
	ctx.lr = 0x82A28920;
	sub_82239280(ctx, base);
	// lwz r11,28(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// li r22,0
	ctx.r22.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r31,r22
	ctx.r31.u64 = ctx.r22.u64;
	// ble cr6,0x82a289c4
	if (!ctx.cr6.gt) goto loc_82A289C4;
	// mr r30,r22
	ctx.r30.u64 = ctx.r22.u64;
loc_82A28938:
	// lwz r11,24(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 24);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lwzx r11,r30,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r11.u32);
	// extsb r4,r11
	ctx.r4.s64 = ctx.r11.s8;
	// bl 0x82239280
	ctx.lr = 0x82A2894C;
	sub_82239280(ctx, base);
	// lwz r11,28(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 28);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a28938
	if (ctx.cr6.lt) goto loc_82A28938;
	// b 0x82a289c4
	goto loc_82A289C4;
loc_82A28964:
	// ble cr6,0x82a28b54
	if (!ctx.cr6.gt) goto loc_82A28B54;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239330
	ctx.lr = 0x82A28974;
	sub_82239330(ctx, base);
	// subf r11,r20,r29
	ctx.r11.s64 = ctx.r29.s64 - ctx.r20.s64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// extsb r4,r11
	ctx.r4.s64 = ctx.r11.s8;
	// bl 0x82239280
	ctx.lr = 0x82A28984;
	sub_82239280(ctx, base);
	// extsb r4,r31
	ctx.r4.s64 = ctx.r31.s8;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82239280
	ctx.lr = 0x82A28990;
	sub_82239280(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// li r22,0
	ctx.r22.s64 = 0;
	// ble cr6,0x82a28b4c
	if (!ctx.cr6.gt) goto loc_82A28B4C;
	// mr r30,r22
	ctx.r30.u64 = ctx.r22.u64;
loc_82A289A0:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// add r3,r30,r11
	ctx.r3.u64 = ctx.r30.u64 + ctx.r11.u64;
	// bl 0x82a08698
	ctx.lr = 0x82A289B4;
	sub_82A08698(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r30,r30,596
	ctx.r30.s64 = ctx.r30.s64 + 596;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a289a0
	if (!ctx.cr6.eq) goto loc_82A289A0;
loc_82A289C4:
	// lwz r20,92(r1)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_82A289C8:
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// addi r30,r1,128
	ctx.r30.s64 = ctx.r1.s64 + 128;
	// bl 0x82239200
	ctx.lr = 0x82A289D8;
	sub_82239200(ctx, base);
	// lwz r11,176(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 176);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// beq cr6,0x82a289ec
	if (ctx.cr6.eq) goto loc_82A289EC;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x82a28a70
	if (!ctx.cr6.eq) goto loc_82A28A70;
loc_82A289EC:
	// addi r11,r11,-2
	ctx.r11.s64 = ctx.r11.s64 + -2;
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// addi r4,r11,86
	ctx.r4.s64 = ctx.r11.s64 + 86;
	// bl 0x82239280
	ctx.lr = 0x82A28A04;
	sub_82239280(ctx, base);
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// lwz r11,1032(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1032);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// extsh r31,r11
	ctx.r31.s64 = ctx.r11.s16;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x822392e0
	ctx.lr = 0x82A28A20;
	sub_822392E0(ctx, base);
	// lwz r11,132(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r27.u32);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// lwz r10,176(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 176);
	// addi r4,r1,2272
	ctx.r4.s64 = ctx.r1.s64 + 2272;
	// mr r7,r31
	ctx.r7.u64 = ctx.r31.u64;
	// ori r3,r10,8
	ctx.r3.u64 = ctx.r10.u64 | 8;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// addi r6,r11,1
	ctx.r6.s64 = ctx.r11.s64 + 1;
	// bl 0x82422578
	ctx.lr = 0x82A28A48;
	sub_82422578(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a28a70
	if (ctx.cr6.eq) goto loc_82A28A70;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// addi r11,r31,-10
	ctx.r11.s64 = ctx.r31.s64 + -10;
	// cmpw cr6,r5,r11
	ctx.cr6.compare<int32_t>(ctx.r5.s32, ctx.r11.s32, ctx.xer);
	// bgt cr6,0x82a28a70
	if (ctx.cr6.gt) goto loc_82A28A70;
	// addi r4,r1,2272
	ctx.r4.s64 = ctx.r1.s64 + 2272;
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// bl 0x8226b620
	ctx.lr = 0x82A28A6C;
	sub_8226B620(ctx, base);
	// addi r30,r1,1200
	ctx.r30.s64 = ctx.r1.s64 + 1200;
loc_82A28A70:
	// cmpwi cr6,r16,0
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 0, ctx.xer);
	// beq cr6,0x82a28b10
	if (ctx.cr6.eq) goto loc_82A28B10;
	// bl 0x82219f20
	ctx.lr = 0x82A28A7C;
	sub_82219F20(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28b28
	if (ctx.cr6.eq) goto loc_82A28B28;
	// bl 0x82219f20
	ctx.lr = 0x82A28A88;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28A98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28b28
	if (ctx.cr6.eq) goto loc_82A28B28;
	// bl 0x82219f20
	ctx.lr = 0x82A28AA4;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28AB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28AC4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28b28
	if (ctx.cr6.eq) goto loc_82A28B28;
	// bl 0x82219f20
	ctx.lr = 0x82A28AD0;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28AE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28AF0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,112(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 112);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28B0C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82a28b28
	goto loc_82A28B28;
loc_82A28B10:
	// cntlzw r11,r29
	ctx.r11.u64 = ctx.r29.u32 == 0 ? 32 : __builtin_clz(ctx.r29.u32);
	// lwz r3,100(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// rlwinm r6,r11,27,31,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// bl 0x82a05410
	ctx.lr = 0x82A28B28;
	sub_82A05410(ctx, base);
loc_82A28B28:
	// stfd f31,120(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.f31.u64);
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r3,r1,1200
	ctx.r3.s64 = ctx.r1.s64 + 1200;
	// stw r11,152(r21)
	PPC_STORE_U32(ctx.r21.u32 + 152, ctx.r11.u32);
	// stw r10,156(r21)
	PPC_STORE_U32(ctx.r21.u32 + 156, ctx.r10.u32);
	// bl 0x82239548
	ctx.lr = 0x82A28B44;
	sub_82239548(ctx, base);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// b 0x82a28b5c
	goto loc_82A28B5C;
loc_82A28B4C:
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// b 0x82a28b58
	goto loc_82A28B58;
loc_82A28B54:
	// li r22,0
	ctx.r22.s64 = 0;
loc_82A28B58:
	// lwz r20,92(r1)
	ctx.r20.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_82A28B5C:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82a35740
	ctx.lr = 0x82A28B68;
	sub_82A35740(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r23,96(r1)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a28ba4
	if (ctx.cr6.eq) goto loc_82A28BA4;
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a28b90
	if (!ctx.cr6.eq) goto loc_82A28B90;
	// bl 0x82545cc0
	ctx.lr = 0x82A28B8C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
loc_82A28B90:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28BA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A28BA4:
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// stw r22,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r22.u32);
	// stw r22,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r22.u32);
	// stw r22,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r22.u32);
	// bl 0x82239548
	ctx.lr = 0x82A28BB8;
	sub_82239548(ctx, base);
	// cmpwi cr6,r16,0
	ctx.cr6.compare<int32_t>(ctx.r16.s32, 0, ctx.xer);
	// bne cr6,0x82a28bd8
	if (!ctx.cr6.eq) goto loc_82A28BD8;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_82A28BC4:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r18,r18,36
	ctx.r18.s64 = ctx.r18.s64 + 36;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// blt cr6,0x82a28598
	if (ctx.cr6.lt) goto loc_82A28598;
loc_82A28BD8:
	// cmpwi cr6,r20,0
	ctx.cr6.compare<int32_t>(ctx.r20.s32, 0, ctx.xer);
	// ble cr6,0x82a28cb8
	if (!ctx.cr6.gt) goto loc_82A28CB8;
	// addi r31,r21,12
	ctx.r31.s64 = ctx.r21.s64 + 12;
	// mr r27,r22
	ctx.r27.u64 = ctx.r22.u64;
	// mr r25,r20
	ctx.r25.u64 = ctx.r20.u64;
loc_82A28BEC:
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// lwz r29,4(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// add r26,r27,r11
	ctx.r26.u64 = ctx.r27.u64 + ctx.r11.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addi r11,r29,1
	ctx.r11.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// ble cr6,0x82a28c74
	if (!ctx.cr6.gt) goto loc_82A28C74;
	// li r4,596
	ctx.r4.s64 = 596;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82416640
	ctx.lr = 0x82A28C18;
	sub_82416640(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r28,0(r31)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// bne cr6,0x82a28c38
	if (!ctx.cr6.eq) goto loc_82A28C38;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a28c74
	if (ctx.cr6.eq) goto loc_82A28C74;
loc_82A28C38:
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
	// mulli r30,r11,596
	ctx.r30.s64 = ctx.r11.s64 * 596;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a28c50
	if (!ctx.cr6.eq) goto loc_82A28C50;
	// bl 0x82545cc0
	ctx.lr = 0x82A28C4C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8344);
loc_82A28C50:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28C70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
loc_82A28C74:
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mulli r5,r29,596
	ctx.r5.s64 = ctx.r29.s64 * 596;
	// addi r3,r4,596
	ctx.r3.s64 = ctx.r4.s64 + 596;
	// bl 0x82e29fb0
	ctx.lr = 0x82A28C84;
	sub_82E29FB0(ctx, base);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28c98
	if (ctx.cr6.eq) goto loc_82A28C98;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A28C98;
	sub_82A18048(ctx, base);
loc_82A28C98:
	// addi r25,r25,-1
	ctx.r25.s64 = ctx.r25.s64 + -1;
	// addi r27,r27,596
	ctx.r27.s64 = ctx.r27.s64 + 596;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x82a28bec
	if (!ctx.cr6.eq) goto loc_82A28BEC;
	// mr r5,r20
	ctx.r5.u64 = ctx.r20.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82a35740
	ctx.lr = 0x82A28CB8;
	sub_82A35740(ctx, base);
loc_82A28CB8:
	// addi r1,r1,10784
	ctx.r1.s64 = ctx.r1.s64 + 10784;
	// lfd f31,-160(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x82e28e80
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A28CC8"))) PPC_WEAK_FUNC(sub_82A28CC8);
PPC_FUNC_IMPL(__imp__sub_82A28CC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82A28CD0;
	__savegprlr_23(ctx, base);
	// stwu r1,-768(r1)
	ea = -768 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r25,8(r30)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// beq cr6,0x82a28de8
	if (ctx.cr6.eq) goto loc_82A28DE8;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r26,r30,4
	ctx.r26.s64 = ctx.r30.s64 + 4;
	// bl 0x82a36ad0
	ctx.lr = 0x82A28CF4;
	sub_82A36AD0(ctx, base);
	// li r27,0
	ctx.r27.s64 = 0;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// ble cr6,0x82a28de8
	if (!ctx.cr6.gt) goto loc_82A28DE8;
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
	// lis r24,-31973
	ctx.r24.s64 = -2095382528;
	// lis r23,-31969
	ctx.r23.s64 = -2095120384;
loc_82A28D10:
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r4,r29,r11
	ctx.r4.u64 = ctx.r29.u64 + ctx.r11.u64;
	// bl 0x82a18048
	ctx.lr = 0x82A28D20;
	sub_82A18048(ctx, base);
	// lwz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a28d54
	if (!ctx.cr6.gt) goto loc_82A28D54;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a28dc8
	if (!ctx.cr6.eq) goto loc_82A28DC8;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,12296(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 12296);
	// bl 0x82a17ce0
	ctx.lr = 0x82A28D48;
	sub_82A17CE0(ctx, base);
	// lwz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r11.u32);
loc_82A28D54:
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,8
	ctx.r6.s64 = 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82416660
	ctx.lr = 0x82A28D70;
	sub_82416660(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a28da8
	if (ctx.cr6.eq) goto loc_82A28DA8;
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a28d94
	if (!ctx.cr6.eq) goto loc_82A28D94;
	// bl 0x82545cc0
	ctx.lr = 0x82A28D90;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + 8344);
loc_82A28D94:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28DA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A28DA8:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r27.u32);
	// stw r27,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r27.u32);
	// addi r29,r29,596
	ctx.r29.s64 = ctx.r29.s64 + 596;
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r27.u32);
	// cmpw cr6,r28,r25
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r25.s32, ctx.xer);
	// blt cr6,0x82a28d10
	if (ctx.cr6.lt) goto loc_82A28D10;
	// b 0x82a28dd0
	goto loc_82A28DD0;
loc_82A28DC8:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82a56c60
	ctx.lr = 0x82A28DD0;
	sub_82A56C60(ctx, base);
loc_82A28DD0:
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// ble cr6,0x82a28de8
	if (!ctx.cr6.gt) goto loc_82A28DE8;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82a35740
	ctx.lr = 0x82A28DE8;
	sub_82A35740(ctx, base);
loc_82A28DE8:
	// addi r1,r1,768
	ctx.r1.s64 = ctx.r1.s64 + 768;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A28DF0"))) PPC_WEAK_FUNC(sub_82A28DF0);
PPC_FUNC_IMPL(__imp__sub_82A28DF0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e4c
	ctx.lr = 0x82A28DF8;
	__savegprlr_21(ctx, base);
	// stfd f31,-104(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -104, ctx.f31.u64);
	// stwu r1,-1136(r1)
	ea = -1136 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// mr r21,r5
	ctx.r21.u64 = ctx.r5.u64;
	// mr r22,r6
	ctx.r22.u64 = ctx.r6.u64;
	// lbz r11,2793(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29748
	if (ctx.cr6.eq) goto loc_82A29748;
	// bl 0x82219f20
	ctx.lr = 0x82A28E20;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28E30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a28e64
	if (ctx.cr6.eq) goto loc_82A28E64;
	// bl 0x82219f20
	ctx.lr = 0x82A28E3C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28E4C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A28E5C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a29748
	if (!ctx.cr6.eq) goto loc_82A29748;
loc_82A28E64:
	// bl 0x82751920
	ctx.lr = 0x82A28E68;
	sub_82751920(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,-5232
	ctx.r4.s64 = ctx.r11.s64 + -5232;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x8243b750
	ctx.lr = 0x82A28E84;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x82971110
	ctx.lr = 0x82A28E98;
	sub_82971110(ctx, base);
	// bl 0x8239c0c0
	ctx.lr = 0x82A28E9C;
	sub_8239C0C0(ctx, base);
	// lwz r11,1044(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1044);
	// li r26,0
	ctx.r26.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r26
	ctx.r30.u64 = ctx.r26.u64;
	// li r23,1
	ctx.r23.s64 = 1;
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// blt cr6,0x82a28ec4
	if (ctx.cr6.lt) goto loc_82A28EC4;
	// cmpwi cr6,r11,20
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 20, ctx.xer);
	// bgt cr6,0x82a28ec4
	if (ctx.cr6.gt) goto loc_82A28EC4;
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
loc_82A28EC4:
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// stw r26,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r26.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r26.u32);
	// stw r26,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r26.u32);
	// bl 0x82a11e10
	ctx.lr = 0x82A28EDC;
	sub_82A11E10(ctx, base);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a11f80
	ctx.lr = 0x82A28EE8;
	sub_82A11F80(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r24,r29,2848
	ctx.r24.s64 = ctx.r29.s64 + 2848;
	// addi r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 1;
	// li r5,1040
	ctx.r5.s64 = 1040;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// subf r11,r11,r10
	ctx.r11.s64 = ctx.r10.s64 - ctx.r11.s64;
	// addi r27,r11,-1
	ctx.r27.s64 = ctx.r11.s64 + -1;
	// bl 0x82e29500
	ctx.lr = 0x82A28F1C;
	sub_82E29500(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r11,-2912
	ctx.r4.s64 = ctx.r11.s64 + -2912;
	// bl 0x82e28c50
	ctx.lr = 0x82A28F2C;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a28f48
	if (ctx.cr6.eq) goto loc_82A28F48;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A28F44;
	sub_82E2AB28(ctx, base);
	// b 0x82a29144
	goto loc_82A29144;
loc_82A28F48:
	// lwz r11,1068(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// stw r26,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r26.u32);
	// stw r26,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r26.u32);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r26.u32);
	// stw r26,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r26.u32);
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r26.u32);
	// stw r26,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r26.u32);
	// stw r26,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r26.u32);
	// stw r26,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r26.u32);
	// stw r26,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r26.u32);
	// beq cr6,0x82a28f80
	if (ctx.cr6.eq) goto loc_82A28F80;
	// cmpw cr6,r11,r28
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r28.s32, ctx.xer);
	// beq cr6,0x82a28fbc
	if (ctx.cr6.eq) goto loc_82A28FBC;
loc_82A28F80:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-20460
	ctx.r4.s64 = ctx.r11.s64 + -20460;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82A28F98;
	sub_8243B750(ctx, base);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,136
	ctx.r3.s64 = ctx.r31.s64 + 136;
	// bl 0x8238c150
	ctx.lr = 0x82A28FA8;
	sub_8238C150(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a25e70
	ctx.lr = 0x82A28FBC;
	sub_82A25E70(ctx, base);
loc_82A28FBC:
	// lwz r11,1068(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x82a28fd4
	if (!ctx.cr6.eq) goto loc_82A28FD4;
	// clrlwi r10,r30,24
	ctx.r10.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a28fdc
	if (ctx.cr6.eq) goto loc_82A28FDC;
loc_82A28FD4:
	// cmpw cr6,r11,r28
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a29018
	if (!ctx.cr6.eq) goto loc_82A29018;
loc_82A28FDC:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,20596
	ctx.r4.s64 = ctx.r11.s64 + 20596;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82A28FF4;
	sub_8243B750(ctx, base);
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,136
	ctx.r3.s64 = ctx.r31.s64 + 136;
	// bl 0x8238c150
	ctx.lr = 0x82A29004;
	sub_8238C150(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a25e70
	ctx.lr = 0x82A29018;
	sub_82A25E70(ctx, base);
loc_82A29018:
	// lwz r31,92(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// bl 0x823eafe0
	ctx.lr = 0x82A29020;
	sub_823EAFE0(ctx, base);
	// rotlwi r10,r3,1
	ctx.r10.u64 = __builtin_rotateleft32(ctx.r3.u32, 1);
	// divw r9,r3,r31
	ctx.r9.s32 = ctx.r3.s32 / ctx.r31.s32;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// mullw r9,r9,r31
	ctx.r9.s64 = int64_t(ctx.r9.s32) * int64_t(ctx.r31.s32);
	// andc r8,r31,r10
	ctx.r8.u64 = ctx.r31.u64 & ~ctx.r10.u64;
	// twllei r31,0
	// subf r31,r9,r3
	ctx.r31.s64 = ctx.r3.s64 - ctx.r9.s64;
	// addi r11,r1,176
	ctx.r11.s64 = ctx.r1.s64 + 176;
	// mr r10,r26
	ctx.r10.u64 = ctx.r26.u64;
	// twlgei r8,-1
	// li r9,7
	ctx.r9.s64 = 7;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82A29050:
	// std r10,0(r11)
	PPC_STORE_U64(ctx.r11.u32 + 0, ctx.r10.u64);
	// addi r11,r11,8
	ctx.r11.s64 = ctx.r11.s64 + 8;
	// bdnz 0x82a29050
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A29050;
	// lis r9,-32252
	ctx.r9.s64 = -2113667072;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// stw r26,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r26.u32);
	// addi r4,r9,29620
	ctx.r4.s64 = ctx.r9.s64 + 29620;
	// bl 0x823099b0
	ctx.lr = 0x82A29074;
	sub_823099B0(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// rlwinm r31,r31,3,0,28
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// li r6,-1
	ctx.r6.s64 = -1;
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 268);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A290A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82A290A8;
	sub_82309A60(ctx, base);
	// lwz r11,192(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 192);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a290bc
	if (ctx.cr6.eq) goto loc_82A290BC;
	// lwz r4,188(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 188);
	// b 0x82a290c4
	goto loc_82A290C4;
loc_82A290BC:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_82A290C4:
	// li r5,1024
	ctx.r5.s64 = 1024;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A290D0;
	sub_82E2AB28(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwzx r11,r31,r11
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a290e8
	if (ctx.cr6.eq) goto loc_82A290E8;
	// stw r28,1068(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1068, ctx.r28.u32);
	// b 0x82a2911c
	goto loc_82A2911C;
loc_82A290E8:
	// lwz r11,1068(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x82a2911c
	if (!ctx.cr6.eq) goto loc_82A2911C;
	// bl 0x823eafe0
	ctx.lr = 0x82A290F8;
	sub_823EAFE0(ctx, base);
	// divw r10,r3,r27
	ctx.r10.s32 = ctx.r3.s32 / ctx.r27.s32;
	// rotlwi r11,r3,1
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r3.u32, 1);
	// mullw r10,r10,r27
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r27.s32);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// andc r11,r27,r11
	ctx.r11.u64 = ctx.r27.u64 & ~ctx.r11.u64;
	// twllei r27,0
	// twlgei r11,-1
	// stw r10,1068(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1068, ctx.r10.u32);
loc_82A2911C:
	// addi r3,r1,204
	ctx.r3.s64 = ctx.r1.s64 + 204;
	// bl 0x82480d20
	ctx.lr = 0x82A29124;
	sub_82480D20(ctx, base);
	// addi r3,r1,188
	ctx.r3.s64 = ctx.r1.s64 + 188;
	// bl 0x82309a60
	ctx.lr = 0x82A2912C;
	sub_82309A60(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82480d20
	ctx.lr = 0x82A29134;
	sub_82480D20(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82480d20
	ctx.lr = 0x82A2913C;
	sub_82480D20(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82a56c60
	ctx.lr = 0x82A29144;
	sub_82A56C60(ctx, base);
loc_82A29144:
	// lwz r11,1044(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1044);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a29158
	if (!ctx.cr6.gt) goto loc_82A29158;
	// cmpwi cr6,r11,20
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 20, ctx.xer);
	// ble cr6,0x82a291a4
	if (!ctx.cr6.gt) goto loc_82A291A4;
loc_82A29158:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f31,-18308(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -18308);
	ctx.f31.f64 = double(temp.f32);
loc_82A29160:
	// bl 0x823eb050
	ctx.lr = 0x82A29164;
	sub_823EB050(ctx, base);
	// fmuls f0,f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64 * ctx.f31.f64));
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f0.u32);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x82a29160
	if (ctx.cr6.eq) goto loc_82A29160;
	// lwz r10,1068(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// cmpw cr6,r10,r28
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a29194
	if (!ctx.cr6.eq) goto loc_82A29194;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// b 0x82a291a0
	goto loc_82A291A0;
loc_82A29194:
	// addi r11,r11,2
	ctx.r11.s64 = ctx.r11.s64 + 2;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
loc_82A291A0:
	// stw r11,1044(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1044, ctx.r11.u32);
loc_82A291A4:
	// lwz r10,1068(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// li r9,10
	ctx.r9.s64 = 10;
	// lwz r11,1044(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1044);
	// cmpw cr6,r10,r28
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a291d0
	if (!ctx.cr6.eq) goto loc_82A291D0;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// blt cr6,0x82a291c8
	if (ctx.cr6.lt) goto loc_82A291C8;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// ble cr6,0x82a291e4
	if (!ctx.cr6.gt) goto loc_82A291E4;
loc_82A291C8:
	// stw r23,1044(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1044, ctx.r23.u32);
	// b 0x82a291e4
	goto loc_82A291E4;
loc_82A291D0:
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// blt cr6,0x82a291e0
	if (ctx.cr6.lt) goto loc_82A291E0;
	// cmpwi cr6,r11,20
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 20, ctx.xer);
	// ble cr6,0x82a291e4
	if (!ctx.cr6.gt) goto loc_82A291E4;
loc_82A291E0:
	// stw r9,1044(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1044, ctx.r9.u32);
loc_82A291E4:
	// lwz r11,1044(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1044);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a29204
	if (!ctx.cr6.eq) goto loc_82A29204;
	// cmpw cr6,r10,r28
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a29200
	if (!ctx.cr6.eq) goto loc_82A29200;
	// stw r23,1044(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1044, ctx.r23.u32);
	// b 0x82a29204
	goto loc_82A29204;
loc_82A29200:
	// stw r9,1044(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1044, ctx.r9.u32);
loc_82A29204:
	// cmpw cr6,r10,r28
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a29210
	if (!ctx.cr6.eq) goto loc_82A29210;
	// stb r23,2733(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2733, ctx.r23.u8);
loc_82A29210:
	// li r5,1024
	ctx.r5.s64 = 1024;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A29220;
	sub_82E2AB28(ctx, base);
	// lwz r11,1044(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1044);
	// lwz r10,1068(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// stw r22,3872(r29)
	PPC_STORE_U32(ctx.r29.u32 + 3872, ctx.r22.u32);
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// stw r11,3880(r29)
	PPC_STORE_U32(ctx.r29.u32 + 3880, ctx.r11.u32);
	// bne cr6,0x82a29260
	if (!ctx.cr6.eq) goto loc_82A29260;
	// bl 0x823eafe0
	ctx.lr = 0x82A2923C;
	sub_823EAFE0(ctx, base);
	// divw r10,r3,r27
	ctx.r10.s32 = ctx.r3.s32 / ctx.r27.s32;
	// rotlwi r11,r3,1
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r3.u32, 1);
	// mullw r10,r10,r27
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r27.s32);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// andc r11,r27,r11
	ctx.r11.u64 = ctx.r27.u64 & ~ctx.r11.u64;
	// twllei r27,0
	// twlgei r11,-1
	// stw r10,1068(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1068, ctx.r10.u32);
loc_82A29260:
	// lbz r11,4028(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29274
	if (ctx.cr6.eq) goto loc_82A29274;
	// lwz r11,1068(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1068);
	// stw r11,3876(r29)
	PPC_STORE_U32(ctx.r29.u32 + 3876, ctx.r11.u32);
loc_82A29274:
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// stb r26,4020(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4020, ctx.r26.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A29280;
	sub_82A02AC0(ctx, base);
	// li r11,19
	ctx.r11.s64 = 19;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// stw r11,1072(r29)
	PPC_STORE_U32(ctx.r29.u32 + 1072, ctx.r11.u32);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a292b8
	if (!ctx.cr6.eq) goto loc_82A292B8;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A292A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a292b0
	if (ctx.cr6.eq) goto loc_82A292B0;
	// bl 0x82a08db0
	ctx.lr = 0x82A292AC;
	sub_82A08DB0(ctx, base);
	// b 0x82a292b4
	goto loc_82A292B4;
loc_82A292B0:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A292B4:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A292B8:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// subfic r11,r11,0
	ctx.xer.ca = ctx.r11.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r11.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// rlwinm r11,r11,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2;
	// addi r11,r11,2
	ctx.r11.s64 = ctx.r11.s64 + 2;
	// stw r11,2788(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2788, ctx.r11.u32);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a292fc
	if (!ctx.cr6.eq) goto loc_82A292FC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A292E4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a292f4
	if (ctx.cr6.eq) goto loc_82A292F4;
	// bl 0x82a08db0
	ctx.lr = 0x82A292F0;
	sub_82A08DB0(ctx, base);
	// b 0x82a292f8
	goto loc_82A292F8;
loc_82A292F4:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A292F8:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A292FC:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29314
	if (!ctx.cr6.eq) goto loc_82A29314;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2930C;
	sub_82A0BFB0(ctx, base);
	// stw r23,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r23.u32);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
loc_82A29314:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2933c
	if (!ctx.cr6.eq) goto loc_82A2933C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A29324;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a29334
	if (ctx.cr6.eq) goto loc_82A29334;
	// bl 0x82a08db0
	ctx.lr = 0x82A29330;
	sub_82A08DB0(ctx, base);
	// b 0x82a29338
	goto loc_82A29338;
loc_82A29334:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A29338:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2933C:
	// stw r26,64(r3)
	PPC_STORE_U32(ctx.r3.u32 + 64, ctx.r26.u32);
	// lwz r11,12304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// lwz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// stw r10,60(r11)
	PPC_STORE_U32(ctx.r11.u32 + 60, ctx.r10.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A29350;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29360;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29370;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29380;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x8223cd28
	ctx.lr = 0x82A2938C;
	sub_8223CD28(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// addi r4,r11,-972
	ctx.r4.s64 = ctx.r11.s64 + -972;
	// bl 0x82225578
	ctx.lr = 0x82A2939C;
	sub_82225578(ctx, base);
	// lbz r11,1088(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 1088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a293b0
	if (ctx.cr6.eq) goto loc_82A293B0;
	// li r4,-2
	ctx.r4.s64 = -2;
	// b 0x82a293e0
	goto loc_82A293E0;
loc_82A293B0:
	// lwz r11,3992(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3992);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a293c8
	if (!ctx.cr6.eq) goto loc_82A293C8;
	// li r4,-1
	ctx.r4.s64 = -1;
	// b 0x82a293e0
	goto loc_82A293E0;
loc_82A293C8:
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A293DC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
loc_82A293E0:
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82225588
	ctx.lr = 0x82A293E8;
	sub_82225588(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82225590
	ctx.lr = 0x82A293F4;
	sub_82225590(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// lwz r5,2788(r29)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2788);
	// bl 0x822255b8
	ctx.lr = 0x82A29404;
	sub_822255B8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255b8
	ctx.lr = 0x82A29414;
	sub_822255B8(ctx, base);
	// li r11,2
	ctx.r11.s64 = 2;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// stw r26,1000(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1000, ctx.r26.u32);
	// stw r23,1016(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1016, ctx.r23.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,996(r1)
	PPC_STORE_U32(ctx.r1.u32 + 996, ctx.r11.u32);
	// bne cr6,0x82a29450
	if (!ctx.cr6.eq) goto loc_82A29450;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A29438;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a29448
	if (ctx.cr6.eq) goto loc_82A29448;
	// bl 0x82a08db0
	ctx.lr = 0x82A29444;
	sub_82A08DB0(ctx, base);
	// b 0x82a2944c
	goto loc_82A2944C;
loc_82A29448:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A2944C:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A29450:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29474
	if (ctx.cr6.eq) goto loc_82A29474;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A29460;
	sub_82A0BFB0(ctx, base);
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r23
	ctx.r11.u64 = ctx.r23.u64;
	// bne cr6,0x82a29478
	if (!ctx.cr6.eq) goto loc_82A29478;
loc_82A29474:
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
loc_82A29478:
	// stb r11,1008(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1008, ctx.r11.u8);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stb r26,1009(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1009, ctx.r26.u8);
	// bne cr6,0x82a294a8
	if (!ctx.cr6.eq) goto loc_82A294A8;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A29490;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a294a0
	if (ctx.cr6.eq) goto loc_82A294A0;
	// bl 0x82a08db0
	ctx.lr = 0x82A2949C;
	sub_82A08DB0(ctx, base);
	// b 0x82a294a4
	goto loc_82A294A4;
loc_82A294A0:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A294A4:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A294A8:
	// lwz r11,56(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// stw r23,1012(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1012, ctx.r23.u32);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// stb r11,1010(r1)
	PPC_STORE_U8(ctx.r1.u32 + 1010, ctx.r11.u8);
	// bl 0x82225650
	ctx.lr = 0x82A294C8;
	sub_82225650(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82225658
	ctx.lr = 0x82A294D4;
	sub_82225658(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82225660
	ctx.lr = 0x82A294E0;
	sub_82225660(ctx, base);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A294E8;
	sub_822255D0(ctx, base);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// addi r31,r11,25332
	ctx.r31.s64 = ctx.r11.s64 + 25332;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29508;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A29510;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29528;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A29530;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29548;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A29550;
	sub_822255D0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a29580
	if (!ctx.cr6.eq) goto loc_82A29580;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A29568;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a29578
	if (ctx.cr6.eq) goto loc_82A29578;
	// bl 0x82a08db0
	ctx.lr = 0x82A29574;
	sub_82A08DB0(ctx, base);
	// b 0x82a2957c
	goto loc_82A2957C;
loc_82A29578:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A2957C:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A29580:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lwz r4,16(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// lwz r10,52(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// xori r5,r11,1
	ctx.r5.u64 = ctx.r11.u64 ^ 1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A295A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A295B0;
	sub_822255D0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a295e0
	if (!ctx.cr6.eq) goto loc_82A295E0;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A295C8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a295d8
	if (ctx.cr6.eq) goto loc_82A295D8;
	// bl 0x82a08db0
	ctx.lr = 0x82A295D4;
	sub_82A08DB0(ctx, base);
	// b 0x82a295dc
	goto loc_82A295DC;
loc_82A295D8:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A295DC:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A295E0:
	// lwz r11,56(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// lwz r10,52(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 52);
	// xori r5,r11,1
	ctx.r5.u64 = ctx.r11.u64 ^ 1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A29608;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a29634
	if (!ctx.cr6.eq) goto loc_82A29634;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2961C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2962c
	if (ctx.cr6.eq) goto loc_82A2962C;
	// bl 0x82a08db0
	ctx.lr = 0x82A29628;
	sub_82A08DB0(ctx, base);
	// b 0x82a29630
	goto loc_82A29630;
loc_82A2962C:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A29630:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A29634:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29654
	if (ctx.cr6.eq) goto loc_82A29654;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A29644;
	sub_82A0BFB0(ctx, base);
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// mr r30,r23
	ctx.r30.u64 = ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29658
	if (!ctx.cr6.eq) goto loc_82A29658;
loc_82A29654:
	// mr r30,r26
	ctx.r30.u64 = ctx.r26.u64;
loc_82A29658:
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A29660;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29678;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A29680;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,3876(r29)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3876);
	// lwz r4,28(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29698;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A296A0;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,3880(r29)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3880);
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A296B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A296C0;
	sub_822255D0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,36(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A296D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x822255d0
	ctx.lr = 0x82A296E0;
	sub_822255D0(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r4,40(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// lwz r5,5624(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 5624);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A296FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x82a0c2c0
	ctx.lr = 0x82A29700;
	sub_82A0C2C0(ctx, base);
	// stw r3,1020(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1020, ctx.r3.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A29708;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29718;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2972C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// addi r11,r11,-19472
	ctx.r11.s64 = ctx.r11.s64 + -19472;
	// stw r11,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r11.u32);
	// bl 0x822254f8
	ctx.lr = 0x82A29740;
	sub_822254F8(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82480d20
	ctx.lr = 0x82A29748;
	sub_82480D20(ctx, base);
loc_82A29748:
	// addi r1,r1,1136
	ctx.r1.s64 = ctx.r1.s64 + 1136;
	// lfd f31,-104(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A29758"))) PPC_WEAK_FUNC(sub_82A29758);
PPC_FUNC_IMPL(__imp__sub_82A29758) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A29760;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a297e8
	if (ctx.cr6.eq) goto loc_82A297E8;
	// bl 0x82219f20
	ctx.lr = 0x82A2977C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2978C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a297c0
	if (ctx.cr6.eq) goto loc_82A297C0;
	// bl 0x82219f20
	ctx.lr = 0x82A29798;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A297A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A297B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a297e8
	if (!ctx.cr6.eq) goto loc_82A297E8;
loc_82A297C0:
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// stb r30,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r30.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A297D0;
	sub_82A02AC0(ctx, base);
	// li r11,19
	ctx.r11.s64 = 19;
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// stw r30,2832(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2832, ctx.r30.u32);
	// stw r11,1072(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1072, ctx.r11.u32);
	// bl 0x82a27d48
	ctx.lr = 0x82A297E8;
	sub_82A27D48(ctx, base);
loc_82A297E8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A297F0"))) PPC_WEAK_FUNC(sub_82A297F0);
PPC_FUNC_IMPL(__imp__sub_82A297F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2988c
	if (ctx.cr6.eq) goto loc_82A2988C;
	// bl 0x82219f20
	ctx.lr = 0x82A29818;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29828;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2985c
	if (ctx.cr6.eq) goto loc_82A2985C;
	// bl 0x82219f20
	ctx.lr = 0x82A29834;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29844;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29854;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2988c
	if (!ctx.cr6.eq) goto loc_82A2988C;
loc_82A2985C:
	// lwz r11,4540(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4540);
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stb r30,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r30.u8);
	// stw r11,4540(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4540, ctx.r11.u32);
	// bl 0x82a02ac0
	ctx.lr = 0x82A29878;
	sub_82A02AC0(ctx, base);
	// lwz r5,1080(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1080);
	// lwz r4,1084(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1084);
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// stw r30,2832(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2832, ctx.r30.u32);
	// bl 0x82a27bc8
	ctx.lr = 0x82A2988C;
	sub_82A27BC8(ctx, base);
loc_82A2988C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A298A8"))) PPC_WEAK_FUNC(sub_82A298A8);
PPC_FUNC_IMPL(__imp__sub_82A298A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A298B0;
	__savegprlr_29(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a298ec
	if (!ctx.cr6.eq) goto loc_82A298EC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A298D4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a298e4
	if (ctx.cr6.eq) goto loc_82A298E4;
	// bl 0x82a08db0
	ctx.lr = 0x82A298E0;
	sub_82A08DB0(ctx, base);
	// b 0x82a298e8
	goto loc_82A298E8;
loc_82A298E4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A298E8:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A298EC:
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2997c
	if (!ctx.cr6.eq) goto loc_82A2997C;
	// ld r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r29.u32 + 0);
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A29904;
	sub_82A02DD0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2997c
	if (ctx.cr6.eq) goto loc_82A2997C;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// ld r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 8);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// ld r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 28);
	// std r10,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r10.u64);
	// lwz r10,40(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// lwz r10,44(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// lwz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// lwz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// ld r10,56(r11)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r11.u32 + 56);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// std r10,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r10.u64);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r11.u32);
	// bl 0x82a24670
	ctx.lr = 0x82A2997C;
	sub_82A24670(ctx, base);
loc_82A2997C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A29988"))) PPC_WEAK_FUNC(sub_82A29988);
PPC_FUNC_IMPL(__imp__sub_82A29988) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-1232(r1)
	ea = -1232 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239200
	ctx.lr = 0x82A299B0;
	sub_82239200(ctx, base);
	// li r4,78
	ctx.r4.s64 = 78;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239280
	ctx.lr = 0x82A299BC;
	sub_82239280(ctx, base);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0cab8
	ctx.lr = 0x82A299CC;
	sub_82A0CAB8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r3,3988(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3988);
	// bl 0x82a03600
	ctx.lr = 0x82A299DC;
	sub_82A03600(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// lwz r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// ld r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 28);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r11.u64);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r11.u32);
	// lwz r11,48(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 48);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// ld r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 56);
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r11.u64);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r11.u32);
	// bl 0x82a24670
	ctx.lr = 0x82A29A48;
	sub_82A24670(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239548
	ctx.lr = 0x82A29A50;
	sub_82239548(ctx, base);
	// addi r1,r1,1232
	ctx.r1.s64 = ctx.r1.s64 + 1232;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A29A68"))) PPC_WEAK_FUNC(sub_82A29A68);
PPC_FUNC_IMPL(__imp__sub_82A29A68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e4c
	ctx.lr = 0x82A29A70;
	__savegprlr_21(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29a98
	if (ctx.cr6.eq) goto loc_82A29A98;
	// ld r4,24(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// bl 0x82a02e50
	ctx.lr = 0x82A29A94;
	sub_82A02E50(ctx, base);
	// b 0x82a29aa0
	goto loc_82A29AA0;
loc_82A29A98:
	// ld r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// bl 0x82a02dd0
	ctx.lr = 0x82A29AA0;
	sub_82A02DD0(ctx, base);
loc_82A29AA0:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// stw r11,20(r21)
	PPC_STORE_U32(ctx.r21.u32 + 20, ctx.r11.u32);
	// ld r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 24);
	// lwz r10,20(r21)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r21.u32 + 20);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// std r11,28(r21)
	PPC_STORE_U64(ctx.r21.u32 + 28, ctx.r11.u64);
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r11,40(r21)
	PPC_STORE_U32(ctx.r21.u32 + 40, ctx.r11.u32);
	// lwz r11,36(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// stw r11,44(r21)
	PPC_STORE_U32(ctx.r21.u32 + 44, ctx.r11.u32);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,48(r21)
	PPC_STORE_U32(ctx.r21.u32 + 48, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,52(r21)
	PPC_STORE_U32(ctx.r21.u32 + 52, ctx.r11.u32);
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// stw r11,64(r21)
	PPC_STORE_U32(ctx.r21.u32 + 64, ctx.r11.u32);
	// beq cr6,0x82a29afc
	if (ctx.cr6.eq) goto loc_82A29AFC;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A29AF4;
	sub_82A02F70(ctx, base);
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r11,40(r3)
	PPC_STORE_U32(ctx.r3.u32 + 40, ctx.r11.u32);
loc_82A29AFC:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A29B08;
	sub_82A02D50(ctx, base);
	// li r31,0
	ctx.r31.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// mr r26,r31
	ctx.r26.u64 = ctx.r31.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A29B20;
	sub_82A02D50(ctx, base);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// mr r25,r31
	ctx.r25.u64 = ctx.r31.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A29B34;
	sub_82A02D50(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// mr r24,r31
	ctx.r24.u64 = ctx.r31.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A29B48;
	sub_82A02D50(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r23,r31
	ctx.r23.u64 = ctx.r31.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a29b64
	if (ctx.cr6.eq) goto loc_82A29B64;
	// lwz r11,24(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29de4
	if (!ctx.cr6.eq) goto loc_82A29DE4;
loc_82A29B64:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a29b78
	if (ctx.cr6.eq) goto loc_82A29B78;
	// lwz r11,24(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29de4
	if (!ctx.cr6.eq) goto loc_82A29DE4;
loc_82A29B78:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a29b8c
	if (ctx.cr6.eq) goto loc_82A29B8C;
	// lwz r11,24(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29de4
	if (!ctx.cr6.eq) goto loc_82A29DE4;
loc_82A29B8C:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a29ba0
	if (ctx.cr6.eq) goto loc_82A29BA0;
	// lwz r11,24(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a29de4
	if (!ctx.cr6.eq) goto loc_82A29DE4;
loc_82A29BA0:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a29c80
	if (ctx.cr6.eq) goto loc_82A29C80;
	// lwz r11,40(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29c80
	if (ctx.cr6.eq) goto loc_82A29C80;
	// lwz r11,20(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29c18
	if (ctx.cr6.eq) goto loc_82A29C18;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A29BCC;
	sub_82A02F70(ctx, base);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r24,1
	ctx.r24.s64 = 1;
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// li r26,1
	ctx.r26.s64 = 1;
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r11,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r11.u32);
	// stw r31,40(r28)
	PPC_STORE_U32(ctx.r28.u32 + 40, ctx.r31.u32);
	// stw r31,40(r27)
	PPC_STORE_U32(ctx.r27.u32 + 40, ctx.r31.u32);
	// b 0x82a29d44
	goto loc_82A29D44;
loc_82A29C18:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a29c50
	if (ctx.cr6.eq) goto loc_82A29C50;
	// lwz r11,40(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29c50
	if (ctx.cr6.eq) goto loc_82A29C50;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r24,1
	ctx.r24.s64 = 1;
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// li r26,1
	ctx.r26.s64 = 1;
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r11,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r11.u32);
	// stw r31,40(r28)
	PPC_STORE_U32(ctx.r28.u32 + 40, ctx.r31.u32);
	// stw r31,40(r27)
	PPC_STORE_U32(ctx.r27.u32 + 40, ctx.r31.u32);
	// b 0x82a29d64
	goto loc_82A29D64;
loc_82A29C50:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// li r26,1
	ctx.r26.s64 = 1;
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// stw r31,40(r28)
	PPC_STORE_U32(ctx.r28.u32 + 40, ctx.r31.u32);
	// b 0x82a29d5c
	goto loc_82A29D5C;
loc_82A29C80:
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,20(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29cf8
	if (ctx.cr6.eq) goto loc_82A29CF8;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A29CAC;
	sub_82A02F70(ctx, base);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r24,1
	ctx.r24.s64 = 1;
	// lwz r11,4(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4);
	// li r26,1
	ctx.r26.s64 = 1;
	// stw r10,4(r28)
	PPC_STORE_U32(ctx.r28.u32 + 4, ctx.r10.u32);
	// stw r11,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r11.u32);
	// stw r31,40(r28)
	PPC_STORE_U32(ctx.r28.u32 + 40, ctx.r31.u32);
	// stw r31,40(r27)
	PPC_STORE_U32(ctx.r27.u32 + 40, ctx.r31.u32);
	// b 0x82a29d44
	goto loc_82A29D44;
loc_82A29CF8:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a29d30
	if (ctx.cr6.eq) goto loc_82A29D30;
	// lwz r11,40(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d30
	if (ctx.cr6.eq) goto loc_82A29D30;
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 4);
	// li r24,1
	ctx.r24.s64 = 1;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r25,1
	ctx.r25.s64 = 1;
	// stw r10,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r10.u32);
	// stw r11,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r11.u32);
	// stw r31,40(r30)
	PPC_STORE_U32(ctx.r30.u32 + 40, ctx.r31.u32);
	// stw r31,40(r27)
	PPC_STORE_U32(ctx.r27.u32 + 40, ctx.r31.u32);
	// b 0x82a29d64
	goto loc_82A29D64;
loc_82A29D30:
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
	// lwz r11,40(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a29d64
	if (ctx.cr6.eq) goto loc_82A29D64;
loc_82A29D44:
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// li r25,1
	ctx.r25.s64 = 1;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// stw r10,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r10.u32);
	// stw r11,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r11.u32);
	// stw r31,40(r30)
	PPC_STORE_U32(ctx.r30.u32 + 40, ctx.r31.u32);
loc_82A29D5C:
	// stw r31,40(r29)
	PPC_STORE_U32(ctx.r29.u32 + 40, ctx.r31.u32);
	// li r23,1
	ctx.r23.s64 = 1;
loc_82A29D64:
	// clrlwi r11,r26,24
	ctx.r11.u64 = ctx.r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29d84
	if (ctx.cr6.eq) goto loc_82A29D84;
	// cmplw cr6,r28,r21
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r21.u32, ctx.xer);
	// beq cr6,0x82a29d84
	if (ctx.cr6.eq) goto loc_82A29D84;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A29D84;
	sub_82A29988(ctx, base);
loc_82A29D84:
	// clrlwi r11,r25,24
	ctx.r11.u64 = ctx.r25.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29da4
	if (ctx.cr6.eq) goto loc_82A29DA4;
	// cmplw cr6,r30,r21
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r21.u32, ctx.xer);
	// beq cr6,0x82a29da4
	if (ctx.cr6.eq) goto loc_82A29DA4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A29DA4;
	sub_82A29988(ctx, base);
loc_82A29DA4:
	// clrlwi r11,r24,24
	ctx.r11.u64 = ctx.r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29dc4
	if (ctx.cr6.eq) goto loc_82A29DC4;
	// cmplw cr6,r27,r21
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, ctx.r21.u32, ctx.xer);
	// beq cr6,0x82a29dc4
	if (ctx.cr6.eq) goto loc_82A29DC4;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A29DC4;
	sub_82A29988(ctx, base);
loc_82A29DC4:
	// clrlwi r11,r23,24
	ctx.r11.u64 = ctx.r23.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29de4
	if (ctx.cr6.eq) goto loc_82A29DE4;
	// cmplw cr6,r29,r21
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r21.u32, ctx.xer);
	// beq cr6,0x82a29de4
	if (ctx.cr6.eq) goto loc_82A29DE4;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A29DE4;
	sub_82A29988(ctx, base);
loc_82A29DE4:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A29DF0;
	sub_82A29988(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A29DF8"))) PPC_WEAK_FUNC(sub_82A29DF8);
PPC_FUNC_IMPL(__imp__sub_82A29DF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82A29E00;
	__savegprlr_23(ctx, base);
	// stwu r1,-1200(r1)
	ea = -1200 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// mr r26,r27
	ctx.r26.u64 = ctx.r27.u64;
	// lwz r11,3992(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// lbz r25,4029(r31)
	ctx.r25.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4029);
	// lwz r30,8(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a29e40
	if (ctx.cr6.eq) goto loc_82A29E40;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29E38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// b 0x82a29e44
	goto loc_82A29E44;
loc_82A29E40:
	// stb r27,4029(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4029, ctx.r27.u8);
loc_82A29E44:
	// lbz r11,4029(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4029);
	// li r24,1
	ctx.r24.s64 = 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29fc8
	if (ctx.cr6.eq) goto loc_82A29FC8;
	// lwz r4,4032(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4032);
	// cmpw cr6,r4,r26
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r26.s32, ctx.xer);
	// bge cr6,0x82a29fc4
	if (!ctx.cr6.lt) goto loc_82A29FC4;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29E74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,4032(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4032);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4032(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4032, ctx.r11.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29E94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// li r6,1024
	ctx.r6.s64 = 1024;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r4,25332(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25332);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29EB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a127f0
	ctx.lr = 0x82A29EC0;
	sub_82A127F0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A29EC8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29ED8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29EE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29F00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29F18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpd cr6,r23,r3
	ctx.cr6.compare<int64_t>(ctx.r23.s64, ctx.r3.s64, ctx.xer);
	// beq cr6,0x82a29fa8
	if (ctx.cr6.eq) goto loc_82A29FA8;
	// clrlwi r11,r28,24
	ctx.r11.u64 = ctx.r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a29fa8
	if (ctx.cr6.eq) goto loc_82A29FA8;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// stb r27,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r27.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A29F38;
	sub_82A02AC0(ctx, base);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A29F3C;
	sub_82A0BFB0(ctx, base);
	// stw r27,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r27.u32);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A29F44;
	sub_82A0BFB0(ctx, base);
	// stw r27,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r27.u32);
	// lwz r11,3992(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// stw r27,2832(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2832, ctx.r27.u32);
	// stb r24,1696(r31)
	PPC_STORE_U8(ctx.r31.u32 + 1696, ctx.r24.u8);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a29f68
	if (!ctx.cr6.eq) goto loc_82A29F68;
	// li r29,-1
	ctx.r29.s64 = -1;
	// b 0x82a29f80
	goto loc_82A29F80;
loc_82A29F68:
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29F7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
loc_82A29F80:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A29F94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A29FA4;
	sub_82A27BC8(ctx, base);
	// b 0x82a29fc8
	goto loc_82A29FC8;
loc_82A29FA8:
	// lwz r11,4032(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4032);
	// cmpw cr6,r11,r26
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r26.s32, ctx.xer);
	// bge cr6,0x82a29fc4
	if (!ctx.cr6.lt) goto loc_82A29FC4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a29df8
	ctx.lr = 0x82A29FBC;
	sub_82A29DF8(ctx, base);
	// addi r1,r1,1200
	ctx.r1.s64 = ctx.r1.s64 + 1200;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_82A29FC4:
	// stb r27,4029(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4029, ctx.r27.u8);
loc_82A29FC8:
	// lbz r11,4029(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4029);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2a074
	if (!ctx.cr6.eq) goto loc_82A2A074;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a004
	if (!ctx.cr6.eq) goto loc_82A2A004;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A29FEC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a29ffc
	if (ctx.cr6.eq) goto loc_82A29FFC;
	// bl 0x82a08db0
	ctx.lr = 0x82A29FF8;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a000
	goto loc_82A2A000;
loc_82A29FFC:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A2A000:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2A004:
	// stw r27,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r27.u32);
	// clrlwi r10,r25,24
	ctx.r10.u64 = ctx.r25.u32 & 0xFF;
	// lwz r11,12304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// stw r27,24(r11)
	PPC_STORE_U32(ctx.r11.u32 + 24, ctx.r27.u32);
	// lbz r11,4029(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4029);
	// cmplw cr6,r10,r11
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x82a2a03c
	if (!ctx.cr6.eq) goto loc_82A2A03C;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r31,12
	ctx.r4.s64 = ctx.r31.s64 + 12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a28df0
	ctx.lr = 0x82A2A034;
	sub_82A28DF0(ctx, base);
	// addi r1,r1,1200
	ctx.r1.s64 = ctx.r1.s64 + 1200;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_82A2A03C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r24,4429(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4429, ctx.r24.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A2A048;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r10,r31,4432
	ctx.r10.s64 = ctx.r31.s64 + 4432;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
loc_82A2A074:
	// addi r1,r1,1200
	ctx.r1.s64 = ctx.r1.s64 + 1200;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A080"))) PPC_WEAK_FUNC(sub_82A2A080);
PPC_FUNC_IMPL(__imp__sub_82A2A080) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A2A088;
	__savegprlr_27(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// bl 0x82a1cc30
	ctx.lr = 0x82A2A09C;
	sub_82A1CC30(ctx, base);
	// li r31,0
	ctx.r31.s64 = 0;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// lwz r27,12340(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12340);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// bl 0x82a36e90
	ctx.lr = 0x82A2A0C0;
	sub_82A36E90(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82983f48
	ctx.lr = 0x82A2A0D0;
	sub_82983F48(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a0e4
	if (ctx.cr6.eq) goto loc_82A2A0E4;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x82a2a0ec
	goto loc_82A2A0EC;
loc_82A2A0E4:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
loc_82A2A0EC:
	// li r5,6
	ctx.r5.s64 = 6;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82406620
	ctx.lr = 0x82A2A0F8;
	sub_82406620(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2A100;
	sub_82309A60(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, ctx.r31.u8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a2a178
	if (!ctx.cr6.gt) goto loc_82A2A178;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r3,r11,6184
	ctx.r3.s64 = ctx.r11.s64 + 6184;
	// bl 0x82e28c50
	ctx.lr = 0x82A2A120;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a2a178
	if (ctx.cr6.eq) goto loc_82A2A178;
	// lis r11,-32095
	ctx.r11.s64 = -2103377920;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r5,68
	ctx.r5.s64 = 68;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r6,r11,-23144
	ctx.r6.s64 = ctx.r11.s64 + -23144;
	// bl 0x82406780
	ctx.lr = 0x82A2A140;
	sub_82406780(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a2a188
	if (!ctx.cr6.gt) goto loc_82A2A188;
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
loc_82A2A150:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// add r4,r30,r11
	ctx.r4.u64 = ctx.r30.u64 + ctx.r11.u64;
	// bl 0x82a12fb8
	ctx.lr = 0x82A2A160;
	sub_82A12FB8(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r30,r30,68
	ctx.r30.s64 = ctx.r30.s64 + 68;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a2a150
	if (ctx.cr6.lt) goto loc_82A2A150;
	// b 0x82a2a188
	goto loc_82A2A188;
loc_82A2A178:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a1b8d0
	ctx.lr = 0x82A2A188;
	sub_82A1B8D0(ctx, base);
loc_82A2A188:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82a34bc8
	ctx.lr = 0x82A2A198;
	sub_82A34BC8(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2a1d4
	if (ctx.cr6.eq) goto loc_82A2A1D4;
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a1c0
	if (!ctx.cr6.eq) goto loc_82A2A1C0;
	// bl 0x82545cc0
	ctx.lr = 0x82A2A1BC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82A2A1C0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2A1D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2A1D4:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A1E0"))) PPC_WEAK_FUNC(sub_82A2A1E0);
PPC_FUNC_IMPL(__imp__sub_82A2A1E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12340);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a20c
	if (ctx.cr6.eq) goto loc_82A2A20C;
	// bl 0x82a1e700
	ctx.lr = 0x82A2A204;
	sub_82A1E700(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12340(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12340, ctx.r11.u32);
loc_82A2A20C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2A220"))) PPC_WEAK_FUNC(sub_82A2A220);
PPC_FUNC_IMPL(__imp__sub_82A2A220) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,396
	ctx.r3.s64 = 396;
	// bl 0x82545e80
	ctx.lr = 0x82A2A23C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a2c0
	if (ctx.cr6.eq) goto loc_82A2A2C0;
	// lis r10,-32092
	ctx.r10.s64 = -2103181312;
	// lis r6,1032
	ctx.r6.s64 = 67633152;
	// addi r7,r10,-32544
	ctx.r7.s64 = ctx.r10.s64 + -32544;
	// ori r6,r6,16516
	ctx.r6.u64 = ctx.r6.u64 | 16516;
	// li r10,16384
	ctx.r10.s64 = 16384;
	// lis r8,-32186
	ctx.r8.s64 = -2109341696;
	// rldimi r10,r6,32,0
	ctx.r10.u64 = (__builtin_rotateleft64(ctx.r6.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// lis r9,-32186
	ctx.r9.s64 = -2109341696;
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
	// mr r6,r10
	ctx.r6.u64 = ctx.r10.u64;
	// addi r8,r8,-6712
	ctx.r8.s64 = ctx.r8.s64 + -6712;
	// addi r9,r9,-6720
	ctx.r9.s64 = ctx.r9.s64 + -6720;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r11,r11,4048
	ctx.r11.s64 = ctx.r11.s64 + 4048;
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// stw r8,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r8.u32);
	// addi r10,r10,-28540
	ctx.r10.s64 = ctx.r10.s64 + -28540;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r8,r11,1
	ctx.r8.s64 = ctx.r11.s64 + 1;
	// mr r9,r31
	ctx.r9.u64 = ctx.r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,12
	ctx.r6.s64 = 12;
	// li r5,116
	ctx.r5.s64 = 116;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82436bb8
	ctx.lr = 0x82A2A2AC;
	sub_82436BB8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82A2A2C0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2A2D8"))) PPC_WEAK_FUNC(sub_82A2A2D8);
PPC_FUNC_IMPL(__imp__sub_82A2A2D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A2E0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r30,-1
	ctx.r30.s64 = -1;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a320
	if (!ctx.cr6.eq) goto loc_82A2A320;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2A308;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a318
	if (ctx.cr6.eq) goto loc_82A2A318;
	// bl 0x82a08db0
	ctx.lr = 0x82A2A314;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a31c
	goto loc_82A2A31C;
loc_82A2A318:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A31C:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2A320:
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a340
	if (ctx.cr6.eq) goto loc_82A2A340;
	// bl 0x82a186e0
	ctx.lr = 0x82A2A330;
	sub_82A186E0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02cd0
	ctx.lr = 0x82A2A33C;
	sub_82A02CD0(ctx, base);
	// lwz r30,4(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_82A2A340:
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a26e90
	ctx.lr = 0x82A2A354;
	sub_82A26E90(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a39c
	if (ctx.cr6.eq) goto loc_82A2A39C;
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
loc_82A2A364:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x82a2a388
	if (ctx.cr6.eq) goto loc_82A2A388;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// blt cr6,0x82a2a364
	if (ctx.cr6.lt) goto loc_82A2A364;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2A388:
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r3,r11,r28
	PPC_STORE_U32(ctx.r11.u32 + ctx.r28.u32, ctx.r3.u32);
	// lwz r11,16(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,16(r28)
	PPC_STORE_U32(ctx.r28.u32 + 16, ctx.r11.u32);
loc_82A2A39C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A3A8"))) PPC_WEAK_FUNC(sub_82A2A3A8);
PPC_FUNC_IMPL(__imp__sub_82A2A3A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A3B0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r3,-1
	ctx.r3.s64 = -1;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// bl 0x82a26e90
	ctx.lr = 0x82A2A3D0;
	sub_82A26E90(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2a41c
	if (ctx.cr6.eq) goto loc_82A2A41C;
	// li r11,0
	ctx.r11.s64 = 0;
	// addi r10,r31,20
	ctx.r10.s64 = ctx.r31.s64 + 20;
loc_82A2A3E4:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x82a2a404
	if (ctx.cr6.eq) goto loc_82A2A404;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// blt cr6,0x82a2a3e4
	if (ctx.cr6.lt) goto loc_82A2A3E4;
	// b 0x82a2a41c
	goto loc_82A2A41C;
loc_82A2A404:
	// addi r11,r11,5
	ctx.r11.s64 = ctx.r11.s64 + 5;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r30,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r30.u32);
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r11.u32);
loc_82A2A41C:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a04698
	ctx.lr = 0x82A2A430;
	sub_82A04698(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A440"))) PPC_WEAK_FUNC(sub_82A2A440);
PPC_FUNC_IMPL(__imp__sub_82A2A440) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A448;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
loc_82A2A45C:
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a474
	if (ctx.cr6.eq) goto loc_82A2A474;
	// lwz r9,592(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 592);
	// cmpw cr6,r9,r29
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r29.s32, ctx.xer);
	// beq cr6,0x82a2a4dc
	if (ctx.cr6.eq) goto loc_82A2A4DC;
loc_82A2A474:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// cmpwi cr6,r10,4
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 4, ctx.xer);
	// blt cr6,0x82a2a45c
	if (ctx.cr6.lt) goto loc_82A2A45C;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a4b8
	if (!ctx.cr6.eq) goto loc_82A2A4B8;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2A4A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a4b0
	if (ctx.cr6.eq) goto loc_82A2A4B0;
	// bl 0x82a08db0
	ctx.lr = 0x82A2A4AC;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a4b4
	goto loc_82A2A4B4;
loc_82A2A4B0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A4B4:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2A4B8:
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2a4d8
	if (!ctx.cr6.eq) goto loc_82A2A4D8;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82a2a2d8
	ctx.lr = 0x82A2A4D0;
	sub_82A2A2D8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2A4D8:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_82A2A4DC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A4E8"))) PPC_WEAK_FUNC(sub_82A2A4E8);
PPC_FUNC_IMPL(__imp__sub_82A2A4E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A4F0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r28,20
	ctx.r11.s64 = ctx.r28.s64 + 20;
loc_82A2A504:
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a51c
	if (ctx.cr6.eq) goto loc_82A2A51C;
	// lwz r9,596(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 596);
	// cmpw cr6,r9,r29
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r29.s32, ctx.xer);
	// beq cr6,0x82a2a588
	if (ctx.cr6.eq) goto loc_82A2A588;
loc_82A2A51C:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// blt cr6,0x82a2a504
	if (ctx.cr6.lt) goto loc_82A2A504;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a560
	if (!ctx.cr6.eq) goto loc_82A2A560;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2A548;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a558
	if (ctx.cr6.eq) goto loc_82A2A558;
	// bl 0x82a08db0
	ctx.lr = 0x82A2A554;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a55c
	goto loc_82A2A55C;
loc_82A2A558:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A55C:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2A560:
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2a584
	if (!ctx.cr6.eq) goto loc_82A2A584;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82a2a3a8
	ctx.lr = 0x82A2A57C;
	sub_82A2A3A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2A584:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_82A2A588:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A590"))) PPC_WEAK_FUNC(sub_82A2A590);
PPC_FUNC_IMPL(__imp__sub_82A2A590) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A2A598;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2A5AC;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// li r27,0
	ctx.r27.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// ble cr6,0x82a2a624
	if (!ctx.cr6.gt) goto loc_82A2A624;
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
loc_82A2A5C4:
	// lwz r11,60(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 60);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r30,r11,r29
	ctx.r30.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r4,592(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 592);
	// bl 0x82a2a4e8
	ctx.lr = 0x82A2A5D8;
	sub_82A2A4E8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a610
	if (ctx.cr6.eq) goto loc_82A2A610;
	// lwz r11,116(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 116);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a5fc
	if (ctx.cr6.eq) goto loc_82A2A5FC;
	// lwz r11,44(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 44);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2a610
	if (!ctx.cr6.eq) goto loc_82A2A610;
	// stw r27,116(r31)
	PPC_STORE_U32(ctx.r31.u32 + 116, ctx.r27.u32);
loc_82A2A5FC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2A610;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2A610:
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r29,r29,596
	ctx.r29.s64 = ctx.r29.s64 + 596;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a2a5c4
	if (ctx.cr6.lt) goto loc_82A2A5C4;
loc_82A2A624:
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// stw r27,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r27.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2A634;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A640"))) PPC_WEAK_FUNC(sub_82A2A640);
PPC_FUNC_IMPL(__imp__sub_82A2A640) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A648;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a688
	if (!ctx.cr6.eq) goto loc_82A2A688;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2A670;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a680
	if (ctx.cr6.eq) goto loc_82A2A680;
	// bl 0x82a08db0
	ctx.lr = 0x82A2A67C;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a684
	goto loc_82A2A684;
loc_82A2A680:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A684:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2A688:
	// li r11,1
	ctx.r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r11.u32);
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// stw r10,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r10.u32);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a6b0
	if (ctx.cr6.eq) goto loc_82A2A6B0;
	// lwz r30,0(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82a2a6b8
	goto loc_82A2A6B8;
loc_82A2A6B0:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A2A6B8:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a6f4
	if (!ctx.cr6.eq) goto loc_82A2A6F4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2A6D0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a6e0
	if (ctx.cr6.eq) goto loc_82A2A6E0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2A6DC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2a6e4
	goto loc_82A2A6E4;
loc_82A2A6E0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A6E4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2A6F4:
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a28df0
	ctx.lr = 0x82A2A704;
	sub_82A28DF0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A710"))) PPC_WEAK_FUNC(sub_82A2A710);
PPC_FUNC_IMPL(__imp__sub_82A2A710) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2A718;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a758
	if (!ctx.cr6.eq) goto loc_82A2A758;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2A740;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a750
	if (ctx.cr6.eq) goto loc_82A2A750;
	// bl 0x82a08db0
	ctx.lr = 0x82A2A74C;
	sub_82A08DB0(ctx, base);
	// b 0x82a2a754
	goto loc_82A2A754;
loc_82A2A750:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A754:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2A758:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r11.u32);
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// stw r10,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r10.u32);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a780
	if (ctx.cr6.eq) goto loc_82A2A780;
	// lwz r30,0(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82a2a788
	goto loc_82A2A788;
loc_82A2A780:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A2A788:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a7c4
	if (!ctx.cr6.eq) goto loc_82A2A7C4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2A7A0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a7b0
	if (ctx.cr6.eq) goto loc_82A2A7B0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2A7AC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2a7b4
	goto loc_82A2A7B4;
loc_82A2A7B0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A7B4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2A7C4:
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a28df0
	ctx.lr = 0x82A2A7D4;
	sub_82A28DF0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A7E0"))) PPC_WEAK_FUNC(sub_82A2A7E0);
PPC_FUNC_IMPL(__imp__sub_82A2A7E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,4(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2a808
	if (ctx.cr6.eq) goto loc_82A2A808;
	// lwz r30,0(r4)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// b 0x82a2a810
	goto loc_82A2A810;
loc_82A2A808:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A2A810:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a84c
	if (!ctx.cr6.eq) goto loc_82A2A84C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2A828;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a838
	if (ctx.cr6.eq) goto loc_82A2A838;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2A834;
	sub_82A13FE0(ctx, base);
	// b 0x82a2a83c
	goto loc_82A2A83C;
loc_82A2A838:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2A83C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2A84C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a29758
	ctx.lr = 0x82A2A854;
	sub_82A29758(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2A870"))) PPC_WEAK_FUNC(sub_82A2A870);
PPC_FUNC_IMPL(__imp__sub_82A2A870) {
	PPC_FUNC_PROLOGUE();
	// cmpwi cr6,r4,-604
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -604, ctx.xer);
	// bgt cr6,0x82a2a8c4
	if (ctx.cr6.gt) goto loc_82A2A8C4;
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// addi r11,r4,612
	ctx.r11.s64 = ctx.r4.s64 + 612;
	// cmplwi cr6,r11,7
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 7, ctx.xer);
	// bgt cr6,0x82a2a8ec
	if (ctx.cr6.gt) goto loc_82A2A8EC;
	// lis r12,-32093
	ctx.r12.s64 = -2103246848;
	// addi r12,r12,-22368
	ctx.r12.s64 = ctx.r12.s64 + -22368;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_82A2A8E0;
	case 1:
		goto loc_82A2A8E0;
	case 2:
		goto loc_82A2A8EC;
	case 3:
		goto loc_82A2A8EC;
	case 4:
		goto loc_82A2A8EC;
	case 5:
		goto loc_82A2A8EC;
	case 6:
		goto loc_82A2A8C0;
	case 7:
		goto loc_82A2A8E0;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-22304(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22304);
	// lwz r21,-22304(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22304);
	// lwz r21,-22292(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22292);
	// lwz r21,-22292(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22292);
	// lwz r21,-22292(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22292);
	// lwz r21,-22292(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22292);
	// lwz r21,-22336(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22336);
	// lwz r21,-22304(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -22304);
loc_82A2A8C0:
	// b 0x82a27e80
	sub_82A27E80(ctx, base);
	return;
loc_82A2A8C4:
	// cmpwi cr6,r4,-601
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -601, ctx.xer);
	// bgt cr6,0x82a2a8e4
	if (ctx.cr6.gt) goto loc_82A2A8E4;
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// cmpwi cr6,r4,-603
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -603, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
	// cmpwi cr6,r4,-602
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -602, ctx.xer);
	// bne cr6,0x82a2a8ec
	if (!ctx.cr6.eq) goto loc_82A2A8EC;
loc_82A2A8E0:
	// blr 
	return;
loc_82A2A8E4:
	// cmpwi cr6,r4,-102
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -102, ctx.xer);
	// beqlr cr6
	if (ctx.cr6.eq) return;
loc_82A2A8EC:
	// b 0x82a27e80
	sub_82A27E80(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2A8F0"))) PPC_WEAK_FUNC(sub_82A2A8F0);
PPC_FUNC_IMPL(__imp__sub_82A2A8F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82A2A8F8;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r25,0
	ctx.r25.s64 = 0;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// stb r25,16(r31)
	PPC_STORE_U8(ctx.r31.u32 + 16, ctx.r25.u8);
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// lwz r3,12324(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12324);
	// lis r24,-31969
	ctx.r24.s64 = -2095120384;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2a954
	if (!ctx.cr6.eq) goto loc_82A2A954;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2A934;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2a944
	if (ctx.cr6.eq) goto loc_82A2A944;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2A940;
	sub_82A13FE0(ctx, base);
	// b 0x82a2a948
	goto loc_82A2A948;
loc_82A2A944:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_82A2A948:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r24)
	PPC_STORE_U8(ctx.r24.u32 + 12328, ctx.r11.u8);
loc_82A2A954:
	// li r5,50
	ctx.r5.s64 = 50;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,2734
	ctx.r3.s64 = ctx.r3.s64 + 2734;
	// bl 0x82e29500
	ctx.lr = 0x82A2A964;
	sub_82E29500(ctx, base);
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bne cr6,0x82a2ab6c
	if (!ctx.cr6.eq) goto loc_82A2AB6C;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2A978;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,17(r31)
	PPC_STORE_U8(ctx.r31.u32 + 17, ctx.r11.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A2A98C;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2A9A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2aa20
	if (ctx.cr6.eq) goto loc_82A2AA20;
loc_82A2A9AC:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2A9C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2aa00
	if (ctx.cr6.eq) goto loc_82A2AA00;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2A9E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2aa00
	if (ctx.cr6.eq) goto loc_82A2AA00;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2AA00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2AA00:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2AA18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplw cr6,r31,r3
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r3.u32, ctx.xer);
	// blt cr6,0x82a2a9ac
	if (ctx.cr6.lt) goto loc_82A2A9AC;
loc_82A2AA20:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82239560
	ctx.lr = 0x82A2AA2C;
	sub_82239560(ctx, base);
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2aa60
	if (!ctx.cr6.eq) goto loc_82A2AA60;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2AA44;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2aa58
	if (ctx.cr6.eq) goto loc_82A2AA58;
	// bl 0x82a08db0
	ctx.lr = 0x82A2AA50;
	sub_82A08DB0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// b 0x82a2aa5c
	goto loc_82A2AA5C;
loc_82A2AA58:
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_82A2AA5C:
	// stw r11,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r11.u32);
loc_82A2AA60:
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// addi r4,r1,81
	ctx.r4.s64 = ctx.r1.s64 + 81;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// stw r10,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r10.u32);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r10,r11,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// stw r10,44(r11)
	PPC_STORE_U32(ctx.r11.u32 + 44, ctx.r10.u32);
	// bl 0x82239560
	ctx.lr = 0x82A2AA94;
	sub_82239560(ctx, base);
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2aac4
	if (!ctx.cr6.eq) goto loc_82A2AAC4;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2AAA8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2aabc
	if (ctx.cr6.eq) goto loc_82A2AABC;
	// bl 0x82a08db0
	ctx.lr = 0x82A2AAB4;
	sub_82A08DB0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// b 0x82a2aac0
	goto loc_82A2AAC0;
loc_82A2AABC:
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_82A2AAC0:
	// stw r11,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r11.u32);
loc_82A2AAC4:
	// lbz r10,81(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 81);
	// li r3,12
	ctx.r3.s64 = 12;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// stw r10,52(r11)
	PPC_STORE_U32(ctx.r11.u32 + 52, ctx.r10.u32);
	// bl 0x82545e80
	ctx.lr = 0x82A2AAE0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ab04
	if (ctx.cr6.eq) goto loc_82A2AB04;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r25,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r25.u32);
	// addi r11,r11,-4456
	ctx.r11.s64 = ctx.r11.s64 + -4456;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2ab08
	goto loc_82A2AB08;
loc_82A2AB04:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82A2AB08:
	// lwz r3,12324(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2abb0
	if (!ctx.cr6.eq) goto loc_82A2ABB0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2AB1C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ab48
	if (ctx.cr6.eq) goto loc_82A2AB48;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2AB28;
	sub_82A13FE0(ctx, base);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12324, ctx.r3.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// stb r11,12328(r24)
	PPC_STORE_U8(ctx.r24.u32 + 12328, ctx.r11.u8);
	// bl 0x82a02300
	ctx.lr = 0x82A2AB40;
	sub_82A02300(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82A2AB48:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// stw r3,12324(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12324, ctx.r3.u32);
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// stb r11,12328(r24)
	PPC_STORE_U8(ctx.r24.u32 + 12328, ctx.r11.u8);
	// bl 0x82a02300
	ctx.lr = 0x82A2AB64;
	sub_82A02300(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82A2AB6C:
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2a870
	ctx.lr = 0x82A2AB7C;
	sub_82A2A870(ctx, base);
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A2AB84;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2aba8
	if (ctx.cr6.eq) goto loc_82A2ABA8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r29.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r28,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r28.u32);
	// addi r11,r11,-4456
	ctx.r11.s64 = ctx.r11.s64 + -4456;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2abac
	goto loc_82A2ABAC;
loc_82A2ABA8:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82A2ABAC:
	// bl 0x82a186e0
	ctx.lr = 0x82A2ABB0;
	sub_82A186E0(ctx, base);
loc_82A2ABB0:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2ABBC;
	sub_82A02300(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2ABC8"))) PPC_WEAK_FUNC(sub_82A2ABC8);
PPC_FUNC_IMPL(__imp__sub_82A2ABC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2ABD0;
	__savegprlr_28(ctx, base);
	// stwu r1,-1184(r1)
	ea = -1184 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// stb r11,16(r29)
	PPC_STORE_U8(ctx.r29.u32 + 16, ctx.r11.u8);
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2ac24
	if (!ctx.cr6.eq) goto loc_82A2AC24;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2AC00;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ac10
	if (ctx.cr6.eq) goto loc_82A2AC10;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2AC0C;
	sub_82A13FE0(ctx, base);
	// b 0x82a2ac14
	goto loc_82A2AC14;
loc_82A2AC10:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2AC14:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2AC24:
	// li r5,50
	ctx.r5.s64 = 50;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r3,2734
	ctx.r3.s64 = ctx.r3.s64 + 2734;
	// bl 0x82e29500
	ctx.lr = 0x82A2AC34;
	sub_82E29500(ctx, base);
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// bne cr6,0x82a2adb0
	if (!ctx.cr6.eq) goto loc_82A2ADB0;
	// lwz r11,20(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2AC48;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,20(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,17(r29)
	PPC_STORE_U8(ctx.r29.u32 + 17, ctx.r11.u8);
	// bl 0x83157d24
	ctx.lr = 0x82A2AC5C;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,128(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 128);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2AC74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2AC8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r11,12304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2acc0
	if (!ctx.cr6.eq) goto loc_82A2ACC0;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2ACA4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2acb8
	if (ctx.cr6.eq) goto loc_82A2ACB8;
	// bl 0x82a08db0
	ctx.lr = 0x82A2ACB0;
	sub_82A08DB0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// b 0x82a2acbc
	goto loc_82A2ACBC;
loc_82A2ACB8:
	// li r11,0
	ctx.r11.s64 = 0;
loc_82A2ACBC:
	// stw r11,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r11.u32);
loc_82A2ACC0:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lwz r10,32(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A2ACE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,112(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 112);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2ACF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// li r6,1024
	ctx.r6.s64 = 1024;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// lwz r4,25332(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 25332);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2AD14;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2ad48
	if (!ctx.cr6.eq) goto loc_82A2AD48;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// addi r11,r11,4064
	ctx.r11.s64 = ctx.r11.s64 + 4064;
	// li r9,6
	ctx.r9.s64 = 6;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_82A2AD34:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bdnz 0x82a2ad34
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_82A2AD34;
loc_82A2AD48:
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x82545e80
	ctx.lr = 0x82A2AD50;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2ad94
	if (ctx.cr6.eq) goto loc_82A2AD94;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r10,-32229
	ctx.r10.s64 = -2112159744;
	// addi r11,r11,-4452
	ctx.r11.s64 = ctx.r11.s64 + -4452;
	// addi r4,r10,-29761
	ctx.r4.s64 = ctx.r10.s64 + -29761;
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2AD7C;
	sub_82E2AB28(ctx, base);
	// bl 0x82a186e0
	ctx.lr = 0x82A2AD80;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2AD8C;
	sub_82A02300(ctx, base);
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2AD94:
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82a186e0
	ctx.lr = 0x82A2AD9C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2ADA8;
	sub_82A02300(ctx, base);
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2ADB0:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addi r4,r11,-27624
	ctx.r4.s64 = ctx.r11.s64 + -27624;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82e2b400
	ctx.lr = 0x82A2ADC4;
	sub_82E2B400(ctx, base);
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x82545e80
	ctx.lr = 0x82A2ADCC;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2adf8
	if (ctx.cr6.eq) goto loc_82A2ADF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r11,r11,-4452
	ctx.r11.s64 = ctx.r11.s64 + -4452;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2ADF4;
	sub_82E2AB28(ctx, base);
	// b 0x82a2adfc
	goto loc_82A2ADFC;
loc_82A2ADF8:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A2ADFC:
	// bl 0x82a186e0
	ctx.lr = 0x82A2AE00;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2AE0C;
	sub_82A02300(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2a870
	ctx.lr = 0x82A2AE1C;
	sub_82A2A870(ctx, base);
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2AE28"))) PPC_WEAK_FUNC(sub_82A2AE28);
PPC_FUNC_IMPL(__imp__sub_82A2AE28) {
	PPC_FUNC_PROLOGUE();
	// b 0x82a27e80
	sub_82A27E80(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2AE30"))) PPC_WEAK_FUNC(sub_82A2AE30);
PPC_FUNC_IMPL(__imp__sub_82A2AE30) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// bl 0x82a27e80
	ctx.lr = 0x82A2AE4C;
	sub_82A27E80(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// stb r11,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r11.u8);
	// beq cr6,0x82a2ae70
	if (ctx.cr6.eq) goto loc_82A2AE70;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-27624
	ctx.r4.s64 = ctx.r11.s64 + -27624;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82e2b400
	ctx.lr = 0x82A2AE70;
	sub_82E2B400(ctx, base);
loc_82A2AE70:
	// li r3,56
	ctx.r3.s64 = 56;
	// bl 0x82545e80
	ctx.lr = 0x82A2AE78;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2aea4
	if (ctx.cr6.eq) goto loc_82A2AEA4;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r11,r11,-4440
	ctx.r11.s64 = ctx.r11.s64 + -4440;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2AEA0;
	sub_82E2AB28(ctx, base);
	// b 0x82a2aea8
	goto loc_82A2AEA8;
loc_82A2AEA4:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A2AEA8:
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2aee4
	if (!ctx.cr6.eq) goto loc_82A2AEE4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2AEC0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2aed0
	if (ctx.cr6.eq) goto loc_82A2AED0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2AECC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2aed4
	goto loc_82A2AED4;
loc_82A2AED0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2AED4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2AEE4:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2AEF0;
	sub_82A02300(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2AF08"))) PPC_WEAK_FUNC(sub_82A2AF08);
PPC_FUNC_IMPL(__imp__sub_82A2AF08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2af5c
	if (!ctx.cr6.eq) goto loc_82A2AF5C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2AF38;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2af48
	if (ctx.cr6.eq) goto loc_82A2AF48;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2AF44;
	sub_82A13FE0(ctx, base);
	// b 0x82a2af4c
	goto loc_82A2AF4C;
loc_82A2AF48:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2AF4C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2AF5C:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a298a8
	ctx.lr = 0x82A2AF64;
	sub_82A298A8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2AF80"))) PPC_WEAK_FUNC(sub_82A2AF80);
PPC_FUNC_IMPL(__imp__sub_82A2AF80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2afd4
	if (!ctx.cr6.eq) goto loc_82A2AFD4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2AFB0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2afc0
	if (ctx.cr6.eq) goto loc_82A2AFC0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2AFBC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2afc4
	goto loc_82A2AFC4;
loc_82A2AFC0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2AFC4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2AFD4:
	// addi r4,r30,4
	ctx.r4.s64 = ctx.r30.s64 + 4;
	// bl 0x82a29a68
	ctx.lr = 0x82A2AFDC;
	sub_82A29A68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2AFF8"))) PPC_WEAK_FUNC(sub_82A2AFF8);
PPC_FUNC_IMPL(__imp__sub_82A2AFF8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31968
	ctx.r11.s64 = -2095054848;
	// addi r3,r11,23616
	ctx.r3.s64 = ctx.r11.s64 + 23616;
	// bl 0x82a280e0
	ctx.lr = 0x82A2B010;
	sub_82A280E0(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r3,12320(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12320, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2B028"))) PPC_WEAK_FUNC(sub_82A2B028);
PPC_FUNC_IMPL(__imp__sub_82A2B028) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12320);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b054
	if (ctx.cr6.eq) goto loc_82A2B054;
	// bl 0x82a241b8
	ctx.lr = 0x82A2B04C;
	sub_82A241B8(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12320(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12320, ctx.r11.u32);
loc_82A2B054:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2B068"))) PPC_WEAK_FUNC(sub_82A2B068);
PPC_FUNC_IMPL(__imp__sub_82A2B068) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e50
	ctx.lr = 0x82A2B070;
	__savegprlr_22(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82239808
	ctx.lr = 0x82A2B088;
	sub_82239808(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,-2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -2, ctx.xer);
	// bne cr6,0x82a2b0b0
	if (!ctx.cr6.eq) goto loc_82A2B0B0;
	// li r11,6
	ctx.r11.s64 = 6;
	// stw r11,172(r22)
	PPC_STORE_U32(ctx.r22.u32 + 172, ctx.r11.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// lfs f0,26344(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 26344);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,168(r22)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r22.u32 + 168, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
loc_82A2B0B0:
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bne cr6,0x82a2b184
	if (!ctx.cr6.eq) goto loc_82A2B184;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// bl 0x82239808
	ctx.lr = 0x82A2B0C4;
	sub_82239808(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82239628
	ctx.lr = 0x82A2B0D0;
	sub_82239628(ctx, base);
	// lwz r11,164(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 164);
	// lbz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// extsb r31,r10
	ctx.r31.s64 = ctx.r10.s8;
	// bl 0x83157d14
	ctx.lr = 0x82A2B0E4;
	__imp__RtlEnterCriticalSection(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// ble cr6,0x82a2b32c
	if (!ctx.cr6.gt) goto loc_82A2B32C;
	// addi r28,r22,56
	ctx.r28.s64 = ctx.r22.s64 + 56;
	// mr r26,r31
	ctx.r26.u64 = ctx.r31.u64;
loc_82A2B0F4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82239628
	ctx.lr = 0x82A2B100;
	sub_82239628(ctx, base);
	// lbz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
	// extsb r29,r11
	ctx.r29.s64 = ctx.r11.s8;
	// li r30,3
	ctx.r30.s64 = 3;
loc_82A2B110:
	// lwz r11,-20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -20);
	// cmpw cr6,r11,r29
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r29.s32, ctx.xer);
	// bne cr6,0x82a2b154
	if (!ctx.cr6.eq) goto loc_82A2B154;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2b154
	if (!ctx.cr6.eq) goto loc_82A2B154;
	// lwz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2B134;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// ble cr6,0x82a2b148
	if (!ctx.cr6.gt) goto loc_82A2B148;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
loc_82A2B148:
	// lwz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2B154;
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82A2B154:
	// addi r30,r30,-1
	ctx.r30.s64 = ctx.r30.s64 + -1;
	// addi r31,r31,36
	ctx.r31.s64 = ctx.r31.s64 + 36;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82a2b110
	if (!ctx.cr6.eq) goto loc_82A2B110;
	// addi r26,r26,-1
	ctx.r26.s64 = ctx.r26.s64 + -1;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// bne cr6,0x82a2b0f4
	if (!ctx.cr6.eq) goto loc_82A2B0F4;
	// lwz r11,164(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 164);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2B17C;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
loc_82A2B184:
	// addi r4,r1,81
	ctx.r4.s64 = ctx.r1.s64 + 81;
	// bl 0x82239628
	ctx.lr = 0x82A2B18C;
	sub_82239628(ctx, base);
	// lbz r11,81(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 81);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r4,r1,81
	ctx.r4.s64 = ctx.r1.s64 + 81;
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// subf r23,r11,r10
	ctx.r23.s64 = ctx.r10.s64 - ctx.r11.s64;
	// bl 0x82239628
	ctx.lr = 0x82A2B1A8;
	sub_82239628(ctx, base);
	// lbz r11,81(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 81);
	// extsb r26,r11
	ctx.r26.s64 = ctx.r11.s8;
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// ble cr6,0x82a2b338
	if (!ctx.cr6.gt) goto loc_82A2B338;
	// lwz r11,164(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 164);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2B1C4;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lis r10,-31968
	ctx.r10.s64 = -2095054848;
	// lwz r11,31560(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 31560);
	// clrlwi r9,r11,31
	ctx.r9.u64 = ctx.r11.u32 & 0x1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// lis r9,-31968
	ctx.r9.s64 = -2095054848;
	// addi r24,r9,24408
	ctx.r24.s64 = ctx.r9.s64 + 24408;
	// bne cr6,0x82a2b210
	if (!ctx.cr6.eq) goto loc_82A2B210;
	// ori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 | 1;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// li r31,11
	ctx.r31.s64 = 11;
	// stw r11,31560(r10)
	PPC_STORE_U32(ctx.r10.u32 + 31560, ctx.r11.u32);
loc_82A2B1F0:
	// bl 0x82a0bcd0
	ctx.lr = 0x82A2B1F4;
	sub_82A0BCD0(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r3,r3,596
	ctx.r3.s64 = ctx.r3.s64 + 596;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bge cr6,0x82a2b1f0
	if (!ctx.cr6.lt) goto loc_82A2B1F0;
	// lis r11,-31979
	ctx.r11.s64 = -2095775744;
	// addi r3,r11,16816
	ctx.r3.s64 = ctx.r11.s64 + 16816;
	// bl 0x82e29708
	ctx.lr = 0x82A2B210;
	sub_82E29708(ctx, base);
loc_82A2B210:
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// ble cr6,0x82a2b240
	if (!ctx.cr6.gt) goto loc_82A2B240;
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// mr r30,r24
	ctx.r30.u64 = ctx.r24.u64;
loc_82A2B220:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0f148
	ctx.lr = 0x82A2B230;
	sub_82A0F148(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r30,r30,596
	ctx.r30.s64 = ctx.r30.s64 + 596;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a2b220
	if (!ctx.cr6.eq) goto loc_82A2B220;
loc_82A2B240:
	// addi r31,r22,36
	ctx.r31.s64 = ctx.r22.s64 + 36;
	// li r25,3
	ctx.r25.s64 = 3;
	// li r27,0
	ctx.r27.s64 = 0;
loc_82A2B24C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x82a2b31c
	if (ctx.cr6.eq) goto loc_82A2B31C;
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2B268;
	__imp__RtlEnterCriticalSection(ctx, base);
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// ble cr6,0x82a2b310
	if (!ctx.cr6.gt) goto loc_82A2B310;
	// addi r30,r24,44
	ctx.r30.s64 = ctx.r24.s64 + 44;
loc_82A2B278:
	// lwz r11,548(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 548);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82a2b2dc
	if (!ctx.cr6.eq) goto loc_82A2B2DC;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bne cr6,0x82a2b2bc
	if (!ctx.cr6.eq) goto loc_82A2B2BC;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// ble cr6,0x82a2b2b8
	if (!ctx.cr6.gt) goto loc_82A2B2B8;
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a2b2b8
	if (ctx.cr6.eq) goto loc_82A2B2B8;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2b310
	if (!ctx.cr6.eq) goto loc_82A2B310;
	// stw r27,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r27.u32);
loc_82A2B2B8:
	// li r29,1
	ctx.r29.s64 = 1;
loc_82A2B2BC:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// ble cr6,0x82a2b2dc
	if (!ctx.cr6.gt) goto loc_82A2B2DC;
	// addi r5,r30,-44
	ctx.r5.s64 = ctx.r30.s64 + -44;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a24360
	ctx.lr = 0x82A2B2DC;
	sub_82A24360(ctx, base);
loc_82A2B2DC:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r30,r30,596
	ctx.r30.s64 = ctx.r30.s64 + 596;
	// cmpw cr6,r28,r26
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r26.s32, ctx.xer);
	// blt cr6,0x82a2b278
	if (ctx.cr6.lt) goto loc_82A2B278;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x82a2b310
	if (ctx.cr6.eq) goto loc_82A2B310;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82a28cc8
	ctx.lr = 0x82A2B300;
	sub_82A28CC8(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpw cr6,r23,r11
	ctx.cr6.compare<int32_t>(ctx.r23.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a2b310
	if (!ctx.cr6.gt) goto loc_82A2B310;
	// stw r23,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r23.u32);
loc_82A2B310:
	// lwz r11,32(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2B31C;
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82A2B31C:
	// addi r25,r25,-1
	ctx.r25.s64 = ctx.r25.s64 + -1;
	// addi r31,r31,36
	ctx.r31.s64 = ctx.r31.s64 + 36;
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// bne cr6,0x82a2b24c
	if (!ctx.cr6.eq) goto loc_82A2B24C;
loc_82A2B32C:
	// lwz r11,164(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 164);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2B338;
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82A2B338:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28ea0
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2B340"))) PPC_WEAK_FUNC(sub_82A2B340);
PPC_FUNC_IMPL(__imp__sub_82A2B340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e4c
	ctx.lr = 0x82A2B348;
	__savegprlr_21(ctx, base);
	// stfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -112, ctx.f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, ctx.f31.u64);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r26,0
	ctx.r26.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// bl 0x82b061d8
	ctx.lr = 0x82A2B368;
	sub_82B061D8(ctx, base);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// lbz r11,4406(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4406);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// li r21,1
	ctx.r21.s64 = 1;
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// lfd f30,-29544(r11)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r11.u32 + -29544);
	// fmul f31,f13,f0
	ctx.f31.f64 = ctx.f13.f64 * ctx.f0.f64;
	// beq cr6,0x82a2b3f4
	if (ctx.cr6.eq) goto loc_82A2B3F4;
	// lbz r11,4407(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4407);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b3f4
	if (ctx.cr6.eq) goto loc_82A2B3F4;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82b061d8
	ctx.lr = 0x82A2B3A8;
	sub_82B061D8(ctx, base);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r30)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r30.u32 + 24768);
	// lwz r11,4408(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4408);
	// lwz r10,4412(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4412);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// fmsub f0,f13,f0,f30
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f30.f64;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bge cr6,0x82a2b3f4
	if (!ctx.cr6.lt) goto loc_82A2B3F4;
	// stfd f31,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f31.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stb r26,4406(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4406, ctx.r26.u8);
	// stb r26,4407(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4407, ctx.r26.u8);
	// stb r21,4416(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4416, ctx.r21.u8);
	// stw r11,4408(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4408, ctx.r11.u32);
	// stw r10,4412(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4412, ctx.r10.u32);
loc_82A2B3F4:
	// lbz r11,4417(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4417);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b454
	if (ctx.cr6.eq) goto loc_82A2B454;
	// lbz r11,4418(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4418);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b454
	if (ctx.cr6.eq) goto loc_82A2B454;
	// addi r11,r31,4420
	ctx.r11.s64 = ctx.r31.s64 + 4420;
	// fsub f0,f31,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f31.f64 - ctx.f30.f64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bge cr6,0x82a2b454
	if (!ctx.cr6.lt) goto loc_82A2B454;
	// stfd f31,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f31.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r11,r31,4408
	ctx.r11.s64 = ctx.r31.s64 + 4408;
	// stb r26,4417(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4417, ctx.r26.u8);
	// stb r26,4418(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4418, ctx.r26.u8);
	// stb r21,4416(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4416, ctx.r21.u8);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
loc_82A2B454:
	// lbz r11,4405(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4405);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
	// lbz r11,4416(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4416);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b498
	if (ctx.cr6.eq) goto loc_82A2B498;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r10,r31,4408
	ctx.r10.s64 = ctx.r31.s64 + 4408;
	// lfd f0,4072(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4072);
	// fsub f0,f31,f0
	ctx.f0.f64 = ctx.f31.f64 - ctx.f0.f64;
	// lwz r11,0(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// blt cr6,0x82a2bb0c
	if (ctx.cr6.lt) goto loc_82A2BB0C;
loc_82A2B498:
	// lbz r11,4406(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4406);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b4d4
	if (ctx.cr6.eq) goto loc_82A2B4D4;
	// lbz r11,4407(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4407);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2b4d4
	if (!ctx.cr6.eq) goto loc_82A2B4D4;
	// addi r11,r31,4408
	ctx.r11.s64 = ctx.r31.s64 + 4408;
	// fsub f0,f31,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f31.f64 - ctx.f30.f64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// blt cr6,0x82a2bb0c
	if (ctx.cr6.lt) goto loc_82A2BB0C;
loc_82A2B4D4:
	// lbz r11,4417(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4417);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b510
	if (ctx.cr6.eq) goto loc_82A2B510;
	// lbz r11,4418(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4418);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2b510
	if (!ctx.cr6.eq) goto loc_82A2B510;
	// addi r11,r31,4420
	ctx.r11.s64 = ctx.r31.s64 + 4420;
	// fsub f0,f31,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f31.f64 - ctx.f30.f64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// blt cr6,0x82a2bb0c
	if (ctx.cr6.lt) goto loc_82A2BB0C;
loc_82A2B510:
	// bl 0x82219f20
	ctx.lr = 0x82A2B514;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B524;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b558
	if (ctx.cr6.eq) goto loc_82A2B558;
	// bl 0x82219f20
	ctx.lr = 0x82A2B530;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B540;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B550;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
loc_82A2B558:
	// bl 0x82219f20
	ctx.lr = 0x82A2B55C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B56C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b5a0
	if (ctx.cr6.eq) goto loc_82A2B5A0;
	// bl 0x82219f20
	ctx.lr = 0x82A2B578;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B588;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B598;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
loc_82A2B5A0:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2B5A4;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
	// lbz r11,4580(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4580);
	// lis r24,-31969
	ctx.r24.s64 = -2095120384;
	// lis r22,-31969
	ctx.r22.s64 = -2095120384;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r23,r11,-29761
	ctx.r23.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x82a2b7e4
	if (ctx.cr6.eq) goto loc_82A2B7E4;
	// lbz r11,4556(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4556);
	// mr r25,r21
	ctx.r25.u64 = ctx.r21.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2b7d4
	if (!ctx.cr6.eq) goto loc_82A2B7D4;
	// lwz r3,-836(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + -836);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// lwz r11,11464(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 11464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// bl 0x82388528
	ctx.lr = 0x82A2B60C;
	sub_82388528(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,6184
	ctx.r4.s64 = ctx.r11.s64 + 6184;
	// addi r28,r10,1028
	ctx.r28.s64 = ctx.r10.s64 + 1028;
	// li r27,3
	ctx.r27.s64 = 3;
	// bl 0x823099b0
	ctx.lr = 0x82A2B630;
	sub_823099B0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82983f48
	ctx.lr = 0x82A2B644;
	sub_82983F48(ctx, base);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b65c
	if (ctx.cr6.eq) goto loc_82A2B65C;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82a2b660
	goto loc_82A2B660;
loc_82A2B65C:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_82A2B660:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b674
	if (ctx.cr6.eq) goto loc_82A2B674;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// b 0x82a2b678
	goto loc_82A2B678;
loc_82A2B674:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
loc_82A2B678:
	// bl 0x82e29e88
	ctx.lr = 0x82A2B67C;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b6a8
	if (ctx.cr6.eq) goto loc_82A2B6A8;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b698
	if (ctx.cr6.eq) goto loc_82A2B698;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// b 0x82a2b69c
	goto loc_82A2B69C;
loc_82A2B698:
	// mr r11,r23
	ctx.r11.u64 = ctx.r23.u64;
loc_82A2B69C:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b73c
	if (ctx.cr6.eq) goto loc_82A2B73C;
loc_82A2B6A8:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,21180
	ctx.r4.s64 = ctx.r11.s64 + 21180;
	// li r27,15
	ctx.r27.s64 = 15;
	// bl 0x823099b0
	ctx.lr = 0x82A2B6BC;
	sub_823099B0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82983f48
	ctx.lr = 0x82A2B6D0;
	sub_82983F48(ctx, base);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b6e8
	if (ctx.cr6.eq) goto loc_82A2B6E8;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82a2b6ec
	goto loc_82A2B6EC;
loc_82A2B6E8:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
loc_82A2B6EC:
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b700
	if (ctx.cr6.eq) goto loc_82A2B700;
	// lwz r3,0(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// b 0x82a2b704
	goto loc_82A2B704;
loc_82A2B700:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
loc_82A2B704:
	// bl 0x82e29e88
	ctx.lr = 0x82A2B708;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2b734
	if (ctx.cr6.eq) goto loc_82A2B734;
	// lwz r11,4(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b724
	if (ctx.cr6.eq) goto loc_82A2B724;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// b 0x82a2b728
	goto loc_82A2B728;
loc_82A2B724:
	// mr r11,r23
	ctx.r11.u64 = ctx.r23.u64;
loc_82A2B728:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b73c
	if (ctx.cr6.eq) goto loc_82A2B73C;
loc_82A2B734:
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// b 0x82a2b740
	goto loc_82A2B740;
loc_82A2B73C:
	// mr r11,r21
	ctx.r11.u64 = ctx.r21.u64;
loc_82A2B740:
	// rlwinm r10,r27,0,28,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0x8;
	// clrlwi r30,r11,24
	ctx.r30.u64 = ctx.r11.u32 & 0xFF;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a2b75c
	if (ctx.cr6.eq) goto loc_82A2B75C;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// rlwinm r27,r27,0,29,27
	ctx.r27.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF7;
	// bl 0x82309a60
	ctx.lr = 0x82A2B75C;
	sub_82309A60(ctx, base);
loc_82A2B75C:
	// rlwinm r11,r27,0,29,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0x4;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b774
	if (ctx.cr6.eq) goto loc_82A2B774;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// rlwinm r27,r27,0,30,28
	ctx.r27.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// bl 0x82309a60
	ctx.lr = 0x82A2B774;
	sub_82309A60(ctx, base);
loc_82A2B774:
	// rlwinm r11,r27,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0x2;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b78c
	if (ctx.cr6.eq) goto loc_82A2B78C;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// rlwinm r27,r27,0,31,29
	ctx.r27.u64 = __builtin_rotateleft64(ctx.r27.u32 | (ctx.r27.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// bl 0x82309a60
	ctx.lr = 0x82A2B78C;
	sub_82309A60(ctx, base);
loc_82A2B78C:
	// clrlwi r11,r27,31
	ctx.r11.u64 = ctx.r27.u32 & 0x1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2b7a0
	if (ctx.cr6.eq) goto loc_82A2B7A0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2B7A0;
	sub_82309A60(ctx, base);
loc_82A2B7A0:
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// lwz r11,-836(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + -836);
	// mr r25,r26
	ctx.r25.u64 = ctx.r26.u64;
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b7d4
	if (ctx.cr6.eq) goto loc_82A2B7D4;
	// lwz r10,2020(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2020);
	// oris r10,r10,128
	ctx.r10.u64 = ctx.r10.u64 | 8388608;
	// stw r10,2020(r11)
	PPC_STORE_U32(ctx.r11.u32 + 2020, ctx.r10.u32);
loc_82A2B7D4:
	// clrlwi r11,r25,24
	ctx.r11.u64 = ctx.r25.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
	// stb r26,4580(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4580, ctx.r26.u8);
loc_82A2B7E4:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// stb r26,4416(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4416, ctx.r26.u8);
	// addi r10,r31,4420
	ctx.r10.s64 = ctx.r31.s64 + 4420;
	// stb r26,4406(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4406, ctx.r26.u8);
	// stb r26,4407(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4407, ctx.r26.u8);
	// stb r26,4417(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4417, ctx.r26.u8);
	// stb r26,4418(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4418, ctx.r26.u8);
	// lfd f0,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// addi r11,r31,4408
	ctx.r11.s64 = ctx.r31.s64 + 4408;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f0.u64);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r7,88(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r6,92(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// stw r9,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r9.u32);
	// stw r8,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r8.u32);
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// lwz r11,11464(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 11464);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bb0c
	if (ctx.cr6.eq) goto loc_82A2BB0C;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2bb0c
	if (ctx.cr6.eq) goto loc_82A2BB0C;
	// lwz r10,1044(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1044);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a2b864
	if (ctx.cr6.eq) goto loc_82A2B864;
	// lwz r3,1040(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1040);
	// b 0x82a2b868
	goto loc_82A2B868;
loc_82A2B864:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
loc_82A2B868:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// bl 0x82e28c50
	ctx.lr = 0x82A2B870;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82a2bb0c
	if (!ctx.cr6.eq) goto loc_82A2BB0C;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2b8b8
	if (!ctx.cr6.eq) goto loc_82A2B8B8;
	// lbz r11,2806(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2806);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b8a0
	if (ctx.cr6.eq) goto loc_82A2B8A0;
	// stb r26,2828(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2828, ctx.r26.u8);
	// std r26,2812(r31)
	PPC_STORE_U64(ctx.r31.u32 + 2812, ctx.r26.u64);
	// std r26,2820(r31)
	PPC_STORE_U64(ctx.r31.u32 + 2820, ctx.r26.u64);
	// b 0x82a2b8b8
	goto loc_82A2B8B8;
loc_82A2B8A0:
	// lbz r11,2794(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2794);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2b8b8
	if (!ctx.cr6.eq) goto loc_82A2B8B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r21,1076(r31)
	PPC_STORE_U8(ctx.r31.u32 + 1076, ctx.r21.u8);
	// bl 0x82a10128
	ctx.lr = 0x82A2B8B8;
	sub_82A10128(ctx, base);
loc_82A2B8B8:
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bb0c
	if (ctx.cr6.eq) goto loc_82A2BB0C;
	// lbz r11,2795(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2795);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bb0c
	if (ctx.cr6.eq) goto loc_82A2BB0C;
	// li r11,19
	ctx.r11.s64 = 19;
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 5);
	// stb r26,2828(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2828, ctx.r26.u8);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,1072(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1072, ctx.r11.u32);
	// beq cr6,0x82a2b90c
	if (ctx.cr6.eq) goto loc_82A2B90C;
	// addi r4,r31,12
	ctx.r4.s64 = ctx.r31.s64 + 12;
	// lwz r6,1040(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1040);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,1036(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1036);
	// bl 0x82a28df0
	ctx.lr = 0x82A2B8FC;
	sub_82A28DF0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
loc_82A2B90C:
	// lbz r11,6(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 6);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b9a8
	if (ctx.cr6.eq) goto loc_82A2B9A8;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// stb r26,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r26.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A2B924;
	sub_82A02AC0(ctx, base);
	// lbz r11,1088(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 1088);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b958
	if (ctx.cr6.eq) goto loc_82A2B958;
	// lwz r5,1140(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1140);
	// cmpwi cr6,r5,-1
	ctx.cr6.compare<int32_t>(ctx.r5.s32, -1, ctx.xer);
	// beq cr6,0x82a2b958
	if (ctx.cr6.eq) goto loc_82A2B958;
	// lwz r4,1144(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1144);
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A2B948;
	sub_82A27BC8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
loc_82A2B958:
	// lbz r11,1077(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 1077);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2b98c
	if (ctx.cr6.eq) goto loc_82A2B98C;
	// lwz r5,1080(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1080);
	// cmpwi cr6,r5,-1
	ctx.cr6.compare<int32_t>(ctx.r5.s32, -1, ctx.xer);
	// beq cr6,0x82a2b98c
	if (ctx.cr6.eq) goto loc_82A2B98C;
	// lwz r4,1084(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1084);
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A2B97C;
	sub_82A27BC8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
loc_82A2B98C:
	// addi r4,r31,1048
	ctx.r4.s64 = ctx.r31.s64 + 1048;
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27d48
	ctx.lr = 0x82A2B998;
	sub_82A27D48(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
loc_82A2B9A8:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a05520
	ctx.lr = 0x82A2B9B0;
	sub_82A05520(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// addi r10,r11,1
	ctx.r10.s64 = ctx.r11.s64 + 1;
	// stw r21,2832(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2832, ctx.r21.u32);
	// stb r26,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r26.u8);
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// stw r11,1704(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1704, ctx.r11.u32);
	// rlwinm r10,r10,27,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 ^ 1;
	// stw r10,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r10.u32);
	// bl 0x82a02ac0
	ctx.lr = 0x82A2B9DC;
	sub_82A02AC0(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A2B9E0;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2B9F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BA00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BA10;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// ld r11,2820(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 2820);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpld cr6,r30,r11
	ctx.cr6.compare<uint64_t>(ctx.r30.u64, ctx.r11.u64, ctx.xer);
	// beq cr6,0x82a2bb00
	if (ctx.cr6.eq) goto loc_82A2BB00;
	// cmpldi cr6,r11,0
	ctx.cr6.compare<uint64_t>(ctx.r11.u64, 0, ctx.xer);
	// beq cr6,0x82a2bb00
	if (ctx.cr6.eq) goto loc_82A2BB00;
	// mr r29,r26
	ctx.r29.u64 = ctx.r26.u64;
loc_82A2BA2C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82b06ff0
	ctx.lr = 0x82A2BA38;
	sub_82B06FF0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2ba4c
	if (!ctx.cr6.eq) goto loc_82A2BA4C;
	// ld r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// cmpld cr6,r30,r11
	ctx.cr6.compare<uint64_t>(ctx.r30.u64, ctx.r11.u64, ctx.xer);
	// beq cr6,0x82a2ba5c
	if (ctx.cr6.eq) goto loc_82A2BA5C;
loc_82A2BA4C:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpwi cr6,r29,4
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 4, ctx.xer);
	// blt cr6,0x82a2ba2c
	if (ctx.cr6.lt) goto loc_82A2BA2C;
	// b 0x82a2ba60
	goto loc_82A2BA60;
loc_82A2BA5C:
	// stw r29,1700(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1700, ctx.r29.u32);
loc_82A2BA60:
	// lwz r11,-836(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + -836);
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r29,64(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2bb0c
	if (ctx.cr6.eq) goto loc_82A2BB0C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,1996
	ctx.r4.s64 = ctx.r11.s64 + 1996;
	// bl 0x823099b0
	ctx.lr = 0x82A2BA88;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,1880
	ctx.r4.s64 = ctx.r11.s64 + 1880;
	// bl 0x823099b0
	ctx.lr = 0x82A2BA98;
	sub_823099B0(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r26.u32);
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r26.u32);
	// addi r30,r1,88
	ctx.r30.s64 = ctx.r1.s64 + 88;
	// bl 0x823099b0
	ctx.lr = 0x82A2BAB0;
	sub_823099B0(ctx, base);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// rldicr r7,r26,32,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r26.u64, 32) & 0xFFFFFFFF00000000;
	// stw r26,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r26.u32);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// stw r26,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r26.u32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// ld r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// bl 0x8238ce50
	ctx.lr = 0x82A2BAD8;
	sub_8238CE50(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x82A2BAE0;
	sub_82309A60(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x82A2BAE8;
	sub_82309A60(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x82A2BAF0;
	sub_82309A60(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
loc_82A2BB00:
	// addi r4,r31,2812
	ctx.r4.s64 = ctx.r31.s64 + 2812;
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27e18
	ctx.lr = 0x82A2BB0C;
	sub_82A27E18(ctx, base);
loc_82A2BB0C:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// lfd f30,-112(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2BB20"))) PPC_WEAK_FUNC(sub_82A2BB20);
PPC_FUNC_IMPL(__imp__sub_82A2BB20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A2BB28;
	__savegprlr_27(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r28,1
	ctx.r28.s64 = 1;
	// addi r27,r30,12
	ctx.r27.s64 = ctx.r30.s64 + 12;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// stb r28,4021(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4021, ctx.r28.u8);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2BB4C;
	sub_82E2AB28(ctx, base);
	// stw r31,1040(r30)
	PPC_STORE_U32(ctx.r30.u32 + 1040, ctx.r31.u32);
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2bb88
	if (!ctx.cr6.eq) goto loc_82A2BB88;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2BB6C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2bb80
	if (ctx.cr6.eq) goto loc_82A2BB80;
	// bl 0x82a08db0
	ctx.lr = 0x82A2BB78;
	sub_82A08DB0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// b 0x82a2bb84
	goto loc_82A2BB84;
loc_82A2BB80:
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_82A2BB84:
	// stw r11,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r11.u32);
loc_82A2BB88:
	// stw r28,44(r11)
	PPC_STORE_U32(ctx.r11.u32 + 44, ctx.r28.u32);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r10,4128
	ctx.r4.s64 = ctx.r10.s64 + 4128;
	// stw r29,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r29.u32);
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// stw r29,68(r11)
	PPC_STORE_U32(ctx.r11.u32 + 68, ctx.r29.u32);
	// bl 0x823099b0
	ctx.lr = 0x82A2BBAC;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,4080
	ctx.r4.s64 = ctx.r11.s64 + 4080;
	// bl 0x823099b0
	ctx.lr = 0x82A2BBBC;
	sub_823099B0(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// addi r6,r11,12392
	ctx.r6.s64 = ctx.r11.s64 + 12392;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a12260
	ctx.lr = 0x82A2BBD4;
	sub_82A12260(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82A2BBDC;
	sub_82309A60(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2BBE4;
	sub_82309A60(ctx, base);
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2bc10
	if (!ctx.cr6.eq) goto loc_82A2BC10;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2BBF8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2bc08
	if (ctx.cr6.eq) goto loc_82A2BC08;
	// bl 0x82a08db0
	ctx.lr = 0x82A2BC04;
	sub_82A08DB0(ctx, base);
	// b 0x82a2bc0c
	goto loc_82A2BC0C;
loc_82A2BC08:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A2BC0C:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2BC10:
	// lwz r11,56(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2bc38
	if (ctx.cr6.eq) goto loc_82A2BC38;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,1040(r30)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r30.u32 + 1040);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a28df0
	ctx.lr = 0x82A2BC30;
	sub_82A28DF0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
loc_82A2BC38:
	// lwz r3,3992(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3992);
	// stb r28,4022(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4022, ctx.r28.u8);
	// bl 0x82a21c30
	ctx.lr = 0x82A2BC44;
	sub_82A21C30(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2BC50"))) PPC_WEAK_FUNC(sub_82A2BC50);
PPC_FUNC_IMPL(__imp__sub_82A2BC50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2BC58;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,3992(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// lwz r30,8(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2bc90
	if (ctx.cr6.eq) goto loc_82A2BC90;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BC8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// b 0x82a2bc94
	goto loc_82A2BC94;
loc_82A2BC90:
	// stb r29,4022(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4022, ctx.r29.u8);
loc_82A2BC94:
	// lbz r11,4022(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4022);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bd3c
	if (ctx.cr6.eq) goto loc_82A2BD3C;
	// lwz r4,4024(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4024);
	// cmpw cr6,r4,r3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r3.s32, ctx.xer);
	// bge cr6,0x82a2bd38
	if (!ctx.cr6.lt) goto loc_82A2BD38;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BCC0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// stw r29,2832(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2832, ctx.r29.u32);
	// stb r29,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r29.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A2BCD4;
	sub_82A02AC0(ctx, base);
	// lwz r11,3992(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a2bcec
	if (!ctx.cr6.eq) goto loc_82A2BCEC;
	// li r29,-1
	ctx.r29.s64 = -1;
	// b 0x82a2bd04
	goto loc_82A2BD04;
loc_82A2BCEC:
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BD00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
loc_82A2BD04:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BD18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A2BD28;
	sub_82A27BC8(ctx, base);
	// lwz r11,4024(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4024);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4024(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4024, ctx.r11.u32);
	// b 0x82a2bd3c
	goto loc_82A2BD3C;
loc_82A2BD38:
	// stb r29,4022(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4022, ctx.r29.u8);
loc_82A2BD3C:
	// lbz r11,4022(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4022);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2bd5c
	if (!ctx.cr6.eq) goto loc_82A2BD5C;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r6,1040(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1040);
	// addi r4,r31,12
	ctx.r4.s64 = ctx.r31.s64 + 12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a28df0
	ctx.lr = 0x82A2BD5C;
	sub_82A28DF0(ctx, base);
loc_82A2BD5C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2BD68"))) PPC_WEAK_FUNC(sub_82A2BD68);
PPC_FUNC_IMPL(__imp__sub_82A2BD68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2BD70;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bdf4
	if (ctx.cr6.eq) goto loc_82A2BDF4;
	// bl 0x82219f20
	ctx.lr = 0x82A2BD90;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BDA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2bdd4
	if (ctx.cr6.eq) goto loc_82A2BDD4;
	// bl 0x82219f20
	ctx.lr = 0x82A2BDAC;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BDBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BDCC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2bdf4
	if (!ctx.cr6.eq) goto loc_82A2BDF4;
loc_82A2BDD4:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r30,1084(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1084, ctx.r30.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r29,1080(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1080, ctx.r29.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r11,4536(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4536, ctx.r11.u8);
	// stw r10,4540(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4540, ctx.r10.u32);
	// bl 0x82a297f0
	ctx.lr = 0x82A2BDF4;
	sub_82A297F0(ctx, base);
loc_82A2BDF4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2BE00"))) PPC_WEAK_FUNC(sub_82A2BE00);
PPC_FUNC_IMPL(__imp__sub_82A2BE00) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82A2BE08;
	__savegprlr_24(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addi r10,r29,4452
	ctx.r10.s64 = ctx.r29.s64 + 4452;
	// li r28,0
	ctx.r28.s64 = 0;
	// lfd f0,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r4,r11,12368
	ctx.r4.s64 = ctx.r11.s64 + 12368;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stb r28,4450(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4450, ctx.r28.u8);
	// stb r28,4047(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4047, ctx.r28.u8);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// bl 0x82a0d990
	ctx.lr = 0x82A2BE4C;
	sub_82A0D990(ctx, base);
	// clrlwi r30,r31,24
	ctx.r30.u64 = ctx.r31.u32 & 0xFF;
	// lwz r31,2784(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2be68
	if (ctx.cr6.eq) goto loc_82A2BE68;
	// lis r11,-32768
	ctx.r11.s64 = -2147483648;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// b 0x82a2be6c
	goto loc_82A2BE6C;
loc_82A2BE68:
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
loc_82A2BE6C:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r27,0(r31)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r26,r1,80
	ctx.r26.s64 = ctx.r1.s64 + 80;
	// ld r4,3568(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 3568);
	// bl 0x8246bd50
	ctx.lr = 0x82A2BE88;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BEA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x82a2bf64
	if (!ctx.cr6.eq) goto loc_82A2BF64;
	// lbz r11,2793(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2bec4
	if (ctx.cr6.eq) goto loc_82A2BEC4;
	// lwz r3,3988(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3988);
	// bl 0x82a09018
	ctx.lr = 0x82A2BEC4;
	sub_82A09018(ctx, base);
loc_82A2BEC4:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r11,-836(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -836);
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r29,64(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2c208
	if (ctx.cr6.eq) goto loc_82A2C208;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r11,4228
	ctx.r4.s64 = ctx.r11.s64 + 4228;
	// bl 0x823099b0
	ctx.lr = 0x82A2BEF0;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,4172
	ctx.r4.s64 = ctx.r11.s64 + 4172;
	// bl 0x823099b0
	ctx.lr = 0x82A2BF00;
	sub_823099B0(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r28.u32);
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// stw r28,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r28.u32);
	// addi r30,r1,88
	ctx.r30.s64 = ctx.r1.s64 + 88;
	// bl 0x823099b0
	ctx.lr = 0x82A2BF1C;
	sub_823099B0(ctx, base);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// rldicr r7,r28,32,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r28.u64, 32) & 0xFFFFFFFF00000000;
	// stw r28,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r28.u32);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r28.u32);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// ld r6,96(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// bl 0x8238ce50
	ctx.lr = 0x82A2BF44;
	sub_8238CE50(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82309a60
	ctx.lr = 0x82A2BF4C;
	sub_82309A60(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x82A2BF54;
	sub_82309A60(ctx, base);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82309a60
	ctx.lr = 0x82A2BF5C;
	sub_82309A60(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82A2BF64:
	// lis r25,-31969
	ctx.r25.s64 = -2095120384;
	// lwz r3,12304(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2bf94
	if (!ctx.cr6.eq) goto loc_82A2BF94;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2BF7C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2bf8c
	if (ctx.cr6.eq) goto loc_82A2BF8C;
	// bl 0x82a08db0
	ctx.lr = 0x82A2BF88;
	sub_82A08DB0(ctx, base);
	// b 0x82a2bf90
	goto loc_82A2BF90;
loc_82A2BF8C:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A2BF90:
	// stw r3,12304(r25)
	PPC_STORE_U32(ctx.r25.u32 + 12304, ctx.r3.u32);
loc_82A2BF94:
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2bfa8
	if (ctx.cr6.eq) goto loc_82A2BFA8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a19c78
	ctx.lr = 0x82A2BFA8;
	sub_82A19C78(ctx, base);
loc_82A2BFA8:
	// bl 0x82219f20
	ctx.lr = 0x82A2BFAC;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BFBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BFCC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,136(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 136);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2BFE4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02ed0
	ctx.lr = 0x82A2BFEC;
	sub_82A02ED0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r24,1
	ctx.r24.s64 = 1;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// mr r26,r24
	ctx.r26.u64 = ctx.r24.u64;
	// bne cr6,0x82a2c008
	if (!ctx.cr6.eq) goto loc_82A2C008;
	// mr r26,r28
	ctx.r26.u64 = ctx.r28.u64;
	// b 0x82a2c024
	goto loc_82A2C024;
loc_82A2C008:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x82a2c018
	if (!ctx.cr6.eq) goto loc_82A2C018;
	// li r26,3
	ctx.r26.s64 = 3;
	// b 0x82a2c024
	goto loc_82A2C024;
loc_82A2C018:
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x82a2c024
	if (!ctx.cr6.eq) goto loc_82A2C024;
	// li r26,2
	ctx.r26.s64 = 2;
loc_82A2C024:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r27,r28
	ctx.r27.u64 = ctx.r28.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C03C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c0f4
	if (ctx.cr6.eq) goto loc_82A2C0F4;
loc_82A2C044:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C05C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C070;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2c0d4
	if (!ctx.cr6.eq) goto loc_82A2C0D4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C090;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C0A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A2C0AC;
	sub_82A02DD0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r10,64(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 64);
	// subf r11,r11,r26
	ctx.r11.s64 = ctx.r26.s64 - ctx.r11.s64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x82A2C0D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2C0D4:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C0EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplw cr6,r27,r3
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, ctx.r3.u32, ctx.xer);
	// blt cr6,0x82a2c044
	if (ctx.cr6.lt) goto loc_82A2C044;
loc_82A2C0F4:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a1a3e0
	ctx.lr = 0x82A2C0FC;
	sub_82A1A3E0(ctx, base);
	// lwz r3,12304(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2c128
	if (!ctx.cr6.eq) goto loc_82A2C128;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2C110;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c120
	if (ctx.cr6.eq) goto loc_82A2C120;
	// bl 0x82a08db0
	ctx.lr = 0x82A2C11C;
	sub_82A08DB0(ctx, base);
	// b 0x82a2c124
	goto loc_82A2C124;
loc_82A2C120:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A2C124:
	// stw r3,12304(r25)
	PPC_STORE_U32(ctx.r25.u32 + 12304, ctx.r3.u32);
loc_82A2C128:
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// stw r28,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r28.u32);
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
	// stw r24,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r24.u32);
	// stw r28,68(r3)
	PPC_STORE_U32(ctx.r3.u32 + 68, ctx.r28.u32);
	// stw r28,72(r3)
	PPC_STORE_U32(ctx.r3.u32 + 72, ctx.r28.u32);
	// stw r24,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, ctx.r24.u32);
	// stw r24,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r24.u32);
	// lwz r3,12304(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + 12304);
	// stw r11,19828(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19828, ctx.r11.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2c178
	if (!ctx.cr6.eq) goto loc_82A2C178;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2C160;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c170
	if (ctx.cr6.eq) goto loc_82A2C170;
	// bl 0x82a08db0
	ctx.lr = 0x82A2C16C;
	sub_82A08DB0(ctx, base);
	// b 0x82a2c174
	goto loc_82A2C174;
loc_82A2C170:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A2C174:
	// stw r3,12304(r25)
	PPC_STORE_U32(ctx.r25.u32 + 12304, ctx.r3.u32);
loc_82A2C178:
	// stw r24,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r24.u32);
	// lwz r11,12304(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 12304);
	// stw r28,28(r11)
	PPC_STORE_U32(ctx.r11.u32 + 28, ctx.r28.u32);
	// lwz r11,12304(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 12304);
	// stw r28,32(r11)
	PPC_STORE_U32(ctx.r11.u32 + 32, ctx.r28.u32);
	// lbz r11,2804(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 2804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2c1f8
	if (!ctx.cr6.eq) goto loc_82A2C1F8;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r30,12296(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12296);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a26228
	ctx.lr = 0x82A2C1A8;
	sub_82A26228(ctx, base);
	// mr r31,r28
	ctx.r31.u64 = ctx.r28.u64;
loc_82A2C1AC:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2C1B8;
	sub_82A02D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2c1ec
	if (ctx.cr6.eq) goto loc_82A2C1EC;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a2c1e0
	if (ctx.cr6.eq) goto loc_82A2C1E0;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82a2a2d8
	ctx.lr = 0x82A2C1DC;
	sub_82A2A2D8(ctx, base);
	// b 0x82a2c1ec
	goto loc_82A2C1EC;
loc_82A2C1E0:
	// lwz r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82a2a3a8
	ctx.lr = 0x82A2C1EC;
	sub_82A2A3A8(ctx, base);
loc_82A2C1EC:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,4
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 4, ctx.xer);
	// blt cr6,0x82a2c1ac
	if (ctx.cr6.lt) goto loc_82A2C1AC;
loc_82A2C1F8:
	// lbz r11,2797(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 2797);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2c208
	if (ctx.cr6.eq) goto loc_82A2C208;
	// stb r28,2797(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2797, ctx.r28.u8);
loc_82A2C208:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2C210"))) PPC_WEAK_FUNC(sub_82A2C210);
PPC_FUNC_IMPL(__imp__sub_82A2C210) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2C218;
	__savegprlr_29(ctx, base);
	// stwu r1,-1248(r1)
	ea = -1248 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2c254
	if (!ctx.cr6.eq) goto loc_82A2C254;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2C23C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c24c
	if (ctx.cr6.eq) goto loc_82A2C24C;
	// bl 0x82a08db0
	ctx.lr = 0x82A2C248;
	sub_82A08DB0(ctx, base);
	// b 0x82a2c250
	goto loc_82A2C250;
loc_82A2C24C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2C250:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2C254:
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2c2d4
	if (ctx.cr6.eq) goto loc_82A2C2D4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// ld r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 8);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r11.u64);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// lwz r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// ld r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 28);
	// std r11,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r11.u64);
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// lwz r11,44(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 44);
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r11.u32);
	// lwz r11,48(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 48);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// ld r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r31.u32 + 56);
	// std r11,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r11.u64);
	// lwz r11,64(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 64);
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r11.u32);
	// bl 0x82a29a68
	ctx.lr = 0x82A2C2CC;
	sub_82A29A68(ctx, base);
	// addi r1,r1,1248
	ctx.r1.s64 = ctx.r1.s64 + 1248;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2C2D4:
	// bl 0x82219f20
	ctx.lr = 0x82A2C2D8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C2E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C2F8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C308;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239200
	ctx.lr = 0x82A2C318;
	sub_82239200(ctx, base);
	// li r4,79
	ctx.r4.s64 = 79;
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239280
	ctx.lr = 0x82A2C324;
	sub_82239280(ctx, base);
	// addi r5,r1,144
	ctx.r5.s64 = ctx.r1.s64 + 144;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a0cab8
	ctx.lr = 0x82A2C334;
	sub_82A0CAB8(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A2C338;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C348;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C358;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c388
	if (ctx.cr6.eq) goto loc_82A2C388;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2c388
	if (ctx.cr6.eq) goto loc_82A2C388;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C388;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2C388:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82239548
	ctx.lr = 0x82A2C390;
	sub_82239548(ctx, base);
	// addi r1,r1,1248
	ctx.r1.s64 = ctx.r1.s64 + 1248;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2C398"))) PPC_WEAK_FUNC(sub_82A2C398);
PPC_FUNC_IMPL(__imp__sub_82A2C398) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,-1
	ctx.r3.s64 = -1;
	// cmpwi cr6,r4,2
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 2, ctx.xer);
	// bne cr6,0x82a2c434
	if (!ctx.cr6.eq) goto loc_82A2C434;
	// lbz r11,4020(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4020);
	// clrlwi r10,r11,30
	ctx.r10.u64 = ctx.r11.u32 & 0x3;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a2c3e0
	if (!ctx.cr6.eq) goto loc_82A2C3E0;
	// li r10,3
	ctx.r10.s64 = 3;
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwimi r11,r10,0,30,23
	ctx.r11.u64 = (__builtin_rotateleft32(ctx.r10.u32, 0) & 0xFFFFFFFFFFFFFF03) | (ctx.r11.u64 & 0xFC);
	// stb r11,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r11.u8);
	// b 0x82a2c47c
	goto loc_82A2C47C;
loc_82A2C3E0:
	// rlwinm r10,r11,0,28,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xC;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a2c3fc
	if (!ctx.cr6.eq) goto loc_82A2C3FC;
	// ori r11,r11,12
	ctx.r11.u64 = ctx.r11.u64 | 12;
	// li r3,2
	ctx.r3.s64 = 2;
	// stb r11,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r11.u8);
	// b 0x82a2c47c
	goto loc_82A2C47C;
loc_82A2C3FC:
	// rlwinm r10,r11,29,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 29) & 0x1;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// not r11,r11
	ctx.r11.u64 = ~ctx.r11.u64;
	// ori r4,r10,2
	ctx.r4.u64 = ctx.r10.u64 | 2;
	// li r10,15
	ctx.r10.s64 = 15;
	// rlwinm r30,r11,31,31,31
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 31) & 0x1;
	// stb r10,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r10.u8);
	// bl 0x82a02d50
	ctx.lr = 0x82A2C41C;
	sub_82A02D50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r30,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r30.u32);
	// bl 0x82a2c210
	ctx.lr = 0x82A2C42C;
	sub_82A2C210(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// b 0x82a2c47c
	goto loc_82A2C47C;
loc_82A2C434:
	// lbz r8,4020(r31)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4020);
	// li r10,1
	ctx.r10.s64 = 1;
	// li r11,0
	ctx.r11.s64 = 0;
loc_82A2C440:
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// and r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 & ctx.r8.u64;
	// clrlwi r7,r7,24
	ctx.r7.u64 = ctx.r7.u32 & 0xFF;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x82a2c46c
	if (ctx.cr6.eq) goto loc_82A2C46C;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// rlwinm r10,r9,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// blt cr6,0x82a2c440
	if (ctx.cr6.lt) goto loc_82A2C440;
	// b 0x82a2c47c
	goto loc_82A2C47C;
loc_82A2C46C:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// or r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 | ctx.r8.u64;
	// stb r10,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r10.u8);
loc_82A2C47C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2C498"))) PPC_WEAK_FUNC(sub_82A2C498);
PPC_FUNC_IMPL(__imp__sub_82A2C498) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A2C4A0;
	__savegprlr_26(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// bne cr6,0x82a2c64c
	if (!ctx.cr6.eq) goto loc_82A2C64C;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// stb r27,2733(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2733, ctx.r27.u8);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2c4ec
	if (!ctx.cr6.eq) goto loc_82A2C4EC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2C4D4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c4e4
	if (ctx.cr6.eq) goto loc_82A2C4E4;
	// bl 0x82a08db0
	ctx.lr = 0x82A2C4E0;
	sub_82A08DB0(ctx, base);
	// b 0x82a2c4e8
	goto loc_82A2C4E8;
loc_82A2C4E4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A2C4E8:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2C4EC:
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
	// lwz r11,12304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// stw r27,24(r11)
	PPC_STORE_U32(ctx.r11.u32 + 24, ctx.r27.u32);
	// lwz r11,12304(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// stw r10,28(r11)
	PPC_STORE_U32(ctx.r11.u32 + 28, ctx.r10.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A2C508;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C518;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C528;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C53C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2c64c
	if (ctx.cr6.eq) goto loc_82A2C64C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C55C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C56C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C57C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C594;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C5A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C5B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,4012(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// bl 0x82a2c398
	ctx.lr = 0x82A2C5D4;
	sub_82A2C398(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A2C5E0;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r30
	ctx.r10.u64 = ctx.r30.u64;
	// lwz r8,4012(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r4,1700(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1700);
	// li r7,1
	ctx.r7.s64 = 1;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// bl 0x82a02b28
	ctx.lr = 0x82A2C60C;
	sub_82A02B28(ctx, base);
	// lwz r11,4012(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2c64c
	if (ctx.cr6.eq) goto loc_82A2C64C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A2C620;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r30
	ctx.r10.u64 = ctx.r30.u64;
	// lwz r4,1704(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1704);
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r28,1
	ctx.r5.s64 = ctx.r28.s64 + 1;
	// bl 0x82a02b28
	ctx.lr = 0x82A2C64C;
	sub_82A02B28(ctx, base);
loc_82A2C64C:
	// lwz r30,2784(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2784);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r26.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r28,r1,96
	ctx.r28.s64 = ctx.r1.s64 + 96;
	// ld r4,284(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 284);
	// lwz r29,0(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A2C670;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 228);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C690;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stb r27,2733(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2733, ctx.r27.u8);
	// bl 0x8295f3f8
	ctx.lr = 0x82A2C698;
	sub_8295F3F8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2c854
	if (ctx.cr6.eq) goto loc_82A2C854;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,5776
	ctx.r4.s64 = ctx.r11.s64 + 5776;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x8243b750
	ctx.lr = 0x82A2C6BC;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8296c798
	ctx.lr = 0x82A2C6D0;
	sub_8296C798(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2c854
	if (ctx.cr6.eq) goto loc_82A2C854;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,30556
	ctx.r4.s64 = ctx.r11.s64 + 30556;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8243b750
	ctx.lr = 0x82A2C6F4;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2C708;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A2C70C;
	sub_82394220(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,30536
	ctx.r4.s64 = ctx.r11.s64 + 30536;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8243b750
	ctx.lr = 0x82A2C728;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2C73C;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A2C740;
	sub_82394220(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r11,4284
	ctx.r4.s64 = ctx.r11.s64 + 4284;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8243b750
	ctx.lr = 0x82A2C75C;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2C770;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A2C774;
	sub_82394220(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2c854
	if (ctx.cr6.eq) goto loc_82A2C854;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2c854
	if (ctx.cr6.eq) goto loc_82A2C854;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2c854
	if (ctx.cr6.eq) goto loc_82A2C854;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82353fc8
	ctx.lr = 0x82A2C794;
	sub_82353FC8(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r29,r11,30400
	ctx.r29.s64 = ctx.r11.s64 + 30400;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A2C7A8;
	sub_823099B0(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// addi r28,r31,848
	ctx.r28.s64 = ctx.r31.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C7C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x82A2C7D0;
	sub_82309A60(ctx, base);
	// addi r3,r31,924
	ctx.r3.s64 = ctx.r31.s64 + 924;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A2C7DC;
	sub_822E0818(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C7F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r31,r11,30360
	ctx.r31.s64 = ctx.r11.s64 + 30360;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A2C808;
	sub_823099B0(ctx, base);
	// lwz r11,848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 848);
	// addi r29,r30,848
	ctx.r29.s64 = ctx.r30.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C828;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x82A2C830;
	sub_82309A60(ctx, base);
	// addi r3,r30,924
	ctx.r3.s64 = ctx.r30.s64 + 924;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A2C83C;
	sub_822E0818(ctx, base);
	// lwz r11,848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 848);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2C854;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2C854:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2C860"))) PPC_WEAK_FUNC(sub_82A2C860);
PPC_FUNC_IMPL(__imp__sub_82A2C860) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82A2C868;
	__savegprlr_24(ctx, base);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lbz r11,4028(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2cb20
	if (!ctx.cr6.eq) goto loc_82A2CB20;
	// li r24,1
	ctx.r24.s64 = 1;
	// li r28,8
	ctx.r28.s64 = 8;
	// mr r25,r24
	ctx.r25.u64 = ctx.r24.u64;
	// li r30,0
	ctx.r30.s64 = 0;
loc_82A2C88C:
	// lwz r29,4016(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2C89C;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r29,r28,r29
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r29.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2C8AC;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2c8c4
	if (ctx.cr6.eq) goto loc_82A2C8C4;
	// lwz r11,36(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2c8c4
	if (ctx.cr6.eq) goto loc_82A2C8C4;
	// mr r25,r30
	ctx.r25.u64 = ctx.r30.u64;
loc_82A2C8C4:
	// addi r28,r28,4
	ctx.r28.s64 = ctx.r28.s64 + 4;
	// cmpwi cr6,r28,24
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 24, ctx.xer);
	// blt cr6,0x82a2c88c
	if (ctx.cr6.lt) goto loc_82A2C88C;
	// addi r27,r31,2848
	ctx.r27.s64 = ctx.r31.s64 + 2848;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A2C8E0;
	sub_823099B0(ctx, base);
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r26,r11,-29761
	ctx.r26.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82a2c8fc
	if (!ctx.cr6.eq) goto loc_82A2C8FC;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A2C8FC:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,-2912
	ctx.r4.s64 = ctx.r11.s64 + -2912;
	// bl 0x82e28c50
	ctx.lr = 0x82A2C908;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a2c924
	if (ctx.cr6.eq) goto loc_82A2C924;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25db0
	ctx.lr = 0x82A2C91C;
	sub_82A25DB0(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// b 0x82a2ca7c
	goto loc_82A2CA7C;
loc_82A2C924:
	// bl 0x82751920
	ctx.lr = 0x82A2C928;
	sub_82751920(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r4,r11,-5232
	ctx.r4.s64 = ctx.r11.s64 + -5232;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8243b750
	ctx.lr = 0x82A2C944;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x82971110
	ctx.lr = 0x82A2C958;
	sub_82971110(ctx, base);
	// bl 0x8239c0c0
	ctx.lr = 0x82A2C95C;
	sub_8239C0C0(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// stw r30,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r30.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r30,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r30.u32);
	// stw r30,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r30.u32);
	// bl 0x82a11e10
	ctx.lr = 0x82A2C978;
	sub_82A11E10(ctx, base);
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a11f80
	ctx.lr = 0x82A2C984;
	sub_82A11F80(ctx, base);
	// lwz r11,3876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3876);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// stw r30,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r30.u32);
	// stw r30,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r30.u32);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// stw r30,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r30.u32);
	// stw r30,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r30.u32);
	// stw r30,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r30.u32);
	// stw r30,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r30.u32);
	// stw r30,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r30.u32);
	// stw r30,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r30.u32);
	// stw r30,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r30.u32);
	// beq cr6,0x82a2c9c0
	if (ctx.cr6.eq) goto loc_82A2C9C0;
	// cmpw cr6,r11,r28
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r28.s32, ctx.xer);
	// beq cr6,0x82a2c9fc
	if (ctx.cr6.eq) goto loc_82A2C9FC;
loc_82A2C9C0:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-20460
	ctx.r4.s64 = ctx.r11.s64 + -20460;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82A2C9D8;
	sub_8243B750(ctx, base);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r29,136
	ctx.r3.s64 = ctx.r29.s64 + 136;
	// bl 0x8238c150
	ctx.lr = 0x82A2C9E8;
	sub_8238C150(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25e70
	ctx.lr = 0x82A2C9FC;
	sub_82A25E70(ctx, base);
loc_82A2C9FC:
	// lwz r11,3876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3876);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x82a2ca10
	if (ctx.cr6.eq) goto loc_82A2CA10;
	// cmpw cr6,r11,r28
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r28.s32, ctx.xer);
	// bne cr6,0x82a2ca4c
	if (!ctx.cr6.eq) goto loc_82A2CA4C;
loc_82A2CA10:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,20596
	ctx.r4.s64 = ctx.r11.s64 + 20596;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82A2CA28;
	sub_8243B750(ctx, base);
	// addi r5,r1,136
	ctx.r5.s64 = ctx.r1.s64 + 136;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r29,136
	ctx.r3.s64 = ctx.r29.s64 + 136;
	// bl 0x8238c150
	ctx.lr = 0x82A2CA38;
	sub_8238C150(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25e70
	ctx.lr = 0x82A2CA4C;
	sub_82A25E70(ctx, base);
loc_82A2CA4C:
	// lwz r11,124(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r29,r11,1
	ctx.r29.u64 = ctx.r11.u64 ^ 1;
	// bl 0x82480d20
	ctx.lr = 0x82A2CA64;
	sub_82480D20(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82480d20
	ctx.lr = 0x82A2CA6C;
	sub_82480D20(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82a56c60
	ctx.lr = 0x82A2CA74;
	sub_82A56C60(ctx, base);
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// bl 0x82480d20
	ctx.lr = 0x82A2CA7C;
	sub_82480D20(ctx, base);
loc_82A2CA7C:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bne cr6,0x82a2cb2c
	if (!ctx.cr6.eq) goto loc_82A2CB2C;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r11,-836(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -836);
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r28,64(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a2cb18
	if (ctx.cr6.eq) goto loc_82A2CB18;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// addi r4,r11,4364
	ctx.r4.s64 = ctx.r11.s64 + 4364;
	// bl 0x823099b0
	ctx.lr = 0x82A2CAB0;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// addi r4,r11,4304
	ctx.r4.s64 = ctx.r11.s64 + 4304;
	// bl 0x823099b0
	ctx.lr = 0x82A2CAC0;
	sub_823099B0(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r30.u32);
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A2CAD8;
	sub_823099B0(ctx, base);
	// addi r8,r1,184
	ctx.r8.s64 = ctx.r1.s64 + 184;
	// rldicr r7,r30,32,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r30.u64, 32) & 0xFFFFFFFF00000000;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r30.u32);
	// addi r5,r1,200
	ctx.r5.s64 = ctx.r1.s64 + 200;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r30.u32);
	// addi r4,r1,216
	ctx.r4.s64 = ctx.r1.s64 + 216;
	// ld r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// ld r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r29.u32 + 0);
	// bl 0x8238ce50
	ctx.lr = 0x82A2CB00;
	sub_8238CE50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82309a60
	ctx.lr = 0x82A2CB08;
	sub_82309A60(ctx, base);
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x82309a60
	ctx.lr = 0x82A2CB10;
	sub_82309A60(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x82309a60
	ctx.lr = 0x82A2CB18;
	sub_82309A60(ctx, base);
loc_82A2CB18:
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A2CB20;
	sub_82309A60(ctx, base);
loc_82A2CB20:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82A2CB2C:
	// li r11,4
	ctx.r11.s64 = 4;
	// stw r30,4488(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4488, ctx.r30.u32);
	// li r5,1024
	ctx.r5.s64 = 1024;
	// stb r24,4028(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4028, ctx.r24.u8);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r3,r31,12
	ctx.r3.s64 = ctx.r31.s64 + 12;
	// stw r11,2788(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2788, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2CB4C;
	sub_82E2AB28(ctx, base);
	// lwz r11,3876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3876);
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// lwz r10,3880(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3880);
	// stw r11,1068(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1068, ctx.r11.u32);
	// stw r10,1044(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1044, ctx.r10.u32);
	// lwz r3,12304(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2cb8c
	if (!ctx.cr6.eq) goto loc_82A2CB8C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2CB74;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2cb84
	if (ctx.cr6.eq) goto loc_82A2CB84;
	// bl 0x82a08db0
	ctx.lr = 0x82A2CB80;
	sub_82A08DB0(ctx, base);
	// b 0x82a2cb88
	goto loc_82A2CB88;
loc_82A2CB84:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_82A2CB88:
	// stw r3,12304(r29)
	PPC_STORE_U32(ctx.r29.u32 + 12304, ctx.r3.u32);
loc_82A2CB8C:
	// stw r30,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r30.u32);
	// mr r27,r30
	ctx.r27.u64 = ctx.r30.u64;
	// lwz r11,12304(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12304);
	// stw r30,68(r11)
	PPC_STORE_U32(ctx.r11.u32 + 68, ctx.r30.u32);
	// lwz r11,4016(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x82a2cbc8
	if (!ctx.cr6.eq) goto loc_82A2CBC8;
	// clrlwi r10,r25,24
	ctx.r10.u64 = ctx.r25.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a2cbc8
	if (ctx.cr6.eq) goto loc_82A2CBC8;
	// mr r27,r24
	ctx.r27.u64 = ctx.r24.u64;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2CBC0;
	sub_82A0BFB0(ctx, base);
	// stw r24,56(r3)
	PPC_STORE_U32(ctx.r3.u32 + 56, ctx.r24.u32);
	// b 0x82a2cc28
	goto loc_82A2CC28;
loc_82A2CBC8:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// ble cr6,0x82a2cc28
	if (!ctx.cr6.gt) goto loc_82A2CC28;
	// li r28,8
	ctx.r28.s64 = 8;
loc_82A2CBD4:
	// lwz r29,4016(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2CBE4;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r29,r28,r29
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r29.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2CBF4;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2cc14
	if (ctx.cr6.eq) goto loc_82A2CC14;
	// lwz r11,24(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2cc14
	if (ctx.cr6.eq) goto loc_82A2CC14;
	// lwz r11,36(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2cc24
	if (!ctx.cr6.eq) goto loc_82A2CC24;
loc_82A2CC14:
	// addi r28,r28,4
	ctx.r28.s64 = ctx.r28.s64 + 4;
	// cmpwi cr6,r28,24
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 24, ctx.xer);
	// blt cr6,0x82a2cbd4
	if (ctx.cr6.lt) goto loc_82A2CBD4;
	// b 0x82a2cc28
	goto loc_82A2CC28;
loc_82A2CC24:
	// mr r27,r24
	ctx.r27.u64 = ctx.r24.u64;
loc_82A2CC28:
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2cc44
	if (ctx.cr6.eq) goto loc_82A2CC44;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r30,4029(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4029, ctx.r30.u8);
	// bl 0x82a29df8
	ctx.lr = 0x82A2CC40;
	sub_82A29DF8(ctx, base);
	// b 0x82a2cc50
	goto loc_82A2CC50;
loc_82A2CC44:
	// lwz r3,3992(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// stb r24,4029(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4029, ctx.r24.u8);
	// bl 0x82a21e30
	ctx.lr = 0x82A2CC50;
	sub_82A21E30(ctx, base);
loc_82A2CC50:
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r30.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ccb0
	if (ctx.cr6.eq) goto loc_82A2CCB0;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r30.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2ccb0
	if (ctx.cr6.eq) goto loc_82A2CCB0;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2cc8c
	if (!ctx.cr6.eq) goto loc_82A2CC8C;
	// bl 0x82545cc0
	ctx.lr = 0x82A2CC88;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82A2CC8C:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2CCAC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
loc_82A2CCB0:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82416660
	ctx.lr = 0x82A2CCCC;
	sub_82416660(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2cd04
	if (ctx.cr6.eq) goto loc_82A2CD04;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// mr r30,r11
	ctx.r30.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2ccf0
	if (!ctx.cr6.eq) goto loc_82A2CCF0;
	// bl 0x82545cc0
	ctx.lr = 0x82A2CCEC;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82A2CCF0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2CD04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2CD04:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2CD10"))) PPC_WEAK_FUNC(sub_82A2CD10);
PPC_FUNC_IMPL(__imp__sub_82A2CD10) {
	PPC_FUNC_PROLOGUE();
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4032(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4032, ctx.r11.u32);
	// b 0x82a29df8
	sub_82A29DF8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2CD20"))) PPC_WEAK_FUNC(sub_82A2CD20);
PPC_FUNC_IMPL(__imp__sub_82A2CD20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82A2CD28;
	__savegprlr_25(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// clrlwi r31,r5,24
	ctx.r31.u64 = ctx.r5.u32 & 0xFF;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// cntlzw r11,r31
	ctx.r11.u64 = ctx.r31.u32 == 0 ? 32 : __builtin_clz(ctx.r31.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// bl 0x82a2c398
	ctx.lr = 0x82A2CD54;
	sub_82A2C398(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// mr r8,r31
	ctx.r8.u64 = ctx.r31.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// bl 0x82a02b28
	ctx.lr = 0x82A2CD80;
	sub_82A02B28(ctx, base);
	// li r25,1
	ctx.r25.s64 = 1;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r25,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r25.u32);
	// beq cr6,0x82a2cdbc
	if (ctx.cr6.eq) goto loc_82A2CDBC;
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r27,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r27.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// addi r5,r26,1
	ctx.r5.s64 = ctx.r26.s64 + 1;
	// li r4,-1
	ctx.r4.s64 = -1;
	// bl 0x82a02b28
	ctx.lr = 0x82A2CDB8;
	sub_82A02B28(ctx, base);
	// stw r25,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r25.u32);
loc_82A2CDBC:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2CDC8"))) PPC_WEAK_FUNC(sub_82A2CDC8);
PPC_FUNC_IMPL(__imp__sub_82A2CDC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2CDD0;
	__savegprlr_29(ctx, base);
	// stwu r1,-1184(r1)
	ea = -1184 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2ce08
	if (!ctx.cr6.eq) goto loc_82A2CE08;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2CDF0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ce00
	if (ctx.cr6.eq) goto loc_82A2CE00;
	// bl 0x82a08db0
	ctx.lr = 0x82A2CDFC;
	sub_82A08DB0(ctx, base);
	// b 0x82a2ce04
	goto loc_82A2CE04;
loc_82A2CE00:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2CE04:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2CE08:
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2ce90
	if (!ctx.cr6.eq) goto loc_82A2CE90;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,12296(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12296);
	// bl 0x82a2a4e8
	ctx.lr = 0x82A2CE24;
	sub_82A2A4E8(ctx, base);
	// lwz r11,1204(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1204);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x82a2ce4c
	if (ctx.cr6.lt) goto loc_82A2CE4C;
	// lwz r10,1200(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1200);
	// mulli r11,r11,596
	ctx.r11.s64 = ctx.r11.s64 * 596;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r31,44(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// cmpwi cr6,r31,-1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, -1, ctx.xer);
	// bne cr6,0x82a2ce54
	if (!ctx.cr6.eq) goto loc_82A2CE54;
loc_82A2CE4C:
	// lwz r11,12296(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12296);
	// lwz r31,92(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
loc_82A2CE54:
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239200
	ctx.lr = 0x82A2CE60;
	sub_82239200(ctx, base);
	// li r4,91
	ctx.r4.s64 = 91;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239280
	ctx.lr = 0x82A2CE6C;
	sub_82239280(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239330
	ctx.lr = 0x82A2CE78;
	sub_82239330(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,3988(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3988);
	// bl 0x82a03600
	ctx.lr = 0x82A2CE88;
	sub_82A03600(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239548
	ctx.lr = 0x82A2CE90;
	sub_82239548(ctx, base);
loc_82A2CE90:
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2CE98"))) PPC_WEAK_FUNC(sub_82A2CE98);
PPC_FUNC_IMPL(__imp__sub_82A2CE98) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82A2CEA0;
	__savegprlr_23(ctx, base);
	// stwu r1,-1232(r1)
	ea = -1232 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r24,r4
	ctx.r24.u64 = ctx.r4.u64;
	// lbz r11,2804(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + 2804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2d110
	if (!ctx.cr6.eq) goto loc_82A2D110;
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// li r25,0
	ctx.r25.s64 = 0;
	// li r27,0
	ctx.r27.s64 = 0;
	// lwz r11,-836(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -836);
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x82a2cf98
	if (!ctx.cr6.gt) goto loc_82A2CF98;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// li r28,0
	ctx.r28.s64 = 0;
	// addi r26,r10,-27000
	ctx.r26.s64 = ctx.r10.s64 + -27000;
	// lis r30,-31973
	ctx.r30.s64 = -2095382528;
loc_82A2CEE4:
	// lwz r10,760(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwzx r10,r10,r28
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r28.u32);
	// lwz r31,64(r10)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 64);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2cf78
	if (ctx.cr6.eq) goto loc_82A2CF78;
	// lwz r4,5888(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 5888);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x82a2cf18
	if (!ctx.cr6.eq) goto loc_82A2CF18;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8236d0d8
	ctx.lr = 0x82A2CF0C;
	sub_8236D0D8(ctx, base);
	// stw r3,5888(r30)
	PPC_STORE_U32(ctx.r30.u32 + 5888, ctx.r3.u32);
	// bl 0x8232d548
	ctx.lr = 0x82A2CF14;
	sub_8232D548(ctx, base);
	// lwz r4,5888(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 5888);
loc_82A2CF18:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822e1bd0
	ctx.lr = 0x82A2CF20;
	sub_822E1BD0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a2cf74
	if (ctx.cr6.eq) goto loc_82A2CF74;
	// lwz r11,2024(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2024);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2cf74
	if (ctx.cr6.eq) goto loc_82A2CF74;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// lwz r10,1652(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1652);
	// rlwinm r10,r10,0,20,18
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFEFFF;
	// stw r10,1652(r11)
	PPC_STORE_U32(ctx.r11.u32 + 1652, ctx.r10.u32);
	// lwz r11,2024(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2024);
	// lwz r11,1652(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1652);
	// rlwinm r11,r11,0,17,17
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,16384
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 16384, ctx.xer);
	// bne cr6,0x82a2cf74
	if (!ctx.cr6.eq) goto loc_82A2CF74;
	// lwz r11,2024(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2024);
	// lwz r11,3184(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 3184);
	// lwz r11,1652(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1652);
	// rlwinm r11,r11,0,17,17
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4000;
	// cmplwi cr6,r11,16384
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 16384, ctx.xer);
	// bne cr6,0x82a2cf74
	if (!ctx.cr6.eq) goto loc_82A2CF74;
	// li r25,1
	ctx.r25.s64 = 1;
loc_82A2CF74:
	// lwz r11,-836(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -836);
loc_82A2CF78:
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r28,r28,4
	ctx.r28.s64 = ctx.r28.s64 + 4;
	// cmpw cr6,r27,r10
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x82a2cee4
	if (ctx.cr6.lt) goto loc_82A2CEE4;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// beq cr6,0x82a2cf98
	if (ctx.cr6.eq) goto loc_82A2CF98;
	// li r24,-1
	ctx.r24.s64 = -1;
loc_82A2CF98:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2cfc8
	if (!ctx.cr6.eq) goto loc_82A2CFC8;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2CFB0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2cfc0
	if (ctx.cr6.eq) goto loc_82A2CFC0;
	// bl 0x82a08db0
	ctx.lr = 0x82A2CFBC;
	sub_82A08DB0(ctx, base);
	// b 0x82a2cfc4
	goto loc_82A2CFC4;
loc_82A2CFC0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2CFC4:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2CFC8:
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d0e0
	if (ctx.cr6.eq) goto loc_82A2D0E0;
	// cmpwi cr6,r24,-1
	ctx.cr6.compare<int32_t>(ctx.r24.s32, -1, ctx.xer);
	// beq cr6,0x82a2d028
	if (ctx.cr6.eq) goto loc_82A2D028;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,12296(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12296);
	// bl 0x82a2a4e8
	ctx.lr = 0x82A2CFEC;
	sub_82A2A4E8(ctx, base);
	// lwz r11,1204(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1204);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x82a2d014
	if (ctx.cr6.lt) goto loc_82A2D014;
	// lwz r10,1200(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1200);
	// mulli r11,r11,596
	ctx.r11.s64 = ctx.r11.s64 * 596;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a2d01c
	if (!ctx.cr6.eq) goto loc_82A2D01C;
loc_82A2D014:
	// lwz r11,12296(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12296);
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
loc_82A2D01C:
	// cmpw cr6,r11,r24
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r24.s32, ctx.xer);
	// ble cr6,0x82a2d028
	if (!ctx.cr6.gt) goto loc_82A2D028;
	// mr r24,r11
	ctx.r24.u64 = ctx.r11.u64;
loc_82A2D028:
	// bl 0x82219f20
	ctx.lr = 0x82A2D02C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D03C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D04C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D05C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239200
	ctx.lr = 0x82A2D06C;
	sub_82239200(ctx, base);
	// li r4,91
	ctx.r4.s64 = 91;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239280
	ctx.lr = 0x82A2D078;
	sub_82239280(ctx, base);
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239330
	ctx.lr = 0x82A2D084;
	sub_82239330(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A2D088;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D098;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D0A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d0d8
	if (ctx.cr6.eq) goto loc_82A2D0D8;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2d0d8
	if (ctx.cr6.eq) goto loc_82A2D0D8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D0D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2D0D8:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239548
	ctx.lr = 0x82A2D0E0;
	sub_82239548(ctx, base);
loc_82A2D0E0:
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// bne cr6,0x82a2d0f4
	if (!ctx.cr6.eq) goto loc_82A2D0F4;
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,12332(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12332, ctx.r11.u32);
loc_82A2D0F4:
	// cmpwi cr6,r24,-1
	ctx.cr6.compare<int32_t>(ctx.r24.s32, -1, ctx.xer);
	// beq cr6,0x82a2d100
	if (ctx.cr6.eq) goto loc_82A2D100;
	// addi r24,r24,2
	ctx.r24.s64 = ctx.r24.s64 + 2;
loc_82A2D100:
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// stb r11,2804(r23)
	PPC_STORE_U8(ctx.r23.u32 + 2804, ctx.r11.u8);
	// bl 0x82374fe0
	ctx.lr = 0x82A2D110;
	sub_82374FE0(ctx, base);
loc_82A2D110:
	// addi r1,r1,1232
	ctx.r1.s64 = ctx.r1.s64 + 1232;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D118"))) PPC_WEAK_FUNC(sub_82A2D118);
PPC_FUNC_IMPL(__imp__sub_82A2D118) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e5c
	ctx.lr = 0x82A2D120;
	__savegprlr_25(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r25,r5
	ctx.r25.u64 = ctx.r5.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x82a2d14c
	if (!ctx.cr6.eq) goto loc_82A2D14C;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82A2D14C:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A2D154;
	sub_82A02D50(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r27,1
	ctx.r27.s64 = 1;
	// cmpwi cr6,r31,1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 1, ctx.xer);
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// beq cr6,0x82a2d170
	if (ctx.cr6.eq) goto loc_82A2D170;
	// cmpwi cr6,r31,3
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 3, ctx.xer);
	// bne cr6,0x82a2d28c
	if (!ctx.cr6.eq) goto loc_82A2D28C;
loc_82A2D170:
	// lbz r11,4020(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4020);
	// clrlwi r10,r11,31
	ctx.r10.u64 = ctx.r11.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a2d1b8
	if (!ctx.cr6.eq) goto loc_82A2D1B8;
	// rlwimi r11,r27,0,31,23
	ctx.r11.u64 = (__builtin_rotateleft32(ctx.r27.u32, 0) & 0xFFFFFFFFFFFFFF01) | (ctx.r11.u64 & 0xFE);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stb r11,4020(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4020, ctx.r11.u8);
	// bl 0x82a0cf50
	ctx.lr = 0x82A2D194;
	sub_82A0CF50(ctx, base);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2D198;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d1b0
	if (ctx.cr6.eq) goto loc_82A2D1B0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,2784(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2784);
	// bl 0x82a33138
	ctx.lr = 0x82A2D1B0;
	sub_82A33138(ctx, base);
loc_82A2D1B0:
	// li r31,0
	ctx.r31.s64 = 0;
	// b 0x82a2d22c
	goto loc_82A2D22C;
loc_82A2D1B8:
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a2d1f8
	if (!ctx.cr6.eq) goto loc_82A2D1F8;
	// ori r11,r11,4
	ctx.r11.u64 = ctx.r11.u64 | 4;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stb r11,4020(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4020, ctx.r11.u8);
	// bl 0x82a0cf50
	ctx.lr = 0x82A2D1D8;
	sub_82A0CF50(ctx, base);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2D1DC;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d228
	if (ctx.cr6.eq) goto loc_82A2D228;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,2784(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2784);
	// bl 0x82a33138
	ctx.lr = 0x82A2D1F4;
	sub_82A33138(ctx, base);
	// b 0x82a2d228
	goto loc_82A2D228;
loc_82A2D1F8:
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// cmpwi cr6,r31,1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 1, ctx.xer);
	// bne cr6,0x82a2d218
	if (!ctx.cr6.eq) goto loc_82A2D218;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82a02d50
	ctx.lr = 0x82A2D20C;
	sub_82A02D50(ctx, base);
	// li r31,0
	ctx.r31.s64 = 0;
	// stw r27,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r27.u32);
	// b 0x82a2d22c
	goto loc_82A2D22C;
loc_82A2D218:
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82a02d50
	ctx.lr = 0x82A2D220;
	sub_82A02D50(ctx, base);
	// li r11,3
	ctx.r11.s64 = 3;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_82A2D228:
	// li r31,2
	ctx.r31.s64 = 2;
loc_82A2D22C:
	// stw r31,4(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4, ctx.r31.u32);
	// lwz r3,12304(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d25c
	if (!ctx.cr6.eq) goto loc_82A2D25C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2D244;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d254
	if (ctx.cr6.eq) goto loc_82A2D254;
	// bl 0x82a08db0
	ctx.lr = 0x82A2D250;
	sub_82A08DB0(ctx, base);
	// b 0x82a2d258
	goto loc_82A2D258;
loc_82A2D254:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D258:
	// stw r3,12304(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12304, ctx.r3.u32);
loc_82A2D25C:
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2d28c
	if (!ctx.cr6.eq) goto loc_82A2D28C;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x823099b0
	ctx.lr = 0x82A2D278;
	sub_823099B0(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r3,2784(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2784);
	// bl 0x82a34278
	ctx.lr = 0x82A2D284;
	sub_82A34278(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2D28C;
	sub_82309A60(ctx, base);
loc_82A2D28C:
	// li r28,-1
	ctx.r28.s64 = -1;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x82a2d2a0
	if (!ctx.cr6.eq) goto loc_82A2D2A0;
	// mr r28,r27
	ctx.r28.u64 = ctx.r27.u64;
	// b 0x82a2d2ac
	goto loc_82A2D2AC;
loc_82A2D2A0:
	// cmpwi cr6,r31,2
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 2, ctx.xer);
	// bne cr6,0x82a2d2ac
	if (!ctx.cr6.eq) goto loc_82A2D2AC;
	// li r28,3
	ctx.r28.s64 = 3;
loc_82A2D2AC:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2D2B8;
	sub_82A02D50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2d33c
	if (ctx.cr6.eq) goto loc_82A2D33C;
	// lbz r8,4020(r30)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4020);
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// li r11,0
	ctx.r11.s64 = 0;
loc_82A2D2D4:
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// and r6,r9,r8
	ctx.r6.u64 = ctx.r9.u64 & ctx.r8.u64;
	// clrlwi r6,r6,24
	ctx.r6.u64 = ctx.r6.u32 & 0xFF;
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// beq cr6,0x82a2d300
	if (ctx.cr6.eq) goto loc_82A2D300;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// rlwinm r10,r9,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// blt cr6,0x82a2d2d4
	if (ctx.cr6.lt) goto loc_82A2D2D4;
	// b 0x82a2d310
	goto loc_82A2D310;
loc_82A2D300:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// mr r7,r11
	ctx.r7.u64 = ctx.r11.u64;
	// or r11,r10,r8
	ctx.r11.u64 = ctx.r10.u64 | ctx.r8.u64;
	// stb r11,4020(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4020, ctx.r11.u8);
loc_82A2D310:
	// stw r7,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r7.u32);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2D318;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d334
	if (ctx.cr6.eq) goto loc_82A2D334;
	// bl 0x82a249e8
	ctx.lr = 0x82A2D330;
	sub_82A249E8(ctx, base);
	// b 0x82a2d34c
	goto loc_82A2D34C;
loc_82A2D334:
	// bl 0x82a29988
	ctx.lr = 0x82A2D338;
	sub_82A29988(ctx, base);
	// b 0x82a2d34c
	goto loc_82A2D34C;
loc_82A2D33C:
	// lbz r11,4020(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4020);
	// slw r10,r27,r28
	ctx.r10.u64 = ctx.r28.u8 & 0x20 ? 0 : (ctx.r27.u32 << (ctx.r28.u8 & 0x3F));
	// or r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 | ctx.r11.u64;
	// stb r11,4020(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4020, ctx.r11.u8);
loc_82A2D34C:
	// addi r9,r25,1
	ctx.r9.s64 = ctx.r25.s64 + 1;
	// lwz r11,64(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 64);
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// stw r27,20(r29)
	PPC_STORE_U32(ctx.r29.u32 + 20, ctx.r27.u32);
	// cntlzw r8,r9
	ctx.r8.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// ld r10,56(r29)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r29.u32 + 56);
	// li r9,1
	ctx.r9.s64 = 1;
	// ld r6,8(r29)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r29.u32 + 8);
	// rlwinm r7,r8,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// xori r7,r7,1
	ctx.r7.u64 = ctx.r7.u64 ^ 1;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// bl 0x82a02b28
	ctx.lr = 0x82A2D388;
	sub_82A02B28(ctx, base);
	// lwz r11,44(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 44);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r11,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r11.u32);
	// lwz r11,48(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 48);
	// stw r11,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r11.u32);
	// lwz r11,40(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 40);
	// stw r11,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r11.u32);
	// lwz r11,52(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 52);
	// stw r11,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r11.u32);
	// lwz r3,12304(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d3d8
	if (!ctx.cr6.eq) goto loc_82A2D3D8;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2D3C0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d3d0
	if (ctx.cr6.eq) goto loc_82A2D3D0;
	// bl 0x82a08db0
	ctx.lr = 0x82A2D3CC;
	sub_82A08DB0(ctx, base);
	// b 0x82a2d3d4
	goto loc_82A2D3D4;
loc_82A2D3D0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D3D4:
	// stw r3,12304(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12304, ctx.r3.u32);
loc_82A2D3D8:
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d410
	if (ctx.cr6.eq) goto loc_82A2D410;
	// bl 0x82a249e8
	ctx.lr = 0x82A2D3F0;
	sub_82A249E8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a249e8
	ctx.lr = 0x82A2D3FC;
	sub_82A249E8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0dfa0
	ctx.lr = 0x82A2D404;
	sub_82A0DFA0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
loc_82A2D410:
	// bl 0x82a29988
	ctx.lr = 0x82A2D414;
	sub_82A29988(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A2D420;
	sub_82A29988(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0dfa0
	ctx.lr = 0x82A2D428;
	sub_82A0DFA0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82e28eac
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D438"))) PPC_WEAK_FUNC(sub_82A2D438);
PPC_FUNC_IMPL(__imp__sub_82A2D438) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31968
	ctx.r11.s64 = -2095054848;
	// addi r3,r11,23240
	ctx.r3.s64 = ctx.r11.s64 + 23240;
	// bl 0x82a0b718
	ctx.lr = 0x82A2D450;
	sub_82A0B718(ctx, base);
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// lis r11,-31968
	ctx.r11.s64 = -2095054848;
	// addi r11,r11,23616
	ctx.r11.s64 = ctx.r11.s64 + 23616;
	// stw r3,12296(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12296, ctx.r3.u32);
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x82a280e0
	ctx.lr = 0x82A2D468;
	sub_82A280E0(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// addi r10,r11,12480
	ctx.r10.s64 = ctx.r11.s64 + 12480;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r3,12320(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12320, ctx.r3.u32);
	// lis r11,-31968
	ctx.r11.s64 = -2095054848;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// addi r11,r11,23588
	ctx.r11.s64 = ctx.r11.s64 + 23588;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r10.u32);
	// stw r10,8(r11)
	PPC_STORE_U32(ctx.r11.u32 + 8, ctx.r10.u32);
	// stw r10,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r10.u32);
	// stw r10,16(r11)
	PPC_STORE_U32(ctx.r11.u32 + 16, ctx.r10.u32);
	// stw r10,20(r11)
	PPC_STORE_U32(ctx.r11.u32 + 20, ctx.r10.u32);
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r11,12340(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12340, ctx.r11.u32);
	// bl 0x82a068f8
	ctx.lr = 0x82A2D4AC;
	sub_82A068F8(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r3,12344(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12344, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D4C8"))) PPC_WEAK_FUNC(sub_82A2D4C8);
PPC_FUNC_IMPL(__imp__sub_82A2D4C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d504
	if (ctx.cr6.eq) goto loc_82A2D504;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D4FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12344(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12344, ctx.r11.u32);
loc_82A2D504:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12340);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d520
	if (ctx.cr6.eq) goto loc_82A2D520;
	// bl 0x82a1e700
	ctx.lr = 0x82A2D518;
	sub_82A1E700(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12340(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12340, ctx.r11.u32);
loc_82A2D520:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12320(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12320);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d53c
	if (ctx.cr6.eq) goto loc_82A2D53C;
	// bl 0x82a241b8
	ctx.lr = 0x82A2D534;
	sub_82A241B8(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12320(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12320, ctx.r11.u32);
loc_82A2D53C:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12296(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12296);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d558
	if (ctx.cr6.eq) goto loc_82A2D558;
	// bl 0x82a0b920
	ctx.lr = 0x82A2D550;
	sub_82A0B920(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12296(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12296, ctx.r11.u32);
loc_82A2D558:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D570"))) PPC_WEAK_FUNC(sub_82A2D570);
PPC_FUNC_IMPL(__imp__sub_82A2D570) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,36(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 36);
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d5a8
	if (ctx.cr6.eq) goto loc_82A2D5A8;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82a2d5d8
	goto loc_82A2D5D8;
loc_82A2D5A8:
	// bl 0x82a2a440
	ctx.lr = 0x82A2D5AC;
	sub_82A2A440(ctx, base);
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lfs f0,-2120(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -2120);
	ctx.f0.f64 = double(temp.f32);
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// fmuls f0,f31,f0
	ctx.f0.f64 = double(float(ctx.f31.f64 * ctx.f0.f64));
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f0.u32);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82a07a68
	ctx.lr = 0x82A2D5D4;
	sub_82A07A68(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
loc_82A2D5D8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D5F8"))) PPC_WEAK_FUNC(sub_82A2D5F8);
PPC_FUNC_IMPL(__imp__sub_82A2D5F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,36(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 36);
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d628
	if (ctx.cr6.eq) goto loc_82A2D628;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82a2d654
	goto loc_82A2D654;
loc_82A2D628:
	// bl 0x82a2a440
	ctx.lr = 0x82A2D62C;
	sub_82A2A440(ctx, base);
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lfs f0,-30828(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -30828);
	ctx.f0.f64 = double(temp.f32);
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// fmuls f0,f31,f0
	ctx.f0.f64 = double(float(ctx.f31.f64 * ctx.f0.f64));
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r11
	PPC_STORE_U32(ctx.r11.u32, ctx.f0.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x82a07af0
	ctx.lr = 0x82A2D650;
	sub_82A07AF0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
loc_82A2D654:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D670"))) PPC_WEAK_FUNC(sub_82A2D670);
PPC_FUNC_IMPL(__imp__sub_82A2D670) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,36(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 36);
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d6a8
	if (ctx.cr6.eq) goto loc_82A2D6A8;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82A2D6A8:
	// bl 0x82a2a440
	ctx.lr = 0x82A2D6AC;
	sub_82A2A440(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a07b58
	ctx.lr = 0x82A2D6B4;
	sub_82A07B58(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D6D0"))) PPC_WEAK_FUNC(sub_82A2D6D0);
PPC_FUNC_IMPL(__imp__sub_82A2D6D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2D6D8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// mr r29,r7
	ctx.r29.u64 = ctx.r7.u64;
	// bl 0x82a2a440
	ctx.lr = 0x82A2D6EC;
	sub_82A2A440(ctx, base);
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// stw r31,580(r3)
	PPC_STORE_U32(ctx.r3.u32 + 580, ctx.r31.u32);
	// stw r29,588(r3)
	PPC_STORE_U32(ctx.r3.u32 + 588, ctx.r29.u32);
	// stw r11,584(r3)
	PPC_STORE_U32(ctx.r3.u32 + 584, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D708"))) PPC_WEAK_FUNC(sub_82A2D708);
PPC_FUNC_IMPL(__imp__sub_82A2D708) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A2D710;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// bl 0x82a2a590
	ctx.lr = 0x82A2D724;
	sub_82A2A590(ctx, base);
	// addi r30,r31,20
	ctx.r30.s64 = ctx.r31.s64 + 20;
	// li r27,3
	ctx.r27.s64 = 3;
loc_82A2D72C:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2d75c
	if (ctx.cr6.eq) goto loc_82A2D75C;
	// rotlwi r3,r11,0
	ctx.r3.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// addi r7,r31,120
	ctx.r7.s64 = ctx.r31.s64 + 120;
	// addi r6,r31,44
	ctx.r6.s64 = ctx.r31.s64 + 44;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2D75C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2D75C:
	// addi r27,r27,-1
	ctx.r27.s64 = ctx.r27.s64 + -1;
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x82a2d72c
	if (!ctx.cr6.eq) goto loc_82A2D72C;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D778"))) PPC_WEAK_FUNC(sub_82A2D778);
PPC_FUNC_IMPL(__imp__sub_82A2D778) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2D780;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d7bc
	if (!ctx.cr6.eq) goto loc_82A2D7BC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2D7A4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d7b4
	if (ctx.cr6.eq) goto loc_82A2D7B4;
	// bl 0x82a08db0
	ctx.lr = 0x82A2D7B0;
	sub_82A08DB0(ctx, base);
	// b 0x82a2d7b8
	goto loc_82A2D7B8;
loc_82A2D7B4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D7B8:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2D7BC:
	// li r11,1
	ctx.r11.s64 = 1;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r11.u32);
	// lwz r11,12304(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// stw r10,48(r11)
	PPC_STORE_U32(ctx.r11.u32 + 48, ctx.r10.u32);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d7e4
	if (ctx.cr6.eq) goto loc_82A2D7E4;
	// lwz r30,0(r30)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// b 0x82a2d7ec
	goto loc_82A2D7EC;
loc_82A2D7E4:
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r30,r11,-29761
	ctx.r30.s64 = ctx.r11.s64 + -29761;
loc_82A2D7EC:
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d828
	if (!ctx.cr6.eq) goto loc_82A2D828;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2D804;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d814
	if (ctx.cr6.eq) goto loc_82A2D814;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2D810;
	sub_82A13FE0(ctx, base);
	// b 0x82a2d818
	goto loc_82A2D818;
loc_82A2D814:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D818:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2D828:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a2bb20
	ctx.lr = 0x82A2D834;
	sub_82A2BB20(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D840"))) PPC_WEAK_FUNC(sub_82A2D840);
PPC_FUNC_IMPL(__imp__sub_82A2D840) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2D848;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d890
	if (!ctx.cr6.eq) goto loc_82A2D890;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2D86C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d87c
	if (ctx.cr6.eq) goto loc_82A2D87C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2D878;
	sub_82A13FE0(ctx, base);
	// b 0x82a2d880
	goto loc_82A2D880;
loc_82A2D87C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D880:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2D890:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82a2bd68
	ctx.lr = 0x82A2D89C;
	sub_82A2BD68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D8A8"))) PPC_WEAK_FUNC(sub_82A2D8A8);
PPC_FUNC_IMPL(__imp__sub_82A2D8A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d8f4
	if (!ctx.cr6.eq) goto loc_82A2D8F4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2D8D0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d8e0
	if (ctx.cr6.eq) goto loc_82A2D8E0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2D8DC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2d8e4
	goto loc_82A2D8E4;
loc_82A2D8E0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D8E4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2D8F4:
	// bl 0x82a2c860
	ctx.lr = 0x82A2D8F8;
	sub_82A2C860(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2D910"))) PPC_WEAK_FUNC(sub_82A2D910);
PPC_FUNC_IMPL(__imp__sub_82A2D910) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2D918;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d960
	if (!ctx.cr6.eq) goto loc_82A2D960;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2D93C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d94c
	if (ctx.cr6.eq) goto loc_82A2D94C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2D948;
	sub_82A13FE0(ctx, base);
	// b 0x82a2d950
	goto loc_82A2D950;
loc_82A2D94C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D950:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2D960:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2D96C;
	sub_82A02D50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2d998
	if (ctx.cr6.eq) goto loc_82A2D998;
	// lwz r11,40(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 40);
	// cmpw cr6,r11,r29
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r29.s32, ctx.xer);
	// beq cr6,0x82a2d998
	if (ctx.cr6.eq) goto loc_82A2D998;
	// stw r29,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r29.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2D990;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a2c210
	ctx.lr = 0x82A2D998;
	sub_82A2C210(ctx, base);
loc_82A2D998:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2D9A0"))) PPC_WEAK_FUNC(sub_82A2D9A0);
PPC_FUNC_IMPL(__imp__sub_82A2D9A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2D9A8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2d9f0
	if (!ctx.cr6.eq) goto loc_82A2D9F0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2D9CC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2d9dc
	if (ctx.cr6.eq) goto loc_82A2D9DC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2D9D8;
	sub_82A13FE0(ctx, base);
	// b 0x82a2d9e0
	goto loc_82A2D9E0;
loc_82A2D9DC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2D9E0:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2D9F0:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2D9FC;
	sub_82A02D50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2da1c
	if (ctx.cr6.eq) goto loc_82A2DA1C;
	// stw r29,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r29.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DA14;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a2c210
	ctx.lr = 0x82A2DA1C;
	sub_82A2C210(ctx, base);
loc_82A2DA1C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DA28"))) PPC_WEAK_FUNC(sub_82A2DA28);
PPC_FUNC_IMPL(__imp__sub_82A2DA28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2DA30;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2da78
	if (!ctx.cr6.eq) goto loc_82A2DA78;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DA54;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2da64
	if (ctx.cr6.eq) goto loc_82A2DA64;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DA60;
	sub_82A13FE0(ctx, base);
	// b 0x82a2da68
	goto loc_82A2DA68;
loc_82A2DA64:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DA68:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DA78:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2DA84;
	sub_82A02D50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2daa4
	if (ctx.cr6.eq) goto loc_82A2DAA4;
	// stw r29,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r29.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DA9C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a2c210
	ctx.lr = 0x82A2DAA4;
	sub_82A2C210(ctx, base);
loc_82A2DAA4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DAB0"))) PPC_WEAK_FUNC(sub_82A2DAB0);
PPC_FUNC_IMPL(__imp__sub_82A2DAB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2DAB8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2db00
	if (!ctx.cr6.eq) goto loc_82A2DB00;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DADC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2daec
	if (ctx.cr6.eq) goto loc_82A2DAEC;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DAE8;
	sub_82A13FE0(ctx, base);
	// b 0x82a2daf0
	goto loc_82A2DAF0;
loc_82A2DAEC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DAF0:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DB00:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02d50
	ctx.lr = 0x82A2DB0C;
	sub_82A02D50(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2db2c
	if (ctx.cr6.eq) goto loc_82A2DB2C;
	// stw r29,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r29.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DB24;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a2c210
	ctx.lr = 0x82A2DB2C;
	sub_82A2C210(ctx, base);
loc_82A2DB2C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DB38"))) PPC_WEAK_FUNC(sub_82A2DB38);
PPC_FUNC_IMPL(__imp__sub_82A2DB38) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2db84
	if (!ctx.cr6.eq) goto loc_82A2DB84;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DB60;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2db70
	if (ctx.cr6.eq) goto loc_82A2DB70;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DB6C;
	sub_82A13FE0(ctx, base);
	// b 0x82a2db74
	goto loc_82A2DB74;
loc_82A2DB70:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DB74:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DB84:
	// bl 0x82a2cdc8
	ctx.lr = 0x82A2DB88;
	sub_82A2CDC8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2DBA0"))) PPC_WEAK_FUNC(sub_82A2DBA0);
PPC_FUNC_IMPL(__imp__sub_82A2DBA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2DBA8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2dbec
	if (!ctx.cr6.eq) goto loc_82A2DBEC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DBC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2dbd8
	if (ctx.cr6.eq) goto loc_82A2DBD8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DBD4;
	sub_82A13FE0(ctx, base);
	// b 0x82a2dbdc
	goto loc_82A2DBDC;
loc_82A2DBD8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DBDC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DBEC:
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2dc4c
	if (ctx.cr6.eq) goto loc_82A2DC4C;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2DC00;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2dc30
	if (ctx.cr6.eq) goto loc_82A2DC30;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4404
	ctx.r11.s64 = ctx.r11.s64 + -4404;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DC1C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DC28;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DC30:
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DC38;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DC44;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DC4C:
	// lbz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2dc7c
	if (!ctx.cr6.eq) goto loc_82A2DC7C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2DC5C;
	sub_82A0BFB0(ctx, base);
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2dc7c
	if (!ctx.cr6.eq) goto loc_82A2DC7C;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DC74;
	sub_82A2AE30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DC7C:
	// lbz r11,16(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2dd2c
	if (!ctx.cr6.eq) goto loc_82A2DD2C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2DC8C;
	sub_82A0BFB0(ctx, base);
	// lwz r11,24(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2dd2c
	if (ctx.cr6.eq) goto loc_82A2DD2C;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DC9C;
	sub_82A186E0(ctx, base);
	// addic. r11,r3,2734
	ctx.xer.ca = ctx.r3.u32 > 4294964561;
	ctx.r11.s64 = ctx.r3.s64 + 2734;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq 0x82a2dcd4
	if (ctx.cr0.eq) goto loc_82A2DCD4;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DCA8;
	sub_82A186E0(ctx, base);
	// addi r11,r3,2734
	ctx.r11.s64 = ctx.r3.s64 + 2734;
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82A2DCB0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82a2dcb0
	if (!ctx.cr6.eq) goto loc_82A2DCB0;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2dd2c
	if (!ctx.cr6.eq) goto loc_82A2DD2C;
loc_82A2DCD4:
	// bl 0x82a186e0
	ctx.lr = 0x82A2DCD8;
	sub_82A186E0(ctx, base);
	// lwz r30,4016(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A2DCE0:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A2DCEC;
	sub_82A02D50(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2dd00
	if (ctx.cr6.eq) goto loc_82A2DD00;
	// lwz r11,16(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2dd10
	if (ctx.cr6.eq) goto loc_82A2DD10;
loc_82A2DD00:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,4
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 4, ctx.xer);
	// blt cr6,0x82a2dce0
	if (ctx.cr6.lt) goto loc_82A2DCE0;
	// b 0x82a2dd2c
	goto loc_82A2DD2C;
loc_82A2DD10:
	// bl 0x82a32e60
	ctx.lr = 0x82A2DD14;
	sub_82A32E60(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DD1C;
	sub_82A186E0(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,2734
	ctx.r3.s64 = ctx.r3.s64 + 2734;
	// bl 0x82e2ab28
	ctx.lr = 0x82A2DD2C;
	sub_82E2AB28(ctx, base);
loc_82A2DD2C:
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DD38;
	sub_82A2AE30(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,16(r29)
	PPC_STORE_U8(ctx.r29.u32 + 16, ctx.r11.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DD48"))) PPC_WEAK_FUNC(sub_82A2DD48);
PPC_FUNC_IMPL(__imp__sub_82A2DD48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2DD50;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2dd98
	if (!ctx.cr6.eq) goto loc_82A2DD98;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DD74;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2dd84
	if (ctx.cr6.eq) goto loc_82A2DD84;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DD80;
	sub_82A13FE0(ctx, base);
	// b 0x82a2dd88
	goto loc_82A2DD88;
loc_82A2DD84:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
loc_82A2DD88:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DD98:
	// lbz r11,1708(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1708);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2ddd0
	if (ctx.cr6.eq) goto loc_82A2DDD0;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DDA8;
	sub_82A186E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stb r29,1708(r11)
	PPC_STORE_U8(ctx.r11.u32 + 1708, ctx.r29.u8);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,40(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2DDC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DDD0:
	// bl 0x82a186e0
	ctx.lr = 0x82A2DDD4;
	sub_82A186E0(ctx, base);
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2de3c
	if (ctx.cr6.eq) goto loc_82A2DE3C;
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2DDE8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2de20
	if (ctx.cr6.eq) goto loc_82A2DE20;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-4420
	ctx.r11.s64 = ctx.r11.s64 + -4420;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DE0C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DE18;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DE20:
	// mr r31,r29
	ctx.r31.u64 = ctx.r29.u64;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DE28;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DE34;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DE3C:
	// lbz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 16);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2de60
	if (ctx.cr6.eq) goto loc_82A2DE60;
	// li r4,3
	ctx.r4.s64 = 3;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DE54;
	sub_82A2AE30(ctx, base);
	// stb r29,16(r30)
	PPC_STORE_U8(ctx.r30.u32 + 16, ctx.r29.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DE60:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DE68;
	sub_82A2AE30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DE70"))) PPC_WEAK_FUNC(sub_82A2DE70);
PPC_FUNC_IMPL(__imp__sub_82A2DE70) {
	PPC_FUNC_PROLOGUE();
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82a2ae30
	sub_82A2AE30(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DE78"))) PPC_WEAK_FUNC(sub_82A2DE78);
PPC_FUNC_IMPL(__imp__sub_82A2DE78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2DE80;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r29,r4,-690
	ctx.r29.s64 = ctx.r4.s64 + -690;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2dec8
	if (!ctx.cr6.eq) goto loc_82A2DEC8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DEA4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2deb4
	if (ctx.cr6.eq) goto loc_82A2DEB4;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DEB0;
	sub_82A13FE0(ctx, base);
	// b 0x82a2deb8
	goto loc_82A2DEB8;
loc_82A2DEB4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DEB8:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DEC8:
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2df28
	if (ctx.cr6.eq) goto loc_82A2DF28;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2DEDC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2df0c
	if (ctx.cr6.eq) goto loc_82A2DF0C;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4404
	ctx.r11.s64 = ctx.r11.s64 + -4404;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2DEF8;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DF04;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DF0C:
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DF14;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2DF20;
	sub_82A02300(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DF28:
	// lbz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2df50
	if (ctx.cr6.eq) goto loc_82A2DF50;
	// li r11,0
	ctx.r11.s64 = 0;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stb r11,16(r30)
	PPC_STORE_U8(ctx.r30.u32 + 16, ctx.r11.u8);
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DF48;
	sub_82A2AE30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DF50:
	// cmpwi cr6,r29,-690
	ctx.cr6.compare<int32_t>(ctx.r29.s32, -690, ctx.xer);
	// bne cr6,0x82a2df88
	if (!ctx.cr6.eq) goto loc_82A2DF88;
	// addic. r31,r30,24
	ctx.xer.ca = ctx.r30.u32 > 4294967271;
	ctx.r31.s64 = ctx.r30.s64 + 24;
	ctx.cr0.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq 0x82a2df88
	if (ctx.cr0.eq) goto loc_82A2DF88;
	// bl 0x82a186e0
	ctx.lr = 0x82A2DF64;
	sub_82A186E0(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,2734
	ctx.r3.s64 = ctx.r3.s64 + 2734;
	// bl 0x82e2ab28
	ctx.lr = 0x82A2DF74;
	sub_82E2AB28(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DF80;
	sub_82A2AE30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2DF88:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2DF94;
	sub_82A2AE30(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2DFA0"))) PPC_WEAK_FUNC(sub_82A2DFA0);
PPC_FUNC_IMPL(__imp__sub_82A2DFA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2dff4
	if (!ctx.cr6.eq) goto loc_82A2DFF4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2DFD0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2dfe0
	if (ctx.cr6.eq) goto loc_82A2DFE0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2DFDC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2dfe4
	goto loc_82A2DFE4;
loc_82A2DFE0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2DFE4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2DFF4:
	// lbz r11,4044(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e04c
	if (ctx.cr6.eq) goto loc_82A2E04C;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2E008;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e034
	if (ctx.cr6.eq) goto loc_82A2E034;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4404
	ctx.r11.s64 = ctx.r11.s64 + -4404;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2E024;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2E030;
	sub_82A02300(ctx, base);
	// b 0x82a2e058
	goto loc_82A2E058;
loc_82A2E034:
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82a186e0
	ctx.lr = 0x82A2E03C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2E048;
	sub_82A02300(ctx, base);
	// b 0x82a2e058
	goto loc_82A2E058;
loc_82A2E04C:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a2ae30
	ctx.lr = 0x82A2E058;
	sub_82A2AE30(ctx, base);
loc_82A2E058:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2E070"))) PPC_WEAK_FUNC(sub_82A2E070);
PPC_FUNC_IMPL(__imp__sub_82A2E070) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e38
	ctx.lr = 0x82A2E078;
	__savegprlr_16(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r7
	ctx.r31.u64 = ctx.r7.u64;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r19,r5
	ctx.r19.u64 = ctx.r5.u64;
	// addi r4,r11,4036
	ctx.r4.s64 = ctx.r11.s64 + 4036;
	// mr r16,r6
	ctx.r16.u64 = ctx.r6.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r17,r8
	ctx.r17.u64 = ctx.r8.u64;
	// mr r18,r9
	ctx.r18.u64 = ctx.r9.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,40(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E0B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e10c
	if (ctx.cr6.eq) goto loc_82A2E10C;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e0ec
	if (!ctx.cr6.eq) goto loc_82A2E0EC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2E0D4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e0e4
	if (ctx.cr6.eq) goto loc_82A2E0E4;
	// bl 0x82a08db0
	ctx.lr = 0x82A2E0E0;
	sub_82A08DB0(ctx, base);
	// b 0x82a2e0e8
	goto loc_82A2E0E8;
loc_82A2E0E4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E0E8:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2E0EC:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2e10c
	if (ctx.cr6.eq) goto loc_82A2E10C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2E0FC;
	sub_82A0BFB0(ctx, base);
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2e110
	if (ctx.cr6.eq) goto loc_82A2E110;
loc_82A2E10C:
	// li r10,0
	ctx.r10.s64 = 0;
loc_82A2E110:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// clrlwi r26,r10,24
	ctx.r26.u64 = ctx.r10.u32 & 0xFF;
	// addi r4,r11,4024
	ctx.r4.s64 = ctx.r11.s64 + 4024;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E134;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// addi r4,r11,-28368
	ctx.r4.s64 = ctx.r11.s64 + -28368;
	// li r5,-1
	ctx.r5.s64 = -1;
	// lwz r11,56(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 56);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E158;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// addi r4,r11,4004
	ctx.r4.s64 = ctx.r11.s64 + 4004;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E17C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// addi r4,r11,4000
	ctx.r4.s64 = ctx.r11.s64 + 4000;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E1A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e1e0
	if (!ctx.cr6.eq) goto loc_82A2E1E0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E1C0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e1d0
	if (ctx.cr6.eq) goto loc_82A2E1D0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E1CC;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e1d4
	goto loc_82A2E1D4;
loc_82A2E1D0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E1D4:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r29)
	PPC_STORE_U8(ctx.r29.u32 + 12328, ctx.r11.u8);
loc_82A2E1E0:
	// bl 0x82a119c0
	ctx.lr = 0x82A2E1E4;
	sub_82A119C0(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e21c
	if (!ctx.cr6.eq) goto loc_82A2E21C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E1FC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e20c
	if (ctx.cr6.eq) goto loc_82A2E20C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E208;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e210
	goto loc_82A2E210;
loc_82A2E20C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E210:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r29)
	PPC_STORE_U8(ctx.r29.u32 + 12328, ctx.r11.u8);
loc_82A2E21C:
	// bl 0x82a25c98
	ctx.lr = 0x82A2E220;
	sub_82A25C98(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r4,r11,3992
	ctx.r4.s64 = ctx.r11.s64 + 3992;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E244;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,-13884(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -13884);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// addi r29,r11,1
	ctx.r29.s64 = ctx.r11.s64 + 1;
	// bl 0x82219f20
	ctx.lr = 0x82A2E260;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E270;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e43c
	if (ctx.cr6.eq) goto loc_82A2E43C;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E288;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// cmplwi cr6,r20,0
	ctx.cr6.compare<uint32_t>(ctx.r20.u32, 0, ctx.xer);
	// beq cr6,0x82a2e43c
	if (ctx.cr6.eq) goto loc_82A2E43C;
	// bl 0x82a186e0
	ctx.lr = 0x82A2E298;
	sub_82A186E0(ctx, base);
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// lwz r3,4016(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A2E2A4;
	sub_82A02DD0(ctx, base);
	// cmpw cr6,r30,r29
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r29.s32, ctx.xer);
	// lis r28,-31969
	ctx.r28.s64 = -2095120384;
	// bne cr6,0x82a2e3ac
	if (!ctx.cr6.eq) goto loc_82A2E3AC;
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// beq cr6,0x82a2e2c4
	if (ctx.cr6.eq) goto loc_82A2E2C4;
	// and r11,r27,r23
	ctx.r11.u64 = ctx.r27.u64 & ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2e3ac
	if (ctx.cr6.eq) goto loc_82A2E3AC;
loc_82A2E2C4:
	// cmpw cr6,r21,r22
	ctx.cr6.compare<int32_t>(ctx.r21.s32, ctx.r22.s32, ctx.xer);
	// blt cr6,0x82a2e3ac
	if (ctx.cr6.lt) goto loc_82A2E3AC;
	// lwz r11,5624(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 5624);
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a2e3b0
	if (!ctx.cr6.eq) goto loc_82A2E3B0;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e398
	if (!ctx.cr6.eq) goto loc_82A2E398;
	// bl 0x82a186e0
	ctx.lr = 0x82A2E2E4;
	sub_82A186E0(ctx, base);
	// lwz r11,4016(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// lwz r31,4(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82a186e0
	ctx.lr = 0x82A2E2F0;
	sub_82A186E0(ctx, base);
	// lwz r10,2788(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2788);
	// add r11,r31,r18
	ctx.r11.u64 = ctx.r31.u64 + ctx.r18.u64;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x82a2e30c
	if (!ctx.cr6.lt) goto loc_82A2E30C;
	// clrlwi r11,r26,24
	ctx.r11.u64 = ctx.r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e338
	if (ctx.cr6.eq) goto loc_82A2E338;
loc_82A2E30C:
	// bl 0x82a186e0
	ctx.lr = 0x82A2E310;
	sub_82A186E0(ctx, base);
	// lwz r11,4016(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// lwz r31,4(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82a186e0
	ctx.lr = 0x82A2E31C;
	sub_82A186E0(ctx, base);
	// lwz r11,2788(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2788);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82a2e3ac
	if (!ctx.cr6.lt) goto loc_82A2E3AC;
	// clrlwi r11,r26,24
	ctx.r11.u64 = ctx.r26.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e3ac
	if (ctx.cr6.eq) goto loc_82A2E3AC;
loc_82A2E338:
	// bl 0x82a186e0
	ctx.lr = 0x82A2E33C;
	sub_82A186E0(ctx, base);
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r6,r24
	ctx.r6.u64 = ctx.r24.u64;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// bl 0x82a2cd20
	ctx.lr = 0x82A2E350;
	sub_82A2CD20(ctx, base);
loc_82A2E350:
	// cmplwi cr6,r18,0
	ctx.cr6.compare<uint32_t>(ctx.r18.u32, 0, ctx.xer);
	// beq cr6,0x82a2e38c
	if (ctx.cr6.eq) goto loc_82A2E38C;
	// mr r30,r17
	ctx.r30.u64 = ctx.r17.u64;
	// mr r31,r18
	ctx.r31.u64 = ctx.r18.u64;
loc_82A2E360:
	// ld r29,0(r30)
	ctx.r29.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// bl 0x82a186e0
	ctx.lr = 0x82A2E368;
	sub_82A186E0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r6,r24
	ctx.r6.u64 = ctx.r24.u64;
	// mr r7,r23
	ctx.r7.u64 = ctx.r23.u64;
	// bl 0x82a2cd20
	ctx.lr = 0x82A2E37C;
	sub_82A2CD20(ctx, base);
	// addi r31,r31,-1
	ctx.r31.s64 = ctx.r31.s64 + -1;
	// addi r30,r30,8
	ctx.r30.s64 = ctx.r30.s64 + 8;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a2e360
	if (!ctx.cr6.eq) goto loc_82A2E360;
loc_82A2E38C:
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x82a2e424
	goto loc_82A2E424;
loc_82A2E398:
	// clrlwi r11,r26,24
	ctx.r11.u64 = ctx.r26.u32 & 0xFF;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, ctx.r11.u32);
	// b 0x82a2e350
	goto loc_82A2E350;
loc_82A2E3AC:
	// lwz r11,5624(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 5624);
loc_82A2E3B0:
	// li r6,0
	ctx.r6.s64 = 0;
	// cmpw cr6,r30,r29
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r29.s32, ctx.xer);
	// beq cr6,0x82a2e3c4
	if (ctx.cr6.eq) goto loc_82A2E3C4;
	// li r6,14
	ctx.r6.s64 = 14;
	// b 0x82a2e420
	goto loc_82A2E420;
loc_82A2E3C4:
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a2e3d4
	if (!ctx.cr6.gt) goto loc_82A2E3D4;
	// li r6,15
	ctx.r6.s64 = 15;
	// b 0x82a2e420
	goto loc_82A2E420;
loc_82A2E3D4:
	// bge cr6,0x82a2e3f8
	if (!ctx.cr6.lt) goto loc_82A2E3F8;
	// lis r11,2
	ctx.r11.s64 = 131072;
	// ori r11,r11,38391
	ctx.r11.u64 = ctx.r11.u64 | 38391;
	// cmpw cr6,r25,r11
	ctx.cr6.compare<int32_t>(ctx.r25.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a2e3f0
	if (!ctx.cr6.eq) goto loc_82A2E3F0;
	// li r6,11
	ctx.r6.s64 = 11;
	// b 0x82a2e420
	goto loc_82A2E420;
loc_82A2E3F0:
	// li r6,16
	ctx.r6.s64 = 16;
	// b 0x82a2e420
	goto loc_82A2E420;
loc_82A2E3F8:
	// cmpw cr6,r21,r22
	ctx.cr6.compare<int32_t>(ctx.r21.s32, ctx.r22.s32, ctx.xer);
	// bge cr6,0x82a2e408
	if (!ctx.cr6.lt) goto loc_82A2E408;
	// li r6,12
	ctx.r6.s64 = 12;
	// b 0x82a2e420
	goto loc_82A2E420;
loc_82A2E408:
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// beq cr6,0x82a2e420
	if (ctx.cr6.eq) goto loc_82A2E420;
	// and r11,r27,r23
	ctx.r11.u64 = ctx.r27.u64 & ctx.r23.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2e420
	if (!ctx.cr6.eq) goto loc_82A2E420;
	// li r6,13
	ctx.r6.s64 = 13;
loc_82A2E420:
	// li r5,0
	ctx.r5.s64 = 0;
loc_82A2E424:
	// lwz r11,0(r20)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r20.u32 + 0);
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E43C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2E43C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28e88
	__restgprlr_16(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2E448"))) PPC_WEAK_FUNC(sub_82A2E448);
PPC_FUNC_IMPL(__imp__sub_82A2E448) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e494
	if (!ctx.cr6.eq) goto loc_82A2E494;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E470;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e480
	if (ctx.cr6.eq) goto loc_82A2E480;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E47C;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e484
	goto loc_82A2E484;
loc_82A2E480:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E484:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2E494:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4032(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4032, ctx.r11.u32);
	// bl 0x82a29df8
	ctx.lr = 0x82A2E4A0;
	sub_82A29DF8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2E4B8"))) PPC_WEAK_FUNC(sub_82A2E4B8);
PPC_FUNC_IMPL(__imp__sub_82A2E4B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e50c
	if (!ctx.cr6.eq) goto loc_82A2E50C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E4E8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e4f8
	if (ctx.cr6.eq) goto loc_82A2E4F8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E4F4;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e4fc
	goto loc_82A2E4FC;
loc_82A2E4F8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E4FC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2E50C:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a2c498
	ctx.lr = 0x82A2E514;
	sub_82A2C498(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2E530"))) PPC_WEAK_FUNC(sub_82A2E530);
PPC_FUNC_IMPL(__imp__sub_82A2E530) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e584
	if (!ctx.cr6.eq) goto loc_82A2E584;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E560;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e570
	if (ctx.cr6.eq) goto loc_82A2E570;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E56C;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e574
	goto loc_82A2E574;
loc_82A2E570:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E574:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2E584:
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a2bd68
	ctx.lr = 0x82A2E590;
	sub_82A2BD68(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2E5A8"))) PPC_WEAK_FUNC(sub_82A2E5A8);
PPC_FUNC_IMPL(__imp__sub_82A2E5A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e5fc
	if (!ctx.cr6.eq) goto loc_82A2E5FC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E5D8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e5e8
	if (ctx.cr6.eq) goto loc_82A2E5E8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E5E4;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e5ec
	goto loc_82A2E5EC;
loc_82A2E5E8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E5EC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A2E5FC:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a2ce98
	ctx.lr = 0x82A2E604;
	sub_82A2CE98(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2E620"))) PPC_WEAK_FUNC(sub_82A2E620);
PPC_FUNC_IMPL(__imp__sub_82A2E620) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e40
	ctx.lr = 0x82A2E628;
	__savegprlr_18(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r7
	ctx.r31.u64 = ctx.r7.u64;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r18,r6
	ctx.r18.u64 = ctx.r6.u64;
	// addi r4,r11,4036
	ctx.r4.s64 = ctx.r11.s64 + 4036;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,40(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 40);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E654;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e6a0
	if (ctx.cr6.eq) goto loc_82A2E6A0;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e690
	if (!ctx.cr6.eq) goto loc_82A2E690;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2E678;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e688
	if (ctx.cr6.eq) goto loc_82A2E688;
	// bl 0x82a08db0
	ctx.lr = 0x82A2E684;
	sub_82A08DB0(ctx, base);
	// b 0x82a2e68c
	goto loc_82A2E68C;
loc_82A2E688:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E68C:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A2E690:
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2e6a4
	if (ctx.cr6.eq) goto loc_82A2E6A4;
loc_82A2E6A0:
	// li r10,0
	ctx.r10.s64 = 0;
loc_82A2E6A4:
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// clrlwi r24,r10,24
	ctx.r24.u64 = ctx.r10.u32 & 0xFF;
	// addi r4,r11,4024
	ctx.r4.s64 = ctx.r11.s64 + 4024;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E6C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// addi r4,r11,-28368
	ctx.r4.s64 = ctx.r11.s64 + -28368;
	// li r5,-1
	ctx.r5.s64 = -1;
	// lwz r11,56(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 56);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E6EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// addi r4,r11,4004
	ctx.r4.s64 = ctx.r11.s64 + 4004;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E710;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// addi r4,r11,4000
	ctx.r4.s64 = ctx.r11.s64 + 4000;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E734;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r19,r3
	ctx.r19.u64 = ctx.r3.u64;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e774
	if (!ctx.cr6.eq) goto loc_82A2E774;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E754;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e764
	if (ctx.cr6.eq) goto loc_82A2E764;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E760;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e768
	goto loc_82A2E768;
loc_82A2E764:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E768:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A2E774:
	// bl 0x82a119c0
	ctx.lr = 0x82A2E778;
	sub_82A119C0(ctx, base);
	// mr r21,r3
	ctx.r21.u64 = ctx.r3.u64;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e7b0
	if (!ctx.cr6.eq) goto loc_82A2E7B0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E790;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e7a0
	if (ctx.cr6.eq) goto loc_82A2E7A0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E79C;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e7a4
	goto loc_82A2E7A4;
loc_82A2E7A0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E7A4:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A2E7B0:
	// bl 0x82a25c98
	ctx.lr = 0x82A2E7B4;
	sub_82A25C98(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// addi r4,r11,3992
	ctx.r4.s64 = ctx.r11.s64 + 3992;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,48(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E7D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// lwz r11,-13884(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -13884);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// addi r28,r11,1
	ctx.r28.s64 = ctx.r11.s64 + 1;
	// bne cr6,0x82a2e824
	if (!ctx.cr6.eq) goto loc_82A2E824;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E804;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e814
	if (ctx.cr6.eq) goto loc_82A2E814;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E810;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e818
	goto loc_82A2E818;
loc_82A2E814:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E818:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A2E824:
	// cmpw cr6,r29,r28
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r28.s32, ctx.xer);
	// lis r27,-31969
	ctx.r27.s64 = -2095120384;
	// bne cr6,0x82a2e87c
	if (!ctx.cr6.eq) goto loc_82A2E87C;
	// cmpw cr6,r20,r21
	ctx.cr6.compare<int32_t>(ctx.r20.s32, ctx.r21.s32, ctx.xer);
	// blt cr6,0x82a2e87c
	if (ctx.cr6.lt) goto loc_82A2E87C;
	// lwz r11,5624(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 5624);
	// cmpw cr6,r22,r11
	ctx.cr6.compare<int32_t>(ctx.r22.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a2e87c
	if (!ctx.cr6.eq) goto loc_82A2E87C;
	// lbz r11,4028(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2e87c
	if (!ctx.cr6.eq) goto loc_82A2E87C;
	// bl 0x82a186e0
	ctx.lr = 0x82A2E854;
	sub_82A186E0(ctx, base);
	// lwz r11,4016(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// lwz r31,4(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82a186e0
	ctx.lr = 0x82A2E860;
	sub_82A186E0(ctx, base);
	// lwz r11,2788(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2788);
	// cmpw cr6,r31,r11
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82a2e878
	if (!ctx.cr6.lt) goto loc_82A2E878;
	// clrlwi r11,r24,24
	ctx.r11.u64 = ctx.r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e8d0
	if (ctx.cr6.eq) goto loc_82A2E8D0;
loc_82A2E878:
	// lwz r3,12324(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
loc_82A2E87C:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2e8ac
	if (!ctx.cr6.eq) goto loc_82A2E8AC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A2E88C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2e89c
	if (ctx.cr6.eq) goto loc_82A2E89C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A2E898;
	sub_82A13FE0(ctx, base);
	// b 0x82a2e8a0
	goto loc_82A2E8A0;
loc_82A2E89C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2E8A0:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A2E8AC:
	// lwz r10,4016(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// lwz r11,2788(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 2788);
	// addi r9,r11,-1
	ctx.r9.s64 = ctx.r11.s64 + -1;
	// lwz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// bge cr6,0x82a2e918
	if (!ctx.cr6.lt) goto loc_82A2E918;
	// clrlwi r11,r24,24
	ctx.r11.u64 = ctx.r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2e918
	if (ctx.cr6.eq) goto loc_82A2E918;
loc_82A2E8D0:
	// bl 0x82a186e0
	ctx.lr = 0x82A2E8D4;
	sub_82A186E0(ctx, base);
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// mr r6,r23
	ctx.r6.u64 = ctx.r23.u64;
	// mr r7,r19
	ctx.r7.u64 = ctx.r19.u64;
	// bl 0x82a2cd20
	ctx.lr = 0x82A2E8E8;
	sub_82A2CD20(ctx, base);
	// bl 0x82219f20
	ctx.lr = 0x82A2E8EC;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E8FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E90C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x82a2e9c0
	goto loc_82A2E9C0;
loc_82A2E918:
	// li r31,0
	ctx.r31.s64 = 0;
	// cmpw cr6,r29,r28
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r28.s32, ctx.xer);
	// beq cr6,0x82a2e92c
	if (ctx.cr6.eq) goto loc_82A2E92C;
	// li r31,14
	ctx.r31.s64 = 14;
	// b 0x82a2e994
	goto loc_82A2E994;
loc_82A2E92C:
	// lwz r11,5624(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 5624);
	// cmpw cr6,r22,r11
	ctx.cr6.compare<int32_t>(ctx.r22.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a2e940
	if (!ctx.cr6.gt) goto loc_82A2E940;
	// li r31,15
	ctx.r31.s64 = 15;
	// b 0x82a2e994
	goto loc_82A2E994;
loc_82A2E940:
	// lwz r11,5624(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 5624);
	// cmpw cr6,r22,r11
	ctx.cr6.compare<int32_t>(ctx.r22.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82a2e96c
	if (!ctx.cr6.lt) goto loc_82A2E96C;
	// lis r11,2
	ctx.r11.s64 = 131072;
	// ori r11,r11,38391
	ctx.r11.u64 = ctx.r11.u64 | 38391;
	// cmpw cr6,r22,r11
	ctx.cr6.compare<int32_t>(ctx.r22.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a2e964
	if (!ctx.cr6.eq) goto loc_82A2E964;
	// li r31,11
	ctx.r31.s64 = 11;
	// b 0x82a2e994
	goto loc_82A2E994;
loc_82A2E964:
	// li r31,16
	ctx.r31.s64 = 16;
	// b 0x82a2e994
	goto loc_82A2E994;
loc_82A2E96C:
	// cmpw cr6,r20,r21
	ctx.cr6.compare<int32_t>(ctx.r20.s32, ctx.r21.s32, ctx.xer);
	// bge cr6,0x82a2e97c
	if (!ctx.cr6.lt) goto loc_82A2E97C;
	// li r31,12
	ctx.r31.s64 = 12;
	// b 0x82a2e994
	goto loc_82A2E994;
loc_82A2E97C:
	// cmpwi cr6,r25,1
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 1, ctx.xer);
	// beq cr6,0x82a2e994
	if (ctx.cr6.eq) goto loc_82A2E994;
	// and r11,r25,r19
	ctx.r11.u64 = ctx.r25.u64 & ctx.r19.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2e994
	if (!ctx.cr6.eq) goto loc_82A2E994;
	// li r31,13
	ctx.r31.s64 = 13;
loc_82A2E994:
	// bl 0x82219f20
	ctx.lr = 0x82A2E998;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E9A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E9B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
loc_82A2E9C0:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// lwz r11,92(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2E9D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2E9E0"))) PPC_WEAK_FUNC(sub_82A2E9E0);
PPC_FUNC_IMPL(__imp__sub_82A2E9E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2E9E8;
	__savegprlr_29(ctx, base);
	// stwu r1,-2400(r1)
	ea = -2400 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bne cr6,0x82a2ea0c
	if (!ctx.cr6.eq) goto loc_82A2EA0C;
	// bl 0x82a2b068
	ctx.lr = 0x82A2EA04;
	sub_82A2B068(ctx, base);
	// addi r1,r1,2400
	ctx.r1.s64 = ctx.r1.s64 + 2400;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2EA0C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82239718
	ctx.lr = 0x82A2EA18;
	sub_82239718(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// addi r4,r1,1168
	ctx.r4.s64 = ctx.r1.s64 + 1168;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// extsh r5,r10
	ctx.r5.s64 = ctx.r10.s16;
	// lwz r10,1032(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1032);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// addi r7,r10,-3
	ctx.r7.s64 = ctx.r10.s64 + -3;
	// addi r6,r11,3
	ctx.r6.s64 = ctx.r11.s64 + 3;
	// bl 0x82422618
	ctx.lr = 0x82A2EA40;
	sub_82422618(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a2ea70
	if (ctx.cr6.eq) goto loc_82A2EA70;
	// lhz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// addi r4,r1,1168
	ctx.r4.s64 = ctx.r1.s64 + 1168;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// extsh r5,r11
	ctx.r5.s64 = ctx.r11.s16;
	// bl 0x822394f0
	ctx.lr = 0x82A2EA5C;
	sub_822394F0(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2b068
	ctx.lr = 0x82A2EA68;
	sub_82A2B068(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239548
	ctx.lr = 0x82A2EA70;
	sub_82239548(ctx, base);
loc_82A2EA70:
	// addi r1,r1,2400
	ctx.r1.s64 = ctx.r1.s64 + 2400;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2EA78"))) PPC_WEAK_FUNC(sub_82A2EA78);
PPC_FUNC_IMPL(__imp__sub_82A2EA78) {
	PPC_FUNC_PROLOGUE();
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4024(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4024, ctx.r11.u32);
	// b 0x82a2bc50
	sub_82A2BC50(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2EA88"))) PPC_WEAK_FUNC(sub_82A2EA88);
PPC_FUNC_IMPL(__imp__sub_82A2EA88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e40
	ctx.lr = 0x82A2EA90;
	__savegprlr_18(ctx, base);
	// stfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -128, ctx.f31.u64);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r18,r4
	ctx.r18.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,4(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r19,r11,-29761
	ctx.r19.s64 = ctx.r11.s64 + -29761;
	// beq cr6,0x82a2eabc
	if (ctx.cr6.eq) goto loc_82A2EABC;
	// lwz r3,0(r18)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + 0);
	// b 0x82a2eac0
	goto loc_82A2EAC0;
loc_82A2EABC:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
loc_82A2EAC0:
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r4,r11,29308
	ctx.r4.s64 = ctx.r11.s64 + 29308;
	// bl 0x82e28c50
	ctx.lr = 0x82A2EACC;
	sub_82E28C50(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82a2eb58
	if (!ctx.cr6.eq) goto loc_82A2EB58;
	// lwz r11,4488(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4488);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bge cr6,0x82a2eb58
	if (!ctx.cr6.lt) goto loc_82A2EB58;
	// lbz r11,4044(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2eb58
	if (!ctx.cr6.eq) goto loc_82A2EB58;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2EAF0;
	sub_82A0BFB0(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2eb58
	if (ctx.cr6.eq) goto loc_82A2EB58;
	// lwz r11,4488(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4488);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stb r10,4429(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4429, ctx.r10.u8);
	// stw r11,4488(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4488, ctx.r11.u32);
	// bl 0x82b061d8
	ctx.lr = 0x82A2EB18;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r10,r31,4432
	ctx.r10.s64 = ctx.r31.s64 + 4432;
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f0.u64);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// bl 0x82309a60
	ctx.lr = 0x82A2EB4C;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
loc_82A2EB58:
	// li r22,0
	ctx.r22.s64 = 0;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r11,12392
	ctx.r4.s64 = ctx.r11.s64 + 12392;
	// stw r22,4488(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4488, ctx.r22.u32);
	// stb r22,4047(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4047, ctx.r22.u8);
	// stb r22,4449(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4449, ctx.r22.u8);
	// stw r22,4516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4516, ctx.r22.u32);
	// bl 0x82a0d990
	ctx.lr = 0x82A2EB7C;
	sub_82A0D990(ctx, base);
	// lwz r11,4(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2eb90
	if (ctx.cr6.eq) goto loc_82A2EB90;
	// lwz r11,0(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 0);
	// b 0x82a2eb94
	goto loc_82A2EB94;
loc_82A2EB90:
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
loc_82A2EB94:
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82A2EB98:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82a2eb98
	if (!ctx.cr6.eq) goto loc_82A2EB98;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// li r20,1
	ctx.r20.s64 = 1;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// lis r21,-31969
	ctx.r21.s64 = -2095120384;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2ee68
	if (!ctx.cr6.eq) goto loc_82A2EE68;
	// lwz r28,12304(r21)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12304);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82a2ebf4
	if (!ctx.cr6.eq) goto loc_82A2EBF4;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2EBD8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ebec
	if (ctx.cr6.eq) goto loc_82A2EBEC;
	// bl 0x82a08db0
	ctx.lr = 0x82A2EBE4;
	sub_82A08DB0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// b 0x82a2ebf0
	goto loc_82A2EBF0;
loc_82A2EBEC:
	// mr r28,r22
	ctx.r28.u64 = ctx.r22.u64;
loc_82A2EBF0:
	// stw r28,12304(r21)
	PPC_STORE_U32(ctx.r21.u32 + 12304, ctx.r28.u32);
loc_82A2EBF4:
	// bl 0x82219f20
	ctx.lr = 0x82A2EBF8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC08;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC2C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC64;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EC74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,52(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 52);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ec8c
	if (ctx.cr6.eq) goto loc_82A2EC8C;
	// stw r22,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r22.u32);
	// b 0x82a2ecc4
	goto loc_82A2ECC4;
loc_82A2EC8C:
	// lwz r11,48(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ecc4
	if (ctx.cr6.eq) goto loc_82A2ECC4;
	// lwz r11,1704(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1704);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a2ecc4
	if (!ctx.cr6.eq) goto loc_82A2ECC4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a05520
	ctx.lr = 0x82A2ECAC;
	sub_82A05520(ctx, base);
	// addi r11,r3,1
	ctx.r11.s64 = ctx.r3.s64 + 1;
	// stw r3,1704(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1704, ctx.r3.u32);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// stw r11,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r11.u32);
loc_82A2ECC4:
	// lwz r11,4012(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ece0
	if (ctx.cr6.eq) goto loc_82A2ECE0;
	// lwz r11,48(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
	// bne cr6,0x82a2ece4
	if (!ctx.cr6.eq) goto loc_82A2ECE4;
loc_82A2ECE0:
	// mr r11,r22
	ctx.r11.u64 = ctx.r22.u64;
loc_82A2ECE4:
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// bl 0x82a02ac0
	ctx.lr = 0x82A2ECF0;
	sub_82A02AC0(ctx, base);
	// clrlwi r27,r29,24
	ctx.r27.u64 = ctx.r29.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cntlzw r11,r27
	ctx.r11.u64 = ctx.r27.u32 == 0 ? 32 : __builtin_clz(ctx.r27.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// bl 0x82a2c398
	ctx.lr = 0x82A2ED0C;
	sub_82A2C398(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A2ED18;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r24
	ctx.r10.u64 = ctx.r24.u64;
	// lwz r4,1700(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1700);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// mr r8,r27
	ctx.r8.u64 = ctx.r27.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x82a02b28
	ctx.lr = 0x82A2ED44;
	sub_82A02B28(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r26,r22
	ctx.r26.u64 = ctx.r22.u64;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a2ed8c
	if (ctx.cr6.eq) goto loc_82A2ED8C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A2ED5C;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r24
	ctx.r10.u64 = ctx.r24.u64;
	// lwz r4,1704(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1704);
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r5,r29,1
	ctx.r5.s64 = ctx.r29.s64 + 1;
	// bl 0x82a02b28
	ctx.lr = 0x82A2ED88;
	sub_82A02B28(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
loc_82A2ED8C:
	// stw r20,20(r28)
	PPC_STORE_U32(ctx.r28.u32 + 20, ctx.r20.u32);
	// stw r22,24(r28)
	PPC_STORE_U32(ctx.r28.u32 + 24, ctx.r22.u32);
	// stw r22,68(r28)
	PPC_STORE_U32(ctx.r28.u32 + 68, ctx.r22.u32);
	// lbz r11,4044(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2ee18
	if (ctx.cr6.eq) goto loc_82A2EE18;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r20,4493(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4493, ctx.r20.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A2EDB0;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f31,f13,f0
	ctx.f31.f64 = ctx.f13.f64 * ctx.f0.f64;
	// bl 0x823eb050
	ctx.lr = 0x82A2EDC8;
	sub_823EB050(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lfs f0,-13896(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13896);
	ctx.f0.f64 = double(temp.f32);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// fadds f13,f1,f0
	ctx.f13.f64 = double(float(ctx.f1.f64 + ctx.f0.f64));
	// lfs f0,-5492(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -5492);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	ctx.f0.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// fadd f0,f0,f31
	ctx.f0.f64 = ctx.f0.f64 + ctx.f31.f64;
	// frsp f0,f0
	ctx.f0.f64 = double(float(ctx.f0.f64));
	// stfs f0,4496(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4496, temp.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,136(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 136);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2EE04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a10550
	ctx.lr = 0x82A2EE14;
	sub_82A10550(ctx, base);
	// b 0x82a2ee34
	goto loc_82A2EE34;
loc_82A2EE18:
	// lwz r11,48(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 48);
	// stw r22,28(r28)
	PPC_STORE_U32(ctx.r28.u32 + 28, ctx.r22.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ee30
	if (ctx.cr6.eq) goto loc_82A2EE30;
	// stw r20,32(r28)
	PPC_STORE_U32(ctx.r28.u32 + 32, ctx.r20.u32);
	// b 0x82a2ee34
	goto loc_82A2EE34;
loc_82A2EE30:
	// stw r22,32(r28)
	PPC_STORE_U32(ctx.r28.u32 + 32, ctx.r22.u32);
loc_82A2EE34:
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a2ee58
	if (ctx.cr6.eq) goto loc_82A2EE58;
	// lwz r11,4012(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,2800(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2800, ctx.r11.u32);
	// b 0x82a2ee5c
	goto loc_82A2EE5C;
loc_82A2EE58:
	// stw r20,2800(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2800, ctx.r20.u32);
loc_82A2EE5C:
	// stb r22,2796(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2796, ctx.r22.u8);
	// stw r22,4068(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4068, ctx.r22.u32);
	// stb r22,4021(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4021, ctx.r22.u8);
loc_82A2EE68:
	// lbz r11,4044(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2eef4
	if (ctx.cr6.eq) goto loc_82A2EEF4;
	// lwz r11,4(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2ee88
	if (ctx.cr6.eq) goto loc_82A2EE88;
	// lwz r11,0(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + 0);
	// b 0x82a2ee8c
	goto loc_82A2EE8C;
loc_82A2EE88:
	// mr r11,r19
	ctx.r11.u64 = ctx.r19.u64;
loc_82A2EE8C:
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82A2EE90:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82a2ee90
	if (!ctx.cr6.eq) goto loc_82A2EE90;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2eed4
	if (!ctx.cr6.eq) goto loc_82A2EED4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r20,4049(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4049, ctx.r20.u8);
	// bl 0x82a111d8
	ctx.lr = 0x82A2EEC0;
	sub_82A111D8(ctx, base);
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x82309a60
	ctx.lr = 0x82A2EEC8;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
loc_82A2EED4:
	// lwz r3,3992(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// stb r20,4048(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4048, ctx.r20.u8);
	// bl 0x82a0c168
	ctx.lr = 0x82A2EEE0;
	sub_82A0C168(ctx, base);
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x82309a60
	ctx.lr = 0x82A2EEE8;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
loc_82A2EEF4:
	// lwz r3,12304(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2ef20
	if (!ctx.cr6.eq) goto loc_82A2EF20;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2EF08;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2ef18
	if (ctx.cr6.eq) goto loc_82A2EF18;
	// bl 0x82a08db0
	ctx.lr = 0x82A2EF14;
	sub_82A08DB0(ctx, base);
	// b 0x82a2ef1c
	goto loc_82A2EF1C;
loc_82A2EF18:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
loc_82A2EF1C:
	// stw r3,12304(r21)
	PPC_STORE_U32(ctx.r21.u32 + 12304, ctx.r3.u32);
loc_82A2EF20:
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f16c
	if (ctx.cr6.eq) goto loc_82A2F16C;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r30,3876(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3876);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r22,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r22.u32);
	// stw r22,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r22.u32);
	// stw r22,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r22.u32);
	// bl 0x82a11e10
	ctx.lr = 0x82A2EF48;
	sub_82A11E10(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a11f80
	ctx.lr = 0x82A2EF54;
	sub_82A11F80(ctx, base);
	// cmpw cr6,r30,r3
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r3.s32, ctx.xer);
	// bne cr6,0x82a2ef60
	if (!ctx.cr6.eq) goto loc_82A2EF60;
	// stb r20,2733(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2733, ctx.r20.u8);
loc_82A2EF60:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// lwz r3,2784(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2784);
	// bl 0x82a34078
	ctx.lr = 0x82A2EF6C;
	sub_82A34078(ctx, base);
	// lbz r11,2733(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2733);
	// stb r20,4428(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4428, ctx.r20.u8);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2f150
	if (ctx.cr6.eq) goto loc_82A2F150;
	// bl 0x8295f3f8
	ctx.lr = 0x82A2EF80;
	sub_8295F3F8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2f150
	if (ctx.cr6.eq) goto loc_82A2F150;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,5756
	ctx.r4.s64 = ctx.r11.s64 + 5756;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82A2EFA4;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8296c798
	ctx.lr = 0x82A2EFB8;
	sub_8296C798(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a2f150
	if (ctx.cr6.eq) goto loc_82A2F150;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,30556
	ctx.r4.s64 = ctx.r11.s64 + 30556;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8243b750
	ctx.lr = 0x82A2EFDC;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2EFF0;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A2EFF4;
	sub_82394220(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,30536
	ctx.r4.s64 = ctx.r11.s64 + 30536;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8243b750
	ctx.lr = 0x82A2F010;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2F024;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A2F028;
	sub_82394220(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r11,28312
	ctx.r4.s64 = ctx.r11.s64 + 28312;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x8243b750
	ctx.lr = 0x82A2F044;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A2F058;
	sub_829689E8(ctx, base);
	// bl 0x82388780
	ctx.lr = 0x82A2F05C;
	sub_82388780(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2f150
	if (ctx.cr6.eq) goto loc_82A2F150;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2f150
	if (ctx.cr6.eq) goto loc_82A2F150;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r29,r11,30492
	ctx.r29.s64 = ctx.r11.s64 + 30492;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A2F084;
	sub_823099B0(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// addi r28,r31,848
	ctx.r28.s64 = ctx.r31.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F0A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2F0AC;
	sub_82309A60(ctx, base);
	// addi r3,r31,924
	ctx.r3.s64 = ctx.r31.s64 + 924;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A2F0B8;
	sub_822E0818(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F0D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82a34720
	ctx.lr = 0x82A2F0DC;
	sub_82A34720(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82974648
	ctx.lr = 0x82A2F0E8;
	sub_82974648(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309a60
	ctx.lr = 0x82A2F0F0;
	sub_82309A60(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r31,r11,30444
	ctx.r31.s64 = ctx.r11.s64 + 30444;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A2F104;
	sub_823099B0(ctx, base);
	// lwz r11,848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 848);
	// addi r29,r30,848
	ctx.r29.s64 = ctx.r30.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F124;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82309a60
	ctx.lr = 0x82A2F12C;
	sub_82309A60(ctx, base);
	// addi r3,r30,924
	ctx.r3.s64 = ctx.r30.s64 + 924;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A2F138;
	sub_822E0818(ctx, base);
	// lwz r11,848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 848);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F150;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A2F150:
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// bl 0x82480d20
	ctx.lr = 0x82A2F158;
	sub_82480D20(ctx, base);
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x82309a60
	ctx.lr = 0x82A2F160;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
loc_82A2F16C:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// lwz r3,2784(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2784);
	// bl 0x82a344d0
	ctx.lr = 0x82A2F178;
	sub_82A344D0(ctx, base);
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x82309a60
	ctx.lr = 0x82A2F180;
	sub_82309A60(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x82e28e90
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2F190"))) PPC_WEAK_FUNC(sub_82A2F190);
PPC_FUNC_IMPL(__imp__sub_82A2F190) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2F198;
	__savegprlr_28(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lbz r11,2794(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2794);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2f1c8
	if (!ctx.cr6.eq) goto loc_82A2F1C8;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a2f1c8
	if (!ctx.cr6.eq) goto loc_82A2F1C8;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F1C8:
	// lwz r11,1704(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1704);
	// li r28,1
	ctx.r28.s64 = 1;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// bne cr6,0x82a2f318
	if (!ctx.cr6.eq) goto loc_82A2F318;
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// beq cr6,0x82a2f204
	if (ctx.cr6.eq) goto loc_82A2F204;
	// lwz r11,1700(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1700);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x82a2f4b8
	if (!ctx.cr6.eq) goto loc_82A2F4B8;
	// li r11,-1
	ctx.r11.s64 = -1;
	// li r28,0
	ctx.r28.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r11,1700(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1700, ctx.r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F204:
	// lwz r11,4012(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4012);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r11,1704(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1704, ctx.r11.u32);
	// beq cr6,0x82a2f424
	if (ctx.cr6.eq) goto loc_82A2F424;
	// li r30,0
	ctx.r30.s64 = 0;
	// stw r30,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r30.u32);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F224;
	sub_82A0BFB0(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f24c
	if (ctx.cr6.eq) goto loc_82A2F24C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F234;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f24c
	if (ctx.cr6.eq) goto loc_82A2F24C;
	// lwz r11,2800(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2800);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// stw r11,2800(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2800, ctx.r11.u32);
loc_82A2F24C:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F250;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2f290
	if (!ctx.cr6.eq) goto loc_82A2F290;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F260;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2f290
	if (!ctx.cr6.eq) goto loc_82A2F290;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02cd0
	ctx.lr = 0x82A2F278;
	sub_82A02CD0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f4b8
	if (ctx.cr6.eq) goto loc_82A2F4B8;
loc_82A2F280:
	// mr r28,r30
	ctx.r28.u64 = ctx.r30.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F290:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02cd0
	ctx.lr = 0x82A2F29C;
	sub_82A02CD0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f280
	if (ctx.cr6.eq) goto loc_82A2F280;
	// ld r4,28(r3)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r3.u32 + 28);
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A2F2B0;
	sub_82A02DD0(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// stw r30,20(r29)
	PPC_STORE_U32(ctx.r29.u32 + 20, ctx.r30.u32);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F2BC;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f2e0
	if (ctx.cr6.eq) goto loc_82A2F2E0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a249e8
	ctx.lr = 0x82A2F2D4;
	sub_82A249E8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F2E0:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F2E4;
	sub_82A0BFB0(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// beq cr6,0x82a2f308
	if (ctx.cr6.eq) goto loc_82A2F308;
	// bl 0x82a29988
	ctx.lr = 0x82A2F2FC;
	sub_82A29988(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F308:
	// bl 0x82a2c210
	ctx.lr = 0x82A2F30C;
	sub_82A2C210(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F318:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bge cr6,0x82a2f424
	if (!ctx.cr6.lt) goto loc_82A2F424;
	// stw r29,1704(r31)
	PPC_STORE_U32(ctx.r31.u32 + 1704, ctx.r29.u32);
	// stw r28,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r28.u32);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F32C;
	sub_82A0BFB0(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f354
	if (ctx.cr6.eq) goto loc_82A2F354;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F33C;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f354
	if (ctx.cr6.eq) goto loc_82A2F354;
	// lwz r11,2800(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2800);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,2800(r31)
	PPC_STORE_U32(ctx.r31.u32 + 2800, ctx.r11.u32);
loc_82A2F354:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F358;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2f374
	if (!ctx.cr6.eq) goto loc_82A2F374;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F368;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f424
	if (ctx.cr6.eq) goto loc_82A2F424;
loc_82A2F374:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F378;
	sub_82A0BFB0(ctx, base);
	// lwz r11,52(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f430
	if (ctx.cr6.eq) goto loc_82A2F430;
	// li r30,0
	ctx.r30.s64 = 0;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stw r30,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r30.u32);
	// lwz r11,-836(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -836);
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r28,64(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a2f424
	if (ctx.cr6.eq) goto loc_82A2F424;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// addi r4,r11,4484
	ctx.r4.s64 = ctx.r11.s64 + 4484;
	// bl 0x823099b0
	ctx.lr = 0x82A2F3B8;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// addi r4,r11,4424
	ctx.r4.s64 = ctx.r11.s64 + 4424;
	// bl 0x823099b0
	ctx.lr = 0x82A2F3C8;
	sub_823099B0(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r30.u32);
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A2F3E4;
	sub_823099B0(ctx, base);
	// addi r8,r1,104
	ctx.r8.s64 = ctx.r1.s64 + 104;
	// rldicr r7,r30,32,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r30.u64, 32) & 0xFFFFFFFF00000000;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r30.u32);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r30.u32);
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// ld r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// ld r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r29.u32 + 0);
	// bl 0x8238ce50
	ctx.lr = 0x82A2F40C;
	sub_8238CE50(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A2F414;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82A2F41C;
	sub_82309A60(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82A2F424;
	sub_82309A60(ctx, base);
loc_82A2F424:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F430:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F434;
	sub_82A0BFB0(ctx, base);
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f494
	if (ctx.cr6.eq) goto loc_82A2F494;
	// bl 0x82a02ed0
	ctx.lr = 0x82A2F448;
	sub_82A02ED0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f480
	if (ctx.cr6.eq) goto loc_82A2F480;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2d118
	ctx.lr = 0x82A2F460;
	sub_82A2D118(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// stw r3,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r3.u32);
	// bne cr6,0x82a2f4b8
	if (!ctx.cr6.eq) goto loc_82A2F4B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a11d60
	ctx.lr = 0x82A2F474;
	sub_82A11D60(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F480:
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r11,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r11.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F494:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4012(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4012, ctx.r11.u32);
	// bl 0x82a02ed0
	ctx.lr = 0x82A2F4A0;
	sub_82A02ED0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a2f4b8
	if (ctx.cr6.eq) goto loc_82A2F4B8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82a0dcc8
	ctx.lr = 0x82A2F4B8;
	sub_82A0DCC8(ctx, base);
loc_82A2F4B8:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2F4C8"))) PPC_WEAK_FUNC(sub_82A2F4C8);
PPC_FUNC_IMPL(__imp__sub_82A2F4C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A2F4D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-1184(r1)
	ea = -1184 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a2f50c
	if (!ctx.cr6.eq) goto loc_82A2F50C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A2F4F4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f504
	if (ctx.cr6.eq) goto loc_82A2F504;
	// bl 0x82a08db0
	ctx.lr = 0x82A2F500;
	sub_82A08DB0(ctx, base);
	// b 0x82a2f508
	goto loc_82A2F508;
loc_82A2F504:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A2F508:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A2F50C:
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f628
	if (ctx.cr6.eq) goto loc_82A2F628;
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a2f534
	if (!ctx.cr6.eq) goto loc_82A2F534;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F528;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f628
	if (ctx.cr6.eq) goto loc_82A2F628;
loc_82A2F534:
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2d118
	ctx.lr = 0x82A2F544;
	sub_82A2D118(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82a2f628
	if (!ctx.cr6.eq) goto loc_82A2F628;
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239200
	ctx.lr = 0x82A2F558;
	sub_82239200(ctx, base);
	// li r4,89
	ctx.r4.s64 = 89;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239280
	ctx.lr = 0x82A2F564;
	sub_82239280(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239330
	ctx.lr = 0x82A2F570;
	sub_82239330(ctx, base);
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F574;
	sub_82A0BFB0(ctx, base);
	// lwz r11,28(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f5d4
	if (ctx.cr6.eq) goto loc_82A2F5D4;
	// bl 0x82219f20
	ctx.lr = 0x82A2F584;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F594;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F5A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f620
	if (ctx.cr6.eq) goto loc_82A2F620;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r11,72(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F5C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239548
	ctx.lr = 0x82A2F5CC;
	sub_82239548(ctx, base);
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A2F5D4:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A2F5D8;
	sub_82A0BFB0(ctx, base);
	// lwz r11,32(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a2f620
	if (ctx.cr6.eq) goto loc_82A2F620;
	// bl 0x82219f20
	ctx.lr = 0x82A2F5E8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F5F8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A2F608;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2f620
	if (ctx.cr6.eq) goto loc_82A2F620;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,3988(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3988);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82a03600
	ctx.lr = 0x82A2F620;
	sub_82A03600(ctx, base);
loc_82A2F620:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82239548
	ctx.lr = 0x82A2F628;
	sub_82239548(ctx, base);
loc_82A2F628:
	// addi r1,r1,1184
	ctx.r1.s64 = ctx.r1.s64 + 1184;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A2F630"))) PPC_WEAK_FUNC(sub_82A2F630);
PPC_FUNC_IMPL(__imp__sub_82A2F630) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r5,288(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 288);
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// bl 0x82a2d708
	ctx.lr = 0x82A2F650;
	sub_82A2D708(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a1ea30
	ctx.lr = 0x82A2F658;
	sub_82A1EA30(ctx, base);
	// lwz r11,96(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 96);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a2f668
	if (!ctx.cr6.gt) goto loc_82A2F668;
	// stw r3,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r3.u32);
loc_82A2F668:
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// bl 0x82a13b48
	ctx.lr = 0x82A2F67C;
	sub_82A13B48(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A2F690"))) PPC_WEAK_FUNC(sub_82A2F690);
PPC_FUNC_IMPL(__imp__sub_82A2F690) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A2F698;
	__savegprlr_28(ctx, base);
	// ld r12,-4096(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// stwu r1,-6096(r1)
	ea = -6096 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x822394f0
	ctx.lr = 0x82A2F6B4;
	sub_822394F0(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x822395a8
	ctx.lr = 0x82A2F6C0;
	sub_822395A8(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A2F6CC;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// lbz r31,17(r31)
	ctx.r31.u64 = PPC_LOAD_U8(ctx.r31.u32 + 17);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A2F6DC;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a3000c
	if (ctx.cr6.eq) goto loc_82A3000C;
	// lbz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 96);
	// extsb r11,r11
	ctx.r11.s64 = ctx.r11.s8;
	// addi r11,r11,-65
	ctx.r11.s64 = ctx.r11.s64 + -65;
	// cmplwi cr6,r11,29
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 29, ctx.xer);
	// bgt cr6,0x82a3000c
	if (ctx.cr6.gt) goto loc_82A3000C;
	// lis r12,-32093
	ctx.r12.s64 = -2103246848;
	// addi r12,r12,-2288
	ctx.r12.s64 = ctx.r12.s64 + -2288;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_82A2F788;
	case 1:
		goto loc_82A2F7B8;
	case 2:
		goto loc_82A2F7FC;
	case 3:
		goto loc_82A2F840;
	case 4:
		goto loc_82A2FBDC;
	case 5:
		goto loc_82A2FA44;
	case 6:
		goto loc_82A2FABC;
	case 7:
		goto loc_82A2FAE0;
	case 8:
		goto loc_82A2FC3C;
	case 9:
		goto loc_82A2FCFC;
	case 10:
		goto loc_82A2FD3C;
	case 11:
		goto loc_82A2FD60;
	case 12:
		goto loc_82A2F864;
	case 13:
		goto loc_82A2F8B0;
	case 14:
		goto loc_82A2F924;
	case 15:
		goto loc_82A2F998;
	case 16:
		goto loc_82A2FA0C;
	case 17:
		goto loc_82A2FDA0;
	case 18:
		goto loc_82A2FDC4;
	case 19:
		goto loc_82A2FE04;
	case 20:
		goto loc_82A2FA64;
	case 21:
		goto loc_82A2FA84;
	case 22:
		goto loc_82A2FAA8;
	case 23:
		goto loc_82A2FEB4;
	case 24:
		goto loc_82A2FEEC;
	case 25:
		goto loc_82A2FF24;
	case 26:
		goto loc_82A2FF5C;
	case 27:
		goto loc_82A2FF94;
	case 28:
		goto loc_82A2FFD4;
	case 29:
		goto loc_82A2FCC4;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-2168(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -2168);
	// lwz r21,-2120(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -2120);
	// lwz r21,-2052(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -2052);
	// lwz r21,-1984(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1984);
	// lwz r21,-1060(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1060);
	// lwz r21,-1468(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1468);
	// lwz r21,-1348(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1348);
	// lwz r21,-1312(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1312);
	// lwz r21,-964(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -964);
	// lwz r21,-772(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -772);
	// lwz r21,-708(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -708);
	// lwz r21,-672(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -672);
	// lwz r21,-1948(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1948);
	// lwz r21,-1872(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1872);
	// lwz r21,-1756(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1756);
	// lwz r21,-1640(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1640);
	// lwz r21,-1524(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1524);
	// lwz r21,-608(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -608);
	// lwz r21,-572(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -572);
	// lwz r21,-508(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -508);
	// lwz r21,-1436(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1436);
	// lwz r21,-1404(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1404);
	// lwz r21,-1368(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -1368);
	// lwz r21,-332(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -332);
	// lwz r21,-276(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -276);
	// lwz r21,-220(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -220);
	// lwz r21,-164(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -164);
	// lwz r21,-108(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -108);
	// lwz r21,-44(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -44);
	// lwz r21,-828(r2)
	ctx.r21.u64 = PPC_LOAD_U32(ctx.r2.u32 + -828);
loc_82A2F788:
	// li r5,255
	ctx.r5.s64 = 255;
	// addi r4,r1,1504
	ctx.r4.s64 = ctx.r1.s64 + 1504;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2F798;
	sub_82239958(ctx, base);
	// addi r31,r1,1504
	ctx.r31.s64 = ctx.r1.s64 + 1504;
	// bl 0x82a186e0
	ctx.lr = 0x82A2F7A0;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a10500
	ctx.lr = 0x82A2F7A8;
	sub_82A10500(ctx, base);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2F7B0;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2F7B8:
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r4,r1,3824
	ctx.r4.s64 = ctx.r1.s64 + 3824;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2F7C8;
	sub_82239958(ctx, base);
	// li r3,1028
	ctx.r3.s64 = 1028;
	// bl 0x82545e80
	ctx.lr = 0x82A2F7D0;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r11,r11,-4468
	ctx.r11.s64 = ctx.r11.s64 + -4468;
	// addi r4,r1,3824
	ctx.r4.s64 = ctx.r1.s64 + 3824;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2F7F8;
	sub_82E2AB28(ctx, base);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F7FC:
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r4,r1,2800
	ctx.r4.s64 = ctx.r1.s64 + 2800;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2F80C;
	sub_82239958(ctx, base);
	// li r3,1028
	ctx.r3.s64 = 1028;
	// bl 0x82545e80
	ctx.lr = 0x82A2F814;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r11,r11,-4464
	ctx.r11.s64 = ctx.r11.s64 + -4464;
	// addi r4,r1,2800
	ctx.r4.s64 = ctx.r1.s64 + 2800;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e2ab28
	ctx.lr = 0x82A2F83C;
	sub_82E2AB28(ctx, base);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F840:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2F848;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4460
	ctx.r11.s64 = ctx.r11.s64 + -4460;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F864:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F870;
	sub_82239808(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F87C;
	sub_82239808(ctx, base);
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A2F884;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r9,r9,-4400
	ctx.r9.s64 = ctx.r9.s64 + -4400;
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r11.u32);
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F8B0:
	// li r11,-1
	ctx.r11.s64 = -1;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r30,r1,304
	ctx.r30.s64 = ctx.r1.s64 + 304;
	// addi r29,r1,192
	ctx.r29.s64 = ctx.r1.s64 + 192;
	// std r11,200(r1)
	PPC_STORE_U64(ctx.r1.u32 + 200, ctx.r11.u64);
	// std r11,216(r1)
	PPC_STORE_U64(ctx.r1.u32 + 216, ctx.r11.u64);
	// stw r11,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r11.u32);
	// stw r11,196(r1)
	PPC_STORE_U32(ctx.r1.u32 + 196, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r31.u32);
	// stw r31,212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 212, ctx.r31.u32);
	// stw r31,224(r1)
	PPC_STORE_U32(ctx.r1.u32 + 224, ctx.r31.u32);
	// stw r31,228(r1)
	PPC_STORE_U32(ctx.r1.u32 + 228, ctx.r31.u32);
	// stw r31,232(r1)
	PPC_STORE_U32(ctx.r1.u32 + 232, ctx.r31.u32);
	// stw r31,236(r1)
	PPC_STORE_U32(ctx.r1.u32 + 236, ctx.r31.u32);
	// std r31,240(r1)
	PPC_STORE_U64(ctx.r1.u32 + 240, ctx.r31.u64);
	// stw r11,248(r1)
	PPC_STORE_U32(ctx.r1.u32 + 248, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2F8F8;
	sub_82A186E0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82a05248
	ctx.lr = 0x82A2F904;
	sub_82A05248(ctx, base);
	// li r3,64
	ctx.r3.s64 = 64;
	// bl 0x82545e80
	ctx.lr = 0x82A2F90C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fffc
	if (ctx.cr6.eq) goto loc_82A2FFFC;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// bl 0x82a04150
	ctx.lr = 0x82A2F91C;
	sub_82A04150(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F924:
	// li r11,-1
	ctx.r11.s64 = -1;
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r30,r1,304
	ctx.r30.s64 = ctx.r1.s64 + 304;
	// addi r29,r1,128
	ctx.r29.s64 = ctx.r1.s64 + 128;
	// std r11,136(r1)
	PPC_STORE_U64(ctx.r1.u32 + 136, ctx.r11.u64);
	// std r11,152(r1)
	PPC_STORE_U64(ctx.r1.u32 + 152, ctx.r11.u64);
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r11.u32);
	// stw r11,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r11.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r31.u32);
	// stw r31,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r31.u32);
	// stw r31,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r31.u32);
	// stw r31,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r31.u32);
	// stw r31,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r31.u32);
	// stw r31,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r31.u32);
	// std r31,176(r1)
	PPC_STORE_U64(ctx.r1.u32 + 176, ctx.r31.u64);
	// stw r11,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r11.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A2F96C;
	sub_82A186E0(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82a05248
	ctx.lr = 0x82A2F978;
	sub_82A05248(ctx, base);
	// li r3,64
	ctx.r3.s64 = 64;
	// bl 0x82545e80
	ctx.lr = 0x82A2F980;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fffc
	if (ctx.cr6.eq) goto loc_82A2FFFC;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// bl 0x82a04208
	ctx.lr = 0x82A2F990;
	sub_82A04208(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2F998:
	// li r5,1024
	ctx.r5.s64 = 1024;
	// addi r4,r1,1760
	ctx.r4.s64 = ctx.r1.s64 + 1760;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2F9A8;
	sub_82239958(ctx, base);
	// addi r4,r1,2784
	ctx.r4.s64 = ctx.r1.s64 + 2784;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F9B4;
	sub_82239808(ctx, base);
	// addi r4,r1,2788
	ctx.r4.s64 = ctx.r1.s64 + 2788;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F9C0;
	sub_82239808(ctx, base);
	// addi r4,r1,2792
	ctx.r4.s64 = ctx.r1.s64 + 2792;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F9CC;
	sub_82239808(ctx, base);
	// addi r4,r1,2796
	ctx.r4.s64 = ctx.r1.s64 + 2796;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2F9D8;
	sub_82239808(ctx, base);
	// li r3,1044
	ctx.r3.s64 = 1044;
	// bl 0x82545e80
	ctx.lr = 0x82A2F9E0;
	sub_82545E80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// addi r11,r11,-4388
	ctx.r11.s64 = ctx.r11.s64 + -4388;
	// addi r4,r1,1760
	ctx.r4.s64 = ctx.r1.s64 + 1760;
	// li r5,1040
	ctx.r5.s64 = 1040;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x82e28fd0
	ctx.lr = 0x82A2FA08;
	sub_82E28FD0(ctx, base);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FA0C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FA18;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FA20;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4352
	ctx.r10.s64 = ctx.r10.s64 + -4352;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FA44:
	// addi r31,r1,304
	ctx.r31.s64 = ctx.r1.s64 + 304;
	// bl 0x82a186e0
	ctx.lr = 0x82A2FA4C;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x82a19b58
	ctx.lr = 0x82A2FA54;
	sub_82A19B58(ctx, base);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2FA5C;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2FA64:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a2b068
	ctx.lr = 0x82A2FA74;
	sub_82A2B068(ctx, base);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2FA7C;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2FA84:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a2e9e0
	ctx.lr = 0x82A2FA98;
	sub_82A2E9E0(ctx, base);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2FAA0;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2FAA8:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r1,304
	ctx.r4.s64 = ctx.r1.s64 + 304;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a2e9e0
	ctx.lr = 0x82A2FABC;
	sub_82A2E9E0(ctx, base);
loc_82A2FABC:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2FAC4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4296
	ctx.r11.s64 = ctx.r11.s64 + -4296;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FAE0:
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FAF4;
	sub_82239808(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r28,r31
	ctx.r28.u64 = ctx.r31.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a3000c
	if (!ctx.cr6.gt) goto loc_82A3000C;
loc_82A2FB04:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FB14;
	sub_82239808(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r4,r1,1440
	ctx.r4.s64 = ctx.r1.s64 + 1440;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2FB24;
	sub_82239958(ctx, base);
	// li r5,50
	ctx.r5.s64 = 50;
	// addi r4,r1,1376
	ctx.r4.s64 = ctx.r1.s64 + 1376;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239958
	ctx.lr = 0x82A2FB34;
	sub_82239958(ctx, base);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FB44;
	sub_82239808(ctx, base);
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
	// addi r30,r1,272
	ctx.r30.s64 = ctx.r1.s64 + 272;
loc_82A2FB4C:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpw cr6,r29,r11
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x82a2fb68
	if (!ctx.cr6.lt) goto loc_82A2FB68;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FB64;
	sub_82239808(ctx, base);
	// b 0x82a2fb6c
	goto loc_82A2FB6C;
loc_82A2FB68:
	// stw r31,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r31.u32);
loc_82A2FB6C:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// cmpwi cr6,r29,7
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 7, ctx.xer);
	// blt cr6,0x82a2fb4c
	if (ctx.cr6.lt) goto loc_82A2FB4C;
	// li r3,136
	ctx.r3.s64 = 136;
	// bl 0x82545e80
	ctx.lr = 0x82A2FB84;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fba8
	if (ctx.cr6.eq) goto loc_82A2FBA8;
	// addi r7,r1,272
	ctx.r7.s64 = ctx.r1.s64 + 272;
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// addi r6,r1,1376
	ctx.r6.s64 = ctx.r1.s64 + 1376;
	// addi r5,r1,1440
	ctx.r5.s64 = ctx.r1.s64 + 1440;
	// bl 0x82a03da0
	ctx.lr = 0x82A2FBA0;
	sub_82A03DA0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// b 0x82a2fbac
	goto loc_82A2FBAC;
loc_82A2FBA8:
	// mr r30,r31
	ctx.r30.u64 = ctx.r31.u64;
loc_82A2FBAC:
	// bl 0x82a186e0
	ctx.lr = 0x82A2FBB0;
	sub_82A186E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2FBBC;
	sub_82A02300(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x82a2fb04
	if (ctx.cr6.lt) goto loc_82A2FB04;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2FBD4;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2FBDC:
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FBE8;
	sub_82239808(ctx, base);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FBF4;
	sub_82239808(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FC00;
	sub_82239808(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A2FC08;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r8,r8,-4480
	ctx.r8.s64 = ctx.r8.s64 + -4480;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r11.u32);
	// stw r10,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r10.u32);
	// stw r8,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r8.u32);
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FC3C:
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FC5C;
	sub_82239808(ctx, base);
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FC68;
	sub_82239808(ctx, base);
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FC74;
	sub_82239808(ctx, base);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FC80;
	sub_82239808(ctx, base);
	// li r3,20
	ctx.r3.s64 = 20;
	// bl 0x82545e80
	ctx.lr = 0x82A2FC88;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r7,-32241
	ctx.r7.s64 = -2112946176;
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r10,92(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r7,r7,-4476
	ctx.r7.s64 = ctx.r7.s64 + -4476;
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r11.u32);
	// stw r10,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r10.u32);
	// stw r7,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r7.u32);
	// stw r9,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r9.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FCC4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FCD0;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FCD8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,4(r3)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4472
	ctx.r11.s64 = ctx.r11.s64 + -4472;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FCFC:
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FD10;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FD18;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4344
	ctx.r10.s64 = ctx.r10.s64 + -4344;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FD3C:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2FD44;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4348
	ctx.r11.s64 = ctx.r11.s64 + -4348;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FD60:
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FD74;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FD7C;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fffc
	if (ctx.cr6.eq) goto loc_82A2FFFC;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4448
	ctx.r10.s64 = ctx.r10.s64 + -4448;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FDA0:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2FDA8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4320
	ctx.r11.s64 = ctx.r11.s64 + -4320;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FDC4:
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FDD8;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FDE0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fffc
	if (ctx.cr6.eq) goto loc_82A2FFFC;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4316
	ctx.r10.s64 = ctx.r10.s64 + -4316;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FE04:
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FE18;
	sub_82239808(ctx, base);
	// addi r4,r1,4848
	ctx.r4.s64 = ctx.r1.s64 + 4848;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x822399d0
	ctx.lr = 0x82A2FE28;
	sub_822399D0(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r31.u32);
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r31.u32);
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// bl 0x82309200
	ctx.lr = 0x82A2FE40;
	sub_82309200(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82948a38
	ctx.lr = 0x82A2FE4C;
	sub_82948A38(ctx, base);
	// addi r4,r1,4848
	ctx.r4.s64 = ctx.r1.s64 + 4848;
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// bl 0x82b06418
	ctx.lr = 0x82A2FE5C;
	sub_82B06418(ctx, base);
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82545e80
	ctx.lr = 0x82A2FE64;
	sub_82545E80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a2fe8c
	if (ctx.cr6.eq) goto loc_82A2FE8C;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// addi r3,r1,256
	ctx.r3.s64 = ctx.r1.s64 + 256;
	// bl 0x823128a8
	ctx.lr = 0x82A2FE7C;
	sub_823128A8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a13e30
	ctx.lr = 0x82A2FE88;
	sub_82A13E30(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_82A2FE8C:
	// bl 0x82a186e0
	ctx.lr = 0x82A2FE90;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A2FE9C;
	sub_82A02300(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82308c30
	ctx.lr = 0x82A2FEA4;
	sub_82308C30(ctx, base);
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A2FEAC;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
loc_82A2FEB4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FEC0;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FEC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4308
	ctx.r10.s64 = ctx.r10.s64 + -4308;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FEEC:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FEF8;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FF00;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4304
	ctx.r10.s64 = ctx.r10.s64 + -4304;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FF24:
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239890
	ctx.lr = 0x82A2FF30;
	sub_82239890(ctx, base);
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x82545e80
	ctx.lr = 0x82A2FF38;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4300
	ctx.r11.s64 = ctx.r11.s64 + -4300;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// ld r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// std r11,4(r3)
	PPC_STORE_U64(ctx.r3.u32 + 4, ctx.r11.u64);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FF5C:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239808
	ctx.lr = 0x82A2FF68;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FF70;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4292
	ctx.r10.s64 = ctx.r10.s64 + -4292;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FF94:
	// li r31,0
	ctx.r31.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// bl 0x82239808
	ctx.lr = 0x82A2FFA8;
	sub_82239808(ctx, base);
	// li r3,8
	ctx.r3.s64 = 8;
	// bl 0x82545e80
	ctx.lr = 0x82A2FFB0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fffc
	if (ctx.cr6.eq) goto loc_82A2FFFC;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r10,r10,-4288
	ctx.r10.s64 = ctx.r10.s64 + -4288;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FFD4:
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82545e80
	ctx.lr = 0x82A2FFDC;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a2fff8
	if (ctx.cr6.eq) goto loc_82A2FFF8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4280
	ctx.r11.s64 = ctx.r11.s64 + -4280;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// b 0x82a2fffc
	goto loc_82A2FFFC;
loc_82A2FFF8:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A2FFFC:
	// bl 0x82a186e0
	ctx.lr = 0x82A30000;
	sub_82A186E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r3,1488
	ctx.r3.s64 = ctx.r3.s64 + 1488;
	// bl 0x82a02300
	ctx.lr = 0x82A3000C;
	sub_82A02300(ctx, base);
loc_82A3000C:
	// addi r3,r1,304
	ctx.r3.s64 = ctx.r1.s64 + 304;
	// bl 0x82239548
	ctx.lr = 0x82A30014;
	sub_82239548(ctx, base);
	// addi r1,r1,6096
	ctx.r1.s64 = ctx.r1.s64 + 6096;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30020"))) PPC_WEAK_FUNC(sub_82A30020);
PPC_FUNC_IMPL(__imp__sub_82A30020) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A30028;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,12324(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a30070
	if (!ctx.cr6.eq) goto loc_82A30070;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A30048;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3005c
	if (ctx.cr6.eq) goto loc_82A3005C;
	// bl 0x82a13fe0
	ctx.lr = 0x82A30054;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a30060
	goto loc_82A30060;
loc_82A3005C:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A30060:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r31,12324(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12324, ctx.r31.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A30070:
	// addi r4,r29,4
	ctx.r4.s64 = ctx.r29.s64 + 4;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A3007C;
	sub_823099B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2ea88
	ctx.lr = 0x82A30088;
	sub_82A2EA88(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30090"))) PPC_WEAK_FUNC(sub_82A30090);
PPC_FUNC_IMPL(__imp__sub_82A30090) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a300dc
	if (!ctx.cr6.eq) goto loc_82A300DC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A300B8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a300c8
	if (ctx.cr6.eq) goto loc_82A300C8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A300C4;
	sub_82A13FE0(ctx, base);
	// b 0x82a300cc
	goto loc_82A300CC;
loc_82A300C8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A300CC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A300DC:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4024(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4024, ctx.r11.u32);
	// bl 0x82a2bc50
	ctx.lr = 0x82A300E8;
	sub_82A2BC50(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A30100"))) PPC_WEAK_FUNC(sub_82A30100);
PPC_FUNC_IMPL(__imp__sub_82A30100) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a30154
	if (!ctx.cr6.eq) goto loc_82A30154;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A30130;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a30140
	if (ctx.cr6.eq) goto loc_82A30140;
	// bl 0x82a13fe0
	ctx.lr = 0x82A3013C;
	sub_82A13FE0(ctx, base);
	// b 0x82a30144
	goto loc_82A30144;
loc_82A30140:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A30144:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A30154:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a2f4c8
	ctx.lr = 0x82A3015C;
	sub_82A2F4C8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A30178"))) PPC_WEAK_FUNC(sub_82A30178);
PPC_FUNC_IMPL(__imp__sub_82A30178) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82A30180;
	__savegprlr_24(ctx, base);
	// addi r12,r1,-72
	ctx.r12.s64 = ctx.r1.s64 + -72;
	// bl 0x82e28f18
	ctx.lr = 0x82A30188;
	__savefpr_28(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A30198;
	sub_82B061D8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A301A0;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r24,-31973
	ctx.r24.s64 = -2095382528;
	// lbz r10,4557(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4557);
	// addi r11,r31,4528
	ctx.r11.s64 = ctx.r31.s64 + 4528;
	// li r26,0
	ctx.r26.s64 = 0;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// beq cr6,0x82a3020c
	if (ctx.cr6.eq) goto loc_82A3020C;
	// lbz r11,4556(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a3020c
	if (!ctx.cr6.eq) goto loc_82A3020C;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r6,r31,2820
	ctx.r6.s64 = ctx.r31.s64 + 2820;
	// lwz r4,1700(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 1700);
	// addi r5,r31,2812
	ctx.r5.s64 = ctx.r31.s64 + 2812;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4557(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4557, ctx.r26.u8);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A3020C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A3020C:
	// lbz r11,4558(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4558);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30244
	if (ctx.cr6.eq) goto loc_82A30244;
	// lbz r11,4556(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4556);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30244
	if (!ctx.cr6.eq) goto loc_82A30244;
	// addi r4,r31,4568
	ctx.r4.s64 = ctx.r31.s64 + 4568;
	// stb r26,4558(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4558, ctx.r26.u8);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309dd8
	ctx.lr = 0x82A30234;
	sub_82309DD8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r31,4560
	ctx.r4.s64 = ctx.r31.s64 + 4560;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a15238
	ctx.lr = 0x82A30244;
	sub_82A15238(ctx, base);
loc_82A30244:
	// lbz r11,2828(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2828);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30258
	if (ctx.cr6.eq) goto loc_82A30258;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2b340
	ctx.lr = 0x82A30258;
	sub_82A2B340(ctx, base);
loc_82A30258:
	// lis r25,-31969
	ctx.r25.s64 = -2095120384;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lbz r11,12328(r25)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r25.u32 + 12328);
	// lfd f28,-11432(r10)
	ctx.fpscr.disableFlushMode();
	ctx.f28.u64 = PPC_LOAD_U64(ctx.r10.u32 + -11432);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lfd f29,40(r11)
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r11.u32 + 40);
	// beq cr6,0x82a3059c
	if (ctx.cr6.eq) goto loc_82A3059C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a0ce50
	ctx.lr = 0x82A30280;
	sub_82A0CE50(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a10f08
	ctx.lr = 0x82A30288;
	sub_82A10F08(ctx, base);
	// bl 0x8221a018
	ctx.lr = 0x82A3028C;
	sub_8221A018(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a28288
	ctx.lr = 0x82A30298;
	sub_82A28288(ctx, base);
	// lbz r11,4056(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4056);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a302c0
	if (ctx.cr6.eq) goto loc_82A302C0;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r3,12296(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12296);
	// bl 0x82a2f630
	ctx.lr = 0x82A302B0;
	sub_82A2F630(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82a302c0
	if (!ctx.cr6.eq) goto loc_82A302C0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a118d8
	ctx.lr = 0x82A302C0;
	sub_82A118D8(ctx, base);
loc_82A302C0:
	// lbz r11,4500(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a3035c
	if (ctx.cr6.eq) goto loc_82A3035C;
	// lbz r11,4049(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4049);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30338
	if (!ctx.cr6.eq) goto loc_82A30338;
	// lbz r11,4050(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4050);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30338
	if (!ctx.cr6.eq) goto loc_82A30338;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A302EC;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lwz r11,4504(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4504);
	// lwz r10,4508(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4508);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fadd f13,f13,f29
	ctx.f13.f64 = ctx.f13.f64 + ctx.f29.f64;
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x82a3035c
	if (!ctx.cr6.lt) goto loc_82A3035C;
	// stfd f28,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f28.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stb r26,4500(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4500, ctx.r26.u8);
	// stw r11,4504(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4504, ctx.r11.u32);
	// stw r10,4508(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4508, ctx.r10.u32);
	// b 0x82a3035c
	goto loc_82A3035C;
loc_82A30338:
	// stfd f28,80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f28.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r11,r31,4504
	ctx.r11.s64 = ctx.r31.s64 + 4504;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4500(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4500, ctx.r26.u8);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// bl 0x82a0a108
	ctx.lr = 0x82A3035C;
	sub_82A0A108(ctx, base);
loc_82A3035C:
	// lbz r11,4512(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4512);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a3038c
	if (ctx.cr6.eq) goto loc_82A3038C;
	// lbz r11,4500(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a3038c
	if (!ctx.cr6.eq) goto loc_82A3038C;
	// lbz r11,4045(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4045);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a3038c
	if (!ctx.cr6.eq) goto loc_82A3038C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4512(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4512, ctx.r26.u8);
	// bl 0x82a0d408
	ctx.lr = 0x82A3038C;
	sub_82A0D408(ctx, base);
loc_82A3038C:
	// lbz r11,4044(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4044);
	// li r30,1
	ctx.r30.s64 = 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30404
	if (ctx.cr6.eq) goto loc_82A30404;
	// lbz r11,4045(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4045);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30404
	if (!ctx.cr6.eq) goto loc_82A30404;
	// lbz r11,4500(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4500);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30404
	if (!ctx.cr6.eq) goto loc_82A30404;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A303BC;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4036
	ctx.r11.s64 = ctx.r31.s64 + 4036;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// fmul f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64;
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f0,4552(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4552);
	// fadd f0,f12,f0
	ctx.f0.f64 = ctx.f12.f64 + ctx.f0.f64;
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bge cr6,0x82a30404
	if (!ctx.cr6.lt) goto loc_82A30404;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r30,4046(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4046, ctx.r30.u8);
	// bl 0x82a0a108
	ctx.lr = 0x82A30404;
	sub_82A0A108(ctx, base);
loc_82A30404:
	// lbz r11,4493(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4493);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30450
	if (ctx.cr6.eq) goto loc_82A30450;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A30418;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lfs f12,4496(r31)
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + 4496);
	ctx.f12.f64 = double(temp.f32);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// fcmpu cr6,f0,f12
	ctx.cr6.compare(ctx.f0.f64, ctx.f12.f64);
	// ble cr6,0x82a30450
	if (!ctx.cr6.gt) goto loc_82A30450;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lwz r3,3992(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3992);
	// stb r26,4493(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4493, ctx.r26.u8);
	// stb r30,4492(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4492, ctx.r30.u8);
	// lfs f0,-13892(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,4496(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4496, temp.u32);
	// bl 0x82a0c168
	ctx.lr = 0x82A30450;
	sub_82A0C168(ctx, base);
loc_82A30450:
	// addi r30,r31,1488
	ctx.r30.s64 = ctx.r31.s64 + 1488;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// lwz r11,200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A30464;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	// lbz r29,204(r30)
	ctx.r29.u64 = PPC_LOAD_U8(ctx.r30.u32 + 204);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A30474;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x82a304d8
	if (ctx.cr6.eq) goto loc_82A304D8;
	// lis r11,-32240
	ctx.r11.s64 = -2112880640;
	// addi r27,r11,12928
	ctx.r27.s64 = ctx.r11.s64 + 12928;
loc_82A30484:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a023e8
	ctx.lr = 0x82A30490;
	sub_82A023E8(ctx, base);
	// lwz r29,80(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A304A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A304B4;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,200(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	// lbz r28,204(r30)
	ctx.r28.u64 = PPC_LOAD_U8(ctx.r30.u32 + 204);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A304C4;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r27,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r27.u32);
	// bl 0x82545ee8
	ctx.lr = 0x82A304D0;
	sub_82545EE8(ctx, base);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82a30484
	if (!ctx.cr6.eq) goto loc_82A30484;
loc_82A304D8:
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a3059c
	if (ctx.cr6.eq) goto loc_82A3059C;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A304E8;
	sub_82A0BFB0(ctx, base);
	// lwz r11,36(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a3059c
	if (!ctx.cr6.eq) goto loc_82A3059C;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r29,8
	ctx.r29.s64 = 8;
	// lfd f30,-5600(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r11.u32 + -5600);
loc_82A30500:
	// lwz r30,4016(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A30510;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwzx r30,r29,r30
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r30.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A30520;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a30590
	if (ctx.cr6.eq) goto loc_82A30590;
	// lwz r11,36(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a30590
	if (ctx.cr6.eq) goto loc_82A30590;
	// addi r11,r30,68
	ctx.r11.s64 = ctx.r30.s64 + 68;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f31,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// bl 0x82b061d8
	ctx.lr = 0x82A30554;
	sub_82B061D8(ctx, base);
	// lfd f0,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// fadd f12,f31,f30
	ctx.f12.f64 = ctx.f31.f64 + ctx.f30.f64;
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// fcmpu cr6,f12,f0
	ctx.cr6.compare(ctx.f12.f64, ctx.f0.f64);
	// bge cr6,0x82a30590
	if (!ctx.cr6.lt) goto loc_82A30590;
	// ld r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a09208
	ctx.lr = 0x82A3057C;
	sub_82A09208(ctx, base);
	// ld r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r11.u64);
	// bl 0x82a10b28
	ctx.lr = 0x82A30590;
	sub_82A10B28(ctx, base);
loc_82A30590:
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpwi cr6,r29,24
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 24, ctx.xer);
	// blt cr6,0x82a30500
	if (ctx.cr6.lt) goto loc_82A30500;
loc_82A3059C:
	// lbz r11,4460(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4460);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a305f0
	if (ctx.cr6.eq) goto loc_82A305F0;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A305B0;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// addi r11,r31,4464
	ctx.r11.s64 = ctx.r31.s64 + 4464;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fadd f13,f13,f29
	ctx.f13.f64 = ctx.f13.f64 + ctx.f29.f64;
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x82a305f0
	if (!ctx.cr6.lt) goto loc_82A305F0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4460(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4460, ctx.r26.u8);
	// bl 0x82a0c9a8
	ctx.lr = 0x82A305F0;
	sub_82A0C9A8(ctx, base);
loc_82A305F0:
	// lbz r11,2805(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2805);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30628
	if (ctx.cr6.eq) goto loc_82A30628;
	// lbz r11,12328(r25)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r25.u32 + 12328);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30628
	if (ctx.cr6.eq) goto loc_82A30628;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// stb r26,2805(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2805, ctx.r26.u8);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// addi r4,r11,-29761
	ctx.r4.s64 = ctx.r11.s64 + -29761;
	// bl 0x823099b0
	ctx.lr = 0x82A3061C;
	sub_823099B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a14e08
	ctx.lr = 0x82A30628;
	sub_82A14E08(ctx, base);
loc_82A30628:
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// lbz r11,4373(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4373);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r11,11464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 11464);
	// beq cr6,0x82a30674
	if (ctx.cr6.eq) goto loc_82A30674;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30674
	if (ctx.cr6.eq) goto loc_82A30674;
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r10,140(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 140);
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x82a30674
	if (ctx.cr6.eq) goto loc_82A30674;
	// lwz r10,1000(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 1000);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a30674
	if (ctx.cr6.eq) goto loc_82A30674;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4373(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4373, ctx.r26.u8);
	// bl 0x82a10c20
	ctx.lr = 0x82A30670;
	sub_82A10C20(ctx, base);
	// lwz r11,11464(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 11464);
loc_82A30674:
	// lbz r10,4374(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4374);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a306c4
	if (ctx.cr6.eq) goto loc_82A306C4;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a306c4
	if (ctx.cr6.eq) goto loc_82A306C4;
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// lwz r11,140(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 140);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a306c4
	if (ctx.cr6.eq) goto loc_82A306C4;
	// lwz r11,1000(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1000);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a306c4
	if (ctx.cr6.eq) goto loc_82A306C4;
	// addi r4,r31,4376
	ctx.r4.s64 = ctx.r31.s64 + 4376;
	// stb r26,4374(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4374, ctx.r26.u8);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82309dd8
	ctx.lr = 0x82A306B8;
	sub_82309DD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a10730
	ctx.lr = 0x82A306C4;
	sub_82A10730(ctx, base);
loc_82A306C4:
	// lbz r11,4472(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4472);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lfd f31,4544(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4544);
	// beq cr6,0x82a3072c
	if (ctx.cr6.eq) goto loc_82A3072C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A306E0;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lwz r11,4476(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4476);
	// lwz r10,4480(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4480);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// fmsub f0,f13,f0,f31
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f31.f64;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// ble cr6,0x82a3072c
	if (!ctx.cr6.gt) goto loc_82A3072C;
	// stfd f28,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f28.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4472(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4472, ctx.r26.u8);
	// stw r11,4476(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4476, ctx.r11.u32);
	// stw r10,4480(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4480, ctx.r10.u32);
	// bl 0x82a29df8
	ctx.lr = 0x82A3072C;
	sub_82A29DF8(ctx, base);
loc_82A3072C:
	// lbz r11,4429(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4429);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30798
	if (ctx.cr6.eq) goto loc_82A30798;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A30740;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lwz r11,4432(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4432);
	// lwz r10,4436(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4436);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// fmsub f0,f13,f0,f31
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f31.f64;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// ble cr6,0x82a30798
	if (!ctx.cr6.gt) goto loc_82A30798;
	// stfd f28,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f28.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// stb r26,4429(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4429, ctx.r26.u8);
	// addi r4,r31,12
	ctx.r4.s64 = ctx.r31.s64 + 12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,4432(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4432, ctx.r11.u32);
	// stw r10,4436(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4436, ctx.r10.u32);
	// bl 0x82a28df0
	ctx.lr = 0x82A30798;
	sub_82A28DF0(ctx, base);
loc_82A30798:
	// lbz r11,4428(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4428);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a307ac
	if (ctx.cr6.eq) goto loc_82A307AC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a050f8
	ctx.lr = 0x82A307AC;
	sub_82A050F8(ctx, base);
loc_82A307AC:
	// lbz r11,4448(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4448);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a307ec
	if (ctx.cr6.eq) goto loc_82A307EC;
	// lbz r11,1696(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 1696);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a307ec
	if (ctx.cr6.eq) goto loc_82A307EC;
	// lwz r3,4016(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4016);
	// stb r26,4020(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4020, ctx.r26.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A307D0;
	sub_82A02AC0(ctx, base);
	// lwz r5,4444(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4444);
	// lwz r4,4440(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4440);
	// lwz r3,3988(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A307E0;
	sub_82A27BC8(ctx, base);
	// stb r26,4448(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4448, ctx.r26.u8);
	// stw r26,4440(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4440, ctx.r26.u32);
	// stw r26,4444(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4444, ctx.r26.u32);
loc_82A307EC:
	// lbz r11,4544(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4544);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30854
	if (ctx.cr6.eq) goto loc_82A30854;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A30800;
	sub_82B061D8(ctx, base);
	// lwz r11,4548(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4548);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lwz r10,4552(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4552);
	// fcfid f12,f0
	ctx.f12.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-32248
	ctx.r11.s64 = -2113404928;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// lfd f13,24960(r11)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24960);
	// fmsub f0,f12,f0,f13
	ctx.f0.f64 = ctx.f12.f64 * ctx.f0.f64 - ctx.f13.f64;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// ble cr6,0x82a30854
	if (!ctx.cr6.gt) goto loc_82A30854;
	// stfd f28,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f28.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r26,4544(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4544, ctx.r26.u8);
	// stw r11,4548(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4548, ctx.r11.u32);
	// stw r10,4552(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4552, ctx.r10.u32);
	// bl 0x82a297f0
	ctx.lr = 0x82A30854;
	sub_82A297F0(ctx, base);
loc_82A30854:
	// lbz r11,4405(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4405);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30870
	if (ctx.cr6.eq) goto loc_82A30870;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30870
	if (!ctx.cr6.eq) goto loc_82A30870;
	// stb r26,4405(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4405, ctx.r26.u8);
loc_82A30870:
	// lbz r11,4450(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4450);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a308f0
	if (ctx.cr6.eq) goto loc_82A308F0;
	// lwz r11,2800(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2800);
	// lwz r10,2788(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2788);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x82a30894
	if (!ctx.cr6.eq) goto loc_82A30894;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x82a308e8
	goto loc_82A308E8;
loc_82A30894:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82b061d8
	ctx.lr = 0x82A3089C;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4452
	ctx.r11.s64 = ctx.r31.s64 + 4452;
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r24)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r24.u32 + 24768);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// fmul f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64;
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f0,-29544(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -29544);
	// fadd f0,f12,f0
	ctx.f0.f64 = ctx.f12.f64 + ctx.f0.f64;
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// blt cr6,0x82a308e4
	if (ctx.cr6.lt) goto loc_82A308E4;
	// lbz r11,2793(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2793);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a308f0
	if (!ctx.cr6.eq) goto loc_82A308F0;
loc_82A308E4:
	// li r4,0
	ctx.r4.s64 = 0;
loc_82A308E8:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2be00
	ctx.lr = 0x82A308F0;
	sub_82A2BE00(ctx, base);
loc_82A308F0:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// addi r12,r1,-72
	ctx.r12.s64 = ctx.r1.s64 + -72;
	// bl 0x82e28f64
	ctx.lr = 0x82A308FC;
	__restfpr_28(ctx, base);
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30900"))) PPC_WEAK_FUNC(sub_82A30900);
PPC_FUNC_IMPL(__imp__sub_82A30900) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A30908;
	__savegprlr_27(ctx, base);
	// addi r12,r1,-48
	ctx.r12.s64 = ctx.r1.s64 + -48;
	// bl 0x82e28f18
	ctx.lr = 0x82A30910;
	__savefpr_28(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r28,0
	ctx.r28.s64 = 0;
	// mr r27,r28
	ctx.r27.u64 = ctx.r28.u64;
	// lbz r11,5(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 5);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30938
	if (!ctx.cr6.eq) goto loc_82A30938;
	// lbz r11,6(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 6);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30a14
	if (ctx.cr6.eq) goto loc_82A30A14;
loc_82A30938:
	// li r11,1
	ctx.r11.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r11,2797(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2797, ctx.r11.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A30948;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lis r29,-31973
	ctx.r29.s64 = -2095382528;
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// lfs f30,-13892(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f30.f64 = double(temp.f32);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// fmr f31,f30
	ctx.f31.f64 = ctx.f30.f64;
	// fmul f29,f13,f0
	ctx.f29.f64 = ctx.f13.f64 * ctx.f0.f64;
	// bne cr6,0x82a30998
	if (!ctx.cr6.eq) goto loc_82A30998;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A30980;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a30990
	if (ctx.cr6.eq) goto loc_82A30990;
	// bl 0x82a08db0
	ctx.lr = 0x82A3098C;
	sub_82A08DB0(ctx, base);
	// b 0x82a30994
	goto loc_82A30994;
loc_82A30990:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
loc_82A30994:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A30998:
	// lbz r11,2797(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2797);
	// lfs f28,80(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 80);
	ctx.f28.f64 = double(temp.f32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a309e8
	if (ctx.cr6.eq) goto loc_82A309E8;
loc_82A309A8:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f31.f64, ctx.f28.f64);
	// bge cr6,0x82a309e8
	if (!ctx.cr6.lt) goto loc_82A309E8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a30178
	ctx.lr = 0x82A309B8;
	sub_82A30178(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f30.f64;
	// bl 0x82a95510
	ctx.lr = 0x82A309C0;
	sub_82A95510(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A309C8;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// lbz r11,2797(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2797);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// fmsub f0,f13,f0,f29
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f29.f64;
	// frsp f31,f0
	ctx.f31.f64 = double(float(ctx.f0.f64));
	// bne cr6,0x82a309a8
	if (!ctx.cr6.eq) goto loc_82A309A8;
loc_82A309E8:
	// lwz r11,2808(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2808);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a309fc
	if (!ctx.cr6.eq) goto loc_82A309FC;
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f31.f64, ctx.f28.f64);
	// blt cr6,0x82a30a0c
	if (ctx.cr6.lt) goto loc_82A30A0C;
loc_82A309FC:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r28,2797(r31)
	PPC_STORE_U8(ctx.r31.u32 + 2797, ctx.r28.u8);
	// li r27,1
	ctx.r27.s64 = 1;
	// bl 0x82a0c9a8
	ctx.lr = 0x82A30A0C;
	sub_82A0C9A8(ctx, base);
loc_82A30A0C:
	// stb r28,5(r31)
	PPC_STORE_U8(ctx.r31.u32 + 5, ctx.r28.u8);
	// stb r28,6(r31)
	PPC_STORE_U8(ctx.r31.u32 + 6, ctx.r28.u8);
loc_82A30A14:
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a30a34
	if (!ctx.cr6.eq) goto loc_82A30A34;
	// lwz r11,2784(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2784);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30a34
	if (ctx.cr6.eq) goto loc_82A30A34;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a153c0
	ctx.lr = 0x82A30A34;
	sub_82A153C0(ctx, base);
loc_82A30A34:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// addi r12,r1,-48
	ctx.r12.s64 = ctx.r1.s64 + -48;
	// bl 0x82e28f64
	ctx.lr = 0x82A30A40;
	__restfpr_28(ctx, base);
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30A48"))) PPC_WEAK_FUNC(sub_82A30A48);
PPC_FUNC_IMPL(__imp__sub_82A30A48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A30A50;
	__savegprlr_26(ctx, base);
	// stfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -80, ctx.f29.u64);
	// stfd f30,-72(r1)
	PPC_STORE_U64(ctx.r1.u32 + -72, ctx.f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, ctx.f31.u64);
	// stwu r1,-1248(r1)
	ea = -1248 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r27,-31969
	ctx.r27.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// lwz r3,12324(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a30aa0
	if (!ctx.cr6.eq) goto loc_82A30AA0;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A30A80;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a30a90
	if (ctx.cr6.eq) goto loc_82A30A90;
	// bl 0x82a13fe0
	ctx.lr = 0x82A30A8C;
	sub_82A13FE0(ctx, base);
	// b 0x82a30a94
	goto loc_82A30A94;
loc_82A30A90:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A30A94:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,12324(r27)
	PPC_STORE_U32(ctx.r27.u32 + 12324, ctx.r3.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A30AA0:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A30AB0;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// li r29,8
	ctx.r29.s64 = 8;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_82A30AC0:
	// lwz r31,4016(r28)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r28.u32 + 4016);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A30AD0;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r31,r29,r31
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r31.u32);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A30AE0;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a30b00
	if (ctx.cr6.eq) goto loc_82A30B00;
	// lwz r11,24(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a30b00
	if (ctx.cr6.eq) goto loc_82A30B00;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
loc_82A30B00:
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpwi cr6,r29,24
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 24, ctx.xer);
	// blt cr6,0x82a30ac0
	if (ctx.cr6.lt) goto loc_82A30AC0;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d24
	ctx.lr = 0x82A30B18;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239200
	ctx.lr = 0x82A30B24;
	sub_82239200(ctx, base);
	// li r4,71
	ctx.r4.s64 = 71;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239280
	ctx.lr = 0x82A30B30;
	sub_82239280(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r3,3988(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 3988);
	// bl 0x82a03600
	ctx.lr = 0x82A30B40;
	sub_82A03600(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239548
	ctx.lr = 0x82A30B48;
	sub_82239548(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A30B50;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lis r29,-31973
	ctx.r29.s64 = -2095382528;
	// lfs f30,-13892(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f30.f64 = double(temp.f32);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// fmr f31,f30
	ctx.f31.f64 = ctx.f30.f64;
	// fmul f29,f13,f0
	ctx.f29.f64 = ctx.f13.f64 * ctx.f0.f64;
loc_82A30B70:
	// lwz r31,12324(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 12324);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a30ba8
	if (!ctx.cr6.eq) goto loc_82A30BA8;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A30B84;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a30b98
	if (ctx.cr6.eq) goto loc_82A30B98;
	// bl 0x82a13fe0
	ctx.lr = 0x82A30B90;
	sub_82A13FE0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a30b9c
	goto loc_82A30B9C;
loc_82A30B98:
	// li r31,0
	ctx.r31.s64 = 0;
loc_82A30B9C:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,12324(r27)
	PPC_STORE_U32(ctx.r27.u32 + 12324, ctx.r31.u32);
	// stb r11,12328(r26)
	PPC_STORE_U8(ctx.r26.u32 + 12328, ctx.r11.u8);
loc_82A30BA8:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x83157d14
	ctx.lr = 0x82A30BB4;
	__imp__RtlEnterCriticalSection(ctx, base);
	// lwz r9,2788(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2788);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// subf r10,r10,r9
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// cntlzw r11,r10
	ctx.r11.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r31,r11,27,31,31
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// bl 0x83157d24
	ctx.lr = 0x82A30BD4;
	__imp__RtlLeaveCriticalSection(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x82a30c30
	if (!ctx.cr6.eq) goto loc_82A30C30;
	// lfs f0,80(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	ctx.cr6.compare(ctx.f31.f64, ctx.f0.f64);
	// bge cr6,0x82a30c30
	if (!ctx.cr6.lt) goto loc_82A30C30;
	// lwz r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a30c30
	if (ctx.cr6.eq) goto loc_82A30C30;
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a30c30
	if (!ctx.cr6.eq) goto loc_82A30C30;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82a30178
	ctx.lr = 0x82A30C08;
	sub_82A30178(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f30.f64;
	// bl 0x82a95510
	ctx.lr = 0x82A30C10;
	sub_82A95510(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A30C18;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r29)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r29.u32 + 24768);
	// fmsub f0,f13,f0,f29
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f29.f64;
	// frsp f31,f0
	ctx.f31.f64 = double(float(ctx.f0.f64));
	// b 0x82a30b70
	goto loc_82A30B70;
loc_82A30C30:
	// lfs f0,80(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	ctx.cr6.compare(ctx.f31.f64, ctx.f0.f64);
	// bge cr6,0x82a30c48
	if (!ctx.cr6.lt) goto loc_82A30C48;
	// lwz r11,8(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a30c58
	if (!ctx.cr6.eq) goto loc_82A30C58;
loc_82A30C48:
	// li r11,1
	ctx.r11.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r11,68(r30)
	PPC_STORE_U32(ctx.r30.u32 + 68, ctx.r11.u32);
	// bl 0x82a0c9a8
	ctx.lr = 0x82A30C58;
	sub_82A0C9A8(ctx, base);
loc_82A30C58:
	// lwz r11,68(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 68);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// addi r1,r1,1248
	ctx.r1.s64 = ctx.r1.s64 + 1248;
	// lfd f29,-80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// lfd f30,-72(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30C80"))) PPC_WEAK_FUNC(sub_82A30C80);
PPC_FUNC_IMPL(__imp__sub_82A30C80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A30C9C;
	sub_82B061D8(ctx, base);
	// addi r11,r31,4528
	ctx.r11.s64 = ctx.r31.s64 + 4528;
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// fmul f13,f13,f0
	ctx.f13.f64 = ctx.f13.f64 * ctx.f0.f64;
	// lfd f0,4072(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4072);
	// fadd f0,f12,f0
	ctx.f0.f64 = ctx.f12.f64 + ctx.f0.f64;
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// ble cr6,0x82a30cf0
	if (!ctx.cr6.gt) goto loc_82A30CF0;
	// lbz r11,2792(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2792);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30cf0
	if (ctx.cr6.eq) goto loc_82A30CF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a30178
	ctx.lr = 0x82A30CF0;
	sub_82A30178(ctx, base);
loc_82A30CF0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A30D08"))) PPC_WEAK_FUNC(sub_82A30D08);
PPC_FUNC_IMPL(__imp__sub_82A30D08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e58
	ctx.lr = 0x82A30D10;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// li r29,1
	ctx.r29.s64 = 1;
	// bl 0x82a1eca8
	ctx.lr = 0x82A30D24;
	sub_82A1ECA8(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a18468
	ctx.lr = 0x82A30D30;
	sub_82A18468(ctx, base);
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// stw r30,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r30.u32);
	// beq cr6,0x82a30ddc
	if (ctx.cr6.eq) goto loc_82A30DDC;
	// bl 0x82a0bfb0
	ctx.lr = 0x82A30D40;
	sub_82A0BFB0(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// lwz r11,8(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a30ddc
	if (ctx.cr6.eq) goto loc_82A30DDC;
	// lis r27,-31969
	ctx.r27.s64 = -2095120384;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,-836(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -836);
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x82a30dcc
	if (!ctx.cr6.gt) goto loc_82A30DCC;
	// li r29,0
	ctx.r29.s64 = 0;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
loc_82A30D70:
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// li r5,0
	ctx.r5.s64 = 0;
	// ld r4,4656(r26)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r26.u32 + 4656);
	// addi r24,r1,80
	ctx.r24.s64 = ctx.r1.s64 + 80;
	// lwzx r30,r11,r29
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r29.u32);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r28,0(r30)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A30D94;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 228);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A30DB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,-836(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -836);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x82a30d70
	if (ctx.cr6.lt) goto loc_82A30D70;
loc_82A30DCC:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82a30a48
	ctx.lr = 0x82A30DD4;
	sub_82A30A48(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
loc_82A30DDC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea8
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A30DE8"))) PPC_WEAK_FUNC(sub_82A30DE8);
PPC_FUNC_IMPL(__imp__sub_82A30DE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e48
	ctx.lr = 0x82A30DF0;
	__savegprlr_20(ctx, base);
	// addi r12,r1,-104
	ctx.r12.s64 = ctx.r1.s64 + -104;
	// bl 0x82e28f14
	ctx.lr = 0x82A30DF8;
	__savefpr_27(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// mr r20,r4
	ctx.r20.u64 = ctx.r4.u64;
	// li r25,0
	ctx.r25.s64 = 0;
	// lfd f27,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f27.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// addi r11,r31,84
	ctx.r11.s64 = ctx.r31.s64 + 84;
	// stfd f27,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f27.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
	// lwz r23,12304(r30)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// bne cr6,0x82a30e5c
	if (!ctx.cr6.eq) goto loc_82A30E5C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A30E40;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a30e54
	if (ctx.cr6.eq) goto loc_82A30E54;
	// bl 0x82a08db0
	ctx.lr = 0x82A30E4C;
	sub_82A08DB0(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// b 0x82a30e58
	goto loc_82A30E58;
loc_82A30E54:
	// mr r23,r25
	ctx.r23.u64 = ctx.r25.u64;
loc_82A30E58:
	// stw r23,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r23.u32);
loc_82A30E5C:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r3,11464(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11464);
	// bl 0x8279f1e0
	ctx.lr = 0x82A30E68;
	sub_8279F1E0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a30e7c
	if (ctx.cr6.eq) goto loc_82A30E7C;
	// lwz r11,8(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a311d4
	if (!ctx.cr6.eq) goto loc_82A311D4;
loc_82A30E7C:
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lfd f13,0(r20)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r20.u32 + 0);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfd f0,-5872(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -5872);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// fctiwz f0,f0
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfiwx f0,0,r10
	PPC_STORE_U32(ctx.r10.u32, ctx.f0.u32);
	// bl 0x82a186e0
	ctx.lr = 0x82A30E9C;
	sub_82A186E0(ctx, base);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// lwz r26,80(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lbz r11,4057(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + 4057);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a30ec0
	if (ctx.cr6.eq) goto loc_82A30EC0;
	// stb r25,4057(r24)
	PPC_STORE_U8(ctx.r24.u32 + 4057, ctx.r25.u8);
	// stb r25,4058(r24)
	PPC_STORE_U8(ctx.r24.u32 + 4058, ctx.r25.u8);
	// stw r25,300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 300, ctx.r25.u32);
	// b 0x82a30f44
	goto loc_82A30F44;
loc_82A30EC0:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a30ef4
	if (!ctx.cr6.eq) goto loc_82A30EF4;
	// lwz r11,8(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a311d4
	if (ctx.cr6.eq) goto loc_82A311D4;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lfd f0,4072(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4072);
	// stfd f0,0(r20)
	PPC_STORE_U64(ctx.r20.u32 + 0, ctx.f0.u64);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-104
	ctx.r12.s64 = ctx.r1.s64 + -104;
	// bl 0x82e28f60
	ctx.lr = 0x82A30EF0;
	__restfpr_27(ctx, base);
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A30EF4:
	// lwz r11,92(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,92(r31)
	PPC_STORE_U32(ctx.r31.u32 + 92, ctx.r11.u32);
	// bl 0x823eaf28
	ctx.lr = 0x82A30F04;
	sub_823EAF28(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lhz r10,44(r31)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r31.u32 + 44);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// clrlwi r11,r11,16
	ctx.r11.u64 = ctx.r11.u32 & 0xFFFF;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// xor r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 ^ ctx.r11.u64;
	// sth r11,44(r31)
	PPC_STORE_U16(ctx.r31.u32 + 44, ctx.r11.u16);
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// stw r25,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r25.u32);
	// bl 0x82a01b18
	ctx.lr = 0x82A30F2C;
	sub_82A01B18(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r11.u32);
	// bl 0x82a2d708
	ctx.lr = 0x82A30F44;
	sub_82A2D708(ctx, base);
loc_82A30F44:
	// lis r21,-31969
	ctx.r21.s64 = -2095120384;
	// lwz r3,12320(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12320);
	// bl 0x82a28288
	ctx.lr = 0x82A30F50;
	sub_82A28288(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a1ea30
	ctx.lr = 0x82A30F58;
	sub_82A1EA30(ctx, base);
	// lwz r11,96(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 96);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a30f68
	if (!ctx.cr6.gt) goto loc_82A30F68;
	// stw r3,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r3.u32);
loc_82A30F68:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A30F70;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r28,-31973
	ctx.r28.s64 = -2095382528;
	// li r11,-1
	ctx.r11.s64 = -1;
	// fmr f31,f27
	ctx.f31.f64 = ctx.f27.f64;
	// li r27,1
	ctx.r27.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lfd f0,24768(r28)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r28.u32 + 24768);
	// mr r22,r27
	ctx.r22.u64 = ctx.r27.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// fmul f30,f13,f0
	ctx.f30.f64 = ctx.f13.f64 * ctx.f0.f64;
	// bl 0x82a13b48
	ctx.lr = 0x82A30FA4;
	sub_82A13B48(ctx, base);
	// lwz r29,80(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a310d0
	if (ctx.cr6.eq) goto loc_82A310D0;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// lfd f29,-28560(r10)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r10.u32 + -28560);
	// lfs f28,-13892(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f28.f64 = double(temp.f32);
loc_82A30FC0:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82a30178
	ctx.lr = 0x82A30FC8;
	sub_82A30178(ctx, base);
	// lbz r11,2804(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + 2804);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a311d4
	if (!ctx.cr6.eq) goto loc_82A311D4;
	// fmr f1,f28
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f28.f64;
	// bl 0x82a95510
	ctx.lr = 0x82A30FDC;
	sub_82A95510(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a2d708
	ctx.lr = 0x82A30FEC;
	sub_82A2D708(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a1ea30
	ctx.lr = 0x82A30FF4;
	sub_82A1EA30(ctx, base);
	// lwz r11,96(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 96);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x82a31004
	if (!ctx.cr6.gt) goto loc_82A31004;
	// stw r3,96(r31)
	PPC_STORE_U32(ctx.r31.u32 + 96, ctx.r3.u32);
loc_82A31004:
	// lwz r11,96(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 96);
	// cmpw cr6,r11,r29
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r29.s32, ctx.xer);
	// bge cr6,0x82a31024
	if (!ctx.cr6.lt) goto loc_82A31024;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a0ec20
	ctx.lr = 0x82A31018;
	sub_82A0EC20(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
	// bne cr6,0x82a31028
	if (!ctx.cr6.eq) goto loc_82A31028;
loc_82A31024:
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
loc_82A31028:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82b061d8
	ctx.lr = 0x82A31030;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lfd f0,24768(r28)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r28.u32 + 24768);
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// fmsub f31,f13,f0,f30
	ctx.f31.f64 = ctx.f13.f64 * ctx.f0.f64 - ctx.f30.f64;
	// beq cr6,0x82a31088
	if (ctx.cr6.eq) goto loc_82A31088;
	// lwz r11,92(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 92);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// ble cr6,0x82a31088
	if (!ctx.cr6.gt) goto loc_82A31088;
	// fcmpu cr6,f31,f29
	ctx.cr6.compare(ctx.f31.f64, ctx.f29.f64);
	// ble cr6,0x82a31088
	if (!ctx.cr6.gt) goto loc_82A31088;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82a0d058
	ctx.lr = 0x82A31064;
	sub_82A0D058(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// beq cr6,0x82a310d0
	if (ctx.cr6.eq) goto loc_82A310D0;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// stw r27,300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 300, ctx.r27.u32);
	// bl 0x82a0a238
	ctx.lr = 0x82A3107C;
	sub_82A0A238(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bne cr6,0x82a310b0
	if (!ctx.cr6.eq) goto loc_82A310B0;
	// stw r25,300(r31)
	PPC_STORE_U32(ctx.r31.u32 + 300, ctx.r25.u32);
loc_82A31088:
	// lfs f0,80(r23)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r23.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	ctx.cr6.compare(ctx.f31.f64, ctx.f0.f64);
	// bgt cr6,0x82a310c4
	if (ctx.cr6.gt) goto loc_82A310C4;
	// lwz r11,8(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a310a4
	if (!ctx.cr6.eq) goto loc_82A310A4;
	// lwz r29,100(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
loc_82A310A4:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bne cr6,0x82a30fc0
	if (!ctx.cr6.eq) goto loc_82A30FC0;
	// b 0x82a310d0
	goto loc_82A310D0;
loc_82A310B0:
	// stw r26,288(r31)
	PPC_STORE_U32(ctx.r31.u32 + 288, ctx.r26.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-104
	ctx.r12.s64 = ctx.r1.s64 + -104;
	// bl 0x82e28f60
	ctx.lr = 0x82A310C0;
	__restfpr_27(ctx, base);
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A310C4:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// lwz r29,100(r31)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// bl 0x82a21a90
	ctx.lr = 0x82A310D0;
	sub_82A21A90(ctx, base);
loc_82A310D0:
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x82a310ec
	if (!ctx.cr6.gt) goto loc_82A310EC;
	// lwz r11,100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 100);
	// cmpw cr6,r11,r29
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r29.s32, ctx.xer);
	// bge cr6,0x82a310ec
	if (!ctx.cr6.lt) goto loc_82A310EC;
	// subf r30,r11,r29
	ctx.r30.s64 = ctx.r29.s64 - ctx.r11.s64;
loc_82A310EC:
	// fmr f1,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f27.f64;
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// beq cr6,0x82a31104
	if (ctx.cr6.eq) goto loc_82A31104;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a26290
	ctx.lr = 0x82A31104;
	sub_82A26290(ctx, base);
loc_82A31104:
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// ble cr6,0x82a31128
	if (!ctx.cr6.gt) goto loc_82A31128;
	// fadd f0,f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f1.f64 + ctx.f31.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r11,r31,76
	ctx.r11.s64 = ctx.r31.s64 + 76;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// stw r9,4(r11)
	PPC_STORE_U32(ctx.r11.u32 + 4, ctx.r9.u32);
loc_82A31128:
	// lwz r11,212(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 212);
	// extsw r11,r11
	ctx.r11.s64 = ctx.r11.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f0,f0
	ctx.f0.f64 = double(ctx.f0.s64);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// frsp f13,f0
	ctx.f13.f64 = double(float(ctx.f0.f64));
	// lfs f0,-27596(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -27596);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f0,f13,f0
	ctx.f0.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// stfd f0,0(r20)
	PPC_STORE_U64(ctx.r20.u32 + 0, ctx.f0.u64);
	// sth r25,44(r31)
	PPC_STORE_U16(ctx.r31.u32 + 44, ctx.r25.u16);
	// sth r25,46(r31)
	PPC_STORE_U16(ctx.r31.u32 + 46, ctx.r25.u16);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a3119c
	if (ctx.cr6.eq) goto loc_82A3119C;
	// lwz r11,308(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 308);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmpwi cr6,r11,595
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 595, ctx.xer);
	// stw r11,308(r31)
	PPC_STORE_U32(ctx.r31.u32 + 308, ctx.r11.u32);
	// bne cr6,0x82a31180
	if (!ctx.cr6.eq) goto loc_82A31180;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82a0e450
	ctx.lr = 0x82A31180;
	sub_82A0E450(ctx, base);
loc_82A31180:
	// lwz r11,308(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 308);
	// cmpwi cr6,r11,600
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 600, ctx.xer);
	// ble cr6,0x82a311a0
	if (!ctx.cr6.gt) goto loc_82A311A0;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// stw r25,308(r31)
	PPC_STORE_U32(ctx.r31.u32 + 308, ctx.r25.u32);
	// bl 0x82a21a90
	ctx.lr = 0x82A31198;
	sub_82A21A90(ctx, base);
	// b 0x82a311a0
	goto loc_82A311A0;
loc_82A3119C:
	// stw r25,308(r31)
	PPC_STORE_U32(ctx.r31.u32 + 308, ctx.r25.u32);
loc_82A311A0:
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// bne cr6,0x82a311d4
	if (!ctx.cr6.eq) goto loc_82A311D4;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,4560
	ctx.r4.s64 = ctx.r11.s64 + 4560;
	// bl 0x823099b0
	ctx.lr = 0x82A311B8;
	sub_823099B0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82a1eca8
	ctx.lr = 0x82A311C0;
	sub_82A1ECA8(ctx, base);
	// lwz r3,12320(r21)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r21.u32 + 12320);
	// bl 0x82a18468
	ctx.lr = 0x82A311C8;
	sub_82A18468(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r25,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r25.u32);
	// bl 0x82309a60
	ctx.lr = 0x82A311D4;
	sub_82309A60(ctx, base);
loc_82A311D4:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-104
	ctx.r12.s64 = ctx.r1.s64 + -104;
	// bl 0x82e28f60
	ctx.lr = 0x82A311E0;
	__restfpr_27(ctx, base);
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A311E8"))) PPC_WEAK_FUNC(sub_82A311E8);
PPC_FUNC_IMPL(__imp__sub_82A311E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e4c
	ctx.lr = 0x82A311F0;
	__savegprlr_21(ctx, base);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r31,0
	ctx.r31.s64 = 0;
	// lis r22,-31973
	ctx.r22.s64 = -2095382528;
	// lwz r11,36(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a313a0
	if (ctx.cr6.eq) goto loc_82A313A0;
	// lis r25,-31969
	ctx.r25.s64 = -2095120384;
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a313a0
	if (ctx.cr6.eq) goto loc_82A313A0;
	// bl 0x82a186e0
	ctx.lr = 0x82A31220;
	sub_82A186E0(ctx, base);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
	// mr r27,r31
	ctx.r27.u64 = ctx.r31.u64;
	// lwz r23,4016(r3)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4016);
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// stw r5,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r5.u32);
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x82a312f4
	if (!ctx.cr6.gt) goto loc_82A312F4;
	// mr r26,r31
	ctx.r26.u64 = ctx.r31.u64;
	// lis r24,-31969
	ctx.r24.s64 = -2095120384;
loc_82A31250:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x82a02d50
	ctx.lr = 0x82A3125C;
	sub_82A02D50(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a312d8
	if (ctx.cr6.eq) goto loc_82A312D8;
	// lwz r11,16(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a312d8
	if (ctx.cr6.eq) goto loc_82A312D8;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// li r3,4
	ctx.r3.s64 = 4;
	// bl 0x82741028
	ctx.lr = 0x82A31280;
	sub_82741028(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3128c
	if (ctx.cr6.eq) goto loc_82A3128C;
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r27.u32);
loc_82A3128C:
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
	// li r5,0
	ctx.r5.s64 = 0;
	// ld r4,4656(r24)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r24.u32 + 4656);
	// addi r21,r1,80
	ctx.r21.s64 = ctx.r1.s64 + 80;
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwzx r29,r11,r26
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r26.u32);
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r28,0(r29)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x8246bd50
	ctx.lr = 0x82A312B8;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 228);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A312D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A312D8:
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r26,r26,4
	ctx.r26.s64 = ctx.r26.s64 + 4;
	// lwz r10,764(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 764);
	// cmpw cr6,r27,r10
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x82a31250
	if (ctx.cr6.lt) goto loc_82A31250;
	// lwz r5,92(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_82A312F4:
	// mr r28,r31
	ctx.r28.u64 = ctx.r31.u64;
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// ble cr6,0x82a31344
	if (!ctx.cr6.gt) goto loc_82A31344;
	// mr r29,r31
	ctx.r29.u64 = ctx.r31.u64;
loc_82A31304:
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwzx r10,r29,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r10.u32);
	// cmpw cr6,r28,r10
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r10.s32, ctx.xer);
	// beq cr6,0x82a31334
	if (ctx.cr6.eq) goto loc_82A31334;
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,4
	ctx.r5.s64 = 4;
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + ctx.r11.u64;
	// add r3,r29,r11
	ctx.r3.u64 = ctx.r29.u64 + ctx.r11.u64;
	// bl 0x82416d20
	ctx.lr = 0x82A3132C;
	sub_82416D20(ctx, base);
	// lwz r5,92(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r11,-836(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -836);
loc_82A31334:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// addi r29,r29,4
	ctx.r29.s64 = ctx.r29.s64 + 4;
	// cmpw cr6,r28,r5
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r5.s32, ctx.xer);
	// blt cr6,0x82a31304
	if (ctx.cr6.lt) goto loc_82A31304;
loc_82A31344:
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82416660
	ctx.lr = 0x82A3135C;
	sub_82416660(ctx, base);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31394
	if (ctx.cr6.eq) goto loc_82A31394;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r29,r11
	ctx.r29.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31380
	if (!ctx.cr6.eq) goto loc_82A31380;
	// bl 0x82545cc0
	ctx.lr = 0x82A3137C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_82A31380:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31394;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A31394:
	// stw r31,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r31.u32);
	// stw r31,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r31.u32);
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r31.u32);
loc_82A313A0:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// addi r4,r11,4576
	ctx.r4.s64 = ctx.r11.s64 + 4576;
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// stw r11,19828(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19828, ctx.r11.u32);
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// stw r11,19832(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19832, ctx.r11.u32);
	// lis r10,-31970
	ctx.r10.s64 = -2095185920;
	// stw r11,19836(r10)
	PPC_STORE_U32(ctx.r10.u32 + 19836, ctx.r11.u32);
	// stw r31,72(r30)
	PPC_STORE_U32(ctx.r30.u32 + 72, ctx.r31.u32);
	// stw r9,76(r30)
	PPC_STORE_U32(ctx.r30.u32 + 76, ctx.r9.u32);
	// stw r31,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r31.u32);
	// stw r31,48(r30)
	PPC_STORE_U32(ctx.r30.u32 + 48, ctx.r31.u32);
	// stw r31,44(r30)
	PPC_STORE_U32(ctx.r30.u32 + 44, ctx.r31.u32);
	// stw r31,56(r30)
	PPC_STORE_U32(ctx.r30.u32 + 56, ctx.r31.u32);
	// stw r31,60(r30)
	PPC_STORE_U32(ctx.r30.u32 + 60, ctx.r31.u32);
	// stw r31,64(r30)
	PPC_STORE_U32(ctx.r30.u32 + 64, ctx.r31.u32);
	// stw r31,28(r30)
	PPC_STORE_U32(ctx.r30.u32 + 28, ctx.r31.u32);
	// stw r31,32(r30)
	PPC_STORE_U32(ctx.r30.u32 + 32, ctx.r31.u32);
	// stw r31,20(r30)
	PPC_STORE_U32(ctx.r30.u32 + 20, ctx.r31.u32);
	// stw r31,24(r30)
	PPC_STORE_U32(ctx.r30.u32 + 24, ctx.r31.u32);
	// stw r31,36(r30)
	PPC_STORE_U32(ctx.r30.u32 + 36, ctx.r31.u32);
	// stw r31,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r31.u32);
	// bl 0x823099b0
	ctx.lr = 0x82A31408;
	sub_823099B0(ctx, base);
	// lis r29,-31969
	ctx.r29.s64 = -2095120384;
	// lwz r30,12296(r29)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12296);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a1eca8
	ctx.lr = 0x82A31418;
	sub_82A1ECA8(ctx, base);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// lwz r3,12320(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12320);
	// bl 0x82a18468
	ctx.lr = 0x82A31424;
	sub_82A18468(ctx, base);
	// stw r31,40(r30)
	PPC_STORE_U32(ctx.r30.u32 + 40, ctx.r31.u32);
	// lwz r3,12296(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 12296);
	// bl 0x82a1e9c8
	ctx.lr = 0x82A31430;
	sub_82A1E9C8(ctx, base);
	// lwz r11,112(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// stw r31,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r31.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a3148c
	if (ctx.cr6.eq) goto loc_82A3148C;
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// stw r31,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r31.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a3148c
	if (ctx.cr6.eq) goto loc_82A3148C;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31468
	if (!ctx.cr6.eq) goto loc_82A31468;
	// bl 0x82545cc0
	ctx.lr = 0x82A31464;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_82A31468:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31488;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
loc_82A3148C:
	// li r8,256
	ctx.r8.s64 = 256;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// li r7,16
	ctx.r7.s64 = 16;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82416660
	ctx.lr = 0x82A314A8;
	sub_82416660(ctx, base);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a314e0
	if (ctx.cr6.eq) goto loc_82A314E0;
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
	// mr r31,r11
	ctx.r31.u64 = ctx.r11.u64;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a314cc
	if (!ctx.cr6.eq) goto loc_82A314CC;
	// bl 0x82545cc0
	ctx.lr = 0x82A314C8;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + 8344);
loc_82A314CC:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A314E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A314E0:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82e28e9c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A314E8"))) PPC_WEAK_FUNC(sub_82A314E8);
PPC_FUNC_IMPL(__imp__sub_82A314E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A314F0;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lbz r11,4044(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a315b8
	if (ctx.cr6.eq) goto loc_82A315B8;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lbz r9,4045(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4045);
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r3,2784(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 2784);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// addi r10,r31,4504
	ctx.r10.s64 = ctx.r31.s64 + 4504;
	// lfd f0,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// stb r30,4493(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4493, ctx.r30.u8);
	// stb r30,4492(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4492, ctx.r30.u8);
	// stb r30,4500(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4500, ctx.r30.u8);
	// stb r30,4049(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4049, ctx.r30.u8);
	// lfs f0,-13892(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13892);
	ctx.f0.f64 = double(temp.f32);
	// stb r30,4050(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4050, ctx.r30.u8);
	// stfs f0,4496(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4496, temp.u32);
	// stb r30,4048(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4048, ctx.r30.u8);
	// stb r30,4047(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4047, ctx.r30.u8);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// beq cr6,0x82a31598
	if (ctx.cr6.eq) goto loc_82A31598;
	// lbz r11,4046(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 4046);
	// stb r30,4045(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4045, ctx.r30.u8);
	// subfic r11,r11,0
	ctx.xer.ca = ctx.r11.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r11.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// rlwinm r11,r11,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// bl 0x82a33078
	ctx.lr = 0x82A31580;
	sub_82A33078(ctx, base);
loc_82A31580:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A31584;
	sub_82A0BFB0(ctx, base);
	// bl 0x82a311e8
	ctx.lr = 0x82A31588;
	sub_82A311E8(ctx, base);
	// stb r30,4044(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4044, ctx.r30.u8);
	// stb r30,4046(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4046, ctx.r30.u8);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
loc_82A31598:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82a33078
	ctx.lr = 0x82A315A0;
	sub_82A33078(ctx, base);
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bne cr6,0x82a31580
	if (!ctx.cr6.eq) goto loc_82A31580;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r30,4044(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4044, ctx.r30.u8);
	// stb r30,4046(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4046, ctx.r30.u8);
	// stb r11,4047(r31)
	PPC_STORE_U8(ctx.r31.u32 + 4047, ctx.r11.u8);
loc_82A315B8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A315C0"))) PPC_WEAK_FUNC(sub_82A315C0);
PPC_FUNC_IMPL(__imp__sub_82A315C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31614
	if (!ctx.cr6.eq) goto loc_82A31614;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A315F0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31600
	if (ctx.cr6.eq) goto loc_82A31600;
	// bl 0x82a13fe0
	ctx.lr = 0x82A315FC;
	sub_82A13FE0(ctx, base);
	// b 0x82a31604
	goto loc_82A31604;
loc_82A31600:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A31604:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A31614:
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a314e8
	ctx.lr = 0x82A3161C;
	sub_82A314E8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A31638"))) PPC_WEAK_FUNC(sub_82A31638);
PPC_FUNC_IMPL(__imp__sub_82A31638) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e64
	ctx.lr = 0x82A31640;
	__savegprlr_27(ctx, base);
	// stwu r1,-1216(r1)
	ea = -1216 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31680
	if (!ctx.cr6.eq) goto loc_82A31680;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A31668;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31678
	if (ctx.cr6.eq) goto loc_82A31678;
	// bl 0x82a08db0
	ctx.lr = 0x82A31674;
	sub_82A08DB0(ctx, base);
	// b 0x82a3167c
	goto loc_82A3167C;
loc_82A31678:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A3167C:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A31680:
	// lwz r11,20(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a31858
	if (ctx.cr6.eq) goto loc_82A31858;
	// bl 0x82219f20
	ctx.lr = 0x82A31690;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A316A0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31858
	if (ctx.cr6.eq) goto loc_82A31858;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A316B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31858
	if (ctx.cr6.eq) goto loc_82A31858;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A316D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a31858
	if (ctx.cr6.eq) goto loc_82A31858;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02dd0
	ctx.lr = 0x82A316EC;
	sub_82A02DD0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a31858
	if (ctx.cr6.eq) goto loc_82A31858;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a31718
	if (ctx.cr6.eq) goto loc_82A31718;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02f70
	ctx.lr = 0x82A31714;
	sub_82A02F70(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
loc_82A31718:
	// lbz r11,4044(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31734
	if (ctx.cr6.eq) goto loc_82A31734;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a10550
	ctx.lr = 0x82A31734;
	sub_82A10550(ctx, base);
loc_82A31734:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31748;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823099b0
	ctx.lr = 0x82A31754;
	sub_823099B0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,2784(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 2784);
	// bl 0x82a342f0
	ctx.lr = 0x82A31760;
	sub_82A342F0(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82309a60
	ctx.lr = 0x82A31768;
	sub_82309A60(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a04e48
	ctx.lr = 0x82A31774;
	sub_82A04E48(ctx, base);
	// li r4,1199
	ctx.r4.s64 = 1199;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239200
	ctx.lr = 0x82A31780;
	sub_82239200(ctx, base);
	// li r4,77
	ctx.r4.s64 = 77;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239280
	ctx.lr = 0x82A3178C;
	sub_82239280(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x82239330
	ctx.lr = 0x82A31798;
	sub_82239330(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a317b0
	if (ctx.cr6.eq) goto loc_82A317B0;
	// lwz r4,4(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4);
	// b 0x82a317b4
	goto loc_82A317B4;
loc_82A317B0:
	// li r4,-1
	ctx.r4.s64 = -1;
loc_82A317B4:
	// bl 0x82239330
	ctx.lr = 0x82A317B8;
	sub_82239330(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r3,3988(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3988);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x82a036d8
	ctx.lr = 0x82A317CC;
	sub_82A036D8(ctx, base);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// stw r27,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r27.u32);
	// beq cr6,0x82a317dc
	if (ctx.cr6.eq) goto loc_82A317DC;
	// stw r27,36(r29)
	PPC_STORE_U32(ctx.r29.u32 + 36, ctx.r27.u32);
loc_82A317DC:
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
loc_82A317E0:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// bl 0x82a02c70
	ctx.lr = 0x82A317EC;
	sub_82A02C70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x82a3180c
	if (ctx.cr6.eq) goto loc_82A3180C;
	// lwz r11,36(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 36);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a3180c
	if (!ctx.cr6.eq) goto loc_82A3180C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a29988
	ctx.lr = 0x82A3180C;
	sub_82A29988(ctx, base);
loc_82A3180C:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,4
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 4, ctx.xer);
	// blt cr6,0x82a317e0
	if (ctx.cr6.lt) goto loc_82A317E0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0dfa0
	ctx.lr = 0x82A31820;
	sub_82A0DFA0(ctx, base);
	// lbz r11,4044(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31848
	if (ctx.cr6.eq) goto loc_82A31848;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a0d1b8
	ctx.lr = 0x82A31834;
	sub_82A0D1B8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x82a31848
	if (ctx.cr6.eq) goto loc_82A31848;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a314e8
	ctx.lr = 0x82A31848;
	sub_82A314E8(ctx, base);
loc_82A31848:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a111d8
	ctx.lr = 0x82A31850;
	sub_82A111D8(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82239548
	ctx.lr = 0x82A31858;
	sub_82239548(ctx, base);
loc_82A31858:
	// addi r1,r1,1216
	ctx.r1.s64 = ctx.r1.s64 + 1216;
	// b 0x82e28eb4
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A31860"))) PPC_WEAK_FUNC(sub_82A31860);
PPC_FUNC_IMPL(__imp__sub_82A31860) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A31868;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r28,r11,25332
	ctx.r28.s64 = ctx.r11.s64 + 25332;
	// lis r26,-31969
	ctx.r26.s64 = -2095120384;
	// li r27,0
	ctx.r27.s64 = 0;
loc_82A31880:
	// lwz r11,3992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3992);
	// mr r29,r27
	ctx.r29.u64 = ctx.r27.u64;
	// lwz r31,8(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a318b0
	if (ctx.cr6.eq) goto loc_82A318B0;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A318A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// b 0x82a318b4
	goto loc_82A318B4;
loc_82A318B0:
	// stb r27,4048(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4048, ctx.r27.u8);
loc_82A318B4:
	// lbz r11,4045(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4045);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a31a6c
	if (!ctx.cr6.eq) goto loc_82A31A6C;
	// lwz r3,12304(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a318ec
	if (!ctx.cr6.eq) goto loc_82A318EC;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A318D4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a318e4
	if (ctx.cr6.eq) goto loc_82A318E4;
	// bl 0x82a08db0
	ctx.lr = 0x82A318E0;
	sub_82A08DB0(ctx, base);
	// b 0x82a318e8
	goto loc_82A318E8;
loc_82A318E4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
loc_82A318E8:
	// stw r3,12304(r26)
	PPC_STORE_U32(ctx.r26.u32 + 12304, ctx.r3.u32);
loc_82A318EC:
	// stw r27,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r27.u32);
	// lbz r11,4048(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4048);
	// stb r27,4049(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4049, ctx.r27.u8);
	// stb r27,4050(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4050, ctx.r27.u8);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31ad4
	if (ctx.cr6.eq) goto loc_82A31AD4;
	// lwz r4,4052(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4052);
	// cmpw cr6,r4,r29
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r29.s32, ctx.xer);
	// bge cr6,0x82a31ad0
	if (!ctx.cr6.lt) goto loc_82A31AD0;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31924;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,80(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31938;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r4,0(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// li r6,1024
	ctx.r6.s64 = 1024;
	// addi r5,r30,2848
	ctx.r5.s64 = ctx.r30.s64 + 2848;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31958;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,8(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 8);
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31974;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,3872(r30)
	PPC_STORE_U32(ctx.r30.u32 + 3872, ctx.r11.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,28(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 28);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31998;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,3876(r30)
	PPC_STORE_U32(ctx.r30.u32 + 3876, ctx.r11.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,32(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 32);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A319BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,3880(r30)
	PPC_STORE_U32(ctx.r30.u32 + 3880, ctx.r11.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,36(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 36);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A319E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,4052(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4052);
	// stw r3,3884(r30)
	PPC_STORE_U32(ctx.r30.u32 + 3884, ctx.r3.u32);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,4052(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4052, ctx.r11.u32);
	// bl 0x82219f20
	ctx.lr = 0x82A319F4;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31A04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31A14;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31A24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31A3C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpd cr6,r3,r31
	ctx.cr6.compare<int64_t>(ctx.r3.s64, ctx.r31.s64, ctx.xer);
	// beq cr6,0x82a31880
	if (ctx.cr6.eq) goto loc_82A31880;
	// lwz r3,4016(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4016);
	// stw r27,2832(r30)
	PPC_STORE_U32(ctx.r30.u32 + 2832, ctx.r27.u32);
	// stb r27,4020(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4020, ctx.r27.u8);
	// bl 0x82a02ac0
	ctx.lr = 0x82A31A54;
	sub_82A02AC0(ctx, base);
	// lwz r11,3992(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3992);
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a31a90
	if (!ctx.cr6.eq) goto loc_82A31A90;
	// li r31,-1
	ctx.r31.s64 = -1;
	// b 0x82a31aa8
	goto loc_82A31AA8;
loc_82A31A6C:
	// lbz r11,4046(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4046);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// subfic r11,r11,0
	ctx.xer.ca = ctx.r11.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r11.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// rlwinm r11,r11,0,30,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x2;
	// addi r4,r11,1
	ctx.r4.s64 = ctx.r11.s64 + 1;
	// bl 0x82a314e8
	ctx.lr = 0x82A31A88;
	sub_82A314E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
loc_82A31A90:
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31AA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
loc_82A31AA8:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31ABC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,3988(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 3988);
	// bl 0x82a27bc8
	ctx.lr = 0x82A31ACC;
	sub_82A27BC8(ctx, base);
	// b 0x82a31ad4
	goto loc_82A31AD4;
loc_82A31AD0:
	// stb r27,4048(r30)
	PPC_STORE_U8(ctx.r30.u32 + 4048, ctx.r27.u8);
loc_82A31AD4:
	// lbz r11,4048(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 4048);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a31ae8
	if (!ctx.cr6.eq) goto loc_82A31AE8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82a15500
	ctx.lr = 0x82A31AE8;
	sub_82A15500(ctx, base);
loc_82A31AE8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A31AF0"))) PPC_WEAK_FUNC(sub_82A31AF0);
PPC_FUNC_IMPL(__imp__sub_82A31AF0) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
loc_82A31AF4:
	// lbz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x82a31af4
	if (!ctx.cr6.eq) goto loc_82A31AF4;
	// subf r11,r11,r4
	ctx.r11.s64 = ctx.r4.s64 - ctx.r11.s64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a31b24
	if (!ctx.cr6.eq) goto loc_82A31B24;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,4050(r3)
	PPC_STORE_U8(ctx.r3.u32 + 4050, ctx.r11.u8);
	// blr 
	return;
loc_82A31B24:
	// b 0x82a31860
	sub_82A31860(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A31B28"))) PPC_WEAK_FUNC(sub_82A31B28);
PPC_FUNC_IMPL(__imp__sub_82A31B28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31b74
	if (!ctx.cr6.eq) goto loc_82A31B74;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A31B50;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31b60
	if (ctx.cr6.eq) goto loc_82A31B60;
	// bl 0x82a13fe0
	ctx.lr = 0x82A31B5C;
	sub_82A13FE0(ctx, base);
	// b 0x82a31b64
	goto loc_82A31B64;
loc_82A31B60:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A31B64:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A31B74:
	// bl 0x82a31860
	ctx.lr = 0x82A31B78;
	sub_82A31860(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A31B90"))) PPC_WEAK_FUNC(sub_82A31B90);
PPC_FUNC_IMPL(__imp__sub_82A31B90) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31be4
	if (!ctx.cr6.eq) goto loc_82A31BE4;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A31BC0;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31bd0
	if (ctx.cr6.eq) goto loc_82A31BD0;
	// bl 0x82a13fe0
	ctx.lr = 0x82A31BCC;
	sub_82A13FE0(ctx, base);
	// b 0x82a31bd4
	goto loc_82A31BD4;
loc_82A31BD0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A31BD4:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A31BE4:
	// ld r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 4);
	// bl 0x82a31638
	ctx.lr = 0x82A31BEC;
	sub_82A31638(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A31C08"))) PPC_WEAK_FUNC(sub_82A31C08);
PPC_FUNC_IMPL(__imp__sub_82A31C08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e48
	ctx.lr = 0x82A31C10;
	__savegprlr_20(ctx, base);
	// stwu r1,-1408(r1)
	ea = -1408 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r22,r4
	ctx.r22.u64 = ctx.r4.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r21,r5
	ctx.r21.u64 = ctx.r5.u64;
	// cmpwi cr6,r22,-605
	ctx.cr6.compare<int32_t>(ctx.r22.s32, -605, ctx.xer);
	// bne cr6,0x82a31c98
	if (!ctx.cr6.eq) goto loc_82A31C98;
	// cmpwi cr6,r21,2
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 2, ctx.xer);
	// bne cr6,0x82a31c98
	if (!ctx.cr6.eq) goto loc_82A31C98;
	// lbz r11,4536(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4536);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31c98
	if (ctx.cr6.eq) goto loc_82A31C98;
	// lwz r11,4540(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4540);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bge cr6,0x82a31c98
	if (!ctx.cr6.lt) goto loc_82A31C98;
	// li r11,0
	ctx.r11.s64 = 0;
	// li r20,1
	ctx.r20.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r11,2808(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2808, ctx.r11.u32);
	// stb r20,1696(r29)
	PPC_STORE_U8(ctx.r29.u32 + 1696, ctx.r20.u8);
	// stb r20,4544(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4544, ctx.r20.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A31C64;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r10,r29,4548
	ctx.r10.s64 = ctx.r29.s64 + 4548;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f0.u64);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31C98:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r10,r29,4548
	ctx.r10.s64 = ctx.r29.s64 + 4548;
	// li r25,0
	ctx.r25.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lfd f0,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f0.u64);
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// addi r4,r11,12368
	ctx.r4.s64 = ctx.r11.s64 + 12368;
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// stb r25,4536(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4536, ctx.r25.u8);
	// stw r25,4540(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4540, ctx.r25.u32);
	// stb r25,4544(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4544, ctx.r25.u8);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// bl 0x82a0d990
	ctx.lr = 0x82A31CD8;
	sub_82A0D990(ctx, base);
	// lbz r11,6(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 6);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31d58
	if (ctx.cr6.eq) goto loc_82A31D58;
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// beq cr6,0x82a31d58
	if (ctx.cr6.eq) goto loc_82A31D58;
	// lwz r11,8(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x82a31d58
	if (!ctx.cr6.gt) goto loc_82A31D58;
	// lbz r10,1088(r29)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r29.u32 + 1088);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x82a31d18
	if (ctx.cr6.eq) goto loc_82A31D18;
	// lwz r10,1140(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1140);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x82a31d40
	if (!ctx.cr6.eq) goto loc_82A31D40;
	// lwz r3,3992(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3992);
	// bl 0x82a0c008
	ctx.lr = 0x82A31D18;
	sub_82A0C008(ctx, base);
loc_82A31D18:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lfs f1,-3044(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -3044);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x82a95510
	ctx.lr = 0x82A31D24;
	sub_82A95510(ctx, base);
	// lwz r11,8(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 8);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// stb r10,2828(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2828, ctx.r10.u8);
	// stw r11,8(r29)
	PPC_STORE_U32(ctx.r29.u32 + 8, ctx.r11.u32);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31D40:
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,8(r29)
	PPC_STORE_U32(ctx.r29.u32 + 8, ctx.r11.u32);
	// stb r10,2828(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2828, ctx.r10.u8);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31D58:
	// lis r30,-31969
	ctx.r30.s64 = -2095120384;
	// stw r25,2800(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2800, ctx.r25.u32);
	// lwz r3,12304(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a31d8c
	if (!ctx.cr6.eq) goto loc_82A31D8C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A31D74;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31d84
	if (ctx.cr6.eq) goto loc_82A31D84;
	// bl 0x82a08db0
	ctx.lr = 0x82A31D80;
	sub_82A08DB0(ctx, base);
	// b 0x82a31d88
	goto loc_82A31D88;
loc_82A31D84:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
loc_82A31D88:
	// stw r3,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r3.u32);
loc_82A31D8C:
	// lwz r26,48(r3)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// stb r25,4047(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4047, ctx.r25.u8);
	// stw r25,4516(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4516, ctx.r25.u32);
	// beq cr6,0x82a31eb0
	if (ctx.cr6.eq) goto loc_82A31EB0;
	// li r20,1
	ctx.r20.s64 = 1;
	// lbz r11,4021(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4021);
	// stb r25,2797(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2797, ctx.r25.u8);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// stw r20,2808(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2808, ctx.r20.u32);
	// beq cr6,0x82a31dc8
	if (ctx.cr6.eq) goto loc_82A31DC8;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a2bc50
	ctx.lr = 0x82A31DC0;
	sub_82A2BC50(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31DC8:
	// lbz r11,4028(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4028);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31e14
	if (ctx.cr6.eq) goto loc_82A31E14;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stb r20,4472(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4472, ctx.r20.u8);
	// bl 0x82b061d8
	ctx.lr = 0x82A31DE0;
	sub_82B061D8(ctx, base);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// addi r10,r29,4476
	ctx.r10.s64 = ctx.r29.s64 + 4476;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f0.u64);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31E14:
	// lbz r11,4044(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31e30
	if (ctx.cr6.eq) goto loc_82A31E30;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a31860
	ctx.lr = 0x82A31E28;
	sub_82A31860(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31E30:
	// lwz r11,2832(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2832);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a31ea8
	if (ctx.cr6.eq) goto loc_82A31EA8;
	// lwz r11,2840(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2840);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a31ea8
	if (!ctx.cr6.eq) goto loc_82A31EA8;
	// cmpwi cr6,r22,-603
	ctx.cr6.compare<int32_t>(ctx.r22.s32, -603, ctx.xer);
	// bne cr6,0x82a31ea8
	if (!ctx.cr6.eq) goto loc_82A31EA8;
	// li r11,-603
	ctx.r11.s64 = -603;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// stw r20,2840(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2840, ctx.r20.u32);
	// stb r25,4020(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4020, ctx.r25.u8);
	// stw r11,2844(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2844, ctx.r11.u32);
	// bl 0x82a02ac0
	ctx.lr = 0x82A31E68;
	sub_82A02AC0(ctx, base);
	// lwz r3,3988(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3988);
	// bl 0x82a279a8
	ctx.lr = 0x82A31E70;
	sub_82A279A8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A31E78;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31E88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// ld r4,2812(r29)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r29.u32 + 2812);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31EA0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A31EA8:
	// stw r25,2840(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2840, ctx.r25.u32);
	// b 0x82a32120
	goto loc_82A32120;
loc_82A31EB0:
	// lwz r31,12304(r30)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12304);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x82a31ee0
	if (!ctx.cr6.eq) goto loc_82A31EE0;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A31EC4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a31ed8
	if (ctx.cr6.eq) goto loc_82A31ED8;
	// bl 0x82a08db0
	ctx.lr = 0x82A31ED0;
	sub_82A08DB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x82a31edc
	goto loc_82A31EDC;
loc_82A31ED8:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82A31EDC:
	// stw r31,12304(r30)
	PPC_STORE_U32(ctx.r30.u32 + 12304, ctx.r31.u32);
loc_82A31EE0:
	// bl 0x82219f20
	ctx.lr = 0x82A31EE4;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31EF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31F04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lbz r11,4044(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4044);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r20,1
	ctx.r20.s64 = 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a31f38
	if (ctx.cr6.eq) goto loc_82A31F38;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,136(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 136);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31F2C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r20,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r20.u32);
	// stw r25,60(r31)
	PPC_STORE_U32(ctx.r31.u32 + 60, ctx.r25.u32);
	// b 0x82a31f58
	goto loc_82A31F58;
loc_82A31F38:
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// stw r25,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r25.u32);
	// stw r26,60(r31)
	PPC_STORE_U32(ctx.r31.u32 + 60, ctx.r26.u32);
	// stw r25,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r25.u32);
	// beq cr6,0x82a31f54
	if (ctx.cr6.eq) goto loc_82A31F54;
	// stw r20,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r20.u32);
	// b 0x82a31f58
	goto loc_82A31F58;
loc_82A31F54:
	// stw r25,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r25.u32);
loc_82A31F58:
	// stw r25,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r25.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r20,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r20.u32);
	// stw r25,68(r31)
	PPC_STORE_U32(ctx.r31.u32 + 68, ctx.r25.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,96(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 96);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31F78;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stw r11,2788(r29)
	PPC_STORE_U32(ctx.r29.u32 + 2788, ctx.r11.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31F94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,16(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31FA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31FBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31FCC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A31FDC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,52(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 52);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a31ff0
	if (ctx.cr6.eq) goto loc_82A31FF0;
	// stw r25,4012(r29)
	PPC_STORE_U32(ctx.r29.u32 + 4012, ctx.r25.u32);
loc_82A31FF0:
	// lwz r11,4012(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4012);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a32008
	if (ctx.cr6.eq) goto loc_82A32008;
	// cmpwi cr6,r26,0
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 0, ctx.xer);
	// mr r31,r20
	ctx.r31.u64 = ctx.r20.u64;
	// bne cr6,0x82a3200c
	if (!ctx.cr6.eq) goto loc_82A3200C;
loc_82A32008:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_82A3200C:
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// bl 0x82a02ac0
	ctx.lr = 0x82A32014;
	sub_82A02AC0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A3201C;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// lwz r4,1700(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1700);
	// li r9,0
	ctx.r9.s64 = 0;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// mr r8,r31
	ctx.r8.u64 = ctx.r31.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// li r5,-1
	ctx.r5.s64 = -1;
	// bl 0x82a02b28
	ctx.lr = 0x82A32048;
	sub_82A02B28(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// beq cr6,0x82a32084
	if (ctx.cr6.eq) goto loc_82A32084;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a25d50
	ctx.lr = 0x82A32058;
	sub_82A25D50(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r10,r27
	ctx.r10.u64 = ctx.r27.u64;
	// lwz r4,1704(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 1704);
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r3,4016(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 4016);
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// li r5,-1
	ctx.r5.s64 = -1;
	// bl 0x82a02b28
	ctx.lr = 0x82A32084;
	sub_82A02B28(ctx, base);
loc_82A32084:
	// li r4,1199
	ctx.r4.s64 = 1199;
	// stb r25,4021(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4021, ctx.r25.u8);
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82239200
	ctx.lr = 0x82A32094;
	sub_82239200(ctx, base);
	// li r4,90
	ctx.r4.s64 = 90;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82239280
	ctx.lr = 0x82A320A0;
	sub_82239280(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82239380
	ctx.lr = 0x82A320AC;
	sub_82239380(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A320C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82219f20
	ctx.lr = 0x82A320C8;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A320D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A320E8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32118
	if (ctx.cr6.eq) goto loc_82A32118;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a32118
	if (ctx.cr6.eq) goto loc_82A32118;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,240
	ctx.r4.s64 = ctx.r1.s64 + 240;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32118;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A32118:
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x82239548
	ctx.lr = 0x82A32120;
	sub_82239548(ctx, base);
loc_82A32120:
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r4,r11,12392
	ctx.r4.s64 = ctx.r11.s64 + 12392;
	// bl 0x82a0d990
	ctx.lr = 0x82A32130;
	sub_82A0D990(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// addi r24,r11,-29761
	ctx.r24.s64 = ctx.r11.s64 + -29761;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A32144;
	sub_823099B0(ctx, base);
	// cmpwi cr6,r22,0
	ctx.cr6.compare<int32_t>(ctx.r22.s32, 0, ctx.xer);
	// lis r23,-31969
	ctx.r23.s64 = -2095120384;
	// beq cr6,0x82a32350
	if (ctx.cr6.eq) goto loc_82A32350;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r4,r11,4964
	ctx.r4.s64 = ctx.r11.s64 + 4964;
	// bl 0x823099b0
	ctx.lr = 0x82A32160;
	sub_823099B0(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// addi r4,r11,4908
	ctx.r4.s64 = ctx.r11.s64 + 4908;
	// bl 0x823099b0
	ctx.lr = 0x82A32170;
	sub_823099B0(ctx, base);
	// cmpwi cr6,r22,-605
	ctx.cr6.compare<int32_t>(ctx.r22.s32, -605, ctx.xer);
	// beq cr6,0x82a32180
	if (ctx.cr6.eq) goto loc_82A32180;
	// cmpwi cr6,r22,-804
	ctx.cr6.compare<int32_t>(ctx.r22.s32, -804, ctx.xer);
	// bne cr6,0x82a321f0
	if (!ctx.cr6.eq) goto loc_82A321F0;
loc_82A32180:
	// cmpwi cr6,r21,14
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 14, ctx.xer);
	// bne cr6,0x82a32194
	if (!ctx.cr6.eq) goto loc_82A32194;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4856
	ctx.r4.s64 = ctx.r11.s64 + 4856;
	// b 0x82a321e8
	goto loc_82A321E8;
loc_82A32194:
	// cmpwi cr6,r21,15
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 15, ctx.xer);
	// beq cr6,0x82a321e0
	if (ctx.cr6.eq) goto loc_82A321E0;
	// cmpwi cr6,r21,11
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 11, ctx.xer);
	// beq cr6,0x82a321e0
	if (ctx.cr6.eq) goto loc_82A321E0;
	// cmpwi cr6,r21,16
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 16, ctx.xer);
	// bne cr6,0x82a321b8
	if (!ctx.cr6.eq) goto loc_82A321B8;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4800
	ctx.r4.s64 = ctx.r11.s64 + 4800;
	// b 0x82a321e8
	goto loc_82A321E8;
loc_82A321B8:
	// cmpwi cr6,r21,12
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 12, ctx.xer);
	// bne cr6,0x82a321cc
	if (!ctx.cr6.eq) goto loc_82A321CC;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4748
	ctx.r4.s64 = ctx.r11.s64 + 4748;
	// b 0x82a321e8
	goto loc_82A321E8;
loc_82A321CC:
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// bne cr6,0x82a321f0
	if (!ctx.cr6.eq) goto loc_82A321F0;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4692
	ctx.r4.s64 = ctx.r11.s64 + 4692;
	// b 0x82a321e8
	goto loc_82A321E8;
loc_82A321E0:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4628
	ctx.r4.s64 = ctx.r11.s64 + 4628;
loc_82A321E8:
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x822e0818
	ctx.lr = 0x82A321F0;
	sub_822E0818(ctx, base);
loc_82A321F0:
	// lwz r11,-836(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + -836);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r10,760(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4604
	ctx.r4.s64 = ctx.r11.s64 + 4604;
	// lwz r11,0(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r27,64(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// stw r27,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r27.u32);
	// bl 0x8243b750
	ctx.lr = 0x82A3221C;
	sub_8243B750(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r26,4(r3)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// stw r11,204(r1)
	PPC_STORE_U32(ctx.r1.u32 + 204, ctx.r11.u32);
	// bl 0x8295f3f8
	ctx.lr = 0x82A3222C;
	sub_8295F3F8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a322d8
	if (ctx.cr6.eq) goto loc_82A322D8;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-2228
	ctx.r4.s64 = ctx.r11.s64 + -2228;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82A32250;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8296c798
	ctx.lr = 0x82A32264;
	sub_8296C798(ctx, base);
	// lis r11,-32242
	ctx.r11.s64 = -2113011712;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r11,20800
	ctx.r4.s64 = ctx.r11.s64 + 20800;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8243b750
	ctx.lr = 0x82A32280;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8296c798
	ctx.lr = 0x82A32294;
	sub_8296C798(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a322b8
	if (ctx.cr6.eq) goto loc_82A322B8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 264);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A322B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A322B8:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x82a322d8
	if (ctx.cr6.eq) goto loc_82A322D8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,264(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 264);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A322D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A322D8:
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// addi r31,r1,96
	ctx.r31.s64 = ctx.r1.s64 + 96;
	// bl 0x823099b0
	ctx.lr = 0x82A322E8;
	sub_823099B0(ctx, base);
	// addi r8,r1,184
	ctx.r8.s64 = ctx.r1.s64 + 184;
	// rldicr r7,r26,32,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r26.u64, 32) & 0xFFFFFFFF00000000;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// addi r5,r1,120
	ctx.r5.s64 = ctx.r1.s64 + 120;
	// stw r25,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r25.u32);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// ld r6,200(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 200);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// ld r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r31.u32 + 0);
	// bl 0x8238ce50
	ctx.lr = 0x82A32310;
	sub_8238CE50(ctx, base);
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x82309a60
	ctx.lr = 0x82A32318;
	sub_82309A60(ctx, base);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// addi r4,r11,-27624
	ctx.r4.s64 = ctx.r11.s64 + -27624;
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x8242a860
	ctx.lr = 0x82A3232C;
	sub_8242A860(ctx, base);
	// addi r4,r1,216
	ctx.r4.s64 = ctx.r1.s64 + 216;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82302d08
	ctx.lr = 0x82A32338;
	sub_82302D08(ctx, base);
	// addi r3,r1,216
	ctx.r3.s64 = ctx.r1.s64 + 216;
	// bl 0x82309a60
	ctx.lr = 0x82A32340;
	sub_82309A60(ctx, base);
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x82309a60
	ctx.lr = 0x82A32348;
	sub_82309A60(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A32350;
	sub_82309A60(ctx, base);
loc_82A32350:
	// lbz r11,4044(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a323c4
	if (ctx.cr6.eq) goto loc_82A323C4;
	// lwz r11,156(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,152(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 152);
	// bne cr6,0x82a32370
	if (!ctx.cr6.eq) goto loc_82A32370;
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_82A32370:
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82A32374:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82a32374
	if (!ctx.cr6.eq) goto loc_82A32374;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a323ac
	if (!ctx.cr6.eq) goto loc_82A323AC;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// stb r20,4050(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4050, ctx.r20.u8);
	// bl 0x82309a60
	ctx.lr = 0x82A323A4;
	sub_82309A60(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A323AC:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a31860
	ctx.lr = 0x82A323B4;
	sub_82A31860(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82A323BC;
	sub_82309A60(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A323C4:
	// bl 0x82a0bfb0
	ctx.lr = 0x82A323C8;
	sub_82A0BFB0(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x82a32728
	if (ctx.cr6.eq) goto loc_82A32728;
	// addi r4,r29,2848
	ctx.r4.s64 = ctx.r29.s64 + 2848;
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x823099b0
	ctx.lr = 0x82A323E0;
	sub_823099B0(ctx, base);
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r31,3876(r29)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r29.u32 + 3876);
	// stw r25,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r25.u32);
	// stw r25,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r25.u32);
	// stw r25,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r25.u32);
	// bl 0x82a11e10
	ctx.lr = 0x82A323FC;
	sub_82A11E10(ctx, base);
	// addi r4,r1,168
	ctx.r4.s64 = ctx.r1.s64 + 168;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82a11f80
	ctx.lr = 0x82A32408;
	sub_82A11F80(ctx, base);
	// cmpw cr6,r31,r3
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r3.s32, ctx.xer);
	// beq cr6,0x82a324a8
	if (ctx.cr6.eq) goto loc_82A324A8;
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r3,136(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x82a32424
	if (!ctx.cr6.eq) goto loc_82A32424;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_82A32424:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4600
	ctx.r4.s64 = ctx.r11.s64 + 4600;
	// bl 0x82e29e88
	ctx.lr = 0x82A32430;
	sub_82E29E88(ctx, base);
	// lwz r9,140(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// lwz r10,136(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3245c
	if (ctx.cr6.eq) goto loc_82A3245C;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// bne cr6,0x82a32450
	if (!ctx.cr6.eq) goto loc_82A32450;
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_82A32450:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a324a8
	if (!ctx.cr6.eq) goto loc_82A324A8;
loc_82A3245C:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bne cr6,0x82a3246c
	if (!ctx.cr6.eq) goto loc_82A3246C;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
loc_82A3246C:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4596
	ctx.r4.s64 = ctx.r11.s64 + 4596;
	// bl 0x82e29e88
	ctx.lr = 0x82A32478;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a324a0
	if (ctx.cr6.eq) goto loc_82A324A0;
	// lwz r11,140(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,136(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// bne cr6,0x82a32494
	if (!ctx.cr6.eq) goto loc_82A32494;
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
loc_82A32494:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a324a8
	if (!ctx.cr6.eq) goto loc_82A324A8;
loc_82A324A0:
	// stb r25,2733(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2733, ctx.r25.u8);
	// b 0x82a324ac
	goto loc_82A324AC;
loc_82A324A8:
	// stb r20,2733(r29)
	PPC_STORE_U8(ctx.r29.u32 + 2733, ctx.r20.u8);
loc_82A324AC:
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a340f0
	ctx.lr = 0x82A324B8;
	sub_82A340F0(ctx, base);
	// lbz r11,2733(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 2733);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// bl 0x8295f3f8
	ctx.lr = 0x82A324C8;
	sub_8295F3F8(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,5756
	ctx.r4.s64 = ctx.r11.s64 + 5756;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,184
	ctx.r3.s64 = ctx.r1.s64 + 184;
	// bl 0x8243b750
	ctx.lr = 0x82A324EC;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x8296c798
	ctx.lr = 0x82A32500;
	sub_8296C798(ctx, base);
	// lwz r11,-836(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + -836);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// lwz r11,760(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 760);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r25,64(r11)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,30556
	ctx.r4.s64 = ctx.r11.s64 + 30556;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8243b750
	ctx.lr = 0x82A32534;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A32548;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A3254C;
	sub_82394220(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,28312
	ctx.r4.s64 = ctx.r11.s64 + 28312;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,200
	ctx.r3.s64 = ctx.r1.s64 + 200;
	// bl 0x8243b750
	ctx.lr = 0x82A32568;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A3257C;
	sub_829689E8(ctx, base);
	// bl 0x82388780
	ctx.lr = 0x82A32580;
	sub_82388780(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// addi r4,r11,30536
	ctx.r4.s64 = ctx.r11.s64 + 30536;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,120
	ctx.r3.s64 = ctx.r1.s64 + 120;
	// bl 0x8243b750
	ctx.lr = 0x82A3259C;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x829689e8
	ctx.lr = 0x82A325B0;
	sub_829689E8(ctx, base);
	// bl 0x82394220
	ctx.lr = 0x82A325B4;
	sub_82394220(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x82a32704
	if (ctx.cr6.eq) goto loc_82A32704;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r28,r11,30492
	ctx.r28.s64 = ctx.r11.s64 + 30492;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A325E4;
	sub_823099B0(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// addi r27,r31,848
	ctx.r27.s64 = ctx.r31.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32604;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A3260C;
	sub_82309A60(ctx, base);
	// addi r3,r31,924
	ctx.r3.s64 = ctx.r31.s64 + 924;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A32618;
	sub_822E0818(ctx, base);
	// lwz r11,848(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 848);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32630;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r25,0
	ctx.cr6.compare<uint32_t>(ctx.r25.u32, 0, ctx.xer);
	// beq cr6,0x82a3266c
	if (ctx.cr6.eq) goto loc_82A3266C;
	// bl 0x82a186e0
	ctx.lr = 0x82A3263C;
	sub_82A186E0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r4,r11,2848
	ctx.r4.s64 = ctx.r11.s64 + 2848;
	// bl 0x823099b0
	ctx.lr = 0x82A3264C;
	sub_823099B0(ctx, base);
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x8237d170
	ctx.lr = 0x82A32658;
	sub_8237D170(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82353fc8
	ctx.lr = 0x82A32664;
	sub_82353FC8(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A3266C;
	sub_82309A60(ctx, base);
loc_82A3266C:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82a34720
	ctx.lr = 0x82A32678;
	sub_82A34720(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82974648
	ctx.lr = 0x82A32684;
	sub_82974648(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A3268C;
	sub_82309A60(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// addi r31,r11,30444
	ctx.r31.s64 = ctx.r11.s64 + 30444;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x823099b0
	ctx.lr = 0x82A326A0;
	sub_823099B0(ctx, base);
	// lwz r11,848(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 848);
	// addi r28,r30,848
	ctx.r28.s64 = ctx.r30.s64 + 848;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,104
	ctx.r4.s64 = ctx.r1.s64 + 104;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A326C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x82309a60
	ctx.lr = 0x82A326C8;
	sub_82309A60(ctx, base);
	// addi r3,r30,924
	ctx.r3.s64 = ctx.r30.s64 + 924;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x822e0818
	ctx.lr = 0x82A326D4;
	sub_822E0818(ctx, base);
	// bl 0x82a186e0
	ctx.lr = 0x82A326D8;
	sub_82A186E0(ctx, base);
	// lwz r4,3880(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 3880);
	// cmplwi cr6,r4,2
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 2, ctx.xer);
	// bgt cr6,0x82a326ec
	if (ctx.cr6.gt) goto loc_82A326EC;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82353fc8
	ctx.lr = 0x82A326EC;
	sub_82353FC8(ctx, base);
loc_82A326EC:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32704;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A32704:
	// addi r3,r1,168
	ctx.r3.s64 = ctx.r1.s64 + 168;
	// stb r20,4428(r29)
	PPC_STORE_U8(ctx.r29.u32 + 4428, ctx.r20.u8);
	// bl 0x82480d20
	ctx.lr = 0x82A32710;
	sub_82480D20(ctx, base);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x82309a60
	ctx.lr = 0x82A32718;
	sub_82309A60(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82A32720;
	sub_82309A60(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
loc_82A32728:
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// lwz r3,2784(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2784);
	// bl 0x82a34458
	ctx.lr = 0x82A32734;
	sub_82A34458(ctx, base);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82309a60
	ctx.lr = 0x82A3273C;
	sub_82309A60(ctx, base);
	// addi r1,r1,1408
	ctx.r1.s64 = ctx.r1.s64 + 1408;
	// b 0x82e28e98
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A32748"))) PPC_WEAK_FUNC(sub_82A32748);
PPC_FUNC_IMPL(__imp__sub_82A32748) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e60
	ctx.lr = 0x82A32750;
	__savegprlr_26(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// beq cr6,0x82a32780
	if (ctx.cr6.eq) goto loc_82A32780;
	// cmpwi cr6,r4,-803
	ctx.cr6.compare<int32_t>(ctx.r4.s32, -803, ctx.xer);
	// bne cr6,0x82a32770
	if (!ctx.cr6.eq) goto loc_82A32770;
	// lwz r4,2844(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 2844);
	// li r5,0
	ctx.r5.s64 = 0;
loc_82A32770:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82a31c08
	ctx.lr = 0x82A32778;
	sub_82A31C08(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
loc_82A32780:
	// bl 0x82219f20
	ctx.lr = 0x82A32784;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,68(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32794;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A327A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,44(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A327B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lis r11,-31976
	ctx.r11.s64 = -2095579136;
	// addi r31,r27,2848
	ctx.r31.s64 = ctx.r27.s64 + 2848;
	// addi r29,r11,25332
	ctx.r29.s64 = ctx.r11.s64 + 25332;
	// li r6,1024
	ctx.r6.s64 = 1024;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r11,32(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 32);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A327E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r4,28(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 28);
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A327FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r11,3876(r27)
	PPC_STORE_U32(ctx.r27.u32 + 3876, ctx.r11.u32);
	// bl 0x823099b0
	ctx.lr = 0x82A32810;
	sub_823099B0(ctx, base);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// addi r31,r11,-29761
	ctx.r31.s64 = ctx.r11.s64 + -29761;
	// bne cr6,0x82a3282c
	if (!ctx.cr6.eq) goto loc_82A3282C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A3282C:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4600
	ctx.r4.s64 = ctx.r11.s64 + 4600;
	// bl 0x82e29e88
	ctx.lr = 0x82A32838;
	sub_82E29E88(ctx, base);
	// lwz r9,92(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r28,1
	ctx.r28.s64 = 1;
	// li r26,0
	ctx.r26.s64 = 0;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3286c
	if (ctx.cr6.eq) goto loc_82A3286C;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// bne cr6,0x82a32860
	if (!ctx.cr6.eq) goto loc_82A32860;
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
loc_82A32860:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a328b8
	if (!ctx.cr6.eq) goto loc_82A328B8;
loc_82A3286C:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bne cr6,0x82a3287c
	if (!ctx.cr6.eq) goto loc_82A3287C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A3287C:
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r4,r11,4596
	ctx.r4.s64 = ctx.r11.s64 + 4596;
	// bl 0x82e29e88
	ctx.lr = 0x82A32888;
	sub_82E29E88(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a328b0
	if (ctx.cr6.eq) goto loc_82A328B0;
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// bne cr6,0x82a328a4
	if (!ctx.cr6.eq) goto loc_82A328A4;
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
loc_82A328A4:
	// subf r11,r11,r3
	ctx.r11.s64 = ctx.r3.s64 - ctx.r11.s64;
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x82a328b8
	if (!ctx.cr6.eq) goto loc_82A328B8;
loc_82A328B0:
	// stb r26,2733(r27)
	PPC_STORE_U8(ctx.r27.u32 + 2733, ctx.r26.u8);
	// b 0x82a328bc
	goto loc_82A328BC;
loc_82A328B8:
	// stb r28,2733(r27)
	PPC_STORE_U8(ctx.r27.u32 + 2733, ctx.r28.u8);
loc_82A328BC:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r5,-1
	ctx.r5.s64 = -1;
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 24);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A328D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12304(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12304);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a3290c
	if (!ctx.cr6.eq) goto loc_82A3290C;
	// li r3,84
	ctx.r3.s64 = 84;
	// bl 0x82545e80
	ctx.lr = 0x82A328F4;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32904
	if (ctx.cr6.eq) goto loc_82A32904;
	// bl 0x82a08db0
	ctx.lr = 0x82A32900;
	sub_82A08DB0(ctx, base);
	// b 0x82a32908
	goto loc_82A32908;
loc_82A32904:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_82A32908:
	// stw r3,12304(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12304, ctx.r3.u32);
loc_82A3290C:
	// stw r30,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, ctx.r30.u32);
	// stw r26,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r26.u32);
	// stw r28,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r28.u32);
	// stw r28,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, ctx.r28.u32);
	// stw r26,44(r3)
	PPC_STORE_U32(ctx.r3.u32 + 44, ctx.r26.u32);
	// stw r28,48(r3)
	PPC_STORE_U32(ctx.r3.u32 + 48, ctx.r28.u32);
	// bl 0x82751920
	ctx.lr = 0x82A32928;
	sub_82751920(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a32978
	if (ctx.cr6.eq) goto loc_82A32978;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-5232
	ctx.r4.s64 = ctx.r11.s64 + -5232;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8243b750
	ctx.lr = 0x82A32950;
	sub_8243B750(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// ld r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 0);
	// bl 0x82971110
	ctx.lr = 0x82A32964;
	sub_82971110(ctx, base);
	// bl 0x8239c0c0
	ctx.lr = 0x82A32968;
	sub_8239C0C0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a32978
	if (ctx.cr6.eq) goto loc_82A32978;
	// stw r28,376(r31)
	PPC_STORE_U32(ctx.r31.u32 + 376, ctx.r28.u32);
loc_82A32978:
	// lwz r3,2784(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 2784);
	// bl 0x82a33190
	ctx.lr = 0x82A32980;
	sub_82A33190(ctx, base);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a3298c
	if (ctx.cr6.eq) goto loc_82A3298C;
	// stw r26,376(r31)
	PPC_STORE_U32(ctx.r31.u32 + 376, ctx.r26.u32);
loc_82A3298C:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82309a60
	ctx.lr = 0x82A32994;
	sub_82309A60(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28eb0
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A329A0"))) PPC_WEAK_FUNC(sub_82A329A0);
PPC_FUNC_IMPL(__imp__sub_82A329A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e54
	ctx.lr = 0x82A329A8;
	__savegprlr_23(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// lbz r11,4044(r26)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r26.u32 + 4044);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a32b1c
	if (ctx.cr6.eq) goto loc_82A32B1C;
	// lbz r11,4045(r26)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r26.u32 + 4045);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a32b1c
	if (!ctx.cr6.eq) goto loc_82A32B1C;
	// lbz r11,4492(r26)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r26.u32 + 4492);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a32b0c
	if (ctx.cr6.eq) goto loc_82A32B0C;
	// lbz r11,4049(r26)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r26.u32 + 4049);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a32b0c
	if (ctx.cr6.eq) goto loc_82A32B0C;
	// li r29,0
	ctx.r29.s64 = 0;
	// lwz r11,3992(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 3992);
	// mr r28,r29
	ctx.r28.u64 = ctx.r29.u64;
	// stb r29,4492(r26)
	PPC_STORE_U8(ctx.r26.u32 + 4492, ctx.r29.u8);
	// lwz r27,8(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x82a32a14
	if (ctx.cr6.eq) goto loc_82A32A14;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32A10;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
loc_82A32A14:
	// lwz r11,4012(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 4012);
	// mr r24,r29
	ctx.r24.u64 = ctx.r29.u64;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// cntlzw r11,r11
	ctx.r11.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r11,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	ctx.r11.u64 = ctx.r11.u64 ^ 1;
	// addi r25,r11,1
	ctx.r25.s64 = ctx.r11.s64 + 1;
	// ble cr6,0x82a32ae8
	if (!ctx.cr6.gt) goto loc_82A32AE8;
loc_82A32A34:
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32A4C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a32ad4
	if (ctx.cr6.eq) goto loc_82A32AD4;
	// bl 0x82219f20
	ctx.lr = 0x82A32A5C;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32A6C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32A7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,60(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 60);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32A94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,56(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32AAC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpd cr6,r23,r3
	ctx.cr6.compare<int64_t>(ctx.r23.s64, ctx.r3.s64, ctx.xer);
	// beq cr6,0x82a32ad4
	if (ctx.cr6.eq) goto loc_82A32AD4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,104(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 104);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32AC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// subfic r11,r3,4
	ctx.xer.ca = ctx.r3.u32 <= 4;
	ctx.r11.s64 = 4 - ctx.r3.s64;
	// cmpw cr6,r11,r25
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r25.s32, ctx.xer);
	// bge cr6,0x82a32ae4
	if (!ctx.cr6.lt) goto loc_82A32AE4;
loc_82A32AD4:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r29,r28
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r28.s32, ctx.xer);
	// blt cr6,0x82a32a34
	if (ctx.cr6.lt) goto loc_82A32A34;
	// b 0x82a32ae8
	goto loc_82A32AE8;
loc_82A32AE4:
	// li r24,1
	ctx.r24.s64 = 1;
loc_82A32AE8:
	// clrlwi r11,r24,24
	ctx.r11.u64 = ctx.r24.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a32b1c
	if (ctx.cr6.eq) goto loc_82A32B1C;
	// li r11,1
	ctx.r11.s64 = 1;
	// lwz r3,3988(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 3988);
	// stb r11,4048(r26)
	PPC_STORE_U8(ctx.r26.u32 + 4048, ctx.r11.u8);
	// bl 0x82a09018
	ctx.lr = 0x82A32B04;
	sub_82A09018(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
loc_82A32B0C:
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// stw r11,4052(r26)
	PPC_STORE_U32(ctx.r26.u32 + 4052, ctx.r11.u32);
	// bl 0x82a31860
	ctx.lr = 0x82A32B1C;
	sub_82A31860(ctx, base);
loc_82A32B1C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82e28ea4
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A32B28"))) PPC_WEAK_FUNC(sub_82A32B28);
PPC_FUNC_IMPL(__imp__sub_82A32B28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a32b7c
	if (!ctx.cr6.eq) goto loc_82A32B7C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A32B58;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32b68
	if (ctx.cr6.eq) goto loc_82A32B68;
	// bl 0x82a13fe0
	ctx.lr = 0x82A32B64;
	sub_82A13FE0(ctx, base);
	// b 0x82a32b6c
	goto loc_82A32B6C;
loc_82A32B68:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A32B6C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A32B7C:
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a31c08
	ctx.lr = 0x82A32B88;
	sub_82A31C08(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32BA0"))) PPC_WEAK_FUNC(sub_82A32BA0);
PPC_FUNC_IMPL(__imp__sub_82A32BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a32bec
	if (!ctx.cr6.eq) goto loc_82A32BEC;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A32BC8;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32bd8
	if (ctx.cr6.eq) goto loc_82A32BD8;
	// bl 0x82a13fe0
	ctx.lr = 0x82A32BD4;
	sub_82A13FE0(ctx, base);
	// b 0x82a32bdc
	goto loc_82A32BDC;
loc_82A32BD8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A32BDC:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A32BEC:
	// bl 0x82a329a0
	ctx.lr = 0x82A32BF0;
	sub_82A329A0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32C08"))) PPC_WEAK_FUNC(sub_82A32C08);
PPC_FUNC_IMPL(__imp__sub_82A32C08) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31969
	ctx.r31.s64 = -2095120384;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,12324(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12324);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a32c5c
	if (!ctx.cr6.eq) goto loc_82A32C5C;
	// li r3,4584
	ctx.r3.s64 = 4584;
	// bl 0x82545e80
	ctx.lr = 0x82A32C38;
	sub_82545E80(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32c48
	if (ctx.cr6.eq) goto loc_82A32C48;
	// bl 0x82a13fe0
	ctx.lr = 0x82A32C44;
	sub_82A13FE0(ctx, base);
	// b 0x82a32c4c
	goto loc_82A32C4C;
loc_82A32C48:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82A32C4C:
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// stw r3,12324(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12324, ctx.r3.u32);
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,12328(r10)
	PPC_STORE_U8(ctx.r10.u32 + 12328, ctx.r11.u8);
loc_82A32C5C:
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// bl 0x82a32748
	ctx.lr = 0x82A32C68;
	sub_82A32748(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32C80"))) PPC_WEAK_FUNC(sub_82A32C80);
PPC_FUNC_IMPL(__imp__sub_82A32C80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-5104
	ctx.r11.s64 = ctx.r11.s64 + -5104;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a32cb4
	if (ctx.cr6.eq) goto loc_82A32CB4;
	// bl 0x82545ee8
	ctx.lr = 0x82A32CB0;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A32CB4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32CC8"))) PPC_WEAK_FUNC(sub_82A32CC8);
PPC_FUNC_IMPL(__imp__sub_82A32CC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-5032
	ctx.r11.s64 = ctx.r11.s64 + -5032;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a32cfc
	if (ctx.cr6.eq) goto loc_82A32CFC;
	// bl 0x82545ee8
	ctx.lr = 0x82A32CF8;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A32CFC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32D10"))) PPC_WEAK_FUNC(sub_82A32D10);
PPC_FUNC_IMPL(__imp__sub_82A32D10) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4940
	ctx.r11.s64 = ctx.r11.s64 + -4940;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a32d44
	if (ctx.cr6.eq) goto loc_82A32D44;
	// bl 0x82545ee8
	ctx.lr = 0x82A32D40;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A32D44:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32D58"))) PPC_WEAK_FUNC(sub_82A32D58);
PPC_FUNC_IMPL(__imp__sub_82A32D58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4880
	ctx.r11.s64 = ctx.r11.s64 + -4880;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a32d8c
	if (ctx.cr6.eq) goto loc_82A32D8C;
	// bl 0x82545ee8
	ctx.lr = 0x82A32D88;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A32D8C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32DA0"))) PPC_WEAK_FUNC(sub_82A32DA0);
PPC_FUNC_IMPL(__imp__sub_82A32DA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// li r11,-1
	ctx.r11.s64 = -1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r8,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r8.u32);
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r4,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r4.u32);
	// stw r5,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r5.u32);
	// std r6,8(r31)
	PPC_STORE_U64(ctx.r31.u32 + 8, ctx.r6.u64);
	// stw r7,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r7.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r30.u32);
	// std r11,28(r31)
	PPC_STORE_U64(ctx.r31.u32 + 28, ctx.r11.u64);
	// stw r30,36(r31)
	PPC_STORE_U32(ctx.r31.u32 + 36, ctx.r30.u32);
	// stw r30,40(r31)
	PPC_STORE_U32(ctx.r31.u32 + 40, ctx.r30.u32);
	// stw r30,44(r31)
	PPC_STORE_U32(ctx.r31.u32 + 44, ctx.r30.u32);
	// stw r8,48(r31)
	PPC_STORE_U32(ctx.r31.u32 + 48, ctx.r8.u32);
	// stw r30,52(r31)
	PPC_STORE_U32(ctx.r31.u32 + 52, ctx.r30.u32);
	// std r9,56(r31)
	PPC_STORE_U64(ctx.r31.u32 + 56, ctx.r9.u64);
	// stw r10,64(r31)
	PPC_STORE_U32(ctx.r31.u32 + 64, ctx.r10.u32);
	// bl 0x82b061d8
	ctx.lr = 0x82A32E04;
	sub_82B061D8(ctx, base);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r10,r31,68
	ctx.r10.s64 = ctx.r31.s64 + 68;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lfd f0,24768(r11)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r11.u32 + 24768);
	// fmul f0,f13,f0
	ctx.f0.f64 = ctx.f13.f64 * ctx.f0.f64;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r11.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r30,76(r31)
	PPC_STORE_U32(ctx.r31.u32 + 76, ctx.r30.u32);
	// stw r30,80(r31)
	PPC_STORE_U32(ctx.r31.u32 + 80, ctx.r30.u32);
	// stw r30,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r30.u32);
	// stw r30,88(r31)
	PPC_STORE_U32(ctx.r31.u32 + 88, ctx.r30.u32);
	// stw r30,92(r31)
	PPC_STORE_U32(ctx.r31.u32 + 92, ctx.r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A32E60"))) PPC_WEAK_FUNC(sub_82A32E60);
PPC_FUNC_IMPL(__imp__sub_82A32E60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r31,r30,76
	ctx.r31.s64 = ctx.r30.s64 + 76;
	// mr r11,r31
	ctx.r11.u64 = ctx.r31.u64;
	// mr r10,r11
	ctx.r10.u64 = ctx.r11.u64;
loc_82A32E84:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x82a32e84
	if (!ctx.cr6.eq) goto loc_82A32E84;
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// rotlwi r11,r11,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r11.u32, 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x82a3305c
	if (!ctx.cr6.eq) goto loc_82A3305C;
	// bl 0x82219f20
	ctx.lr = 0x82A32EAC;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32EBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32f80
	if (ctx.cr6.eq) goto loc_82A32F80;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32ED4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a32f80
	if (ctx.cr6.eq) goto loc_82A32F80;
	// lwz r11,24(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,64(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// beq cr6,0x82a32f60
	if (ctx.cr6.eq) goto loc_82A32F60;
	// ld r4,28(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32EFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a3305c
	if (ctx.cr6.eq) goto loc_82A3305C;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-13528
	ctx.r4.s64 = ctx.r11.s64 + -13528;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r10,0(r31)
	PPC_STORE_U8(ctx.r31.u32 + 0, ctx.r10.u8);
	// bl 0x82e2c410
	ctx.lr = 0x82A32F24;
	sub_82E2C410(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32F38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,17
	ctx.r5.s64 = 17;
	// bl 0x82e2c410
	ctx.lr = 0x82A32F48;
	sub_82E2C410(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,22356
	ctx.r4.s64 = ctx.r11.s64 + 22356;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82e2c410
	ctx.lr = 0x82A32F5C;
	sub_82E2C410(ctx, base);
	// b 0x82a3305c
	goto loc_82A3305C;
loc_82A32F60:
	// ld r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32F6C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3305c
	if (ctx.cr6.eq) goto loc_82A3305C;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// b 0x82a3303c
	goto loc_82A3303C;
loc_82A32F80:
	// bl 0x82219f20
	ctx.lr = 0x82A32F84;
	sub_82219F20(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,88(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32F94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3305c
	if (ctx.cr6.eq) goto loc_82A3305C;
	// lwz r11,24(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 24);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,20(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// beq cr6,0x82a33020
	if (ctx.cr6.eq) goto loc_82A33020;
	// ld r4,28(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 28);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32FBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x82a3305c
	if (ctx.cr6.eq) goto loc_82A3305C;
	// li r10,0
	ctx.r10.s64 = 0;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-13528
	ctx.r4.s64 = ctx.r11.s64 + -13528;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stb r10,0(r31)
	PPC_STORE_U8(ctx.r31.u32 + 0, ctx.r10.u8);
	// bl 0x82e2c410
	ctx.lr = 0x82A32FE4;
	sub_82E2C410(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A32FF8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,17
	ctx.r5.s64 = 17;
	// bl 0x82e2c410
	ctx.lr = 0x82A33008;
	sub_82E2C410(ctx, base);
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,22356
	ctx.r4.s64 = ctx.r11.s64 + 22356;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82e2c410
	ctx.lr = 0x82A3301C;
	sub_82E2C410(ctx, base);
	// b 0x82a3305c
	goto loc_82A3305C;
loc_82A33020:
	// ld r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A3302C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a3305c
	if (ctx.cr6.eq) goto loc_82A3305C;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
loc_82A3303C:
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A33044;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r5,19
	ctx.r5.s64 = 19;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82e2ab28
	ctx.lr = 0x82A33054;
	sub_82E2AB28(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,95(r30)
	PPC_STORE_U8(ctx.r30.u32 + 95, ctx.r11.u8);
loc_82A3305C:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33078"))) PPC_WEAK_FUNC(sub_82A33078);
PPC_FUNC_IMPL(__imp__sub_82A33078) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A33080;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,660(r10)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r10.u32 + 660);
	// bl 0x8246bd50
	ctx.lr = 0x82A330A8;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A330C8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A330D0"))) PPC_WEAK_FUNC(sub_82A330D0);
PPC_FUNC_IMPL(__imp__sub_82A330D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,1912(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 1912);
	// bl 0x8246bd50
	ctx.lr = 0x82A330FC;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A3311C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33138"))) PPC_WEAK_FUNC(sub_82A33138);
PPC_FUNC_IMPL(__imp__sub_82A33138) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e6c
	ctx.lr = 0x82A33140;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r10,-31969
	ctx.r10.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r29,r1,80
	ctx.r29.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,2696(r10)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r10.u32 + 2696);
	// bl 0x8246bd50
	ctx.lr = 0x82A33168;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A33188;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28ebc
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A33190"))) PPC_WEAK_FUNC(sub_82A33190);
PPC_FUNC_IMPL(__imp__sub_82A33190) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,876(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 876);
	// bl 0x8246bd50
	ctx.lr = 0x82A331BC;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A331DC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A331F8"))) PPC_WEAK_FUNC(sub_82A331F8);
PPC_FUNC_IMPL(__imp__sub_82A331F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,4128(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 4128);
	// bl 0x8246bd50
	ctx.lr = 0x82A33224;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A33244;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33260"))) PPC_WEAK_FUNC(sub_82A33260);
PPC_FUNC_IMPL(__imp__sub_82A33260) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,3716(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 3716);
	// bl 0x8246bd50
	ctx.lr = 0x82A3328C;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A332AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A332C8"))) PPC_WEAK_FUNC(sub_82A332C8);
PPC_FUNC_IMPL(__imp__sub_82A332C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-31969
	ctx.r11.s64 = -2095120384;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// ld r4,3924(r11)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r11.u32 + 3924);
	// bl 0x8246bd50
	ctx.lr = 0x82A332F4;
	sub_8246BD50(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,228(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 228);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,-7
	ctx.r7.s64 = -7;
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A33314;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33330"))) PPC_WEAK_FUNC(sub_82A33330);
PPC_FUNC_IMPL(__imp__sub_82A33330) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4048
	ctx.r11.s64 = ctx.r11.s64 + -4048;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x8245e7c0
	ctx.lr = 0x82A3335C;
	sub_8245E7C0(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r11,r11,-28216
	ctx.r11.s64 = ctx.r11.s64 + -28216;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bl 0x8245e7c0
	ctx.lr = 0x82A33370;
	sub_8245E7C0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82467c48
	ctx.lr = 0x82A33378;
	sub_82467C48(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a33394
	if (ctx.cr6.eq) goto loc_82A33394;
	// li r4,60
	ctx.r4.s64 = 60;
	// bl 0x8245e878
	ctx.lr = 0x82A33390;
	sub_8245E878(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A33394:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A333B0"))) PPC_WEAK_FUNC(sub_82A333B0);
PPC_FUNC_IMPL(__imp__sub_82A333B0) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfd f1,-11432(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(ctx.r11.u32 + -11432);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A333C0"))) PPC_WEAK_FUNC(sub_82A333C0);
PPC_FUNC_IMPL(__imp__sub_82A333C0) {
	PPC_FUNC_PROLOGUE();
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	return;
}

__attribute__((alias("__imp__sub_82A333D8"))) PPC_WEAK_FUNC(sub_82A333D8);
PPC_FUNC_IMPL(__imp__sub_82A333D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x82a024a8
	ctx.lr = 0x82A333F8;
	sub_82A024A8(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a33410
	if (ctx.cr6.eq) goto loc_82A33410;
	// bl 0x82545ee8
	ctx.lr = 0x82A3340C;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A33410:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33428"))) PPC_WEAK_FUNC(sub_82A33428);
PPC_FUNC_IMPL(__imp__sub_82A33428) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x82a03240
	ctx.lr = 0x82A33448;
	sub_82A03240(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a33460
	if (ctx.cr6.eq) goto loc_82A33460;
	// bl 0x82545ee8
	ctx.lr = 0x82A3345C;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A33460:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33478"))) PPC_WEAK_FUNC(sub_82A33478);
PPC_FUNC_IMPL(__imp__sub_82A33478) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x82a03548
	ctx.lr = 0x82A33498;
	sub_82A03548(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a334b0
	if (ctx.cr6.eq) goto loc_82A334B0;
	// bl 0x82545ee8
	ctx.lr = 0x82A334AC;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A334B0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A334C8"))) PPC_WEAK_FUNC(sub_82A334C8);
PPC_FUNC_IMPL(__imp__sub_82A334C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32229
	ctx.r11.s64 = -2112159744;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-25488
	ctx.r11.s64 = ctx.r11.s64 + -25488;
	// clrlwi r10,r4,31
	ctx.r10.u64 = ctx.r4.u32 & 0x1;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a334fc
	if (ctx.cr6.eq) goto loc_82A334FC;
	// bl 0x82545ee8
	ctx.lr = 0x82A334F8;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A334FC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33510"))) PPC_WEAK_FUNC(sub_82A33510);
PPC_FUNC_IMPL(__imp__sub_82A33510) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x82a045e0
	ctx.lr = 0x82A33530;
	sub_82A045E0(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x82a33548
	if (ctx.cr6.eq) goto loc_82A33548;
	// bl 0x82545ee8
	ctx.lr = 0x82A33544;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A33548:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33560"))) PPC_WEAK_FUNC(sub_82A33560);
PPC_FUNC_IMPL(__imp__sub_82A33560) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r11,r11,-4080
	ctx.r11.s64 = ctx.r11.s64 + -4080;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// lis r11,-31973
	ctx.r11.s64 = -2095382528;
	// lwz r3,8348(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8348);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x82a335b0
	if (ctx.cr6.eq) goto loc_82A335B0;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// li r4,44
	ctx.r4.s64 = 44;
	// lwz r11,36(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A335B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_82A335B0:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// clrlwi r10,r30,31
	ctx.r10.u64 = ctx.r30.u32 & 0x1;
	// addi r11,r11,-21240
	ctx.r11.s64 = ctx.r11.s64 + -21240;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a335d4
	if (ctx.cr6.eq) goto loc_82A335D4;
	// bl 0x82545ee8
	ctx.lr = 0x82A335D0;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A335D4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A335F0"))) PPC_WEAK_FUNC(sub_82A335F0);
PPC_FUNC_IMPL(__imp__sub_82A335F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x82a3361c
	if (ctx.cr6.eq) goto loc_82A3361C;
	// bl 0x8245e518
	ctx.lr = 0x82A33610;
	sub_8245E518(ctx, base);
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// addi r11,r11,-4048
	ctx.r11.s64 = ctx.r11.s64 + -4048;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
loc_82A3361C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33630"))) PPC_WEAK_FUNC(sub_82A33630);
PPC_FUNC_IMPL(__imp__sub_82A33630) {
	PPC_FUNC_PROLOGUE();
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33638"))) PPC_WEAK_FUNC(sub_82A33638);
PPC_FUNC_IMPL(__imp__sub_82A33638) {
	PPC_FUNC_PROLOGUE();
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33640"))) PPC_WEAK_FUNC(sub_82A33640);
PPC_FUNC_IMPL(__imp__sub_82A33640) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// addi r11,r11,-3704
	ctx.r11.s64 = ctx.r11.s64 + -3704;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a33678
	if (ctx.cr6.eq) goto loc_82A33678;
	// bl 0x82e2c6c0
	ctx.lr = 0x82A33678;
	sub_82E2C6C0(ctx, base);
loc_82A33678:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// clrlwi r10,r30,31
	ctx.r10.u64 = ctx.r30.u32 & 0x1;
	// addi r11,r11,4300
	ctx.r11.s64 = ctx.r11.s64 + 4300;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a3369c
	if (ctx.cr6.eq) goto loc_82A3369C;
	// bl 0x82545ee8
	ctx.lr = 0x82A33698;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A3369C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A336B8"))) PPC_WEAK_FUNC(sub_82A336B8);
PPC_FUNC_IMPL(__imp__sub_82A336B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32241
	ctx.r11.s64 = -2112946176;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// addi r11,r11,-3652
	ctx.r11.s64 = ctx.r11.s64 + -3652;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a336f8
	if (ctx.cr6.eq) goto loc_82A336F8;
	// bl 0x82545fb0
	ctx.lr = 0x82A336F0;
	sub_82545FB0(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r11.u32);
loc_82A336F8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// clrlwi r10,r30,31
	ctx.r10.u64 = ctx.r30.u32 & 0x1;
	// addi r11,r11,4300
	ctx.r11.s64 = ctx.r11.s64 + 4300;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// beq cr6,0x82a3371c
	if (ctx.cr6.eq) goto loc_82A3371C;
	// bl 0x82545ee8
	ctx.lr = 0x82A33718;
	sub_82545EE8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_82A3371C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_82A33738"))) PPC_WEAK_FUNC(sub_82A33738);
PPC_FUNC_IMPL(__imp__sub_82A33738) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x82e28e68
	ctx.lr = 0x82A33740;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r11,0
	ctx.r11.s64 = 0;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8);
	// stw r11,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r11.u32);
	// cmpw cr6,r10,r4
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r4.s32, ctx.xer);
	// beq cr6,0x82a337b4
	if (ctx.cr6.eq) goto loc_82A337B4;
	// lwz r28,0(r30)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// stw r4,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r4.u32);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// bne cr6,0x82a33774
	if (!ctx.cr6.eq) goto loc_82A33774;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// beq cr6,0x82a337b4
	if (ctx.cr6.eq) goto loc_82A337B4;
loc_82A33774:
	// lis r31,-31973
	ctx.r31.s64 = -2095382528;
	// rlwinm r29,r4,3,0,28
	ctx.r29.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x82a33790
	if (!ctx.cr6.eq) goto loc_82A33790;
	// bl 0x82545cc0
	ctx.lr = 0x82A3378C;
	sub_82545CC0(ctx, base);
	// lwz r3,8344(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8344);
loc_82A33790:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,16
	ctx.r6.s64 = 16;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x82A337B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
loc_82A337B4:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82e28eb8
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_82A337C0"))) PPC_WEAK_FUNC(sub_82A337C0);
PPC_FUNC_IMPL(__imp__sub_82A337C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// lwz r30,4(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addi r11,r30,1
	ctx.r11.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// ble cr6,0x82a33818
	if (!ctx.cr6.gt) goto loc_82A33818;
	// li r4,596
	ctx.r4.s64 = 596;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82416640
	ctx.lr = 0x82A337FC;
	sub_82416640(ctx, base);
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// li r5,16
	ctx.r5.s64 = 16;
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// li r4,596
	ctx.r4.s64 = 596;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// bl 0x822e0788
	ctx.lr = 0x82A33818;
	sub_822E0788(ctx, base);
loc_82A33818:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mulli r11,r30,596
	ctx.r11.s64 = ctx.r30.s64 * 596;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

